{"tx_hash": "8Et9oqMdHduDMVUeAbjj4xWfgF7Cx3szUbFkCyYVbjAd", "action_id_social": "5LcKwFaKPkxepePao4ANpHQcrgBUXLf7mrfQH95CCXgo-0-widget", "block_id": 91453489, "block_timestamp": "2023-05-09T12:05:12.184Z", "signer_id": "manzanal.near", "widget_name": "AbstractWrapper", "source_code": "const getTokenBalance = props.getTokenBalanceFn;\nconst getWrapTokenBalance = props.getWrapTokenBalanceFn;\nconst wrapFn = props.wrapFn;\nconst unwrapFn = props.unwrapFn;\nconst parseToUnits = props.parseToUnitsFn;\nconst isValidAmout = props.isValidAmountFn;\nconst tokenName = props.tokenName;\nconst wrapTokenName = props.wrapTokenName;\nconst imgWrapTokenSrc = props.imgWrapTokenSrc;\nconst imgTokenSrc = props.imgTokenSrc;\n\nState.init({\n  unwrap: false,\n  balanceToken: null,\n  balanceWrapToken: null,\n  intervalStarted: false,\n  amountIn: null,\n  amountOut: null,\n  swapButtonText: null,\n  swapReady: false,\n});\n\nconst updateBalances = async (address) => {\n  const tokenBalance = await getTokenBalance(address);\n  const wrapTokenBalance = await getWrapTokenBalance(address);\n  State.update({\n    balanceToken: tokenBalance,\n    balanceWrapToken: wrapTokenBalance,\n  });\n};\n\nif (!state.intervalStarted) {\n  State.update({ intervalStarted: true });\n\n  updateBalances();\n\n  setInterval(() => {\n    updateBalances();\n  }, 2000);\n}\n\nconst swapInputOnChange = (event) => {\n  let re = /^[0-9]*[.,]?[0-9]*$/;\n\n  if (re.test(event.target.value)) {\n    try {\n      State.update({\n        amountIn: event.target.value,\n        amountOut: event.target.value,\n        swapButtonText: null,\n      });\n\n      updateSwapButton();\n    } catch (e) {}\n  }\n};\n\nconst updateSwapButton = () => {\n  State.update({ swapReady: false });\n\n  if (!signer) {\n    State.update({ swapButtonText: \"Connect Wallet\" });\n    return;\n  }\n\n  if (!state.amountIn) {\n    return;\n  }\n\n  let amountIn = parseToUnits(state.amountIn);\n\n  if (!isValidAmout(amountIn)) {\n    State.update({ swapButtonText: \"Invalid Amount\" });\n    return;\n  }\n\n  let limit = state.unwrap ? state.balanceWrapToken : state.balanceToken;\n\n  if (limit && amountIn < limit) {\n    State.update({\n      swapButtonText: state.unwrap\n        ? `Unwrap ${tokenName}`\n        : `Wrap ${tokenName}`,\n      swapReady: true,\n    });\n  } else {\n    State.update({\n      swapButtonText: `Insufficient ${\n        state.unwrap ? wrapTokenName : tokenName\n      } Balance`,\n    });\n  }\n};\n\nconst swapButtonOnClick = () => {\n  if (state.unwrap) {\n    unwrapFn(state.amountIn);\n  } else {\n    wrapFn(state.amountIn);\n  }\n};\n\nconst Card = styled.div`\n  font-family: 'Inter custom',sans-serif;\n  font-size: 16px;\n  font-variant: none;\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: transparent;\n  color: rgb(255, 255, 255);\n  box-sizing: border-box;\n \n  background: rgb(13, 17, 28);\n  border-radius: 16px;\n  border: 1px solid rgb(27, 34, 54);\n  padding: 8px;\n  z-index: 1;\n  transition: transform 250ms ease 0s;\n \n  display: block;\n`;\n\nconst SwapContainer = styled.div`\n  background-color: rgb(19, 26, 42);\n  border-radius: 12px;\n  padding: 16px;\n`;\n\nconst SwapContainerOuter = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  border-radius: 20px;\n`;\n\nconst SwapContainerInner = styled.div`\n  border-radius: 20px;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SwapInput = styled.input`\n  color: rgb(255, 255, 255);\n  position: relative;\n  font-weight: 400;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  appearance: textfield;\n  filter: none;\n  opacity: 1;\n  transition: opacity 0.2s ease-in-out 0s;\n  text-align: left;\n  font-size: 36px;\n  line-height: 44px;\n  font-variant: small-caps;\n`;\n\nconst SwapArrowContainer = styled.div`\n  border-radius: 12px;\n  height: 40px;\n  width: 40px;\n  position: relative;\n  margin: -18px auto;\n  background-color: rgb(41, 50, 73);\n  border: 4px solid rgb(13, 17, 28);\n  z-index: 2;\n \n  :hover {\n    opacity: 0.75;\n  }\n`;\n\nconst SwapArrowWrapper = styled.div`\n  display: inline-flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;\n\nconst CurrencyPillContainer = styled.div`\n  text-decoration: none;\n  background-color: rgb(41, 50, 73);\n  color: rgb(255, 255, 255);\n  border-radius: 16px;\n  padding: 4px 8px 4px 4px;\n  margin-left: 12px;\n`;\n\nconst CurrencyPillWrapper = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: start;\n  justify-content: flex-start;\n`;\n\nconst CurrencyPillImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CurrencyPillImage = styled.img`\n  color: rgb(255, 255, 255);\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  margin-right: 2px;\n`;\n\nconst CurrencyPillText = styled.span`\n  margin: 0px 4px;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst SwapDetailsContainer = styled.div`\n  padding: 8px 0px 0px;\n`;\n\nconst SwapDetailsWrapper = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n`;\n\nconst TextSmall = styled.div`\n  color: rgb(152, 161, 192);\n  line-height: 1rem;\n  box-sizing: border-box;\n  font-weight: 400;\n  font-size: 14px;\n`;\n\nconst SwapButtonWrapper = styled.div`\n  margin-top: 12px;\n`;\n\nconst SwapButton = styled.button`\n  background-color: ${(props) =>\n    props.disabled ? \"rgb(41, 50, 73)\" : \"rgb(76, 130, 251)\"};\n  padding: 16px;\n  font-size: 20px;\n  font-weight: 600;\n  color: rgb(245, 246, 252);\n  width: 100%;\n  text-align: center;\n  border-radius: 20px;\n  outline: none;\n  border: 1px solid transparent;\n  text-decoration: none;\n  position: relative;\n  z-index: 1;\n  cursor: pointer;\n`;\n\nconst TitleWrapper = styled.div`\n  padding: 8px 12px;\n  margin: 0px 0px 8px 0px;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n  font-size: 16px;\n`;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 32px;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n  `;\n\nreturn (\n  <Wrapper>\n    <Card>\n      <TitleWrapper>\n        <p style={{ margin: 0 }}>{tokenName} Wrapper</p>\n      </TitleWrapper>\n      <SwapContainer>\n        <SwapContainerOuter>\n          <SwapContainerInner>\n            <InputContainer>\n              <SwapInput\n                inputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state.amountIn}\n                onChange={swapInputOnChange}\n              />\n              <CurrencyPillContainer>\n                <CurrencyPillWrapper>\n                  <CurrencyPillImageWrapper>\n                    <CurrencyPillImage\n                      alt={state.unwrap ? \"token\" : \"wrap token\"}\n                      src={state.unwrap ? imgWrapTokenSrc : imgTokenSrc}\n                    />\n                    <CurrencyPillText>\n                      {state.unwrap ? wrapTokenName : tokenName}\n                    </CurrencyPillText>\n                  </CurrencyPillImageWrapper>\n                </CurrencyPillWrapper>\n              </CurrencyPillContainer>\n            </InputContainer>\n            <SwapDetailsContainer>\n              <SwapDetailsWrapper>\n                <TextSmall></TextSmall>\n                {state.unwrap ? (\n                  state.balanceWrapToken ? (\n                    <TextSmall>\n                      Balance: {formatUnits(balanceWrapToken)}\n                    </TextSmall>\n                  ) : null\n                ) : state.balanceToken ? (\n                  <TextSmall>Balance: {formatUnits(balanceToken)}</TextSmall>\n                ) : null}\n              </SwapDetailsWrapper>\n            </SwapDetailsContainer>\n          </SwapContainerInner>\n        </SwapContainerOuter>\n      </SwapContainer>\n      <SwapArrowContainer\n        onClick={() => {\n          State.update({\n            unwrap: !state.unwrap,\n            amountIn: state.amountOut,\n            amountOut: state.amountIn,\n          });\n          updateSwapButton();\n        }}\n      >\n        <SwapArrowWrapper>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"#FFFFFF\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n            <polyline points=\"19 12 12 19 5 12\"></polyline>\n          </svg>\n        </SwapArrowWrapper>\n      </SwapArrowContainer>\n      <SwapContainer>\n        <SwapContainerOuter>\n          <SwapContainerInner>\n            <InputContainer>\n              <SwapInput\n                inputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state.amountIn}\n                onChange={swapInputOnChange}\n              />\n              <CurrencyPillContainer>\n                <CurrencyPillWrapper>\n                  <CurrencyPillImageWrapper>\n                    <CurrencyPillImage\n                      alt={state.unwrap ? \"token\" : \"wrap token\"}\n                      src={state.unwrap ? imgTokenSrc : imgWrapTokenSrc}\n                    />\n                    <CurrencyPillText>\n                      {state.unwrap ? tokenName : wrapTokenName}\n                    </CurrencyPillText>\n                  </CurrencyPillImageWrapper>\n                </CurrencyPillWrapper>\n              </CurrencyPillContainer>\n            </InputContainer>\n            <SwapDetailsContainer>\n              <SwapDetailsWrapper>\n                <TextSmall></TextSmall>\n                {state.unwrap ? (\n                  state.balanceToken ? (\n                    <TextSmall>Balance: {formatUnits(balanceToken)}</TextSmall>\n                  ) : null\n                ) : state.balanceWrapToken ? (\n                  <TextSmall>\n                    Balance: {formatUnits(balanceWrapToken)}\n                  </TextSmall>\n                ) : null}\n              </SwapDetailsWrapper>\n            </SwapDetailsContainer>\n          </SwapContainerInner>\n        </SwapContainerOuter>\n      </SwapContainer>\n      <SwapButtonWrapper>\n        <SwapButton disabled={!state.swapReady} onClick={swapButtonOnClick}>\n          {state.swapButtonText ??\n            (state.unwrap\n              ? `Enter ${wrapTokenName} Amount`\n              : `Enter ${tokenName} Amount`)}\n        </SwapButton>\n      </SwapButtonWrapper>\n    </Card>\n  </Wrapper>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/manzanal.near/widget/AbstractWrapper", "__row_index": 0}