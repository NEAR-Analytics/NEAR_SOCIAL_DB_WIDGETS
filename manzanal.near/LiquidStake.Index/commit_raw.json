{"tx_hash": "8i6TSAhxgGPUfk748LESDLi2Act4YvRL4eY7VFjfqyxG", "action_id_social": "25dmQiMZ4K1LMkDXNzRmppusirSXHMKuvSiYYgbqS5kK-0-widget", "block_id": 88768132, "block_timestamp": "2023-04-04 02:34:48.075", "signer_id": "manzanal.near", "widget_name": "LiquidStake.Index", "source_code": "const ownerId = \"manzanal.near\";\nconst accountId = context.accountId;\nconst metapoolContract = \"meta-pool.near\";\nconst depositAndStakeFn = \"deposit_and_stake\";\nconst delayedUnstakeFn = \"unstake\";\nconst liquidUnstakeFn = \"liquid_unstake\";\nconst YOCTO = 1000000000000000000000000;\nconst GAS = \"200000000000000\";\nconst balanceUrl = `https://api.pikespeak.ai/account/balance/${accountId}}`;\nconst metricsUrl = \"https://validators.narwallets.com/metrics_json\";\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst fetchBalance = fetch(balanceUrl, {\n  mode: \"cors\",\n  headers: {\n    \"x-api-key\": publicApiKey,\n  },\n});\n\nconst fetchMetrics = fetch(metricsUrl, {\n  mode: \"cors\",\n  subscribe: true,\n});\n\nif (!fetchBalance && fetchMetrics) return \"Loading...\";\nconsole.log(fetchMetrics);\n\ninitState({\n  tab: \"stake\",\n  amount: 0.0,\n  result: 0,\n});\nconst submitMethod = {\n  stake: depositAndStakeFn,\n  delayedUnstakeFn: delayedUnstakeFn,\n  fast: liquidUnstakeFn,\n}[state.tab];\n\nconst submitArgs = {\n  stake: {},\n  delayedUnstakeFn: { amount: state.amount * YOCTO },\n  fast: {\n    st_near_to_burn: amount * YOCTO,\n    min_expected_near: amount * YOCTO, // REVIEW\n  },\n}[state.tab];\n\nconst onSubmit = () => {\n  const method = submitMethod;\n  const args = submitArgs;\n  const deposit = state.tab == \"stake\" ? state.amount * YOCTO : undefined;\n  Near.call(metapoolContract, method, args, GAS, deposit);\n};\n\nconst onClickTab = (tab) => {\n  State.update({ tab });\n};\n\nconst onClickMax = (tab) => {\n  console.log(\"setting max balance\", fetchBalance);\n  State.update({ amount: fetchBalance.body[0].amount });\n};\n\nconst onChangeNearAmount = (value) => {\n  State.update({ amount: parseFloat(value) });\n};\nconst propsData = {\n  stakingSelector: {\n    toggle3: {\n      name: \"Delayed Unstake\",\n      key: \"delayed\",\n      icon: \"bi-hourglass-split\",\n      disabled: false,\n    },\n    toggle2: {\n      name: \"Fast Unstake\",\n      key: \"fast\",\n      icon: \"bi-fast-forward-fill\",\n      disabled: false,\n    },\n    toggle1: {\n      icon: \"bi-arrow-bar-up\",\n      key: \"stake\",\n      name: \"Stake\",\n      disabled: false,\n    },\n  },\n  input: {\n    title: \"NEAR Amount\",\n    button: {\n      size: \"lg\",\n      children: \"Max\",\n    },\n  },\n  input1: {\n    token: \"stNEAR\",\n    title: \"You\u2019ll get\",\n  },\n  stakeButton: {\n    active: true,\n    disabled: false,\n    children: \"Stake now\",\n  },\n  desktopNotification: {\n    informationFilled: informationFilled,\n    rewardsDistributedEvery24Hou: \"Rewards distributed every 24 hours\",\n  },\n};\nconst Calculator = styled.div`\n    border: 1px solid #c0c5c1;\n    border-radius: 16px;\n    background-color: #ffffff;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    row-gap: 32px;\n    padding-left: 32px;\n    padding-right: 32px;\n    padding-top: 32px;\n    padding-bottom: 32px;\n  `;\nconst Frame = styled.div`\n    display: flex;\n    flex-direction: column;\n    row-gap: 8px;\n  `;\nconst FrameButton = styled.div`\n    background-color: #0C2246;\n    display: flex;\n    flex-direction: column;\n    padding: 8px 24px;\n    gap: 8px;\n    color: ##FFFFFF;\n    border-radius: 1000px;\n    margin-top: 24px;\n`;\nreturn (\n  <Calculator>\n    <Frame>\n      {\" \"}\n      <Widget\n        src={`${ownerId}/widget/LiquidStake.Selector`}\n        props={{\n          active: state.tab,\n          ...propsData.stakingSelector,\n          onClickTab: onClickTab,\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/LiquidStake.StakeInput`}\n        props={{\n          ...propsData.input,\n          value: state.amount,\n          onClickMax,\n          onChange: onChangeNearAmount,\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/LiquidStake.StakeResult`}\n        props={{\n          ...propsData.input1,\n          amount: (\n            state.amount / parseFloat(fetchMetrics.body.st_near_price)\n          ).toFixed(2),\n        }}\n      />\n      <FrameButton>\n        <button\n          class=\"btn text-white\"\n          type=\"button\"\n          onClick={onSubmit}\n          {...propsData.stakeButton}\n        />\n      </FrameButton>\n    </Frame>\n  </Calculator>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/manzanal.near/widget/LiquidStake.Index"}