{"tx_hash": "6VFdZ6DhfZH5TFd8DyQyHk72cKnquZtzTrxY3K7SmWKv", "action_id_social": "AjouBbk2ydgLVZyhA4wqkt5Lz7Y4uLEMZ27ukPtR3eYe-0-widget", "block_id": 92699776, "block_timestamp": "2023-05-25T19:48:28.509Z", "signer_id": "manzanal.near", "widget_name": "BadgesBackOffice", "source_code": "const accountId = context.accountId;\n\nconst limit = props.limit || 24;\nState.init({\n  accountsOnPath: [],\n  activeTab: \"info\",\n  peopleSelected: [],\n  badgeSelected: \"\",\n  badgeInfo: {\n    key: \"\",\n    name: \"\",\n    description: \"\",\n    image: {},\n  },\n});\n\nconst onBadgeClick = (badge) => {\n  console.log(\"badge selectd\", badge);\n  State.update({\n    badgeSelected: badge,\n  });\n  //   const badgeQuery = Social.getr(`${accountId}/badge/${badgeName}/*`, \"final\");\n\n  //   let badgeInfo = badgeQuery.info;\n  //   console.log(\"badgeInfo\", badgeInfo);\n  //   State.update({\n  //     badgeSelected: badge,\n  //   });\n};\n\nconst badgedIssuedByAccountQuery = Social.getr(`${accountId}/badge/*`, \"final\");\nif (!badgedIssuedByAccountQuery) return \"Loading...\";\nconsole.log(\"all account badged\", badgedIssuedByAccountQuery);\n\nif (badgedIssuedByAccountQuery) {\n  const allBadges = Object.entries(badgedIssuedByAccountQuery);\n  console.log(\"all badges\", allBadges);\n  console.log(\"first badge key\", allBadges[0][0]);\n  console.log(\"first badge value\", allBadges[0][1].info);\n  const initBadge = allBadges[0];\n  if (!state.badgeSelected)\n    State.update({\n      badgeSelected: { key: initBadge[0], ...initBadge[1].info },\n    });\n\n  //   // init state badge selected\n  //   onBadgeClick(state.badgeSelected);\n}\n\nconst predefinedQueries = [\n  { name: \"Widget Builders\", query: \"*/widget/*\" },\n  { name: \"Feature Builders\", query: \"*/widget/*/metadata/tags/app\" },\n];\nlet allPeople = [];\nlet noBadgepeople = [];\nlet pathQueryPeople = [];\nif (state.badgeSelected) {\n  console.log(\"badge selected\", state.badgeSelected);\n  const data = Social.keys(\n    `*/badge/${state.badgeSelected.key}/holder/*`,\n    \"final\"\n  );\n  if (!data) {\n    return \"Loading\";\n  }\n\n  let accounts = Object.keys(data);\n  const numAccounts = accounts.length;\n  accounts = accounts.slice(numAccounts - limit, numAccounts);\n\n  for (let i = 0; i < accounts.length; ++i) {\n    const accountId = accounts[i];\n    allPeople.push(\n      <a\n        href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n        className=\"text-decoration-none\"\n        key={`people_${i}`}\n      >\n        <Widget\n          src=\"mob.near/widget/ProfileImage\"\n          props={{\n            accountId,\n            tooltip: true,\n            className: \"d-inline-block overflow-hidden\",\n          }}\n        />\n      </a>\n    );\n  }\n  console.log(\"all people\", allPeople);\n  for (let i = 0; i < state.accountsOnPath.length; ++i) {\n    const accountId = state.accountsOnPath[i];\n    const isSelected = state.peopleSelected.includes(accountId);\n    const hasBadge = accounts.includes(accountId);\n    if (!hasBadge) noBadgepeople.push(accountId);\n\n    pathQueryPeople.push(\n      <button\n        className={`btn ${\n          isSelected ? \"btn-outline-primary\" : \"text-decoration-none\"\n        }`}\n        key={`people_on_path_${i}`}\n        onClick={() => {\n          !hasBadge && onProfileClick(accountId);\n        }}\n      >\n        <Widget\n          src=\"mob.near/widget/ProfileImage\"\n          props={{\n            accountId,\n            tooltip: true,\n            className: \"d-inline-block overflow-hidden\",\n          }}\n        />\n        {hasBadge && (\n          <span class=\"position-absolute top-10 start-90 translate-middle p-2 bg-secondary border border-light rounded-circle\">\n            <span class=\"visually-hidden\">Account with badge</span>\n          </span>\n        )}\n      </button>\n    );\n  }\n  console.log(\"path query people\", pathQueryPeople);\n}\nconst BadgeImg = styled.img`\n  objectFit: \"cover\";\n  objectPosition: \"center\";\n  height: ${size};\n  width: ${size};\n`;\n\nconst onProfileClick = (accountId) => {\n  if (state.peopleSelected.includes(accountId)) {\n    // remove account\n    State.update({\n      peopleSelected: [...state.peopleSelected.filter((i) => i !== accountId)],\n    });\n  } else {\n    // add account\n    State.update({ peopleSelected: [...state.peopleSelected, accountId] });\n  }\n};\n\nconst renderMintButton = (badgeData, buttonText, holders) => {\n  console.log(\"badge\", badgeData);\n  return (\n    <CommitButton\n      data={{\n        badge: {\n          [badgeData.key]: {\n            info: badgeData.info,\n            holder: {\n              [holders]: \"\",\n            },\n          },\n        },\n      }}\n    >\n      {buttonText}\n      <span class=\"badge badge-info\">{holders.length}</span>\n    </CommitButton>\n  );\n};\nconst renderCreateNewBadgeForm = () => {\n  return (\n    <>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Key (unique)\n        </label>\n        <div class=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className={`form-control`}\n            id=\"name\"\n            value={state.badgeInfo.key}\n          />\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Name\n        </label>\n        <div class=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className={`form-control`}\n            id=\"name\"\n            value={state.badgeInfo.name}\n          />\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Description\n        </label>\n        <div class=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className={`form-control`}\n            id=\"name\"\n            value={state.badgeInfo.description}\n          />\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Image\n        </label>\n\n        <div class=\"col-sm-10\">\n          <IpfsImageUpload image={state.badgeInfo.image} />\n        </div>\n\n        <div class=\"ratio ratio-1x1 overflow-hidden\" style={{ width: \"8rem\" }}>\n          {state.badgeInfo.image.cid && (\n            <img\n              src={`https://ipfs.near.social/ipfs/${state.badgeInfo.image.cid}`}\n              alt=\"badge\"\n            />\n          )}\n        </div>\n      </div>\n      {renderMintButton(\n        {\n          key: state.badgeInfo.key.replace(/ /g, \"\"),\n          info: {\n            name: state.badgeInfo.name,\n            description: state.badgeInfo.description,\n            image: {\n              url: `https://ipfs.near.social/ipfs/${state.badgeInfo.image.cid}`,\n            },\n          },\n        },\n        \"Create new Badge\",\n        []\n      )}\n    </>\n  );\n};\nconst renderBadgeDetails = () => {\n  return (\n    <>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Key (unique)\n        </label>\n        <div class=\"col-sm-10\">\n          <p class=\"form-control-plaintext\">{state.badgeSelected.key}</p>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Name\n        </label>\n        <div class=\"col-sm-10\">\n          <p class=\"form-control-plaintext\">{state.badgeSelected.name}</p>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Description\n        </label>\n        <div class=\"col-sm-10\">\n          <p class=\"form-control-plaintext\">\n            {state.badgeSelected.description}\n          </p>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Image\n        </label>\n        <div class=\"ratio ratio-1x1 overflow-hidden\" style={{ width: \"8rem\" }}>\n          <BadgeImg\n            src={state.badgeSelected.image.url}\n            alt=\"badge\"\n            title={state.badgeSelected.description}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst renderNavItemButton = (tabId, tabText, disabled) => {\n  return (\n    <button\n      className={`${disabled ? \"disabled\" : \"\"}  nav-link ${\n        state.activeTab == tabId ? \"active\" : \"\"\n      }`}\n      id={tabId}\n      data-mdb-toggle=\"tab\"\n      role=\"tab\"\n      aria-controls={tabId}\n      aria-selected=\"true\"\n      onClick={() => {\n        State.update({ activeTab: tabId });\n      }}\n    >\n      {tabText}\n    </button>\n  );\n};\n\nconst onUpdateSearchResult = (result) => {\n  State.update({ accountsOnPath: result });\n};\n\nreturn (\n  <div>\n    <div class=\"d-flex flex-row\">\n      {Object.entries(badgedIssuedByAccountQuery).map(([key, value]) => (\n        <>\n          <button\n            className={`btn ${\n              state.badgeSelected.key == key\n                ? \"btn-outline-primary\"\n                : \"text-decoration-none\"\n            }`}\n            key={`badge_${key}`}\n            onClick={() => {\n              console.log(\"value on click\", value);\n              onBadgeClick({ key: key, ...value });\n            }}\n          >\n            <Widget\n              src=\"manzanal.near/widget/Badge\"\n              props={{\n                badge_name: key,\n                size: \"8rem\",\n                full_card: false,\n              }}\n            />\n          </button>\n        </>\n      ))}\n    </div>\n\n    <ul class=\"nav nav-tabs my-3\" id=\"ex1\" role=\"tablist\">\n      <li class=\"nav-item\" role=\"presentation\">\n        {renderNavItemButton(\"info\", \"Info\")}\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        {renderNavItemButton(\"owners\", \"Owners\")}\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        {renderNavItemButton(\"add_owners\", \"Add new owners\")}\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        {renderNavItemButton(\"create\", \"Create new badge\")}\n      </li>\n    </ul>\n\n    <div class=\"tab-content\" id=\"add_owners\">\n      <div\n        className={`tab-pane fade ${\n          state.activeTab == \"info\" ? \"show active\" : \"\"\n        }`}\n        id=\"info\"\n        role=\"tabpanel\"\n        aria-labelledby=\"info\"\n      >\n        {renderBadgeDetails()}\n      </div>\n      <div\n        className={`tab-pane fade ${\n          state.activeTab == \"owners\" ? \"show active\" : \"\"\n        }`}\n        id=\"owners\"\n        role=\"tabpanel\"\n        aria-labelledby=\"owners\"\n      >\n        <div>\n          <div class=\"d-flex flex-wrap gap-1\">{allPeople}</div>\n          <div>Total {numAccounts} profiles</div>\n        </div>\n      </div>\n\n      <div\n        className={`tab-pane fade ${\n          state.activeTab == \"add_owners\" ? \"show active\" : \"\"\n        }`}\n        id=\"add_owners\"\n        role=\"tabpanel\"\n        aria-labelledby=\"add_owners\"\n      >\n        <div>\n          <Widget\n            src=\"manzanal.near/widget/PeopleExplorer\"\n            props={{\n              onUpdateSearchResult: onUpdateSearchResult,\n              predefinedQueries: predefinedQueries,\n              debug: false,\n            }}\n          />\n          <div>\n            <div class=\"d-flex flex-wrap gap-1\">{pathQueryPeople}</div>\n            <div>Total {pathQueryPeople.length} profiles</div>\n\n            {renderMintButton(\n              state.badgeSelected,\n              \"Mint badge to all no badge people\",\n              noBadgepeople\n            )}\n            {renderMintButton(\n              state.badgeSelected,\n              \"Mint badge to selected people\",\n              state.peopleSelected\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      className={`tab-pane fade ${\n        state.activeTab == \"create\" ? \"show active\" : \"\"\n      }`}\n      id=\"create\"\n      role=\"tabpanel\"\n      aria-labelledby=\"create\"\n    >\n      {renderCreateNewBadgeForm()}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/manzanal.near/widget/BadgesBackOffice", "__row_index": 0}