{"tx_hash": "5igCNp86hVQxgrGNsibuyjVA3LJe6vpQ9wUpiudouYNz", "action_id_social": "9Se5rkvggaT3bnsBYCWmWss4muS8Ht5k1SMwDQwRtfMP-0-widget", "block_id": 86833517, "block_timestamp": "2023-03-08 12:39:29.738", "signer_id": "manzanal.near", "widget_name": "BadgesBackOffice", "source_code": "const badgeName = props.badge_name;\nconst admins = [\"manzanal.near\", \"infinity.near\"];\nconst isAdmin = admins.includes(context.accountId);\nconst limit = props.limit || 24;\nif (!badgeName) return \"Provide a badgeName\";\nconst badgesQuery = Social.getr(`*/badge/${badgeName}/*`, \"final\");\nif (!badgesQuery) return \"Loading...\";\nif (Object.keys(badgesQuery).length == 0) return \"Badge does not exist\";\nlet badgeInfo = Object.values(badgesQuery)[0].badge[badgeName].info;\nconst widgetBuilderQuery = \"*/widget/*\";\nconst featureBuilderQuery = \"*/widget/*/metadata/tags/app\";\nconst predefinedQueries = [\n  { name: \"Widget Builders\", query: widgetBuilderQuery },\n  { name: \"Feature Builders\", query: featureBuilderQuery },\n];\n\nconst data = Social.keys(`*/badge/${badgeName}/holder/*`, \"final\");\n\nif (!data) {\n  return \"Loading\";\n}\nState.init({\n  accountsOnPath: [],\n  activeTab: \"owners\",\n  peopleSelected: [],\n  badgeInfo: {\n    key: \"\",\n    name: \"\",\n    description: \"\",\n    image: \"\",\n  },\n});\n\nconst BadgeImg = styled.img`\n  objectFit: \"cover\";\n  objectPosition: \"center\";\n  height: ${size};\n  width: ${size};\n`;\n\nlet accounts = Object.keys(data);\nconst numAccounts = accounts.length;\naccounts = accounts.slice(numAccounts - limit, numAccounts);\nconst allPeople = [];\n\nfor (let i = 0; i < accounts.length; ++i) {\n  const accountId = accounts[i];\n\n  allPeople.push(\n    <a\n      href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n      className=\"text-decoration-none\"\n      key={`people_${i}`}\n    >\n      <Widget\n        src=\"mob.near/widget/ProfileImage\"\n        props={{\n          accountId,\n          tooltip: true,\n          className: \"d-inline-block overflow-hidden\",\n        }}\n      />\n    </a>\n  );\n}\n\nconst onProfileClick = (accountId) => {\n  if (state.peopleSelected.includes(accountId)) {\n    // remove account\n    State.update({\n      peopleSelected: [...state.peopleSelected.filter((i) => i !== accountId)],\n    });\n  } else {\n    // add account\n    State.update({ peopleSelected: [...state.peopleSelected, accountId] });\n  }\n};\n\nconst noBadgepeople = [];\nconst pathQueryPeople = [];\nfor (let i = 0; i < state.accountsOnPath.length; ++i) {\n  const accountId = state.accountsOnPath[i];\n  const isSelected = state.peopleSelected.includes(accountId);\n  const hasBadge = accounts.includes(accountId);\n  if (!hasBadge) noBadgepeople.push(accountId);\n\n  pathQueryPeople.push(\n    <button\n      className={`btn ${\n        isSelected ? \"btn-outline-primary\" : \"text-decoration-none\"\n      }`}\n      key={`people_on_path_${i}`}\n      onClick={() => {\n        !hasBadge && onProfileClick(accountId);\n      }}\n    >\n      <Widget\n        src=\"mob.near/widget/ProfileImage\"\n        props={{\n          accountId,\n          tooltip: true,\n          className: \"d-inline-block overflow-hidden\",\n        }}\n      />\n      {hasBadge && (\n        <span class=\"position-absolute top-10 start-90 translate-middle p-2 bg-secondary border border-light rounded-circle\">\n          <span class=\"visually-hidden\">Account with badge</span>\n        </span>\n      )}\n    </button>\n  );\n}\nconst mintButton = (badgeData, buttonText, holders) => {\n  return (\n    <CommitButton\n      data={{\n        badge: {\n          [badgeData.key]: {\n            info: badgeData.info,\n            holder: {\n              [holders]: \"\",\n            },\n          },\n        },\n      }}\n    >\n      {buttonText}\n      <span class=\"badge badge-info\">{holders.length}</span>\n    </CommitButton>\n  );\n};\n\nconst createNewBadgeForm = () => {\n  return (\n    <>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Key (unique)\n        </label>\n        <div class=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className={`form-control`}\n            id=\"name\"\n            value={state.badgeInfo.key}\n          />\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Name\n        </label>\n        <div class=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className={`form-control`}\n            id=\"name\"\n            value={state.badgeInfo.name}\n          />\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Description\n        </label>\n        <div class=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className={`form-control`}\n            id=\"name\"\n            value={state.badgeInfo.description}\n          />\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Image\n        </label>\n\n        <div class=\"col-sm-10\">\n          <IpfsImageUpload image={state.badgeInfo.image} />\n        </div>\n\n        <div class=\"ratio ratio-1x1 overflow-hidden\" style={{ width: \"8rem\" }}>\n          {state.badgeInfo.image.cid && (\n            <img\n              src={`https://ipfs.near.social/ipfs/${state.badgeInfo.image.cid}`}\n              alt=\"badge\"\n            />\n          )}\n        </div>\n      </div>\n      {mintButton(\n        {\n          key: state.badgeInfo.key.replace(/ /g, \"\"),\n          info: {\n            name: state.badgeInfo.name,\n            description: state.badgeInfo.description,\n            image: {\n              url: `https://ipfs.near.social/ipfs/${state.badgeInfo.image.cid}`,\n            },\n          },\n        },\n        \"Create new Badge\",\n        []\n      )}\n    </>\n  );\n};\nconst badgeDetails = () => {\n  return (\n    <>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Key (unique)\n        </label>\n        <div class=\"col-sm-10\">\n          <p class=\"form-control-plaintext\">{badgeName}</p>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-2 col-form-label\">\n          Name\n        </label>\n        <div class=\"col-sm-10\">\n          <p class=\"form-control-plaintext\">{badgeInfo.name}</p>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Description\n        </label>\n        <div class=\"col-sm-10\">\n          <p class=\"form-control-plaintext\">{badgeInfo.description}</p>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <label for=\"description\" class=\"col-sm-2 col-form-label\">\n          Image\n        </label>\n        <div class=\"ratio ratio-1x1 overflow-hidden\" style={{ width: \"8rem\" }}>\n          <BadgeImg\n            src={badgeInfo.image.url}\n            alt=\"badge\"\n            title={badgeInfo.description}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst navItemButton = (tabId, tabText, disabled) => {\n  return (\n    <button\n      className={`${disabled ? \"disabled\" : \"\"}  nav-link ${\n        state.activeTab == tabId ? \"active\" : \"\"\n      }`}\n      id={tabId}\n      data-mdb-toggle=\"tab\"\n      role=\"tab\"\n      aria-controls={tabId}\n      aria-selected=\"true\"\n      onClick={() => {\n        State.update({ activeTab: tabId });\n      }}\n    >\n      {tabText}\n    </button>\n  );\n};\nconst onUpdateSearchResult = (result) => {\n  State.update({ accountsOnPath: result });\n};\n\nreturn (\n  <div>\n    <div class=\"d-flex flex-row\">\n      <Widget\n        class=\"mr-6\"\n        src=\"manzanal.near/widget/Badge\"\n        props={{ badge_name: badgeName, size: \"8rem\", full_card: true }}\n      />\n    </div>\n\n    <ul class=\"nav nav-tabs my-3\" id=\"ex1\" role=\"tablist\">\n      <li class=\"nav-item\" role=\"presentation\">\n        {navItemButton(\"owners\", \"Owners\")}\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        {navItemButton(\"info\", \"Info\")}\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        {navItemButton(\"add_owners\", \"Add new owners\", !isAdmin)}\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        {navItemButton(\"create\", \"Create new badge\", !isAdmin)}\n      </li>\n    </ul>\n\n    <div class=\"tab-content\" id=\"add_owners\">\n      <div\n        className={`tab-pane fade ${\n          state.activeTab == \"owners\" ? \"show active\" : \"\"\n        }`}\n        id=\"owners\"\n        role=\"tabpanel\"\n        aria-labelledby=\"owners\"\n      >\n        <div>\n          <div class=\"d-flex flex-wrap gap-1\">{allPeople}</div>\n          <div>Total {numAccounts} profiles</div>\n        </div>\n      </div>\n      <div\n        className={`tab-pane fade ${\n          state.activeTab == \"info\" ? \"show active\" : \"\"\n        }`}\n        id=\"info\"\n        role=\"tabpanel\"\n        aria-labelledby=\"info\"\n      >\n        {badgeDetails()}\n      </div>\n      <div\n        className={`tab-pane fade ${\n          state.activeTab == \"add_owners\" ? \"show active\" : \"\"\n        }`}\n        id=\"add_owners\"\n        role=\"tabpanel\"\n        aria-labelledby=\"add_owners\"\n      >\n        <div>\n          <Widget\n            src=\"manzanal.near/widget/PeopleExplorer\"\n            props={{\n              onUpdateSearchResult: onUpdateSearchResult,\n              predefinedQueries: predefinedQueries,\n              debug: false,\n            }}\n          />\n          <div>\n            <div class=\"d-flex flex-wrap gap-1\">{pathQueryPeople}</div>\n            <div>Total {pathQueryPeople.length} profiles</div>\n\n            {mintButton(\n              { key: badgeName, info: badgeInfo },\n              \"Mint badge to all no badge people\",\n              noBadgepeople\n            )}\n            {mintButton(\n              { key: badgeName, info: badgeInfo },\n              \"Mint badge to selected people\",\n              state.peopleSelected\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      className={`tab-pane fade ${\n        state.activeTab == \"create\" ? \"show active\" : \"\"\n      }`}\n      id=\"create\"\n      role=\"tabpanel\"\n      aria-labelledby=\"create\"\n    >\n      {createNewBadgeForm()}\n    </div>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/manzanal.near/widget/BadgesBackOffice", "metadata.description": "\n### Manage all your badges in one place:\n\n* View badge information\n* See who owns each badge\n* Assign badges using advanced people search queries\n* Create new badges\n* Edit badge data (not yet implemented)\n\n**Props**:\n*badge_name* - the key of the badge (required)", "metadata.image.ipfs_cid": "bafkreid6exaixa2ritn2xn5ctmh7n3s56u5cgmh7j7ngr24xihii4ltmbi", "metadata.name": "Badges Back Office", "metadata.tags.app": "", "metadata.tags.badges": ""}