{"tx_hash": "7Stg9imXtiv5BhzxQeZRevoLwRQENYii8TrGxdLGHgxU", "action_id_social": "AudXKaTFQzdnTZ4dwSv39KaQpqEmvS9GgfN22gtzG5i5-0-widget", "block_id": 86567551, "block_timestamp": "2023-03-04 22:12:38.125", "signer_id": "azbang.near", "widget_name": "FeedbackBots", "source_code": "const TGAS = Math.pow(10, 12);\nconst CONTRACT = \"dev-1677966234754-39130815101986\";\nconst TRIGGERS = [\"source\", \"user\", \"widget\", \"action\"];\nconst NEW_SCRIPT = {\n  isNew: true,\n  name: \"New script\",\n  conditions: [],\n  balance: \"0\",\n};\n\nconst Header = styled.div`\n    width: 100%;\n    padding: 16px;\n    border-bottom: 1px solid #333;\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 16px;\n`;\n\nconst Page = styled.div`\n    width: 100%;\n    height: 100%;\n    min-height: 600px;\n    background-color: #1e1e1e;\n`;\n\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new BN(10);\nlet offset = new BN(5);\nfor (let i = 0; i < 30; i++) {\n  ROUNDING_OFFSETS[i] = offset;\n  offset = offset.mul(BN10);\n}\n\nconst formatAmount = (balance) => {\n  try {\n    const nominal = 24;\n    const fracDigits = 4;\n    const balanceBN = new BN(balance, 10);\n    if (fracDigits !== nominal) {\n      const roundingExp = nominal - fracDigits - 1;\n      if (roundingExp > 0) {\n        balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n      }\n    }\n\n    balance = balanceBN.toString();\n    const wholeStr = balance.substring(0, balance.length - nominal) || \"0\";\n    const fractionStr = balance\n      .substring(balance.length - nominal)\n      .padStart(nominal, \"0\")\n      .substring(0, fracDigits);\n\n    return `${wholeStr}.${fractionStr}`;\n  } catch {\n    return 0;\n  }\n};\n\nfunction parseAmount(amt) {\n  function trimLeadingZeroes(value) {\n    value = value.replace(/^0+/, \"\");\n    if (value === \"\") return \"0\";\n    return value;\n  }\n\n  try {\n    amt = amt.toString().replace(/,/g, \"\").trim();\n    const split = amt.split(\".\");\n    const wholePart = split[0];\n    const fracPart = split[1] ? split[1].substring(0, 24) : \"\";\n    return trimLeadingZeroes(wholePart + fracPart.padEnd(24, \"0\"));\n  } catch (E) {\n    console.log(E);\n    return \"0\";\n  }\n}\n\nState.init({\n  isModal: false,\n  script: null,\n\n  newAutocomplete: \"\",\n  autocompletes: {\n    source: JSON.parse(Storage.get(\"autocomplete:source\") ?? '[\"data\"]'),\n    user: JSON.parse(Storage.get(\"autocomplete:user\") ?? '[\"any\"]'),\n    widget: JSON.parse(Storage.get(\"autocomplete:widget\") ?? '[\"index\"]'),\n    action: JSON.parse(\n      Storage.get(\"autocomplete:action\") ?? '[\"like\", \"subscribe\", \"comment\"]'\n    ),\n  },\n});\n\nconst keys = Near.view(CONTRACT, \"get_keys\") ?? [];\nconst mykeys = keys.filter((key) => key.split(\":\")[0] === context.accountId);\nconst scripts =\n  Near.view(CONTRACT, \"get_scripts\", JSON.stringify({ keys: mykeys })) ?? [];\n\nconsole.log(scripts);\n\nconst openScript = (script) => {\n  State.update({\n    script: {\n      ...script,\n      code: script.code ?? Storage.get(\"code\", e.data) ?? exampleScript,\n    },\n  });\n};\n\nconst deployScript = (script) => {\n  console.log(parseAmount(script.balance), script);\n  Near.call(\n    CONTRACT,\n    \"add_script\",\n    JSON.stringify({\n      cid: context.accountId + \":\" + Math.floor(Date.now() / 1000),\n      code: Storage.get(\"code\") ?? \"\",\n      conditions: JSON.stringify(script.conditions),\n      name: script.name,\n    }),\n    50 * TGAS,\n    parseAmount(script.balance)\n  );\n};\n\nconst updateConditions = (script) => {\n  Near.call(\n    CONTRACT,\n    \"deploy_script\",\n    JSON.stringify({ cid: script.cid, conditions: script.conditions }),\n    20 * TGAS,\n    \"1\"\n  );\n};\n\nconst addDeposit = (script) => {\n  Near.call(\n    CONTRACT,\n    \"deposit\",\n    JSON.stringify({ cid: script.cid }),\n    20 * TGAS,\n    parseAmount(script.balance)\n  );\n};\n\nconst removeScript = (script) => {\n  Near.call(\n    CONTRACT,\n    \"remove\",\n    JSON.stringify({ cid: script.cid }),\n    20 * TGAS,\n    \"1\"\n  );\n};\n\nif (state.script == null) {\n  return (\n    <Page style={{ padding: 16 }}>\n      <button\n        class=\"btn btn-outline-light font-monospace\"\n        onClick={() => openScript(NEW_SCRIPT)}\n        style={{ width: \"100%\", height: 48, marginBottom: 16 }}\n      >\n        <i class=\"bi bi-plus-lg\" /> Create new\n      </button>\n\n      <div class=\"list-group\">\n        {scripts.map((bot) => (\n          <div\n            style={{ cursor: \"pointer\", padding: 16 }}\n            class=\"list-group-item list-group-item-action\"\n            onClick={() => openScript(bot)}\n          >\n            <div class=\"d-flex w-100 justify-content-between\">\n              <h5 class=\"font-monospace mb-2\">\n                {bot.name ?? \"Script\"}\n                <span class=\"badge text-bg-success\">10 Calls</span>\n              </h5>\n            </div>\n            <p class=\"font-monospace mb-1\">\n              Remaining balance: {formatAmount(bot.balance)} NEAR\n            </p>\n          </div>\n        ))}\n      </div>\n    </Page>\n  );\n}\n\nconst setConditionPath = (value, index) => {\n  const newArr = [...state.script.conditions];\n  newArr[index] = value;\n  State.update({\n    script: {\n      ...state.script,\n      conditions: newArr,\n    },\n  });\n};\n\nconst addAutocomplete = (value, index) => {\n  const type = TRIGGERS[index];\n  if (value === \"\" || state.autocompletes[type].includes(value)) return;\n  const newSet = [...state.autocompletes[type], value];\n\n  setConditionPath(state.newAutocomplete, index);\n  Storage.set(`autocomplete:${type}`, JSON.stringify(newSet));\n  State.update({\n    newAutocomplete: \"\",\n    autocompletes: {\n      ...state.autocompletes,\n      [type]: newSet,\n    },\n  });\n};\n\nconst removeConditionPath = (index) => {\n  State.update({\n    script: {\n      ...state.script,\n      conditions: state.script.conditions.slice(0, index - 1),\n    },\n  });\n};\n\nconst Modal = (\n  <div\n    class={`modal fade ${!state.isModal ? \"\" : \"show d-block\"}`}\n    style={{ background: \"rgba(0, 0, 0, 0.3)\" }}\n  >\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title font-monospace\">Deploy script</h5>\n          <button\n            onClick={() => State.update({ isModal: false })}\n            class=\"btn-close\"\n            data-bs-dismiss=\"modal\"\n            aria-label=\"Close\"\n          />\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"input-group flex-nowrap mb-2\">\n            <span\n              style={{ width: 150 }}\n              class=\"input-group-text font-monospace\"\n            >\n              Script name\n            </span>\n            <input\n              type=\"text\"\n              class=\"form-control font-monospace\"\n              placeholder=\"Like Callback\"\n              aria-describedby=\"addon-wrapping\"\n              value={state.script.name}\n              onChange={(e) =>\n                State.update({\n                  script: {\n                    ...state.script,\n                    name: e.target.value,\n                  },\n                })\n              }\n            />\n          </div>\n\n          <div class=\"input-group flex-nowrap mb-2\">\n            <span\n              style={{ width: 150 }}\n              class=\"input-group-text font-monospace\"\n            >\n              Deposit\n            </span>\n            <input\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              step=\"0.01\"\n              class=\"form-control font-monospace\"\n              aria-describedby=\"addon-wrapping\"\n              value={state.script.balance}\n              onChange={(e) =>\n                State.update({\n                  script: {\n                    ...state.script,\n                    balance: e.target.value,\n                  },\n                })\n              }\n            />\n            <span class=\"input-group-text font-monospace\">NEAR</span>\n          </div>\n\n          <div class=\"alert alert-primary\" style={{ marginBottom: -4 }}>\n            Your deposit on this script. After the deployment, you will be able\n            to track the balance and replenish it for new calls. Used only for\n            payable calls.\n          </div>\n        </div>\n\n        <div class=\"modal-footer\">\n          <button\n            class=\"btn btn-success font-monospace\"\n            onClick={() => deployScript(state.script)}\n          >\n            Deploy\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst render = () => (\n  <Page>\n    <Header>\n      <button\n        class=\"btn btn-light font-monospace\"\n        onClick={() => State.update({ script: null })}\n      >\n        <i class=\"bi bi-arrow-left\" /> Back\n      </button>\n\n      <p class=\"font-monospace\" style={{ color: \"#fff\", margin: 0 }}>\n        {bot?.name ?? \"New script\"}\n      </p>\n\n      {state.script.isNew && (\n        <button\n          class=\"btn btn-light font-monospace\"\n          onClick={() => State.update({ isModal: true })}\n        >\n          <i class=\"bi bi-play-fill\" /> Deploy\n        </button>\n      )}\n\n      {!state.script.isNew && (\n        <button\n          class=\"btn btn-light font-monospace\"\n          onClick={() => State.update({ isModal: true })}\n        >\n          <i class=\"bi bi-box-fill\" /> Update\n        </button>\n      )}\n    </Header>\n\n    {Modal}\n\n    <iframe\n      srcDoc={code}\n      style={{ width: \"100%\", height: \"calc(100% - 260px)\" }}\n      onMessage={(e) => Storage.set(\"code\", e)}\n      message={JSON.stringify({\n        editable: state.script.isNew ?? false,\n        code: state.script.code ?? \"\",\n      })}\n    />\n\n    <div\n      style={{\n        padding: 16,\n        background: \"rgba(255, 255, 255, 0.1)\",\n        borderTop: \"1px solid #fff\",\n        width: \"100%\",\n        height: 200,\n      }}\n    >\n      <p\n        class=\"font-monospace\"\n        style={{ color: \"#fff\", margin: 0, marginBottom: 16 }}\n      >\n        Setup trigger:\n      </p>\n\n      <div style={{ display: \"flex\", gap: 8 }}>\n        {TRIGGERS.slice(0, state.script.conditions.length + 1).map(\n          (trigger, index) => (\n            <div>\n              <div class=\"btn-group\">\n                {index !== state.script.conditions.length && (\n                  <button\n                    class=\"btn btn-danger\"\n                    onClick={() => removeConditionPath(index)}\n                  >\n                    <i class=\"bi bi-x-lg\"></i>\n                  </button>\n                )}\n\n                <button\n                  style={{ textAlign: \"left\" }}\n                  class=\"btn btn-light dropdown-toggle\"\n                  data-bs-toggle=\"dropdown\"\n                  type=\"button\"\n                >\n                  {conditions[index] || `Select ${trigger}`}\n                </button>\n                <ul\n                  class=\"dropdown-menu\"\n                  style={{ borderRadius: 12, paddingTop: 0, minWidth: 200 }}\n                >\n                  <div class=\"input-group mb-2\">\n                    <input\n                      class=\"form-control\"\n                      value={state.newAutocomplete}\n                      onKeyUp={(e) => {\n                        if (e.key === \"Enter\")\n                          addAutocomplete(state.newAutocomplete, index);\n                      }}\n                      onChange={(e) => {\n                        console.log(e);\n                        State.update({ newAutocomplete: e.target.value });\n                      }}\n                      placeholder=\"Add custom\"\n                      style={{\n                        boxShadow: \"none\",\n                        border: \"none\",\n                        borderBottom: \"1px solid #000\",\n                        borderBottomRightRadius: 0,\n                        borderBottomLeftRadius: 0,\n                      }}\n                    />\n                    <button\n                      onClick={() =>\n                        addAutocomplete(state.newAutocomplete, index)\n                      }\n                      type=\"submit\"\n                      class=\"btn btn-primary\"\n                      style={{\n                        borderBottomRightRadius: 0,\n                        borderBottomLeftRadius: 0,\n                      }}\n                    >\n                      <i class=\"bi bi-plus-lg\" />\n                    </button>\n                  </div>\n\n                  {state.autocompletes[trigger].map((option) => (\n                    <li\n                      class=\"btn dropdown-item\"\n                      onClick={() => setConditionPath(option, index)}\n                      style={{\n                        fontWeight: option === conditions[index] ? 800 : 400,\n                      }}\n                    >\n                      {option}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  </Page>\n);\n\nconst exampleScript = `const data = get_Input();\n\nfunction_Call({ \n    receiver: data.user,\n    deposit: 10, \n    methodName: \"test\", \n    args: \"\" \n})`;\n\nconst code = `\n<style>\nhtml, body, #container {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tmargin: 0;\n\tpadding: 0;\n\toverflow: hidden;\n}\n</style>\n<div id=\"container\"></div>\n<script src=\"https://unpkg.com/monaco-editor@latest/min/vs/loader.js\"></script>\n<script>\nrequire.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' }});\nwindow.MonacoEnvironment = { getWorkerUrl: () => proxy };\nlet proxy = URL.createObjectURL(new Blob(['self.MonacoEnvironment = {baseUrl: \"https://unpkg.com/monaco-editor@latest/min/\" };importScripts(\"https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js\")'], { type: 'text/javascript' }));\n\nrequire([\"vs/editor/editor.main\"], function () {\n\tlet editor = monaco.editor.create(document.getElementById('container'), {\n\t\tvalue: '',\n\t\tlanguage: 'javascript',\n    width: '100%',\n    fontSize: 16,\n\t\ttheme: 'vs-dark'\n\t});\n\n    editor.getModel().onDidChangeContent(e => {\n      parent.postMessage(editor.getModel().getValue(), \"*\")\n    })\n\n    window.addEventListener(\"message\", (e) => {\n      const { editable, code } = JSON.parse(e.data)\n      editor.getModel().setValue(code)\n      editor.updateOptions({ readOnly: !editable }) \n    }, { once: true })\n});\n</script>\n`;\n\nreturn render();\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/azbang.near/widget/FeedbackBots", "metadata.name": NaN}