{"tx_hash": "7psqEfXJ6f8Ezg84GaagDyX9ZFLVs66EiHexjkQ8ijpV", "action_id_social": "DHUf4uY7bzdhdM8vdNv231iHbaiQcx3PZmh11EZ112tr-0-widget", "block_id": 86576674, "block_timestamp": "2023-03-05 01:06:39.144", "signer_id": "azbang.near", "widget_name": "CallbackEditor", "source_code": "const TGAS = Math.pow(10, 12);\nconst CONTRACT = \"nsbot.near\";\nconst TRIGGERS = [\"source\", \"user\", \"widget\", \"action\", \"actionUser\"];\nconst MODAL_DEPLOY = \"deployModal\";\nconst MODAL_UPDATE = \"updateModal\";\nconst NEW_SCRIPT = {\n  sid: \"new\",\n  name: \"New script\",\n  conditions: \"[]\",\n  balance: \"0\",\n};\n\nconst exampleScript = `const data = get_Input();\n\nconst followers = get_SignerFollowers()\nconst balance = get_SignerBalance()\n\ncall_Transfer(\"account.near\", \"1000\")\nfunction_Call(\"near.social\", \"method\")\n`;\n\nconst Header = styled.div`\n    width: 100%;\n    padding: 16px;\n    border-bottom: 1px solid #333;\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 16px;\n`;\n\nconst Page = styled.div`\n    width: 100%;\n    height: 100%;\n    max-width: 800px;\n    margin: auto;\n    min-height: 600px;\n    background-color: #1e1e1e;\n`;\n\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new BN(10);\nlet offset = new BN(5);\nfor (let i = 0; i < 30; i++) {\n  ROUNDING_OFFSETS[i] = offset;\n  offset = offset.mul(BN10);\n}\n\nconst formatAmount = (balance) => {\n  try {\n    const nominal = 24;\n    const fracDigits = 4;\n    const balanceBN = new BN(balance, 10);\n    if (fracDigits !== nominal) {\n      const roundingExp = nominal - fracDigits - 1;\n      if (roundingExp > 0) {\n        balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n      }\n    }\n\n    balance = balanceBN.toString();\n    const wholeStr = balance.substring(0, balance.length - nominal) || \"0\";\n    const fractionStr = balance\n      .substring(balance.length - nominal)\n      .padStart(nominal, \"0\")\n      .substring(0, fracDigits);\n\n    return `${wholeStr}.${fractionStr}`;\n  } catch {\n    return 0;\n  }\n};\n\nfunction parseAmount(amt) {\n  function trimLeadingZeroes(value) {\n    value = value.replace(/^0+/, \"\");\n    if (value === \"\") return \"0\";\n    return value;\n  }\n\n  try {\n    amt = amt.toString().replace(/,/g, \"\").trim();\n    const split = amt.split(\".\");\n    const wholePart = split[0];\n    const fracPart = split[1] ? split[1].substring(0, 24) : \"\";\n    return trimLeadingZeroes(wholePart + fracPart.padEnd(24, \"0\"));\n  } catch (E) {\n    return \"0\";\n  }\n}\n\nState.init({\n  modal: null,\n  script: null,\n  scripts: [],\n\n  newAutocomplete: \"\",\n  autocompletes: {\n    source: JSON.parse(Storage.get(\"autocomplete:source\") || '[\"data\", \"any\"]'),\n    user: JSON.parse(Storage.get(\"autocomplete:user\") || '[\"any\"]'),\n    widget: JSON.parse(\n      Storage.get(\"autocomplete:widget\") || '[\"index\", \"graph\", \"any\"]'\n    ),\n    action: JSON.parse(\n      Storage.get(\"autocomplete:action\") ||\n        '[\"any\", \"follow\", \"like\", \"notify\", \"comment\"]'\n    ),\n    actionUser: JSON.parse(Storage.get(\"autocomplete:actionUser\") || '[\"any\"]'),\n  },\n});\n\nconst loadScripts = () => {\n  const keys = Near.view(CONTRACT, \"get_keys\") ?? [];\n  const mykeys = keys.filter((key) => key.split(\":\")[0] === context.accountId);\n  const scripts = Near.view(CONTRACT, \"get_scripts\", { keys: mykeys }) ?? [];\n  State.update({\n    scripts: scripts.map((script, i) => ({ ...script, sid: mykeys[i] })),\n  });\n};\n\nconst openScript = (script) => {\n  State.update({\n    script: {\n      ...script,\n      conditions: JSON.parse(script.conditions),\n      code: Storage.get(`${script.sid}:code`) || script.code || exampleScript,\n    },\n  });\n};\n\nconst deployScript = (script) => {\n  const isNew = script.sid === \"new\";\n  const newSid = context.accountId + \":\" + Math.floor(Date.now() / 1000);\n\n  Storage.set(\"new:code\", \"\");\n  State.update({ modal: null });\n  Near.call(\n    CONTRACT,\n    isNew ? \"add_script\" : \"edit_script\",\n    {\n      sid: isNew ? newSid : script.sid,\n      code: Storage.get(`${script.sid}:code`, e.data) ?? script.code ?? \"\",\n      conditions: JSON.stringify(script.conditions),\n      name: isNew ? script.name : undefined,\n    },\n    50 * TGAS,\n    parseAmount(script.balance)\n  );\n\n  loadScripts();\n};\n\nconst addDeposit = (script) => {\n  Near.call(\n    CONTRACT,\n    \"deposit\",\n    { sid: script.sid },\n    20 * TGAS,\n    parseAmount(script.balance)\n  );\n};\n\nconst removeScript = (script) => {\n  Near.call(CONTRACT, \"remove\", { sid: script.sid }, 20 * TGAS, \"1\");\n};\n\nloadScripts();\n\nif (state.script == null) {\n  return (\n    <Page style={{ padding: 16 }}>\n      <button\n        class=\"btn btn-outline-light font-monospace\"\n        onClick={() => openScript(NEW_SCRIPT)}\n        style={{ width: \"100%\", height: 48, marginBottom: 16 }}\n      >\n        <i class=\"bi bi-plus-lg\" /> Create new\n      </button>\n\n      <div class=\"list-group\">\n        {state.scripts.map((bot) => (\n          <div\n            style={{ cursor: \"pointer\", padding: 16 }}\n            class=\"list-group-item list-group-item-action\"\n            onClick={() => openScript(bot)}\n          >\n            <div class=\"d-flex w-100 justify-content-between\">\n              <h5 class=\"font-monospace mb-2\">\n                {bot.name ?? \"Script\"}\n                <span class=\"badge text-bg-success\">\n                  {bot.calls_count} Calls\n                </span>\n              </h5>\n            </div>\n            <p class=\"font-monospace mb-1\">\n              Remaining balance: {formatAmount(bot.balance)} NEAR\n            </p>\n          </div>\n        ))}\n      </div>\n    </Page>\n  );\n}\n\nconst setConditionPath = (value, index) => {\n  const newArr = [...state.script.conditions];\n  newArr[index] = value;\n  State.update({\n    script: {\n      ...state.script,\n      conditions: newArr,\n    },\n  });\n};\n\nconst addAutocomplete = (value, index) => {\n  const type = TRIGGERS[index];\n  if (value === \"\" || state.autocompletes[type].includes(value)) return;\n  const newSet = [...state.autocompletes[type], value];\n\n  setConditionPath(state.newAutocomplete, index);\n  Storage.set(`autocomplete:${type}`, JSON.stringify(newSet));\n  State.update({\n    newAutocomplete: \"\",\n    autocompletes: {\n      ...state.autocompletes,\n      [type]: newSet,\n    },\n  });\n};\n\nconst removeConditionPath = (index) => {\n  State.update({\n    script: {\n      ...state.script,\n      conditions: state.script.conditions.slice(0, index),\n    },\n  });\n};\n\nconst ModalDeploy = (\n  <div\n    class={`modal fade ${state.modal !== MODAL_DEPLOY ? \"\" : \"show d-block\"}`}\n    style={{ background: \"rgba(0, 0, 0, 0.3)\" }}\n  >\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title font-monospace\">Deploy script</h5>\n          <button\n            onClick={() => State.update({ modal: null })}\n            class=\"btn-close\"\n            data-bs-dismiss=\"modal\"\n            aria-label=\"Close\"\n          />\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"input-group flex-nowrap mb-2\">\n            <span\n              style={{ width: 150 }}\n              class=\"input-group-text font-monospace\"\n            >\n              Script name\n            </span>\n            <input\n              type=\"text\"\n              class=\"form-control font-monospace\"\n              placeholder=\"Like Callback\"\n              aria-describedby=\"addon-wrapping\"\n              value={state.script.name}\n              onChange={(e) =>\n                State.update({\n                  script: {\n                    ...state.script,\n                    name: e.target.value,\n                  },\n                })\n              }\n            />\n          </div>\n\n          <div class=\"input-group flex-nowrap mb-2\">\n            <span\n              style={{ width: 150 }}\n              class=\"input-group-text font-monospace\"\n            >\n              Deposit\n            </span>\n            <input\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              step=\"0.01\"\n              class=\"form-control font-monospace\"\n              aria-describedby=\"addon-wrapping\"\n              value={state.script.balance}\n              onChange={(e) =>\n                State.update({\n                  script: {\n                    ...state.script,\n                    balance: e.target.value,\n                  },\n                })\n              }\n            />\n            <span class=\"input-group-text font-monospace\">NEAR</span>\n          </div>\n\n          <div class=\"alert alert-primary\" style={{ marginBottom: -4 }}>\n            Your deposit on this script. After the deployment, you will be able\n            to track the balance and replenish it for new calls. Used only for\n            payable calls.\n          </div>\n        </div>\n\n        <div class=\"modal-footer\">\n          <button\n            class=\"btn btn-success font-monospace\"\n            onClick={() => deployScript(state.script)}\n          >\n            Deploy\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst UpdateModal = (\n  <div\n    class={`modal fade ${state.modal !== MODAL_UPDATE ? \"\" : \"show d-block\"}`}\n    style={{ background: \"rgba(0, 0, 0, 0.3)\" }}\n  >\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title font-monospace\">Are you sure?</h5>\n          <button\n            onClick={() => State.update({ modal: null })}\n            class=\"btn-close\"\n            data-bs-dismiss=\"modal\"\n            aria-label=\"Close\"\n          />\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"alert alert-warning\" style={{ marginBottom: -4 }}>\n            This action cannot be undone\n          </div>\n        </div>\n\n        <div class=\"modal-footer\">\n          <button\n            class=\"btn btn-success font-monospace\"\n            onClick={() => deployScript(state.script)}\n          >\n            Confirm\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst render = () => (\n  <Page>\n    <Header>\n      <button\n        class=\"btn btn-light font-monospace\"\n        onClick={() => State.update({ script: null })}\n      >\n        <i class=\"bi bi-arrow-left\" /> Back\n      </button>\n\n      <p class=\"font-monospace\" style={{ color: \"#fff\", margin: 0 }}>\n        {state.script.name}\n      </p>\n\n      {state.script.sid === \"new\" && (\n        <button\n          class=\"btn btn-light font-monospace\"\n          onClick={() => State.update({ modal: MODAL_DEPLOY })}\n        >\n          <i class=\"bi bi-play-fill\" /> Deploy\n        </button>\n      )}\n\n      {state.script.sid !== \"new\" && (\n        <button\n          class=\"btn btn-light font-monospace\"\n          onClick={() => State.update({ modal: MODAL_UPDATE })}\n        >\n          <i class=\"bi bi-box-fill\" /> Update\n        </button>\n      )}\n    </Header>\n\n    {ModalDeploy}\n    {UpdateModal}\n\n    <iframe\n      srcDoc={code}\n      style={{ width: \"100%\", height: \"calc(100% - 260px)\" }}\n      message={state.script.code ?? \"\"}\n      onMessage={(e) => {\n        Storage.set(`${state.script.sid}:code`, e);\n      }}\n    />\n\n    <div\n      style={{\n        padding: 16,\n        background: \"rgba(255, 255, 255, 0.1)\",\n        borderTop: \"1px solid #fff\",\n        width: \"100%\",\n        height: 200,\n      }}\n    >\n      <p class=\"font-monospace mb-4\" style={{ color: \"#fff\", margin: 0 }}>\n        Setup trigger:\n      </p>\n\n      <div style={{ display: \"flex\", gap: 8, flexWrap: \"wrap\" }}>\n        {TRIGGERS.slice(0, state.script.conditions.length + 1).map(\n          (trigger, index) => (\n            <div>\n              <div class=\"btn-group\">\n                {index !== state.script.conditions.length && (\n                  <button\n                    class=\"btn btn-danger\"\n                    onClick={() => removeConditionPath(index)}\n                  >\n                    <i class=\"bi bi-x-lg\"></i>\n                  </button>\n                )}\n\n                <button\n                  style={{\n                    textAlign: \"left\",\n                    maxWidth: 200,\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                  }}\n                  class=\"btn btn-light dropdown-toggle\"\n                  data-bs-toggle=\"dropdown\"\n                  type=\"button\"\n                >\n                  {state.script.conditions[index] || `Select ${trigger}`}\n                </button>\n                <ul\n                  class=\"dropdown-menu\"\n                  style={{\n                    borderRadius: 12,\n                    paddingTop: 0,\n                    width: 200,\n                    overflow: \"hidden\",\n                  }}\n                >\n                  <div class=\"input-group mb-2\">\n                    <input\n                      class=\"form-control\"\n                      value={state.newAutocomplete}\n                      onKeyUp={(e) => {\n                        if (e.key === \"Enter\")\n                          addAutocomplete(state.newAutocomplete, index);\n                      }}\n                      onChange={(e) => {\n                        State.update({ newAutocomplete: e.target.value });\n                      }}\n                      placeholder=\"Add custom\"\n                      style={{\n                        boxShadow: \"none\",\n                        border: \"none\",\n                        borderBottom: \"1px solid #000\",\n                        borderBottomRightRadius: 0,\n                        borderBottomLeftRadius: 0,\n                      }}\n                    />\n                    <button\n                      onClick={() =>\n                        addAutocomplete(state.newAutocomplete, index)\n                      }\n                      type=\"submit\"\n                      class=\"btn btn-primary\"\n                      style={{\n                        borderBottomRightRadius: 0,\n                        borderBottomLeftRadius: 0,\n                      }}\n                    >\n                      <i class=\"bi bi-plus-lg\" />\n                    </button>\n                  </div>\n\n                  {state.autocompletes[trigger]?.map((option) => (\n                    <li\n                      class=\"btn dropdown-item\"\n                      onClick={() => setConditionPath(option, index)}\n                      style={{\n                        overflow: \"hidden\",\n                        width: 200,\n                        paddingRight: 16,\n                        textOverflow: \"ellipsis\",\n                        fontWeight:\n                          option === state.script.conditions[index] ? 800 : 400,\n                      }}\n                    >\n                      {option}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  </Page>\n);\n\nconst code = `\n<style>\nhtml, body, #container {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tmargin: 0;\n\tpadding: 0;\n\toverflow: hidden;\n}\n</style>\n<div id=\"container\"></div>\n<script src=\"https://unpkg.com/monaco-editor@latest/min/vs/loader.js\"></script>\n<script>\nrequire.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' }});\nwindow.MonacoEnvironment = { getWorkerUrl: () => proxy };\nlet proxy = URL.createObjectURL(new Blob(['self.MonacoEnvironment = {baseUrl: \"https://unpkg.com/monaco-editor@latest/min/\" };importScripts(\"https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js\")'], { type: 'text/javascript' }));\n\nrequire([\"vs/editor/editor.main\"], async function () {\n    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n        noSemanticValidation: false,\n        noSyntaxValidation: false,\n        noSuggestionDiagnostics: false,\n        diagnosticCodesToIgnore: [1108],\n    });\n\n    const compilerOptions = monaco.languages.typescript.javascriptDefaults.getCompilerOptions();\n    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n        target: monaco.languages.typescript.ScriptTarget.ES6,\n        allowNonTsExtensions: true,\n        noLib: true,\n    });\n\n    const libSource = \\`\n        /** \n         * Synchronous contract method call function. \n         * Paid calls are paid from the script deposit. \n         * \n         * account_id - Required\n         * \n         * method - Required\n         * \n         * args = ''\n         * \n         * deposit = '0'\n         * \n         * gas = '2500000000000\n         * */\n        declare function function_Call(account_id: string, method: string, args?: string, deposit?: string, gas?: string)\n        \n        /** \n         * Synchronous method for get trigger data in JSON format\n         * Example: \"{ \"key\": \"follow\", \"value\": { \"type\": \"unfollow\", \"accountId\": \"mob.near\" }}\"\n        */\n        declare function get_Input(): string\n\n        /** \n         * Synchronous method for get signer followers in NEAR Social\n        */\n        declare function get_SignerFollowers(): number\n\n        /** \n         * Synchronous method for get signer balance in yocto NEAR\n        */\n        declare function get_SignerBalance(): string\n\n        /** \n         * Synchronous method for transfer yocto NEAR \n        */\n        declare function call_Transfer(account_id: string, deposit: string)\n    \\`\n    \n    const libUri = 'ts:filename/index.d.ts';\n    monaco.languages.typescript.javascriptDefaults.addExtraLib(libSource, libUri);\n    monaco.editor.createModel(libSource, 'typescript', monaco.Uri.parse(libUri));\n\n    try {\n        const coreDefsResp = await fetch(\"https://raw.githubusercontent.com/microsoft/TypeScript/main/lib/lib.es5.d.ts\")\n        const coreDefs = await coreDefsResp.text();\n        monaco.languages.typescript.javascriptDefaults.addExtraLib(\n            coreDefs,\n            \"lib.es5.d.ts\"\n        );\n    } catch {}\n\n\tlet editor = monaco.editor.create(document.getElementById('container'), {\n\t\tvalue: '',\n        fixedOverflowWidgets: true,\n\t\tlanguage: 'javascript',\n        width: '100%',\n        fontSize: 16,\n\t\ttheme: 'vs-dark'\n\t});\n\n    editor.getModel().onDidChangeContent(e => {\n      parent.postMessage(editor.getModel().getValue(), \"*\")\n    })\n\n    window.addEventListener(\"message\", (e) => {\n      editor.getModel().setValue(e.data)\n    }, { once: true })\n});\n</script>\n`;\n\nreturn render();\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/azbang.near/widget/CallbackEditor", "metadata.name": NaN, "metadata.tags.callback": NaN, "metadata.tags.code": NaN, "metadata.tags.dev": NaN, "metadata.tags.editor": NaN, "metadata.tags.hackathon": NaN, "metadata.tags.social": NaN}