{"tx_hash": "4dBSFkEUSJ79Bx51ng8qdU7ZbDTyBtuKyW2BT2onHicT", "action_id_social": "C35kZsntUJn1vGCQQBfveGhwrjyRQKM1nSMrQWnhpjM4-0-widget", "block_id": 94984161, "block_timestamp": "2023-06-25T08:24:08.642Z", "signer_id": "gordonjun.near", "widget_name": "dev.search.dao.members.only", "source_code": "const daoId = props.daoId ?? 'bbclan.near';\n\nconst allMetadata =\n  Social.get(\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\n    \"final\"\n  ) || {};\n\nlet daoFollowers = Social.keys(`*/graph/follow/${daoId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\ndaoFollowers = Object.entries(daoFollowers || {}).map(\n  ([accountId]) => accountId\n);\nlet keys = {};\n\nfor (let i = 0; i < daoFollowers.length; i++) {\n    let userWidgetkeys = Social.keys([`${daoFollowers[i]}/widget/*`], \"final\", { values_only: true })\n    keys = Object.assign(keys, userWidgetkeys);\n}\n\nconst requiredTag = props.filterTag;\nconst boostedTag = props.boostedTag;\nconst inputTerm = props.term;\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._\\/-]/)\n    .filter((s) => !!s.trim());\n\n  const matchedWidgets = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 1;\n  const MaxScore = MaxSingleScore * 4;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.exp(-pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(keys).forEach(([accountId, data]) => {\n    Object.keys(data.widget).forEach((componentId) => {\n      const widgetSrc = `${accountId}/widget/${componentId}`;\n      const widgetSrcScore = computeScore(widgetSrc);\n      const componentIdScore = computeScore(componentId);\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\n      const name = metadata.name || componentId;\n      if (requiredTag && !(metadata.tags && requiredTag in metadata.tags)) {\n        return;\n      }\n      const boosted =\n        boostedTag && metadata.tags && boostedTag in metadata.tags;\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\n      const nameScore = computeScore(name);\n      const tagsScore = Math.min(\n        MaxSingleScore,\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\n      );\n      const score =\n        (widgetSrcScore + componentIdScore + nameScore + tagsScore) / MaxScore;\n      if (score > 0) {\n        matchedWidgets.push({\n          score,\n          accountId,\n          widgetName: componentId,\n          widgetSrc,\n          name,\n          tags,\n          boosted,\n        });\n      }\n    });\n  });\n\n  matchedWidgets.sort(\n    (a, b) => (b.boosted ? 2 : 0) + b.score - (a.boosted ? 2 : 0) - a.score\n  );\n  const result = matchedWidgets.slice(0, limit);\n\n  State.update({\n    term,\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, result });\n  }\n};\n\nif (props.term && props.term !== state.oldTerm) {\n  State.update({\n    oldTerm: props.term,\n  });\n  if (props.term !== state.term) {\n    computeResults(props.term);\n  }\n}\n\nreturn (\n  <>\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className={`form-control ${state.term ? \"border-end-0\" : \"\"}`}\n        value={state.term ?? \"\"}\n        onChange={(e) => computeResults(e.target.value)}\n        placeholder={props.placeholder ?? `\ud83d\udd0d Search Components`}\n      />\n\n      {state.term && (\n        <button\n          className=\"btn btn-outline-secondary border border-start-0\"\n          type=\"button\"\n          onClick={() => computeResults(\"\")}\n        >\n          <i className=\"bi bi-x\"></i>\n        </button>\n      )}\n    </div>\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gordonjun.near/widget/dev.search.dao.members.only", "__row_index": 0}