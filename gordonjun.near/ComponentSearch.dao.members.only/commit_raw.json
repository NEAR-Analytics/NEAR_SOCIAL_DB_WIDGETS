{"tx_hash": "4QPWhea14EgAnHqTjRZCTENfcftPMoaYNNXK51be1uX9", "action_id_social": "F7WcvxbzHLwvDErxSn8QH2CYcjzsYMT5PMMZiCNrNPtt-0-widget", "block_id": 94976624, "block_timestamp": "2023-06-25T06:03:04.319Z", "signer_id": "gordonjun.near", "widget_name": "ComponentSearch.dao.members.only", "source_code": "const daoId = props.daoId ?? 'bbclan.near';\r\n\r\nconst allMetadata =\r\n  Social.get(\r\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\r\n    \"final\"\r\n  ) || {};\r\n\r\nlet daoFollowers = Social.keys(`*/graph/follow/${daoId}`, \"final\", {\r\n  return_type: \"BlockHeight\",\r\n  values_only: true,\r\n});\r\ndaoFollowers = Object.keys(daoFollowers || {});\r\nlet keys = Object.keys({});\r\n\r\nfor (let i = 0; i < daoFollowers.length; i++) {\r\n    let userWidgetkeys = Social.keys([`${daoFollowers[i]}/widget/*`], \"final\", { values_only: true })\r\n    keys.concat(userWidgetkeys);\r\n}\r\n\r\nconst requiredTag = props.filterTag;\r\nconst boostedTag = props.boostedTag;\r\nconst inputTerm = props.term;\r\n\r\nconst computeResults = (term) => {\r\n  const terms = (term || \"\")\r\n    .toLowerCase()\r\n    .split(/[^\\w._\\/-]/)\r\n    .filter((s) => !!s.trim());\r\n\r\n  const matchedWidgets = [];\r\n\r\n  const limit = props.limit ?? 30;\r\n\r\n  const MaxSingleScore = 1;\r\n  const MaxScore = MaxSingleScore * 4;\r\n\r\n  const computeScore = (s) => {\r\n    s = s.toLowerCase();\r\n    return (\r\n      terms\r\n        .map((term) => {\r\n          const pos = s.indexOf(term);\r\n          return pos >= 0 ? Math.exp(-pos) : 0;\r\n        })\r\n        .reduce((s, v) => s + v, 0) / terms.length\r\n    );\r\n  };\r\n\r\n  Object.entries(keys).forEach(([accountId, data]) => {\r\n    Object.keys(data.widget).forEach((componentId) => {\r\n      const widgetSrc = `${accountId}/widget/${componentId}`;\r\n      const widgetSrcScore = computeScore(widgetSrc);\r\n      const componentIdScore = computeScore(componentId);\r\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\r\n      const name = metadata.name || componentId;\r\n      if (requiredTag && !(metadata.tags && requiredTag in metadata.tags)) {\r\n        return;\r\n      }\r\n      const boosted =\r\n        boostedTag && metadata.tags && boostedTag in metadata.tags;\r\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\r\n      const nameScore = computeScore(name);\r\n      const tagsScore = Math.min(\r\n        MaxSingleScore,\r\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\r\n      );\r\n      const score =\r\n        (widgetSrcScore + componentIdScore + nameScore + tagsScore) / MaxScore;\r\n      if (score > 0) {\r\n        matchedWidgets.push({\r\n          score,\r\n          accountId,\r\n          widgetName: componentId,\r\n          widgetSrc,\r\n          name,\r\n          tags,\r\n          boosted,\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  matchedWidgets.sort(\r\n    (a, b) => (b.boosted ? 2 : 0) + b.score - (a.boosted ? 2 : 0) - a.score\r\n  );\r\n  const result = matchedWidgets.slice(0, limit);\r\n\r\n  State.update({\r\n    term,\r\n    result,\r\n  });\r\n\r\n  if (props.onChange) {\r\n    props.onChange({ term, result });\r\n  }\r\n};\r\n\r\nif (props.term && props.term !== state.oldTerm) {\r\n  State.update({\r\n    oldTerm: props.term,\r\n  });\r\n  if (props.term !== state.term) {\r\n    computeResults(props.term);\r\n  }\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"input-group\">\r\n      <input\r\n        type=\"text\"\r\n        className={`form-control ${state.term ? \"border-end-0\" : \"\"}`}\r\n        value={state.term ?? \"\"}\r\n        onChange={(e) => computeResults(e.target.value)}\r\n        placeholder={props.placeholder ?? `\ud83d\udd0d Search Components`}\r\n      />\r\n\r\n      {state.term && (\r\n        <button\r\n          className=\"btn btn-outline-secondary border border-start-0\"\r\n          type=\"button\"\r\n          onClick={() => computeResults(\"\")}\r\n        >\r\n          <i className=\"bi bi-x\"></i>\r\n        </button>\r\n      )}\r\n    </div>\r\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gordonjun.near/widget/ComponentSearch.dao.members.only", "__row_index": 1}