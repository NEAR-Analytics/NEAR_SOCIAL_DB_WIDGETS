{"tx_hash": "3g9X6UW7Vrr7m7hvidp1jXFiUdBEqpbiUD3XHASAwNoj", "action_id_social": "7z8rN24eSnkorh8EsFvMVonu4TCyz4KqYezJBr65CGZ5-0-widget", "block_id": 94998343, "block_timestamp": "2023-06-25T12:47:37.640Z", "signer_id": "a_liutiev.near", "widget_name": "ETHWaterloo", "source_code": "State.init({\n  value: \"submit\",\n  inputSubmitLabel: \"Type Message\",\n  web3connectLabel: \"Connect Wallet\",\n  emptyMessage: \"start the thread boss...\",\n  walletMessage: \"View wallet data on AirStack\",\n  walletAddress: \"\",\n\n  messageCount: 0,\n  inputValue: \"\",\n  submitMessage: \"\",\n  messageArray: [],\n  address: undefined,\n  sender: undefined,\n  balance,\n  undefined,\n\n  tokenData: \"\",\n});\n\nconst API_URL =\n  \"https://us-central1-ethglobal-wat23-ai-hack.cloudfunctions.net/helloWorld\";\n\nconst AIR_API_KEY = \"6e4d51488a7546c5b9ee7a048ec3fc57\";\nconst AIR_API = \"https://api.airstack.xyz/gql\";\n\nconst value = state.value || \"n/a\";\nconst web3connectLabel = state.web3connectLabel || \"n/a\";\nconst inputSubmitLabel = state.inputSubmitLabel || \"n/a\";\nconst messageCount = state.messageCount || 0;\nconst messageArray = state.messageArray || [];\nconst emptyMessage = state.emptyMessage || \"\";\nconst walletMessage = state.walletMessage || \"\";\nconst sender = state.sender || \"Alex Astrum\";\nconst walletAddress = state.walletAddress;\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0], walletAddress: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 2) +\n        \"..\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nconst handleButtonClick = async () => {\n  if (state.submitMessage !== \"\" && state.sender !== undefined) {\n    State.update({\n      messageCount: state.messageCount + 1,\n      messageArray: [\n        ...state.messageArray,\n        {\n          id: state.messageCount,\n          sender: getSender(),\n          date: new Date().toLocaleTimeString(),\n          payload: state.submitMessage,\n        },\n      ],\n    });\n\n    fetchMessage().then((res) => {\n      const data = res.body;\n      State.update({\n        messageCount: state.messageCount + 1,\n        messageArray: [\n          ...state.messageArray,\n          {\n            id: state.messageCount,\n            sender: \"AI\",\n            date: new Date().toLocaleTimeString(),\n            payload: data.msg,\n          },\n        ],\n      });\n    });\n  } else if (state.submitMessage !== \"\") {\n    State.update({\n      emptyMessage: \"Ever thought of signing in...?\",\n    });\n  } else if (state.sender !== undefined) {\n    State.update({\n      emptyMessage: \"Maybe you should try submitting something...\",\n    });\n  }\n};\n\nconst fetchAccountBalances = () => {\n  fetchBalanceRequest().then((res) => {\n    let data = res.body;\n    data = data.data.TokenBalances.TokenBalance;\n    let total = 0;\n    let tokenData = data.map(\n      ({ token, formattedAmount, tokenType }) =>\n        ` \n         - Token: ${\n           token.symbol\n         } - Token Type: ${tokenType} - Amount: ${formattedAmount.toFixed(2)}`\n    );\n\n    State.update({\n      messageCount: state.messageCount + 1,\n      messageArray: [\n        ...state.messageArray,\n        {\n          id: state.messageCount,\n          sender: \"AI\",\n          date: new Date().toLocaleTimeString(),\n          payload:\n            `Here's more advanced token data from your wallet:\n            ` + tokenData,\n        },\n      ],\n    });\n  });\n};\n\nconst fetchTokenData = () => {\n  fetchBalanceRequest().then((res) => {\n    let data = res.body;\n    console.log(data);\n    data = data.data.TokenBalances.TokenBalance;\n\n    let tokenData = data.map(\n      ({ tokenType, formattedAmount, tokenAddress }) =>\n        `\n        - Token Type: ${tokenType}, Amount: ${formattedAmount.toFixed(\n          2\n        )}, Token Address: ${\n          tokenAddress.substring(0, 4) + \"..\" + tokenAddress.slice(-4)\n        }`\n    );\n\n    State.update({\n      messageCount: state.messageCount + 1,\n      messageArray: [\n        ...state.messageArray,\n        {\n          id: state.messageCount,\n          sender: \"AI\",\n          date: new Date().toLocaleTimeString(),\n          payload: `Here's the token data from your wallet:\n            ${tokenData}`,\n        },\n      ],\n    });\n  });\n};\n\nconst fetchWalletData = () => {\n  fetchWalletDataRequest().then((res) => {\n    let data = res.body;\n    data = data.data.Wallet.addresses;\n    let walletData = data[0];\n    State.update({\n      messageCount: state.messageCount + 1,\n      messageArray: [\n        ...state.messageArray,\n        {\n          id: state.messageCount,\n          sender: \"AI\",\n          date: new Date().toLocaleTimeString(),\n          payload: `Here are your wallet details: \n          \n          - ${walletData}`,\n        },\n      ],\n    });\n  });\n};\n\nconst fetchBalanceRequest = async () => {\n  let data =\n    '{\"query\":\"query BalanceCheck {\\\\n  TokenBalances(\\\\n    input: {filter: {owner: {_in: [\\\\\"' +\n    walletAddress +\n    '\\\\\"]}}, blockchain: ethereum, limit: 10}\\\\n  ) {\\\\n    TokenBalance {\\\\n      tokenAddress\\\\n      amount\\\\n      formattedAmount\\\\n      tokenType\\\\n      token {\\\\n        name\\\\n        symbol\\\\n      }\\\\n    }\\\\n  }\\\\n}\",\"operationName\":\"BalanceCheck\"}';\n\n  return asyncFetch(AIR_API, {\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: AIR_API_KEY,\n    },\n    method: \"POST\",\n  });\n};\n\nconst fetchWalletDataRequest = async () => {\n  let data =\n    '{\"query\":\"query wallets {\\\\n  Wallet(input: {identity: \\\\\"' +\n    walletAddress +\n    '\\\\\", blockchain: ethereum}) {\\\\n    addresses\\\\n  }\\\\n}\",\"operationName\":\"wallets\"}';\n  return asyncFetch(AIR_API, {\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: AIR_API_KEY,\n    },\n    method: \"POST\",\n  });\n};\n\nconst fetchMessage = async () => {\n  let data = state.messageArray[messageCount];\n  data = JSON.stringify(data);\n  return asyncFetch(API_URL, {\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n  });\n};\n\n// message hander\nconst handleInputChange = (e) => {\n  State.update({\n    submitMessage: e.target.value,\n  });\n};\n\nreturn (\n  <div class=\"card\">\n    <div class=\"card-header d-flex justify-content-between align-items-center p-3\">\n      <h5 className=\"mb-0\">Chat messages</h5>\n      <div className=\"d-flex flex-row align-items-center\">\n        <span className=\"badge bg-secondary me-3 p-2\">\n          {state.messageCount}\n        </span>\n        <Widget\n          src=\"a_liutiev.near/widget/button_web3connect\"\n          props={{ web3connectLabel }}\n        />\n      </div>\n    </div>\n\n    <Widget\n      src=\"a_liutiev.near/widget/display_messages\"\n      props={{ emptyMessage, messageArray, sender }}\n    />\n    {messageCount > 0 ? (\n      <div class=\"d-flex justify-content-between align-items-center p-3 mb-0\">\n        <div className=\"d-flex flex-row align-items-center\">\n          <button class=\"btn btn-light me-2\" onClick={fetchTokenData}>\n            Token Stats\n          </button>\n          <button class=\"btn btn-light me-2\" onClick={fetchWalletData}>\n            Wallet Details\n          </button>\n          <button class=\"btn btn-light\" onClick={fetchAccountBalances}>\n            Account Balance Check\n          </button>\n        </div>\n      </div>\n    ) : (\n      <></>\n    )}\n    <div class=\"card-footer text-muted justify-content-start align-items-center p-3\">\n      <Widget\n        src=\"a_liutiev.near/widget/input_submit\"\n        props={{\n          value,\n          inputSubmitLabel,\n          handleButtonClick,\n          handleInputChange,\n        }}\n      />\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/a_liutiev.near/widget/ETHWaterloo", "__row_index": 10}