{"tx_hash": "ANRt7Z1xTWkNPGo719YHQgJzjwnExB5eybUUtM1rBsE7", "action_id_social": "DjaC4SzLsVp3DsHvvnRF3rDJ6oWx7iczusZEpp8TtBLf-0-widget", "block_id": 80606521, "block_timestamp": "2022-12-14 04:31:36.714", "signer_id": "silkking.near", "widget_name": "voteWithText", "source_code": "if (!props.isPreview && !props.blockHeight) {\n  return \"Property blockHeight not set\";\n}\n\n// Utility function\nfunction getBlockTimestamp(blockHeight) {\n  // It is stored in nanoseconds which is 1e-6 miliseconds\n  return Near.block(blockHeight).header.timestamp / 1e6;\n}\n\n// Discards answers that were posted after question's end date\nfunction getTimeRelatedValidAnswers(answers) {\n  let low = 0;\n  let high = answers.length - 1;\n  const questionEndTimestamp = questionParams.value.endTimestamp;\n  let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\n  if (endBlockTimestamp < questionEndTimestamp) return answers;\n  // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\n  let tries = 10;\n  while (high - low > 1 && tries > 0) {\n    tries--;\n    let curr = Math.floor((high - low) / 2) + low;\n    let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\n    if (currBlockTimestamp < questionEndTimestamp) {\n      low = curr;\n    } else {\n      high = curr;\n    }\n  }\n  // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\n  return answers.slice(0, high);\n}\n\nlet isPreview = props.isPreview;\nconst questionBlockHeight = props.blockHeight;\nState.init({ vote: \"\", showErrorsInForm: false });\n\nconst answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\nconst answersToThisQuestion = answers.filter(\n  (a) => a.value.questionBlockHeight == questionBlockHeight\n);\nconst onTimeAnswersToThisQuestion = getTimeRelatedValidAnswers(\n  answersToThisQuestion\n);\nlet usersThatAlreadyReplied = [];\nlet validAnswersToThisQuestion = onTimeAnswersToThisQuestion.filter((a) => {\n  const didUserAlreadyVoted = usersThatAlreadyReplied.includes(a.accountId);\n  if (!didUserAlreadyVoted) {\n    usersThatAlreadyReplied.push(a.accountId);\n  }\n  return !didUserAlreadyVoted;\n});\n\nlet userVote;\nconst loggedAccountId = context.accountId ?? \"\";\nfunction userHasVoted() {\n  return (\n    answersToThisQuestion.find((a) => a.accountId == loggedAccountId) !=\n    undefined\n  );\n}\nlet hasVoted = userHasVoted();\n\nconst getPublicationParams = () => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"answer-v3.0.1\",\n          value: {\n            answer: state.vote,\n            questionBlockHeight: props.blockHeight,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nconst isValidInput = () => {\n  let result = state.vote != \"\";\n  return result && !isPreview;\n};\n\nconst renderAnswers = () => {\n  console.log(2, validAnswersToThisQuestion);\n  return validAnswersToThisQuestion.map((answer) => {\n    return (\n      <Widget\n        src=\"silkking.near/widget/answer_poll-comment-container\"\n        props={{ blockHeight: answer.blockHeight }}\n      />\n    );\n  });\n};\nconsole.log(1);\nreturn (\n  <div>\n    {hasVoted ? (\n      <p\n        className=\"text-primary\"\n        style={{ textAlign: \"center\", fontWeight: \"500\" }}\n      >\n        You have already voted\n      </p>\n    ) : (\n      <div>\n        <textarea\n          value={state.vote}\n          onChange={(e) => State.update({ vote: e.target.value })}\n          style={{ width: \"100%\" }}\n        />\n\n        {isValidInput() ? (\n          <CommitButton\n            className=\"my-2 btn btn-primary\"\n            data={getPublicationParams()}\n          >\n            Done\n          </CommitButton>\n        ) : (\n          <button\n            className=\"my-2 btn btn-primary\"\n            onClick={() => State.update({ showErrorsInForm: true })}\n          >\n            Done\n          </button>\n        )}\n      </div>\n    )}\n    {renderAnswers()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/voteWithText"}