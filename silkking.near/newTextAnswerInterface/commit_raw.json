{"tx_hash": "9AVv9iq4xuYwVpmuxBfgRt5gG9vZ8Q1oVyCwQAAWRZqn", "action_id_social": "JADg7dzsyWHmkjwjiHe9KjR4Wj8F4Y5FfHV9c4kzJKJG-0-widget", "block_id": 80416290, "block_timestamp": "2022-12-11 14:51:35.939", "signer_id": "silkking.near", "widget_name": "newTextAnswerInterface", "source_code": "function validateProps(props) {\n  let errors = [];\n  if (!props.accountId) errors.push(\"Props don't contain accountId key\");\n  if (!props.blockHeight) errors.push(\"Props don't contain blockHeight key\");\n  if (!props.value) {\n    errors.push(\"Props don't contain value key\");\n  } else {\n    if (!props.value.answers)\n      errors.push(\"Prop value doesn't contain answers key\");\n  }\n  return errors;\n}\n\nfunction getBlockTimestamp(blockHeight) {\n  // It is stored in nanoseconds which is 1e-6 miliseconds\n  console.log(\"B\", Near.block(blockHeight).header.timestamp);\n  return Near.block(blockHeight).header.timestamp / 1e6;\n}\n\nfunction timeAgo(diffSec) {\n  return diffSec < 60000\n    ? `${(diffSec / 1000) | 0} seconds agoa`\n    : diffSec < 3600000\n    ? `${(diffSec / 60000) | 0} minutes ago`\n    : diffSec < 86400000\n    ? `${(diffSec / 3600000) | 0} hours ago`\n    : `${(diffSec / 86400000) | 0} days ago`;\n}\n\nconsole.log(timeAgo(278802));\n\nconst propErrors = validateProps(props);\nif (propErrors.length > 0) {\n  return (\n    <>\n      {propErrors.map((e) => (\n        <div>{e}</div>\n      ))}\n    </>\n  );\n}\n\nlet questionParams = props.value;\n\nconst profileLink = (c) => (\n  <a\n    className=\"text-decoration-none link-dark\"\n    href={`#/mob.near/widget/ProfilePage?accountId=${props.accountId}`}\n  >\n    {c}\n  </a>\n);\n\nfunction makeAnswerAccIdShorter(accId) {\n  if (accId.length > 18) {\n    return accId.slice(0, 18) + \"...\";\n  }\n  return accId;\n}\n\nreturn (\n  <>\n    {questionParams.answers.length == 0\n      ? \"This question does not have any answers yet. Be the first one!\"\n      : questionParams.answers.map((answerParams) => {\n          if (!answerParams.accountId) return \"\";\n          let profile = Social.getr(`${answerParams.accountId}/profile`);\n          return (\n            <div>\n              <div\n                className=\"d-flex align-items-start\"\n                style={{\n                  padding: \"1.5rem 0\",\n                  borderBottom: \"1px solid #e9e9e9\",\n                }}\n              >\n                <div>\n                  {profileLink(\n                    <Widget\n                      src=\"mob.near/widget/ProfileImage\"\n                      props={{ accountId: answerParams.accountId }}\n                    />\n                  )}\n                </div>\n                <div className=\"d-flex\">\n                  <div className=\"flex-grow-1 me-1 text-truncate\">\n                    {profileLink(\n                      <>\n                        <p\n                          style={{ margin: \"0 2px 0 2px\" }}\n                          className=\"fw-bold\"\n                        >\n                          {profile.name}\n                        </p>\n                        <p\n                          style={{ margin: \"0 2px 0 2px\" }}\n                          className=\"text-secondary\"\n                        >\n                          @{makeAnswerAccIdShorter(answerParams.accountId)}\n                        </p>\n                      </>\n                    )}\n                  </div>\n                  <div>\n                    <small className=\"ps-1 text-nowrap text-muted ms-auto\">\n                      <i className=\"bi bi-clock me-1\"></i>\n                      {timeAgo(\n                        Date.now() - getBlockTimestamp(props.blockHeight)\n                      )}\n                    </small>\n                  </div>\n                </div>\n              </div>\n              <textarea\n                className=\"w-100\"\n                value={answerParams.value.answer}\n                readonly\n              />\n            </div>\n          );\n        })}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/newTextAnswerInterface"}