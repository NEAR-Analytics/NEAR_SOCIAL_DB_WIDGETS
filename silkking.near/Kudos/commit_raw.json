{"tx_hash": "D1edbxrmcgyhj5pZhjcY5jRzztipys5YGpLfJ8nLPP6g", "action_id_social": "4B77sB8zirPoYY6tyL3ymimtECocuC1LeFzMDp3j3Sk7-0-widget", "block_id": 89744156, "block_timestamp": "2023-04-16 22:02:56.926", "signer_id": "silkking.near", "widget_name": "Kudos", "source_code": "State.init({\n  input: \"\",\n  url: \"\",\n  onChange: ({ content }) => {\n    State.update({ content });\n  },\n});\nconst widgetOwner = \"silkking.near\";\nconst widgetName = \"Kudos\";\nconst widgetPath = `webuidl.near/widget/${widgetName}`;\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\n\nconst card = {\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\n  border: \"1px solid black\",\n  borderRadius: \"5px\",\n  textAlign: \"center\",\n  color: \"white\",\n  padding: \"10px\",\n};\n\nconst button = {\n  borderRadius: \"5px\",\n  margin: \"5px 0\",\n  padding: \"8px\",\n  textAlign: \"center\",\n  background: \"linear-gradient(to left, #FFD50D, #4498E0)\",\n  border: \"2px solid black\",\n  fontWeight: \"bold\",\n};\n\nconst imgWH = {\n  width: \"25px\",\n  height: \"25px\",\n};\n\nconst urlPrefix = \"https://\";\nconst accountId = props.accountId ?? \"*\";\n\nconst data = Social.index(\"kudo\", \"answer\");\nif (!data) {\n  return \"Loading answers\";\n}\nconst upvotes = Social.index(\"kudo\", \"upvote\");\nif (!upvotes) {\n  return \"Loading upvotes\";\n}\n\nconst commentAnswers = Social.index(\"kudo\", \"commentAnswers\");\nif (!commentAnswers) {\n  return \"Loading commentAnswers\";\n}\n\nconst blackList = [\"webuidl.near\"];\nconst whiteListData = data.filter((d) => !blackList.includes(d.accountId));\nconst whiteListComments = commentAnswers.filter(\n  (d) => !blackList.includes(d.accountId)\n);\nlet sortedData = whiteListData.sort(\n  (d1, d2) => d2.blockHeight - d1.blockHeight\n);\n\nsortedData.forEach((_, i) => {\n  sortedData[i].value.comments = [];\n  sortedData[i].value.upvotes = 0;\n});\n\nlet upvotesMap = {};\nfor (let i = 0; i < upvotes.length; i++) {\n  const vote = upvotes[i];\n  const upvoteBlockHeight = vote.value.blockHeight;\n  if (!upvotesMap[upvoteBlockHeight]) {\n    upvotesMap[upvoteBlockHeight] = 0;\n  }\n  upvotesMap[upvoteBlockHeight] += 1;\n}\n\nwhiteListComments.forEach((c) => {\n  const dataIndex = sortedData.findIndex(\n    (d) => d.blockHeight == c.value.blockHeight\n  );\n  if (dataIndex === -1) return;\n  sortedData[dataIndex].value.comments.push(c);\n});\n\nupvotes.forEach((upvote) => {\n  const dataIndex = sortedData.findIndex(\n    (d) => d.blockHeight == upvote.value.blockHeight\n  );\n  if (dataIndex === -1) return;\n  sortedData[dataIndex].value.upvotes += 1;\n});\n\nconst finalData = sortedData;\n\nconsole.log(1, finalData[0]);\n\n/* BEGIN Common.componse  */\nconst composeData = () => {\n  const data = {\n    post: {\n      main: JSON.stringify(state.content),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const item = {\n    type: \"social\",\n    path: `${context.accountId}/post/main`,\n  };\n\n  const notifications = state.extractMentionNotifications(\n    state.content.text,\n    item\n  );\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  const hashtags = state.extractHashtags(state.content.text);\n\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n\n  return data;\n};\n\n/* END Common.componse  */\n\n/* BEGIN CommentButton  */\n\n/* END CommentButton  */\n\n/* START CommentBox */\nconst RenderAllCommentAnswerBox = (d) => {\n  return d.value.comments.map((c) => {\n    return (\n      <div style={{ ...card, marginLeft: \"30px\" }}>\n        <Widget\n          src=\"mob.near/widget/ProfileImage\"\n          props={{\n            accountId: c.accountId,\n            className: \"d-inline-block\",\n            style: { width: \"1.5em\", height: \"1.5em\" },\n          }}\n        />\n        <a href={`#/mob.near/widget/ProfilePage?accountId=${c.accountId}`}>\n          {c.accountId}\n        </a>\n        I BuiDL... <b>{c.value.commentAnswer}&nbsp;&nbsp;&nbsp;</b>\n        <Widget\n          src=\"mob.near/widget/FollowButton\"\n          props={{ accountId: c.accountId }}\n        />\n      </div>\n    );\n  });\n};\n\n/* END CommentBox  */\n\n/* START KudoBox */\nconst RenderKudoBox = (d) => {\n  return (\n    <>\n      <Widget\n        src={`${widgetOwner}/widget/Kudos.Post`}\n        props={{ content: d, upvotes }}\n      />\n\n      {RenderAllCommentAnswerBox(d)}\n    </>\n  );\n};\n/* END KudoBox  */\n\nreturn (\n  <div>\n    <div className=\"d-inline-block\" style={{ width: \"10em\", height: \"10em\" }}>\n      <Widget\n        src=\"mob.near/widget/Image\"\n        props={{\n          image: metadata.image,\n          className: \"w-100 h-100 shadow\",\n          style: { objectFit: \"cover\", borderRadius: \"2em\" },\n          thumbnail: false,\n          fallbackUrl:\n            \"https://ipfs.near.social/ipfs/bafkreido7gsk4dlb63z3s5yirkkgrjs2nmyar5bxyet66chakt2h5jve6e\",\n          alt: widgetName,\n        }}\n      />\n    </div>\n    <br />\n    <br />\n    <p>An accolade, a Thank You, a Job Well Done. Give em a Kudo!\ud83d\udc4f </p>\n    <Widget\n      src={`${widgetOwner}/widget/Common.Compose`}\n      props={{\n        id: \"main\",\n        textAreaOnly: true,\n        onChange: state.onChange,\n        onHelper: ({ extractMentionNotifications, extractHashtags }) => {\n          State.update({ extractMentionNotifications, extractHashtags });\n        },\n      }}\n    />\n    {state.content && (\n      <div className=\"mt-3\">\n        <Widget\n          src=\"mob.near/widget/MainPage.Post\"\n          props={{\n            accountId: context.accountId,\n            content: state.content,\n            blockHeight: \"now\",\n            onChange: state.onChange,\n          }}\n        />\n      </div>\n    )}\n    <div className=\"d-flex flex-column w-75 my-3 justify-content-around\">\n      <p>Url:</p>\n      <textarea\n        style={{\n          backgroundColor: \"#fafafa\",\n          border: \"1px solid #fafafa\",\n          borderRadius: \"0.375rem\",\n        }}\n        rows=\"1\"\n        value={state.url}\n        onChange={(e) => {\n          State.update({ url: e.target.value });\n        }}\n      />\n    </div>\n    <CommitButton\n      style={button}\n      data={{\n        index: {\n          kudo: JSON.stringify(\n            {\n              key: \"post\",\n              value: {\n                answer: state.content.text,\n                url: state.url,\n              },\n            },\n            undefined,\n            0\n          ),\n        },\n      }}\n      onCommit={() => {\n        State.update({\n          reloadData: true,\n        });\n      }}\n    >\n      Kudos!\n    </CommitButton>\n    <br />\n    <br />\n    <div>\n      {sortedData ? sortedData.map((d) => RenderKudoBox(d)) : \"Loading...\"}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/Kudos"}