{"tx_hash": "EbPyN7wvesvKTajjscnt6WhkTPKsnT3q15UZh2YUyJ2a", "action_id_social": "Q1w1noiCGyhFCsGbiSSDgZxzJhv255QvNq6KnSBZGgY-0-widget", "block_id": 87221082, "block_timestamp": "2023-03-13 18:55:14.457", "signer_id": "silkking.near", "widget_name": "Kudos", "source_code": "State.init({\n  input: \"\",\n  url: \"\",\n  displayedCommentBoxes: [],\n  commentTextMap: [],\n  onChange: ({ content }) => {\n    State.update({ content });\n  },\n});\nconst widgetOwner = \"mob.near\";\nconst widgetName = \"Kudos\";\nconst widgetPath = `webuidl.near/widget/${widgetName}`;\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\n\nconst card = {\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\n  border: \"1px solid black\",\n  borderRadius: \"5px\",\n  textAlign: \"center\",\n  color: \"white\",\n  padding: \"10px\",\n};\n\nconst button = {\n  borderRadius: \"5px\",\n  margin: \"5px 0\",\n  padding: \"8px\",\n  textAlign: \"center\",\n  background: \"linear-gradient(to left, #FFD50D, #4498E0)\",\n  border: \"2px solid black\",\n  fontWeight: \"bold\",\n};\n\nconst imgWH = {\n  width: \"25px\",\n  height: \"25px\",\n};\n\nconst urlPrefix = \"https://\";\nconst accountId = props.accountId ?? \"*\";\n\nconst data = Social.index(\"kudo\", \"answer\");\nif (!data) {\n  return \"Loading answers\";\n}\nconst upvotes = Social.index(\"kudo\", \"upvote\");\nif (!upvotes) {\n  return \"Loading upvotes\";\n}\nconst blackList = [\"webuidl.near\"];\nconst whiteListData = data.filter((d) => !blackList.includes(d.accountId));\nconst sortedData = whiteListData.sort(\n  (d1, d2) => d2.blockHeight - d1.blockHeight\n);\n\nlet upvotesMap = {};\nfor (let i = 0; i < upvotes.length; i++) {\n  const vote = upvotes[i];\n  const upvoteBlockHeight = vote.value.blockHeight;\n  if (!upvotesMap[upvoteBlockHeight]) {\n    upvotesMap[upvoteBlockHeight] = 0;\n  }\n  upvotesMap[upvoteBlockHeight] += 1;\n}\nconsole.log(upvotesMap);\n\nconst finalData = sortedData;\n\n/* BEGIN Common.componse  */\nconst composeData = () => {\n  const data = {\n    post: {\n      main: JSON.stringify(state.content),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const item = {\n    type: \"social\",\n    path: `${context.accountId}/post/main`,\n  };\n\n  const notifications = state.extractMentionNotifications(\n    state.content.text,\n    item\n  );\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  const hashtags = state.extractHashtags(state.content.text);\n\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n\n  return data;\n};\n\n/* END Common.componse  */\n\n/* BEGIN CommentButton  */\n\nconst startCommentTo = (blockHeight) => {\n  console.log(\"startCommentTo\");\n  let cm = state.displayedCommentBoxes;\n  cm.push(blockHeight);\n  console.log(\"cm\", cm);\n  State.update({ displayedCommentBoxes: cm });\n  console.log(123);\n};\n\nconst RenderCommentInput = (blockHeight) => {\n  console.log(\"RenderCommentInput\");\n  let cm = state.displayedCommentBoxes;\n  console.log(cm, blockHeight);\n  return cm && cm.includes(blockHeight) ? (\n    <div\n      style={{\n        margin: \"10px 0px\",\n      }}\n    >\n      <textarea\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n          width: \"50%\",\n          verticalAlign: \"middle\",\n        }}\n        rows=\"2\"\n        value={state.commentTextMap[blockHeight]}\n        onChange={(e) => {\n          state.commentTextMap[blockHeight] = e.target.value;\n        }}\n      />\n      <CommitButton\n        style={button}\n        data={{\n          index: {\n            kudo: JSON.stringify(\n              {\n                key: \"commentAnswers\",\n                value: {\n                  commentAnswer: state.commentTextMap[blockHeight],\n                  blockHeight: blockHeight,\n                },\n              },\n              undefined,\n              0\n            ),\n          },\n        }}\n        onCommit={() => {\n          let ctm = state.commentTextMap[blockHeight];\n          ctm[blockHeight] = null;\n          State.update({\n            commentTextMap: ctm,\n            reloadData: true,\n          });\n        }}\n      >\n        Comment 1\n      </CommitButton>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\n/* END CommentButton  */\n\nreturn (\n  <div>\n    <div className=\"d-inline-block\" style={{ width: \"10em\", height: \"10em\" }}>\n      <Widget\n        src=\"mob.near/widget/Image\"\n        props={{\n          image: metadata.image,\n          className: \"w-100 h-100 shadow\",\n          style: { objectFit: \"cover\", borderRadius: \"2em\" },\n          thumbnail: false,\n          fallbackUrl:\n            \"https://ipfs.near.social/ipfs/bafkreido7gsk4dlb63z3s5yirkkgrjs2nmyar5bxyet66chakt2h5jve6e\",\n          alt: widgetName,\n        }}\n      />\n    </div>\n    <br />\n    <br />\n    <p>An accolade, a Thank You, a Job Well Done. Give em a Kudo!\ud83d\udc4f </p>\n    <Widget\n      src={`${widgetOwner}/widget/Common.Compose`}\n      props={{\n        onChange: state.onChange,\n        onHelper: ({ extractMentionNotifications, extractHashtags }) => {\n          State.update({ extractMentionNotifications, extractHashtags });\n        },\n        composeButton: (onCompose) => (\n          <CommitButton\n            disabled={!state.content}\n            force\n            className=\"btn btn-dark rounded-3\"\n            data={composeData}\n            onCommit={() => {\n              onCompose();\n            }}\n          >\n            Kudos!\n          </CommitButton>\n        ),\n      }}\n    />\n    {state.content && (\n      <div className=\"mt-3\">\n        <Widget\n          src=\"mob.near/widget/MainPage.Post\"\n          props={{\n            accountId: context.accountId,\n            content: state.content,\n            blockHeight: \"now\",\n          }}\n        />\n      </div>\n    )}\n    <div className=\"d-flex flex-column w-75 justify-content-around\">\n      <textarea\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        rows=\"2\"\n        value={state.input}\n        onChange={(e) => {\n          State.update({ input: e.target.value });\n        }}\n      />\n      <p>Url:</p>\n      <textarea\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        rows=\"1\"\n        value={state.url}\n        onChange={(e) => {\n          State.update({ url: e.target.value });\n        }}\n      />\n    </div>\n    <CommitButton\n      style={button}\n      data={{\n        index: {\n          kudo: JSON.stringify(\n            {\n              key: \"answer\",\n              value: {\n                answer: state.input,\n                url: state.url,\n              },\n            },\n            undefined,\n            0\n          ),\n        },\n      }}\n      onCommit={() => {\n        State.update({\n          reloadData: true,\n        });\n      }}\n    >\n      Kudos!\n    </CommitButton>\n    <br />\n    <br />\n    <div>\n      {sortedData\n        ? sortedData.map((d) => (\n            <div style={card}>\n              <Widget\n                src=\"mob.near/widget/ProfileImage\"\n                props={{\n                  accountId: d.accountId,\n                  className: \"d-inline-block\",\n                  style: { width: \"1.5em\", height: \"1.5em\" },\n                }}\n              />\n              <a\n                href={`#/mob.near/widget/ProfilePage?accountId=${d.accountId}`}\n              >\n                {d.accountId}\n              </a>\n              I BuiDL... <b>{d.value.answer}&nbsp;&nbsp;&nbsp;</b>\n              <b>\n                <a href={`${urlPrefix}${d.value.url}`} target=\"_blank\">\n                  {d.value.url}\n                </a>\n                &nbsp;&nbsp;&nbsp;\n              </b>\n              <Widget\n                src=\"mob.near/widget/CommentButton\"\n                props={{\n                  onClick: () => startCommentTo(d.blockHeight),\n                }}\n              />\n              <Widget\n                src=\"mob.near/widget/FollowButton\"\n                props={{ accountId: d.accountId }}\n              />\n              {RenderCommentInput(Number(d.blockHeight))}\n              <div>\n                <CommitButton\n                  data={{\n                    index: {\n                      kudo: JSON.stringify(\n                        {\n                          key: \"upvote\",\n                          value: {\n                            blockHeight: d.blockHeight,\n                          },\n                        },\n                        undefined,\n                        0\n                      ),\n                    },\n                  }}\n                >\n                  Upvote\n                </CommitButton>\n                <span>\n                  {upvotesMap[d.blockHeight] ? upvotesMap[d.blockHeight] : 0}\n                </span>\n              </div>\n            </div>\n          ))\n        : \"Loading...\"}\n    </div>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/Kudos", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.great-job": NaN, "metadata.tags.kudo": NaN, "metadata.tags.lets-go": NaN, "metadata.tags.well-done": NaN, "metadata": NaN}