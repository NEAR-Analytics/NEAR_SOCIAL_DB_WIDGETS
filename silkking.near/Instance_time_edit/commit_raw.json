{"tx_hash": "EzGexBwG9UgwR4pNEA78W3aPzSr31MRApry4RPK82ahf", "action_id_social": "CH2twL7JYkVUPBBuJPmKnFSKzVUpjmuMwrCm223xMF5R-0-widget", "block_id": 86983932, "block_timestamp": "2023-03-10 14:05:51.251", "signer_id": "silkking.near", "widget_name": "Instance_time_edit", "source_code": "const data = props.data;\n\nconst updateInstanceTimeState = props.updateInstanceTimeState;\nconst tabs = props.tabs;\n\nvar sortedData = data.sort((d1, d2) => d1.blockHeight - d2.blockHeight);\nvar finalData = {};\n\nconst widgetOwner = \"silkking.near\";\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  const flag1 = data.indexOf(0);\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) {\n      if (\n        !(\n          (flag1 && sortedTimeData[k] == 0) ||\n          (flag1 && sortedTimeData[k] == 168)\n        )\n      )\n        final.push(sortedTimeData[k]);\n    }\n  }\n  return final;\n};\n\nfor (let i = 0; i < sortedData.length; i++) {\n  if (sortedData[i].accountId == context.accountId) {\n    var time_zone = sortedData[i].value._time_zone ?? \"(UTC+00:00) UTC\";\n    var zone = time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\n    var hour = parseInt(zone[0]);\n    var utc_offset = hour + (parseInt(zone[1]) / 60) * ((hour > 0) * 2 - 1);\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n    finalData = {\n      schedule: weeklyData,\n      time_zone: time_zone,\n      is_on: sortedData[i].value._is_on,\n    };\n  }\n}\n\nconst time_zones = [\n  \"(UTC-11:00) Samoa\",\n  \"(UTC-10:00) Hawaii\",\n  \"(UTC-09:00) Alaska\",\n  \"(UTC-08:00) Pacific Time\",\n  \"(UTC-07:00) Arizona\",\n  \"(UTC-06:00) Central America\",\n  \"(UTC-06:00) Saskatchewan\",\n  \"(UTC-05:00) Eastern Time\",\n  \"(UTC-04:00) Atlantic Time\",\n  \"(UTC-04:30) Caracas\",\n  \"(UTC-04:00) Santiago\",\n  \"(UTC-03:30) Newfoundland\",\n  \"(UTC-03:00) Brasilia\",\n  \"(UTC-02:00) Mid-Atlantic\",\n  \"(UTC-01:00) Azores\",\n  \"(UTC+00:00) UTC\",\n  \"(UTC+01:00) Amsterdam\",\n  \"(UTC+02:00) Athens\",\n  \"(UTC+03:00) Baghdad\",\n  \"(UTC+04:00) Abu Dhabi\",\n  \"(UTC+04:30) Kabul\",\n  \"(UTC+05:00) Islamabad\",\n  \"(UTC+05:30) Chennai\",\n  \"(UTC+05:45) Kathmandu\",\n  \"(UTC+06:00) Almaty\",\n  \"(UTC+06:30) Rangoon\",\n  \"(UTC+07:00) Bangkok\",\n  \"(UTC+08:00) Beijing\",\n  \"(UTC+09:00) Irkutsk\",\n  \"(UTC+09:00) Seoul\",\n  \"(UTC+09:00) Tokyo\",\n  \"(UTC+09:30) Adelaide\",\n  \"(UTC+10:00) Guam\",\n  \"(UTC+11:00) Vladivostok\",\n  \"(UTC+12:00) Auckland\",\n  \"(UTC+13:00) Nuku'alofa\",\n];\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  let formated = `${hours}:${mins == 0 ? \"00\" : mins}`;\n\n  return formated;\n};\nState.init({\n  hoveringElement: \"\",\n  _account: \"All\",\n  _time_zone: finalData.time_zone ?? \"(UTC+00:00) UTC\",\n  sectionShown: \"timeZoneSelector\",\n});\n\nconst flex_column = {\n  display: \"flex\",\n  flexDirection: \"column\",\n};\n\nconst set_schedule = () => {\n  State.update({ _time_zone: finalData.time_zone ?? \"(UTC+00:00) UTC\" });\n};\nreturn (\n  <div\n    className=\"px-4\"\n    style={{\n      backgroundColor: \"white\",\n      borderRadius: \"28px\",\n      margin: \"2rem auto 1rem auto\",\n      width: \"60%\",\n    }}\n  >\n    <div className=\"w-100 d-flex flex-row justify-content-between align-items-center\">\n      <h2\n        style={{\n          padding: \"2rem\",\n          margin: \"2rem 0 0.5rem 0\",\n          fontWeight: \"700\",\n        }}\n      >\n        {tabs.NEW_SCHEDULE.text}\n      </h2>\n      <i\n        className=\"bi bi-x-lg\"\n        style={{\n          right: \"2rem\",\n          top: \"2rem\",\n          cursor: \"pointer\",\n        }}\n        onClick={() => {\n          updateInstanceTimeState({ showAbortScheduleCreation: true });\n        }}\n      ></i>\n    </div>\n\n    <div className=\"pt-4\" style={{ margin: \"0 auto\" }}>\n      <span\n        style={\n          state.sectionShown == \"timeZoneSelector\"\n            ? {\n                ...styleUnderline,\n                color: \"#353A40\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n                marginRight: \"1rem\",\n              }\n            : {\n                color: \"#767B8E\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n                marginRight: \"1rem\",\n              }\n        }\n        onClick={() => {\n          State.update({ sectionShown: \"timeZoneSelector\" });\n        }}\n      >\n        <i className=\"bi bi-square-fill\"></i> Time zone\n      </span>\n\n      <span\n        style={\n          state.sectionShown == \"makeSchedule\"\n            ? {\n                ...styleUnderline,\n                color: \"#353A40\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                position: \"relative\",\n                cursor: \"pointer\",\n              }\n            : {\n                color: \"#767B8E\",\n                fontSize: \"0.8rem\",\n                position: \"relative\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n              }\n        }\n        onClick={() => {\n          State.update({ sectionShown: \"makeSchedule\" });\n        }}\n      >\n        <i className=\"bi bi-square-fill\"></i>\n        Shedule\n      </span>\n    </div>\n    {state.sectionShown == \"timeZoneSelector\" ? (\n      <div className=\"pb-4\">\n        <label\n          for=\"pollTitle\"\n          style={{\n            fontSize: \"0.8rem\",\n            letterSpacing: \"-0.01em\",\n            color: \"#474D55\",\n            marginBottom: \"0.3rem\",\n          }}\n        >\n          Select time zone:\n        </label>\n        <select\n          style={{\n            backgroundColor: \"white\",\n            padding: \"0.5rem 1.5rem\",\n            borderRadius: \"0.8rem\",\n            border: \"1.5px solid #E1E9F0\",\n            color: \"#474D55\",\n            letterSpacing: \"-0.01em\",\n            width: \"50%\",\n            display: \"block\",\n          }}\n          className=\"mb-4\"\n          name=\"zones\"\n          id=\"zones\"\n          value={state._time_zone}\n          onChange={(e) => {\n            State.update({ _time_zone: e.target.value });\n          }}\n        >\n          {time_zones.map((zone) => (\n            <option value={zone}>{zone}</option>\n          ))}\n        </select>\n        <div className=\"d-flex flex-row-reverse justify-content-between\">\n          <button\n            style={\n              state.hoveringElement == \"continueButton\"\n                ? {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n                : {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n            }\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"continueButton\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => State.update({ sectionShown: \"makeSchedule\" })}\n          >\n            Continue\n          </button>\n\n          <button\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"cancelNewSchedule\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => {\n              updateInstanceTimeState({ showAbortScheduleCreation: true });\n            }}\n            style={\n              state.hoveringElement == \"cancelNewSchedule\"\n                ? {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n                : {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n            }\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div className=\"align-items-center pt-3 pb-4\">\n        <Widget\n          src={`${widgetOwner}/widget/Instance_time_setting`}\n          props={{\n            data: {\n              schedule: finalData.schedule,\n              time_zone: state._time_zone,\n            },\n            style: { width: \"100%\", height: \"1.5em\" },\n            updateInstanceTimeState,\n            tabs,\n          }}\n          rawCode={show}\n        />\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/Instance_time_edit"}