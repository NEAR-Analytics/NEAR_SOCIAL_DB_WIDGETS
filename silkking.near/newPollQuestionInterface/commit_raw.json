{"tx_hash": "BzX1ZZYtGHxFK3PjrgfN9kqkKhRUtxTi5oNBhtq1pfjw", "action_id_social": "3fovqejR5sLWECcitkD5eDiQa9TjhzSi1hoZJpseg8mr-0-widget", "block_id": 80292646, "block_timestamp": "2022-12-09 23:05:31.700", "signer_id": "silkking.near", "widget_name": "newPollQuestionInterface", "source_code": "State.init({\n  pollTitle: \"\",\n  pollDescription: \"\",\n  pollDiscussionLink: \"\",\n  pollStartDate: \"\",\n  startTime: \"\",\n  pollEndDate: \"\",\n  endTime: \"\",\n  question: \"\",\n  // Treated as a number throws an error\n  pollType: \"0\",\n  choices: [],\n  amountOfChoices: 1,\n  expandOptions: false,\n});\n\n// It is no used currently, but it is intended to be used on renderOptions for generalize. After doing it now, it's throwing an error like \"State should be at top\" and we couldn't figure it out yet how to solve, but it will be fixed later\n\nconst pollTypes = {\n  TEXT: { id: \"0\", value: \"Text\" },\n  MULTIPLE_CHOICE: { id: \"1\", value: \"Multiple choice\" },\n};\n\nconst getPublicationParams = (isDraft) => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"question-v3.0.0\",\n          value: {\n            isDraft,\n            title: state.pollTitle,\n            description: state.description,\n            startTimestamp: getTimestamp(state.pollStartDate, state.startTime),\n            endTimestamp: getTimestamp(state.pollEndDate, state.endTime),\n            questionType: state.pollType,\n            choicesOptions: state.choices,\n            timestamp: Date.now(),\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nconst getTimestamp = (date, time) => new Date(`${date} ${time}`).getTime();\n\nconst validateInput = () => {\n  let errors = [];\n  console.log(state.pollTitle);\n  if (!state.pollTitle) errors.push(\"Title cannot be empty\");\n  if (!state.pollDescription) errors.push(\"Description cannot be empty\");\n  if (!state.pollStartDate) errors.push(\"Start date cannot be empty\");\n  if (!state.startTime) errors.push(\"Start time cannot be empty\");\n  if (!state.pollEndDate) errors.push(\"End date cannot be empty\");\n  if (!state.endTime) errors.push(\"Time cannot be empty\");\n  if (!state.question) errors.push(\"Question cannot be empty\");\n\n  if (\n    state.pollType == pollTypes.MULTIPLE_CHOICE &&\n    state.choices.filter((c) => c != \"\").length < 2\n  ) {\n    errors.push(\"Should have at least 2 options\");\n  }\n  console.log(errors.join(\"\\n\"));\n  return errors.join(\"\\n\");\n};\n\nconst renderTextInputsForChoices = () => {\n  let choices = [];\n\n  for (let i = 0; i < state.amountOfChoices; i++) {\n    choices.push(i);\n  }\n\n  return (\n    <>\n      {choices.map((choiceIndex) => {\n        return (\n          <div className=\"my-3\" key={`choice-input-${choiceIndex}`}>\n            <label>Answer option {choiceIndex + 1}</label>\n            <div className=\"d-flex\">\n              <input\n                style={{\n                  backgroundColor: \"rgb(230, 230, 230)\",\n                  border: \"1px solid #ced4da\",\n                  borderRadius: \"0.375rem\",\n                }}\n                type=\"text\"\n                className=\"w-100 mx-2\"\n                value={state.choices[choiceIndex]}\n                // onChange={handleWriteChoiceInputChange(choiceNumber)}\n              />\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-danger\"\n                // onClick={deleteChoiceHandler(choiceNumber)}\n              >\n                <i className=\"bi bi-x-octagon\"></i>\n              </button>\n            </div>\n          </div>\n        );\n      })}\n      <button\n        type=\"button\"\n        className=\"btn btn-outline-primary d-flex\"\n        style={{ margin: \"0 auto\" }}\n      >\n        <i class=\"bi bi-plus-lg\"></i>\n        <span>Add option</span>\n      </button>\n    </>\n  );\n};\n\nconst renderOptions = () => {\n  return (\n    <div style={{ width: \"max-content\" }}>\n      <input\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          borderRadius: \"0px\",\n          position: \"absolute\",\n          top: \"200%\",\n          minWidth: \"max-content\",\n          width: \"152px\",\n        }}\n        type=\"text\"\n        value=\"Text\"\n        readonly\n        onClick={() => {\n          State.update({ pollType: \"0\", expandOptions: !state.expandOptions });\n        }}\n      />\n\n      <input\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          borderRadius: \"0px\",\n          position: \"absolute\",\n          top: \"300%\",\n          minWidth: \"max-content\",\n          width: \"152px\",\n        }}\n        type=\"text\"\n        value=\"Multiple choice\"\n        readonly\n        onClick={() => {\n          State.update({ pollType: \"1\", expandOptions: !state.expandOptions });\n        }}\n      />\n    </div>\n  );\n};\n\nreturn (\n  <div\n    className=\"d-flex align-items-start justify-content-around pt-4\"\n    style={{ borderRadius: \"0.375rem\", height: \"100%\" }}\n  >\n    <div className=\"d-flex flex-column w-75 justify-content-around\">\n      <label for=\"pollTitle\">Title</label>\n      <input\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        type=\"text\"\n        className=\"mb-2\"\n        id=\"pollTitle\"\n        value={state.pollTitle}\n        onChange={(e) => {\n          State.update({ pollTitle: e.target.value });\n        }}\n      />\n\n      <label for=\"pollDescription\" className=\"mt-2\">\n        Description\n      </label>\n      <textarea\n        id=\"pollDescription\"\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        rows=\"3\"\n        value={state.pollDescription}\n        onChange={(e) => {\n          State.update({ pollDescription: e.target.value });\n        }}\n      ></textarea>\n\n      <label for=\"pollDiscussionLink\" className=\"mt-3\">\n        Discussion link (optional)\n      </label>\n      <input\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        type=\"text\"\n        className=\"mb-2\"\n        id=\"pollDiscussionLink\"\n        value={state.pollDiscussionLink}\n        onChange={(e) => {\n          State.update({ pollDiscussionLink: e.target.value });\n        }}\n      />\n\n      <div\n        className=\"d-flex justify-content-around flex-wrap\"\n        style={{ maxWidth: \"100%\" }}\n      >\n        <div className=\"d-flex flex-row\">\n          <div className=\"d-flex flex-column mx-2\">\n            <label for=\"pollStartDate\">Start date</label>\n            {/*You have min and max properties on dates input*/}\n            <input\n              style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n              type=\"date\"\n              id=\"pollStartDate\"\n              value={state.pollStartDate}\n              onChange={(e) => {\n                State.update({ pollStartDate: e.target.value });\n              }}\n            />\n          </div>\n          <div>\n            <div>Start time</div>\n            <input\n              type=\"time\"\n              style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n              onChange={(e) => {\n                State.update({ startTime: e.target.value });\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"d-flex flex-row\">\n          <div className=\"d-flex flex-column mx-2\">\n            <label for=\"pollEndDate\">End date</label>\n            <input\n              style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n              type=\"date\"\n              id=\"pollStartDate\"\n              value={state.pollEndDate}\n              onChange={(e) => {\n                State.update({ pollEndDate: e.target.value });\n              }}\n            />\n          </div>\n          <div>\n            <div>End time</div>\n            <input\n              type=\"time\"\n              style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n              value={state.endTime}\n              onChange={(e) => {\n                State.update({ endTime: e.target.value });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\n        className=\"p-3 my-3\"\n      >\n        <label for=\"question\">Question</label>\n        <input\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n          type=\"text\"\n          id=\"question\"\n          value={state.question}\n          onChange={(e) => {\n            State.update({ question: e.target.value });\n          }}\n        />\n        <label className=\"mt-3\" for=\"pollType\">\n          Pool type\n        </label>\n        <div className=\"dropdown\">\n          <button\n            style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n            className=\"btn dropdown-toggle\"\n            type=\"button\"\n            onClick={() => {\n              State.update({ expandOptions: !state.expandOptions });\n            }}\n          >\n            {state.pollType == \"0\"\n              ? \"Text\"\n              : state.pollType == \"1\"\n              ? \"Multiple choice\"\n              : undefined}\n          </button>\n\n          {state.expandOptions && renderOptions()}\n        </div>\n        {state.pollType == \"1\" && renderTextInputsForChoices()}\n      </div>\n      <div\n        style={{\n          height: \"150px\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        className=\"d-flex justify-content-center align-items-center\"\n      >\n        <i class=\"bi bi-plus-lg\"></i>\n        <span>Click to add another one question</span>\n      </div>\n    </div>\n\n    <div\n      style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\n      className=\"p-3 d-flex flex-column justify-content-center\"\n    >\n      <CommitButton\n        className=\"my-2 btn btn-outline-primary\"\n        data={getPublicationParams(true)}\n      >\n        Preview\n      </CommitButton>\n      <CommitButton\n        className=\"my-2 btn btn-primary\"\n        data={getPublicationParams(false)}\n        disabled={validateInput().length > 0}\n      >\n        Create poll\n      </CommitButton>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/newPollQuestionInterface"}