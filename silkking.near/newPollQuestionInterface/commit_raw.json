{"tx_hash": "3pbTbQd9HL2yttiS3f548fKSNfGnouv6c4qhaPDpaVtm", "action_id_social": "GRFw4Sgz7JZSermuxQJ9cHyZcCnCqjFNdtPvuhq3eTN6-0-widget", "block_id": 80630996, "block_timestamp": "2022-12-14 12:26:03.423", "signer_id": "silkking.near", "widget_name": "newPollQuestionInterface", "source_code": "State.init({\n  pollTitle: \"\",\n  pollDescription: \"\",\n  pollDiscussionLink: \"\",\n  pollStartDate: \"\",\n  startTime: \"\",\n  pollEndDate: \"\",\n  endTime: \"\",\n  question: \"\",\n  // Treated as a number throws an error\n  pollType: \"0\",\n  choices: [],\n  amountOfChoices: 1,\n  expandOptions: false,\n  showErrorsInForm: false,\n  showPreview: false,\n});\n\nconst pollTypes = {\n  TEXT: { id: \"0\", value: \"Text\" },\n  MULTIPLE_CHOICE: { id: \"1\", value: \"Multiple choice\" },\n};\n\nconst getPublicationParams = (isDraft) => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"question-v3.0.1\",\n          value: {\n            isDraft,\n            title: state.pollTitle,\n            description: state.pollDescription,\n            tgLink: state.tgLink,\n            startTimestamp: getTimestamp(state.pollStartDate, state.startTime),\n            endTimestamp: getTimestamp(state.pollEndDate, state.endTime),\n            questionType: state.pollType,\n            question: state.question,\n            choicesOptions: state.choices.filter((c) => c != \"\"),\n            timestamp: Date.now(),\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nconst getTimestamp = (date, time) => new Date(`${date} ${time}`).getTime();\n\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nconst isValidInput = () => {\n  // TODO validate date and link types\n  let result =\n    (state.pollType == pollTypes.MULTIPLE_CHOICE.id &&\n      state.choices.filter((c) => c != \"\").length >= 2) ||\n    state.pollType != pollTypes.MULTIPLE_CHOICE.id;\n  result = result && state.pollTitle != \"\";\n  result = result && state.pollDescription != \"\";\n  result =\n    result &&\n    (state.tgLink == \"\" ||\n      (state.tgLink != \"\" && isValidHttpUrl(state.tgLink)));\n  result = result && state.pollStartDate != \"\";\n  result = result && state.startTime != \"\";\n  result = result && state.pollEndDate != \"\";\n  result = result && state.endTime != \"\";\n  result = result && state.question != \"\";\n  return result;\n};\n\nfunction getStyles(inputData) {\n  return !inputData && state.showErrorsInForm\n    ? {\n        border: \"1px solid #dc3545\",\n        borderOpacity: \"1\",\n      }\n    : { backgroundColor: \"rgb(230, 230, 230)\" };\n}\n\nconst widgetOwner = \"silkking.near\";\n\nconst renderPreview = () => {\n  return (\n    <div\n      className=\"modal\"\n      style={\n        state.showPreview && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"80%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Preview</h5>\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => {\n                State.update({ showPreview: false });\n              }}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              backgroundColor: \"white\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/newVotingInterface`}\n              props={{\n                isPreview: true,\n                previewInfo: {\n                  accountId: context.accountId,\n                  blockHeight: undefined,\n                  value: {\n                    isDraft,\n                    title: state.pollTitle,\n                    description: state.pollDescription,\n                    startTimestamp: getTimestamp(\n                      state.pollStartDate,\n                      state.startTime\n                    ),\n                    endTimestamp: getTimestamp(\n                      state.pollEndDate,\n                      state.endTime\n                    ),\n                    questionType: state.pollType,\n                    question: state.question,\n                    choicesOptions: state.choices.filter((c) => c != \"\"),\n                    timestamp: Date.now(),\n                  },\n                },\n              }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              onClick={() => {\n                State.update({ showPreview: false });\n              }}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderTextInputsForChoices = () => {\n  let choices = [];\n\n  for (let i = 0; i < state.amountOfChoices; i++) {\n    choices.push(i);\n  }\n\n  return (\n    <>\n      {choices.map((choiceIndex) => {\n        return (\n          <div className=\"my-3\" key={`choice-input-${choiceIndex}`}>\n            <label>Answer option {choiceIndex + 1}</label>\n            <div className=\"d-flex\">\n              <input\n                style={\n                  state.choices[choiceIndex] == \"\" && state.showErrorsInForm\n                    ? {\n                        border: \"1px solid #dc3545\",\n                        borderOpacity: \"1\",\n                        borderRadius: \"0.375rem\",\n                      }\n                    : {\n                        backgroundColor: \"rgb(230, 230, 230)\",\n                        border: \"1px solid #ced4da\",\n                        borderRadius: \"0.375rem\",\n                      }\n                }\n                type=\"text\"\n                className=\"w-100 mx-2\"\n                value={state.choices[choiceIndex]}\n                onChange={handleWriteChoiceInputChange(choiceIndex)}\n              />\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-danger\"\n                onClick={deleteChoiceHandler(choiceIndex)}\n              >\n                <i className=\"bi bi-x-octagon\"></i>\n              </button>\n            </div>\n          </div>\n        );\n      })}\n      <button\n        type=\"button\"\n        className=\"btn btn-outline-primary d-flex\"\n        style={{ margin: \"0 auto\" }}\n        onClick={addChoicesHandler}\n      >\n        <i className=\"bi bi-plus-lg\"></i>\n        <span>Add option</span>\n      </button>\n    </>\n  );\n};\n\nconst renderOptions = () => {\n  return (\n    <div style={{ width: \"max-content\" }}>\n      <input\n        style={{\n          cursor: \"pointer\",\n          backgroundColor: \"rgb(230, 230, 230)\",\n          borderRadius: \"0px\",\n          position: \"absolute\",\n          top: \"100%\",\n          minWidth: \"max-content\",\n          width: \"152px\",\n        }}\n        type=\"text\"\n        value=\"Text\"\n        readonly\n        onClick={() => {\n          State.update({ pollType: \"0\", expandOptions: !state.expandOptions });\n        }}\n      />\n\n      <input\n        style={{\n          cursor: \"pointer\",\n          backgroundColor: \"rgb(230, 230, 230)\",\n          borderRadius: \"0px\",\n          position: \"absolute\",\n          top: \"200%\",\n          minWidth: \"max-content\",\n          width: \"152px\",\n        }}\n        type=\"text\"\n        value=\"Multiple choice\"\n        readonly\n        onClick={() => {\n          State.update({ pollType: \"1\", expandOptions: !state.expandOptions });\n        }}\n      />\n    </div>\n  );\n};\n\nfunction handleWriteChoiceInputChange(choiceIndex) {\n  return (event) => {\n    const newChoices = state.choices;\n\n    newChoices[Number(choiceIndex)] = event.target.value;\n\n    State.update({\n      choices: newChoices,\n    });\n  };\n}\n\nfunction deleteChoiceHandler(choiceIndex) {\n  return () => {\n    let choices = state.choices;\n    let newChoices = [];\n    for (let i = 0; i < choices.length; i++) {\n      if (i != choiceIndex) {\n        newChoices.push(choices[i]);\n      }\n    }\n\n    State.update({\n      amountOfChoices: Number(state.amountOfChoices) - 1,\n      choices: newChoices,\n    });\n  };\n}\n\nfunction addChoicesHandler() {\n  let choices = state.choices;\n  choices.push(\"\");\n  State.update({\n    amountOfChoices: Number(state.amountOfChoices) + 1,\n    choices: choices,\n  });\n}\n\nreturn (\n  <div\n    className=\"d-flex align-items-start justify-content-around pt-4\"\n    style={{\n      borderRadius: \"0.375rem\",\n      height: \"100vh\",\n      backgroundColor: \"white\",\n    }}\n  >\n    <div className=\"d-flex flex-column w-75 justify-content-around\">\n      <label for=\"pollTitle\">Title</label>\n      <input\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        type=\"text\"\n        className={\n          !state.pollTitle && state.showErrorsInForm\n            ? \"border border-danger mb-2\"\n            : \"mb-2\"\n        }\n        id=\"pollTitle\"\n        value={state.pollTitle}\n        onChange={(e) => {\n          State.update({ pollTitle: e.target.value });\n        }}\n      />\n      {!state.pollTitle && state.showErrorsInForm && (\n        <p className=\"text-danger\">Title cannot be empty</p>\n      )}\n\n      <label for=\"pollDescription\" className=\"mt-2\">\n        Description\n      </label>\n      <textarea\n        id=\"pollDescription\"\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        rows=\"3\"\n        className={\n          !state.pollDescription &&\n          state.showErrorsInForm &&\n          \"border border-danger\"\n        }\n        value={state.pollDescription}\n        onChange={(e) => {\n          State.update({ pollDescription: e.target.value });\n        }}\n      ></textarea>\n      {!state.pollDescription && state.showErrorsInForm && (\n        <p className=\"text-danger\">Description cannot be empty</p>\n      )}\n\n      <label for=\"pollDiscussionLink\" className=\"mt-3\">\n        Discussion link (optional)\n      </label>\n      <input\n        style={{\n          backgroundColor: \"rgb(230, 230, 230)\",\n          border: \"1px solid #ced4da\",\n          borderRadius: \"0.375rem\",\n        }}\n        type=\"text\"\n        className=\"mb-2\"\n        id=\"pollDiscussionLink\"\n        value={state.pollDiscussionLink}\n        onChange={(e) => {\n          State.update({ pollDiscussionLink: e.target.value });\n        }}\n      />\n\n      <div\n        className=\"d-flex justify-content-around flex-wrap\"\n        style={{ maxWidth: \"100%\" }}\n      >\n        <div className=\"d-flex flex-row\">\n          <div className=\"d-flex flex-column mx-2\">\n            <label for=\"pollStartDate\">Start date</label>\n            {/*You have min and max properties on dates input*/}\n            <input\n              style={getStyles(state.pollStartDate)}\n              type=\"date\"\n              id=\"pollStartDate\"\n              value={state.pollStartDate}\n              onChange={(e) => {\n                State.update({ pollStartDate: e.target.value });\n              }}\n            />\n            {!state.pollStartDate && state.showErrorsInForm && (\n              <p className=\"text-danger\">Start date cannot be empty</p>\n            )}\n          </div>\n          <div>\n            <div>Start time</div>\n            <input\n              type=\"time\"\n              style={getStyles(state.startTime)}\n              onChange={(e) => {\n                State.update({ startTime: e.target.value });\n              }}\n            />\n            {!state.pollStartDate && state.showErrorsInForm && (\n              <p className=\"text-danger\">Start time cannot be empty</p>\n            )}\n          </div>\n        </div>\n        <div className=\"d-flex flex-row\">\n          <div className=\"d-flex flex-column mx-2\">\n            <label for=\"pollEndDate\">End date</label>\n            <input\n              style={getStyles(state.pollEndDate)}\n              type=\"date\"\n              id=\"pollStartDate\"\n              value={state.pollEndDate}\n              onChange={(e) => {\n                State.update({ pollEndDate: e.target.value });\n              }}\n            />\n            {!state.pollEndDate && state.showErrorsInForm && (\n              <p className=\"text-danger\">End date cannot be empty</p>\n            )}\n          </div>\n          <div>\n            <div>End time</div>\n            <input\n              type=\"time\"\n              style={getStyles(state.endTime)}\n              value={state.endTime}\n              onChange={(e) => {\n                State.update({ endTime: e.target.value });\n              }}\n            />\n            {!state.pollEndDate && state.showErrorsInForm && (\n              <p className=\"text-danger\">End time cannot be empty</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\n        className=\"p-3 my-3\"\n      >\n        <label for=\"question\">Question</label>\n        <input\n          style={\n            !state.question && state.showErrorsInForm\n              ? {\n                  border: \"1px solid #dc3545\",\n                  borderOpacity: \"1\",\n                  borderRadius: \"0.375rem\",\n                }\n              : { backgroundColor: \"rgb(230, 230, 230)\" }\n          }\n          type=\"text\"\n          id=\"question\"\n          value={state.question}\n          onChange={(e) => {\n            State.update({ question: e.target.value });\n          }}\n        />\n        {!state.question && state.showErrorsInForm && (\n          <p className=\"text-danger\">Question cannot be empty</p>\n        )}\n        <label className=\"mt-3\" for=\"pollType\">\n          Pool type\n        </label>\n        <div className=\"dropdown\">\n          <button\n            style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n            className=\"btn dropdown-toggle\"\n            type=\"button\"\n            onClick={() => {\n              State.update({ expandOptions: !state.expandOptions });\n            }}\n          >\n            {state.pollType == \"0\"\n              ? \"Text\"\n              : state.pollType == \"1\"\n              ? \"Multiple choice\"\n              : undefined}\n          </button>\n\n          {state.expandOptions && renderOptions()}\n        </div>\n        {state.pollType == \"1\" && renderTextInputsForChoices()}\n        {state.showErrorsInForm &&\n          state.pollType == pollTypes.MULTIPLE_CHOICE.id &&\n          state.choices.filter((c) => c != \"\").length < 2 && (\n            <p className=\"text-danger\">Should have at least 2 options</p>\n          )}\n      </div>\n    </div>\n\n    <div\n      style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\n      className=\"p-3 d-flex flex-column justify-content-center\"\n    >\n      <button\n        className=\"my-2 btn btn-outline-primary\"\n        onClick={() => State.update({ showPreview: true })}\n      >\n        Preview\n      </button>\n\n      {isValidInput() ? (\n        <CommitButton\n          className=\"my-2 btn btn-primary\"\n          data={getPublicationParams(false)}\n        >\n          Create poll\n        </CommitButton>\n      ) : (\n        <button\n          className=\"my-2 btn btn-primary\"\n          onClick={() => State.update({ showErrorsInForm: true })}\n        >\n          Create poll\n        </button>\n      )}\n    </div>\n\n    {state.showPreview && renderPreview()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/newPollQuestionInterface"}