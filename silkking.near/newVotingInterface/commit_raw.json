{"tx_hash": "BgGPSnb99vmVx5DjXe5fZ7e5xSM9mqeVf8ChpeZytcx8", "action_id_social": "BFo9WSQJ73umq3ZSL7xXVcEQYGKY3VE5SM6NxLtZVSVd-0-widget", "block_id": 82409512, "block_timestamp": "2023-01-07 13:53:37.652", "signer_id": "silkking.near", "widget_name": "newVotingInterface", "source_code": "State.init({\n  showQuestionsByThisUser: false,\n  descriptionHeightLimited: true,\n  poll: {},\n  polls: [{}],\n  profile: {},\n  pollsByThisCreator: [{}],\n  answers: [{}],\n});\n\nif (!props.isPreview && !props.blockHeight) {\n  return \"Prop block height wasn't provided\";\n}\n\nlet isPreview = props.isPreview ?? false;\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\n\nlet questionBlockHeight = Number(props.blockHeight);\n\nconst polls =\n  !props.previewInfo && Social.index(\"poll_question\", \"question-v3.1.0\");\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\n  State.update({ polls: polls });\n}\n\nif (!state.polls) {\n  return \"Loading\";\n} else {\n  const poll =\n    props.previewInfo ??\n    state.polls.find((q) => q.blockHeight == questionBlockHeight);\n\n  if (JSON.stringify(poll) != JSON.stringify(state.poll)) {\n    State.update({ poll: poll });\n  }\n\n  if (!state.poll && !isPreview) {\n    return \"Loading...\";\n  }\n}\n\nlet profile = Social.getr(`${state.poll.accountId}/profile`);\n\nif (JSON.stringify(profile) != JSON.stringify(state.profile)) {\n  State.update({ profile: profile });\n}\n\nif (!profile) {\n  return \"Loading\";\n}\n\nlet pollsByThisCreator = Social.index(\"poll_question\", \"question-v3.1.0\", {\n  accountId: state.poll.accountId,\n});\n\nif (\n  JSON.stringify(pollsByThisCreator) != JSON.stringify(state.pollsByThisCreator)\n) {\n  State.update({ pollsByThisCreator: pollsByThisCreator });\n}\n\nif (!state.pollsByThisCreator) {\n  return \"Loading\";\n}\n\nfunction sliceString(string, newStringLength) {\n  if (string.length > newStringLength) {\n    return string.slice(0, newStringLength) + \"...\";\n  }\n  return string;\n}\n\nfunction transformDateFormat(date) {\n  return new Date(date).toLocaleDateString();\n}\n\nfunction isActive(poll) {\n  return (\n    poll.value.startTimestamp < Date.now() &&\n    Date.now() < poll.value.endTimestamp\n  );\n}\n\nfunction isUpcoming(poll) {\n  return poll.value.startTimestamp > Date.now();\n}\n\nconst widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\n\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\n  // let poll = polls.find(q => q.blockHeight == questionBlockHeight)\n\n  const answers = Social.index(\"poll_question\", \"answer-v3.1.0\");\n\n  if (JSON.stringify(answers) != JSON.stringify(state.answers)) {\n    State.update({ answers: answers });\n  }\n\n  if (!state.answers) {\n    return \"Loading\";\n  }\n\n  const answersFromThisPoll = state.answers.filter(\n    (a) => a.value.questionBlockHeight == questionBlockHeight\n  );\n\n  const usersWithAnswers = answersFromThisPoll.map((a) => a.accountId);\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\n    (u, index) => usersWithAnswers.indexOf(u) == index\n  );\n  return usersWithAnswersWithoutDuplicates.length;\n}\n\nconst renderPollTypeIcon = () => {\n  let allPollTypes = [];\n  for (let i = 0; i < poll.value.questions.length; i++) {\n    if (!allPollTypes.includes(poll.value.questions[i].questionType)) {\n      allPollTypes.push(poll.value.questions[i].questionType);\n    }\n  }\n\n  return allPollTypes.length == 1 &&\n    (allPollTypes[0] == \"0\" || allPollTypes[0] == \"1\") ? (\n    <i className=\"bi bi-pie-chart\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"2\" ? (\n    <i\n      style={{\n        transform: \"rotate(90deg)\",\n        padding: \"0.6rem 0.8rem\",\n      }}\n      className=\"bi bi-bar-chart-line\"\n    ></i>\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"3\" ? (\n    <i className=\"bi bi-file-text\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  ) : (\n    <i className=\"bi bi-collection\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  );\n};\n\nconst renderQuestionsByThisCreator = () => {\n  //TODO show only the 2 polls\n  return state.pollsByThisCreator.map((pollByCreator, index) => {\n    let divStyle =\n      index == 0\n        ? { backGroundColor: \"white\" }\n        : {\n            backGroundColor: \"white\",\n            paddingTop: \"1rem\",\n            borderTop: \"1px solid #ced4da\",\n          };\n    return (\n      <div style={divStyle}>\n        <div className=\"d-flex align-items-center\">\n          <div\n            className=\"d-flex justify-content-center\"\n            style={{\n              maxHeight: \"2.8rem\",\n              aspectRatio: \"1\",\n              borderRadius: \"16px\",\n              backgroundColor: \"#F2F6FA\",\n              marginRight: \"0.8rem\",\n            }}\n          >\n            {renderPollTypeIcon(pollByCreator)}\n          </div>\n          <p style={{ fontWeight: \"500\", margin: \"0\" }}>\n            {sliceString(pollByCreator.value.title, 20)}\n          </p>\n        </div>\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary mb-2\">\n          <div>\n            <i className=\"bi bi-people\"></i>\n            <span>\n              {getValidAnswersQtyFromQuestion(pollByCreator.blockHeight)}\n            </span>\n          </div>\n          <span>\n            Ends\n            <Widget\n              src={`silkking.near/widget/timeAgo`}\n              props={{\n                timeInFuture: pollByCreator.value.endTimestamp,\n                reduced: true,\n              }}\n            />\n          </span>\n          <span\n            style={{\n              backgroundColor: isUpcoming(pollByCreator)\n                ? \"#FFF3B4\"\n                : isActive(pollByCreator)\n                ? \"#D9FCEF\"\n                : \"#FFE5E5\",\n\n              height: \"1.5rem\",\n              width: \"4rem\",\n              textAlign: \"center\",\n              borderRadius: \"16px\",\n              marginRight: \"1rem\",\n              lineHeight: \"1.5rem\",\n              fontSize: \"0.8rem\",\n              letterSpacing: \"-0.025rem\",\n              color: isUpcoming(pollByCreator)\n                ? \"#FFC905\"\n                : isActive(pollByCreator)\n                ? \"#00B37D\"\n                : \"#FF4747\",\n              fontWeight: \"500\",\n            }}\n          >\n            {isUpcoming(pollByCreator)\n              ? \"Upcoming\"\n              : isActive(pollByCreator)\n              ? \"Active\"\n              : \"Closed\"}\n          </span>\n        </div>\n      </div>\n    );\n  });\n};\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\n  };\n}\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestionsByThisUser && {\n          display: \"block\",\n          backgroundColor: \"#7e7e7e70\",\n        }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div\n        className=\"modal-dialog\"\n        style={{ maxWidth: \"100%\" }}\n        role=\"document\"\n      >\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/showQuestionsHandler`}\n              props={{ accountId: state.poll.accountId, onlyUser: true }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// function getBlockTimestamp(blockHeight) {\n//   // It is stored in nanoseconds which is 1e-6 miliseconds\n//   return Near.block(blockHeight).header.timestamp / 1e6;\n// }\n\n// function getTimeRelatedValidAnswers(answers) {\n//   let low = 0;\n//   let high = answers.length - 1;\n//   const questionEndTimestamp = poll.value.endTimestamp;\n//   let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\n//   if (endBlockTimestamp < questionEndTimestamp) return answers;\n//   // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\n//   let tries = 10;\n//   while (high - low > 1 && tries > 0) {\n//     tries--;\n//     let curr = Math.floor((high - low) / 2) + low;\n//     let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\n//     if (currBlockTimestamp < questionEndTimestamp) {\n//       low = curr;\n//     } else {\n//       high = curr;\n//     }\n//   }\n//   // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\n//   return answers.slice(0, high);\n// }\n\n// const answersToThisPoll = state.answers.filter(\n//   (a) => a.value.questionBlockHeight == questionBlockHeight\n// );\n\n// function getValidAnswers() {\n//   let validTime = getTimeRelatedValidAnswers(answersToThisPoll);\n//   let validOptionAndTime = getOptionRelatedValidAnswers(validTime);\n//   return validOptionAndTime;\n// }\n\n// function getOptionRelatedValidAnswers(answers) {\n//   return answers.filter(\n//     (a) =>\n//       0 <= Number(a.value.answer) &&\n//       Number(a.value.answer) < pollParams.value.choicesOptions.length\n//   );\n// }\n\n// const validAnswersToThisPoll = getValidAnswers(answersToThisPoll);\n\n// function userHasVoted() {\n//   return (\n//     validAnswersToThisPoll.find((a) => a.accountId == currAccountId) !=\n//     undefined\n//   );\n// }\n// let hasVoted = userHasVoted();\n\n// const isQuestionOpen =\n//   state.poll.value.startTimestamp < Date.now() &&\n//   Date.now() < state.poll.value.endTimestamp;\n// const canVote = !hasVoted && isQuestionOpen;\n\nfunction showDescription(description) {\n  if (state.descriptionHeightLimited && description.length > 501) {\n    return description.slice(0, 500) + \"...\";\n  } else {\n    return description;\n  }\n}\n\nreturn (\n  <div>\n    <div className=\"d-flex content-align-start justify-content-between\">\n      <div\n        style={{\n          width: \"75%\",\n          margin: \"2rem 0.5rem 2rem 2rem\",\n          padding: \"2rem\",\n          borderRadius: \"18px\",\n          background: \"white\",\n          boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n        }}\n      >\n        <div className=\"d-flex justify-content-between\">\n          <div className=\"d-flex\">\n            <Widget\n              src=\"mob.near/widget/ProfileImage\"\n              props={{\n                profile,\n                question: state.poll.accountId,\n                className: \"float-start d-inline-block me-2\",\n                style: {\n                  width: \"3.5rem\",\n                  aspectRatio: \"1\",\n                  marginLeft: \"1rem\",\n                  borderRadius: \"100%\",\n                  overflow: \"hidden\",\n                },\n              }}\n            />\n            <div>\n              <p style={{ margin: \"0\", fontWeight: \"300\" }}>Created by</p>\n              <p style={{ fontWeight: \"500\" }}>\n                {sliceString(state.poll.accountId, 18)}\n              </p>\n            </div>\n          </div>\n\n          {Date.now() < state.poll.value.endTimestamp && (\n            <>\n              <span>\n                Started{\" \"}\n                {new Date(state.poll.value.startTimestamp).toLocaleDateString()}\n              </span>\n\n              <span\n                style={{\n                  paddingLeft: \"1.5rem\",\n                  borderLeft: \"2px solid #ced4da\",\n                  height: \"max-content\",\n                }}\n              >\n                Ends\n                <Widget\n                  src={`silkking.near/widget/timeAgo`}\n                  props={{\n                    timeInFuture: state.poll.value.endTimestamp,\n                    reduced: true,\n                  }}\n                />\n              </span>\n            </>\n          )}\n          <span\n            style={{\n              backgroundColor: isUpcoming(state.poll)\n                ? \"#FFF3B4\"\n                : isActive(state.poll)\n                ? \"#D9FCEF\"\n                : \"#FFE5E5\",\n\n              height: \"2.1rem\",\n              width: \"5rem\",\n              textAlign: \"center\",\n              borderRadius: \"16px\",\n              marginRight: \"1rem\",\n              lineHeight: \"1.9rem\",\n              fontSize: \"1rem\",\n              letterSpacing: \"-0.025rem\",\n              color: isUpcoming(state.poll)\n                ? \"#FFC905\"\n                : isActive(state.poll)\n                ? \"#00B37D\"\n                : \"#FF4747\",\n              fontWeight: \"500\",\n            }}\n          >\n            {isUpcoming(state.poll)\n              ? \"Upcoming\"\n              : isActive(state.poll)\n              ? \"Active\"\n              : \"Closed\"}\n          </span>\n        </div>\n        <div className=\"d-flex my-3\">\n          <div\n            style={{\n              height: \"inherit\",\n              backgroundColor: \"#AAC8F7\",\n              width: \"0.5rem\",\n              minWidth: \"5px\",\n              marginRight: \"0.5rem\",\n              borderRadius: \"8px\",\n            }}\n          >\n            {/*Decorative div, do not delete*/}\n          </div>\n          <h2\n            style={{\n              fontWeight: \"700\",\n              fontSize: \"2rem\",\n              letterSpacing: \"0.1px\",\n              color: \"#010A2D\",\n              wordWrap: \"anywhere\",\n            }}\n          >\n            {state.poll.value.title}\n          </h2>\n        </div>\n        <div\n          className=\"p-3\"\n          style={{\n            position: \"relative\",\n            border: \"1.5px solid rgb(206, 212, 218)\",\n            borderRadius: \"24px\",\n            wordWrap: \"anywhere\",\n          }}\n        >\n          <h3\n            style={{\n              fontWeight: \"700\",\n              fontSize: \"1.2rem\",\n              marginBottom: \"1.2rem\",\n            }}\n          >\n            Description\n          </h3>\n          <p style={{ fontSize: \"0.9rem\" }}>\n            {showDescription(state.poll.value.description)}\n          </p>\n          {state.poll.value.description.length > 501 &&\n          !state.descriptionHeightLimited ? (\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: \"-1.125rem\",\n                left: \"0\",\n                right: \"0\",\n                marginRight: \"auto\",\n                marginLeft: \"auto\",\n                textAlign: \"center\",\n              }}\n            >\n              <h4\n                style={{\n                  fontSize: \"1.2rem\",\n                  display: \"inline-block\",\n                  backgroundColor: \"white\",\n                  padding: \"0 1rem\",\n                  cursor: \"pointer\",\n                }}\n                onClick={() => State.update({ descriptionHeightLimited: true })}\n              >\n                Show less <i className=\"bi bi-arrow-up\"></i>\n              </h4>\n            </div>\n          ) : (\n            state.poll.value.description.length > 501 && (\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: \"-1.125rem\",\n                  left: \"0\",\n                  right: \"0\",\n                  marginRight: \"auto\",\n                  marginLeft: \"auto\",\n                  textAlign: \"center\",\n                }}\n              >\n                <h4\n                  style={{\n                    fontSize: \"1.2rem\",\n                    display: \"inline-block\",\n                    backgroundColor: \"white\",\n                    padding: \"0 1rem\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() =>\n                    State.update({ descriptionHeightLimited: false })\n                  }\n                >\n                  Show more <i className=\"bi bi-arrow-down\"></i>\n                </h4>\n              </div>\n            )\n          )}\n        </div>\n        {state.poll.value.tgLink != \"\" && state.poll.value.tgLink != undefined && (\n          <div\n            className=\"mt-3 d-flex justify-content-between\"\n            style={{\n              border: \"1.5px solid #D4E5FB\",\n              padding: \"1.2rem 1.7rem\",\n              borderRadius: \"24px\",\n            }}\n          >\n            <div className=\"d-flex\">\n              <i\n                className=\"bi bi-people d-flex align-items-center justify-content-center\"\n                style={{\n                  height: \"100%\",\n                  aspectRatio: \"1\",\n                  backgroundColor: \"#2F5BCF\",\n                  borderRadius: \"14px\",\n                  marginRight: \"1rem\",\n                  color: \"white\",\n                }}\n              ></i>\n              <div>\n                <p\n                  className=\"m-0\"\n                  style={{\n                    color: \"#2F5BCF\",\n                    fontWeight: \"500\",\n                    fontSize: \"0.7rem\",\n                  }}\n                >\n                  Discussion link\n                </p>\n                <h6>\n                  <a\n                    style={{ color: \"#2346B1\" }}\n                    href={state.poll.value.tgLink}\n                  >\n                    {sliceString(state.poll.value.tgLink, 30)}\n                  </a>\n                </h6>\n              </div>\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <a\n                target=\"_blank\"\n                href={state.poll.value.tgLink}\n                style={{ userSelect: \"none\" }}\n              >\n                <i\n                  className=\"bi bi-box-arrow-up-right\"\n                  style={{\n                    color: \"#2F5BCF\",\n                    cursor: \"pointer\",\n                  }}\n                ></i>\n              </a>\n              <i\n                className=\"bi bi-clipboard\"\n                style={{\n                  userSelect: \"none\",\n                  color: \"#2F5BCF\",\n                  cursor: \"pointer\",\n                  marginLeft: \"0.8rem\",\n                }}\n                onClick={() => clipboard.writeText(state.poll.value.tgLink)}\n              ></i>\n            </div>\n          </div>\n        )}\n        {\n          <Widget\n            src={`${widgetOwner}/widget/allVotingWidget`}\n            props={{\n              poll: state.poll,\n              isPreview,\n            }}\n          />\n        }\n      </div>\n      <div style={{ minWidth: \"17rem\" }}>\n        <div\n          style={{\n            margin: \"2rem 2rem 2rem 0.5rem\",\n            padding: \"2rem\",\n            borderRadius: \"18px\",\n            backgroundColor: \"white\",\n            boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n          }}\n        >\n          {questionsByCreator.length != 1 && (\n            <>\n              <div\n                className=\"d-flex\"\n                style={\n                  shouldDisplayViewAll\n                    ? {\n                        justifyContent: \"space-between\",\n                        alignItems: \"center\",\n                      }\n                    : {\n                        justifyContent: \"flex-start\",\n                        alignItems: \"center\",\n                      }\n                }\n              >\n                <h5>Polls by creator ({state.pollsByThisCreator.length})</h5>\n\n                {shouldDisplayViewAll && (\n                  <div style={{ margin: \"1rem 0\", textAlign: \"center\" }}>\n                    <p\n                      style={{\n                        color: \"#2346B1\",\n                        fontWeight: \"500\",\n                        fontSize: \"1rem\",\n                        margin: \"0\",\n                        cursor: \"pointer\",\n                      }}\n                      onClick={() => {\n                        State.update({ showQuestionsByThisUser: true });\n                      }}\n                    >\n                      View All <i className=\"bi bi-arrow-right\"></i>\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              <div\n                style={{\n                  padding: \"0.5rem 1rem\",\n                }}\n              >\n                {renderQuestionsByThisCreator()}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n    {state.showQuestionsByThisUser && renderModal()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/newVotingInterface"}