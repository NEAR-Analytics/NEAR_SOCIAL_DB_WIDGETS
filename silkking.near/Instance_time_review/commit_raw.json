{"tx_hash": "BbEPsetN7B6KXXc2bQJqdGJa3peZK98EhoNrc4dsMNAR", "action_id_social": "Bgi4AatUEJ1ZtBTLMUaV8Ca7dx4bunFDppMa52Aj6WvS-0-widget", "block_id": 86984967, "block_timestamp": "2023-03-10 14:26:51.644", "signer_id": "silkking.near", "widget_name": "Instance_time_review", "source_code": "const data = props.data;\nconsole.log(\"0000\");\nconst _account = props.accountId ?? \"All\";\nconst tabs = props.tabs;\nconst owner = context.accountId;\nconst text = props.text;\nconst updateInstanceTimeState = props.updateInstanceTimeState;\n\nconst widgetOwner = \"silkking.near\";\n\nState.init({\n  is_on: [],\n  accounts: [],\n});\n\nconst card = {\n  border: \"1px solid black\",\n  borderRadius: \"5px\",\n  textAlign: \"center\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"1rem\",\n};\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nvar sortedData = data.sort((d1, d2) => d2.blockHeight - d1.blockHeight);\nvar finalData = [];\nvar accountIds = [\"All\"];\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  console.log(\"0000 sortAndRemoveRepeated\");\n  var temp = data;\n  const flag1 = data.indexOf(0);\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) {\n      if (\n        !(\n          (flag1 && sortedTimeData[k] == 0) ||\n          (flag1 && sortedTimeData[k] == 168)\n        )\n      )\n        final.push(sortedTimeData[k]);\n    }\n  }\n  console.log(\"0001 sortAndRemoveRepeated\");\n  return final;\n};\nvar date = new Date();\nvar utc_offset = -date.getTimezoneOffset() / 60;\nconsole.log(\"0002\");\nfor (let i = 0; i < sortedData.length; i++) {\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\n    accountIds.push(sortedData[i].accountId);\n\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n\n    finalData.push({\n      accountId: sortedData[i].accountId,\n      is_on: sortedData[i].value._is_on,\n      time_zone: sortedData[i].value._time_zone,\n      value: {\n        _data: weeklyData,\n      },\n    });\n  }\n}\nconsole.log(\"0003\");\n\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  let formated =\n    hours > 12\n      ? `${hours - 12}:${mins == 0 ? \"00\" : mins} PM`\n      : `${hours}:${mins == 0 ? \"00\" : mins} AM`;\n  return formated;\n};\n\nsetInterval(() => {\n  console.log(\"0000 setInterval\");\n  const day = new Date().getDay() == 0 ? 6 : new Date().getDay() - 1;\n  const hours = new Date().getHours();\n  const mins = new Date().getMinutes();\n  const now = hours + mins / 60;\n  var is_on_all = [];\n  var accounts = [];\n  for (var i = 0; i < finalData.length; i++) {\n    var is_on = false;\n    var temp = finalData[i].value._data[day];\n    if (temp.on_off == \"on\") {\n      for (var j = 0; j < temp.data.length; j++) {\n        if (now >= temp.data[j]._from && now < temp.data[j]._to) {\n          // console.log(now, temp.data[j]._from, temp.data[j]._to, is_on);\n          is_on = true;\n        }\n      }\n    }\n    accounts.push(finalData[i].accountId);\n    is_on_all.push(is_on);\n  }\n  console.log(\"0001 setInterval\");\n  State.update({ is_on: is_on_all, accounts: accounts });\n}, 1000);\n\nfunction makeStringShorter(string, length) {\n  if (string.length > length) {\n    return string.slice(0, length) + \"...\";\n  }\n  return string;\n}\n\nreturn (\n  <div\n    className=\"px-4\"\n    style={{\n      borderRadius: \"3px\",\n      backgroundColor: \"rgb(230, 230, 230)\",\n      width: \"100%\",\n      padding: \"0.5rem\",\n    }}\n  >\n    <div className=\"d-flex justify-content-between\">\n      <h2 style={{ margin: \"2rem 0 0.5rem 0\", fontWeight: \"700\" }}>{text}</h2>\n      <p className=\"m-0 pt-3\" style={{ margin: \"0px\", fontSize: \"0.8rem\" }}>\n        {`Your time is UTC ${getFormatedTime(\n          new Date().getTimezoneOffset() / 60\n        )} ${new Date()\n          .toLocaleDateString(undefined, {\n            day: \"2-digit\",\n            timeZoneName: \"long\",\n          })\n          .substring(4)}`}\n      </p>\n    </div>\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \" repeat(3, 1fr)\",\n      }}\n    >\n      {\n        // finalData\n        // ? finalData.map((d) => {\n        //     if (_account == \"All\" || _account == d.accountId) {\n        //       const profileName = Social.getr(`${d.accountId}/profile`).name;\n        //       if (!profileName) {\n        //         return \"Loading\";\n        //       }\n        //       return (\n        //         <div\n        //           style={{\n        //             boxSizing: \"border-box\",\n        //             boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n        //             backgroundColor: \"white\",\n        //             color: \"black\",\n        //             borderRadius: \"1rem\",\n        //             margin: \"8px\",\n        //             cursor: \"pointer\",\n        //             disable: context.accountId != d.accountId,\n        //             textDecoration: \"none\",\n        //           }}\n        //           onClick={() => {\n        //             console.log(\"este\");\n        //             updateInstanceTimeState({\n        //               userScheduleShown: d.accountId,\n        //               prevTab:\n        //                 _account == \"All\"\n        //                   ? tabs.ALL_SCHEDULE.id\n        //                   : tabs.MY_SCHEDULE.id,\n        //               tab: tabs.OPEN_SCHEDULE.id,\n        //             });\n        //             console.log(\"fin\");\n        //           }}\n        //         >\n        //           <div\n        //             style={{\n        //               padding: \"1rem\",\n        //             }}\n        //           >\n        //             <div\n        //               style={{\n        //                 paddingBottom: \"0.5rem\",\n        //                 borderBottom: \"2px solid grey\",\n        //                 display: \"flex\",\n        //                 flexDirection: \"row\",\n        //               }}\n        //             >\n        //               <div\n        //                 style={{\n        //                   display: \"flex\",\n        //                   flexDirection: \"column\",\n        //                   alignItems: \"center\",\n        //                 }}\n        //               >\n        //                 <Widget\n        //                   src=\"mob.near/widget/ProfileImage\"\n        //                   props={{\n        //                     accountId: d.accountId,\n        //                     className: \"d-inline-block\",\n        //                     style: {\n        //                       width: \"2em\",\n        //                       height: \"2em\",\n        //                       fontSize: \"xx-large\",\n        //                     },\n        //                   }}\n        //                 />\n        //                 <div>{profileName}</div>\n        //               </div>\n        //               <div\n        //                 style={{\n        //                   paddingLeft: \"0.5rem\",\n        //                   display: \"flex\",\n        //                   flexDirection: \"column\",\n        //                   width: \"100%\",\n        //                 }}\n        //               >\n        //                 <div\n        //                   style={{\n        //                     fontSize: \"1.5rem\",\n        //                     fontWeight: \"800\",\n        //                   }}\n        //                 >\n        //                   {makeStringShorter(d.accountId, 12)}\n        //                 </div>\n        //                 <div\n        //                   style={{\n        //                     display: \"flex\",\n        //                     flexDirection: \"row\",\n        //                     alignItems: \"center\",\n        //                     justifyContent: \"space-between\",\n        //                   }}\n        //                 >\n        //                   <div>\n        //                     <div\n        //                       style={{\n        //                         margin: \"0.5rem 0rem\",\n        //                       }}\n        //                     >\n        //                       <span\n        //                         style={{\n        //                           backgroundColor: state.is_on[\n        //                             state.accounts.indexOf(d.accountId)\n        //                           ]\n        //                             ? \"rgb(217, 252, 239)\"\n        //                             : \"rgb(255, 229, 229)\",\n        //                           textAlign: \"center\",\n        //                           borderRadius: \"16px\",\n        //                           fontSize: \"0.8rem\",\n        //                           color: state.is_on[\n        //                             state.accounts.indexOf(d.accountId)\n        //                           ]\n        //                             ? \"rgb(0, 179, 125)\"\n        //                             : \"rgb(255, 71, 71)\",\n        //                           fontWeight: \"500\",\n        //                           padding: \"0.5rem 1rem\",\n        //                         }}\n        //                       >\n        //                         {state.is_on[\n        //                           state.accounts.indexOf(d.accountId)\n        //                         ]\n        //                           ? \"on\"\n        //                           : \"off\"}\n        //                       </span>\n        //                     </div>\n        //                   </div>\n        //                   <div>{d.time_zone}</div>\n        //                 </div>\n        //               </div>\n        //             </div>\n        //             {d.value._data.map((week, index) => {\n        //               return (\n        //                 <div\n        //                   style={{\n        //                     paddingTop: \"1rem\",\n        //                     display: \"flex\",\n        //                     justifyContent: \"space-between\",\n        //                   }}\n        //                 >\n        //                   <div\n        //                     style={{\n        //                       fontSize: \"1rem\",\n        //                       fontWeight: \"600\",\n        //                     }}\n        //                   >{`${days[index]}`}</div>\n        //                   <div\n        //                     style={{\n        //                       display: \"flex\",\n        //                     }}\n        //                   >\n        //                     {week.on_off == \"on\" ? (\n        //                       week.data.map((y) => (\n        //                         <p\n        //                           style={{\n        //                             display: \"flex\",\n        //                             fontSize: \"0.9rem\",\n        //                             paddingRight: \"0.9rem\",\n        //                           }}\n        //                         >\n        //                           {getFormatedTime(y._from)}~\n        //                           {getFormatedTime(y._to)}\n        //                         </p>\n        //                       ))\n        //                     ) : (\n        //                       <span\n        //                         style={{\n        //                           backgroundColor: \"#FFE5E5\",\n        //                           textAlign: \"center\",\n        //                           borderRadius: \"16px\",\n        //                           marginRight: \"1rem\",\n        //                           fontSize: \"0.8rem\",\n        //                           letterSpacing: \"-0.025rem\",\n        //                           color: \"#FF4747\",\n        //                           fontWeight: \"500\",\n        //                           padding: \"0.5rem 2rem\",\n        //                         }}\n        //                       >\n        //                         Off\n        //                       </span>\n        //                     )}\n        //                   </div>\n        //                 </div>\n        //               );\n        //             })}\n        //           </div>\n        //         </div>\n        //       );\n        //     }\n        //   })\n        // : \"Loading...\"}\n      }\n    </div>\n    {console.log(\"0001\")}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/Instance_time_review"}