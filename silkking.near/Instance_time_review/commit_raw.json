{"tx_hash": "DNtWcexxYkWbfghMtgW9LJthRtJCDsjBGipCwrifUMce", "action_id_social": "2ubwJoNEo1zjW6ruNLBPvDoeQAUws95LbtmyEh2BH28x-0-widget", "block_id": 86985416, "block_timestamp": "2023-03-10 14:36:02.846", "signer_id": "silkking.near", "widget_name": "Instance_time_review", "source_code": "const data = props.data;\r\nconsole.log(\"0000\");\r\nconst _account = props.accountId ?? \"All\";\r\nconst tabs = props.tabs;\r\nconst owner = context.accountId;\r\nconst text = props.text;\r\nconst updateInstanceTimeState = props.updateInstanceTimeState;\r\n\r\nconst widgetOwner = \"silkking.near\";\r\n\r\nState.init({\r\n  is_on: [],\r\n  accounts: [],\r\n});\r\n\r\nconst card = {\r\n  border: \"1px solid black\",\r\n  borderRadius: \"5px\",\r\n  textAlign: \"center\",\r\n  color: \"white\",\r\n  padding: \"10px\",\r\n  margin: \"1rem\",\r\n};\r\nconst days = [\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n  \"Sunday\",\r\n];\r\n\r\nvar sortedData = data.sort((d1, d2) => d2.blockHeight - d1.blockHeight);\r\nvar finalData = [];\r\nvar accountIds = [\"All\"];\r\nconsole.log(\"0000\", sortedData);\r\n\r\nconst sortAndRemoveRepeated = (flag, data) => {\r\n  console.log(\"0000 sortAndRemoveRepeated\");\r\n  var temp = data;\r\n  const flag1 = data.indexOf(0);\r\n  if (flag) temp.push(0, 168);\r\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\r\n\r\n  var final = [];\r\n  for (var k = 0; k < sortedTimeData.length; k++) {\r\n    var repeated = false;\r\n    for (var l = 0; l < sortedTimeData.length; l++) {\r\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\r\n        repeated = true;\r\n      }\r\n    }\r\n    if (!repeated) {\r\n      if (\r\n        !(\r\n          (flag1 && sortedTimeData[k] == 0) ||\r\n          (flag1 && sortedTimeData[k] == 168)\r\n        )\r\n      )\r\n        final.push(sortedTimeData[k]);\r\n    }\r\n  }\r\n  console.log(\"0001 sortAndRemoveRepeated\");\r\n  return final;\r\n};\r\nvar date = new Date();\r\nvar utc_offset = -date.getTimezoneOffset() / 60;\r\nconsole.log(\"0002\");\r\nfor (let i = 0; i < sortedData.length; i++) {\r\n  console.log(\"0002\", i, accountIds.indexOf(sortedData[i].accountId) < 0);\r\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\r\n    console.log(\"0005\");\r\n    accountIds.push(sortedData[i].accountId);\r\n\r\n    var times = sortedData[i].value._data;\r\n    var temp = [];\r\n    var flag = false;\r\n    for (var j = 0; j < times.length; j++) {\r\n      const time = times[j] + utc_offset;\r\n      if (time > 168) {\r\n        temp.push(time - 168);\r\n        flag = true;\r\n      } else if (time < 0) {\r\n        temp.push(time + 168);\r\n        flag = true;\r\n      } else temp.push(time);\r\n    }\r\n    console.log(\"0006\");\r\n    const final = sortAndRemoveRepeated(flag, temp);\r\n    for (var m = 0; m < final.length - 1; m += 2) {\r\n      const _from = final[m];\r\n      const _to = final[m + 1];\r\n      for (var o = 1; o < 7; o++) {\r\n        if (o * 24 > _from && o * 24 < _to) {\r\n          final.push(o * 24, o * 24);\r\n        }\r\n      }\r\n    }\r\n    console.log(\"0007\");\r\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\r\n    var weeklyData = [];\r\n    for (var t = 0; t < 7; t++) {\r\n      var dailyData = [];\r\n      var exist = false;\r\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\r\n        var _from = sortedTimeDataNew[p];\r\n        var _to = sortedTimeDataNew[p + 1];\r\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\r\n          dailyData.push({\r\n            _from: _from - t * 24,\r\n            _to: _to - t * 24,\r\n          });\r\n          exist = true;\r\n        }\r\n      }\r\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\r\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\r\n    }\r\n    console.log(\"0008\");\r\n    finalData.push({\r\n      accountId: sortedData[i].accountId,\r\n      is_on: sortedData[i].value._is_on,\r\n      time_zone: sortedData[i].value._time_zone,\r\n      value: {\r\n        _data: weeklyData,\r\n      },\r\n    });\r\n    console.log(\"0009\");\r\n  }\r\n}\r\nconsole.log(\"0003\");\r\n\r\nconst getFormatedTime = (time) => {\r\n  const hours = parseInt(time);\r\n  const mins = (time - hours) * 60;\r\n  let formated =\r\n    hours > 12\r\n      ? `${hours - 12}:${mins == 0 ? \"00\" : mins} PM`\r\n      : `${hours}:${mins == 0 ? \"00\" : mins} AM`;\r\n  return formated;\r\n};\r\n\r\nsetInterval(() => {\r\n  const day = new Date().getDay() == 0 ? 6 : new Date().getDay() - 1;\r\n  const hours = new Date().getHours();\r\n  const mins = new Date().getMinutes();\r\n  const now = hours + mins / 60;\r\n  var is_on_all = [];\r\n  var accounts = [];\r\n  for (var i = 0; i < finalData.length; i++) {\r\n    var is_on = false;\r\n    var temp = finalData[i].value._data[day];\r\n    if (temp.on_off == \"on\") {\r\n      for (var j = 0; j < temp.data.length; j++) {\r\n        if (now >= temp.data[j]._from && now < temp.data[j]._to) {\r\n          // console.log(now, temp.data[j]._from, temp.data[j]._to, is_on);\r\n          is_on = true;\r\n        }\r\n      }\r\n    }\r\n    accounts.push(finalData[i].accountId);\r\n    is_on_all.push(is_on);\r\n  }\r\n  State.update({ is_on: is_on_all, accounts: accounts });\r\n}, 1000);\r\n\r\nfunction makeStringShorter(string, length) {\r\n  if (string.length > length) {\r\n    return string.slice(0, length) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nreturn (\r\n  <div\r\n    className=\"px-4\"\r\n    style={{\r\n      borderRadius: \"3px\",\r\n      backgroundColor: \"rgb(230, 230, 230)\",\r\n      width: \"100%\",\r\n      padding: \"0.5rem\",\r\n    }}\r\n  >\r\n    <div className=\"d-flex justify-content-between\">\r\n      <h2 style={{ margin: \"2rem 0 0.5rem 0\", fontWeight: \"700\" }}>{text}</h2>\r\n      <p className=\"m-0 pt-3\" style={{ margin: \"0px\", fontSize: \"0.8rem\" }}>\r\n        {`Your time is UTC ${getFormatedTime(\r\n          new Date().getTimezoneOffset() / 60\r\n        )} ${new Date()\r\n          .toLocaleDateString(undefined, {\r\n            day: \"2-digit\",\r\n            timeZoneName: \"long\",\r\n          })\r\n          .substring(4)}`}\r\n      </p>\r\n    </div>\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \" repeat(3, 1fr)\",\r\n      }}\r\n    >\r\n      {\r\n        // finalData\r\n        // ? finalData.map((d) => {\r\n        //     if (_account == \"All\" || _account == d.accountId) {\r\n        //       const profileName = Social.getr(`${d.accountId}/profile`).name;\r\n        //       if (!profileName) {\r\n        //         return \"Loading\";\r\n        //       }\r\n        //       return (\r\n        //         <div\r\n        //           style={{\r\n        //             boxSizing: \"border-box\",\r\n        //             boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\r\n        //             backgroundColor: \"white\",\r\n        //             color: \"black\",\r\n        //             borderRadius: \"1rem\",\r\n        //             margin: \"8px\",\r\n        //             cursor: \"pointer\",\r\n        //             disable: context.accountId != d.accountId,\r\n        //             textDecoration: \"none\",\r\n        //           }}\r\n        //           onClick={() => {\r\n        //             console.log(\"este\");\r\n        //             updateInstanceTimeState({\r\n        //               userScheduleShown: d.accountId,\r\n        //               prevTab:\r\n        //                 _account == \"All\"\r\n        //                   ? tabs.ALL_SCHEDULE.id\r\n        //                   : tabs.MY_SCHEDULE.id,\r\n        //               tab: tabs.OPEN_SCHEDULE.id,\r\n        //             });\r\n        //             console.log(\"fin\");\r\n        //           }}\r\n        //         >\r\n        //           <div\r\n        //             style={{\r\n        //               padding: \"1rem\",\r\n        //             }}\r\n        //           >\r\n        //             <div\r\n        //               style={{\r\n        //                 paddingBottom: \"0.5rem\",\r\n        //                 borderBottom: \"2px solid grey\",\r\n        //                 display: \"flex\",\r\n        //                 flexDirection: \"row\",\r\n        //               }}\r\n        //             >\r\n        //               <div\r\n        //                 style={{\r\n        //                   display: \"flex\",\r\n        //                   flexDirection: \"column\",\r\n        //                   alignItems: \"center\",\r\n        //                 }}\r\n        //               >\r\n        //                 <Widget\r\n        //                   src=\"mob.near/widget/ProfileImage\"\r\n        //                   props={{\r\n        //                     accountId: d.accountId,\r\n        //                     className: \"d-inline-block\",\r\n        //                     style: {\r\n        //                       width: \"2em\",\r\n        //                       height: \"2em\",\r\n        //                       fontSize: \"xx-large\",\r\n        //                     },\r\n        //                   }}\r\n        //                 />\r\n        //                 <div>{profileName}</div>\r\n        //               </div>\r\n        //               <div\r\n        //                 style={{\r\n        //                   paddingLeft: \"0.5rem\",\r\n        //                   display: \"flex\",\r\n        //                   flexDirection: \"column\",\r\n        //                   width: \"100%\",\r\n        //                 }}\r\n        //               >\r\n        //                 <div\r\n        //                   style={{\r\n        //                     fontSize: \"1.5rem\",\r\n        //                     fontWeight: \"800\",\r\n        //                   }}\r\n        //                 >\r\n        //                   {makeStringShorter(d.accountId, 12)}\r\n        //                 </div>\r\n        //                 <div\r\n        //                   style={{\r\n        //                     display: \"flex\",\r\n        //                     flexDirection: \"row\",\r\n        //                     alignItems: \"center\",\r\n        //                     justifyContent: \"space-between\",\r\n        //                   }}\r\n        //                 >\r\n        //                   <div>\r\n        //                     <div\r\n        //                       style={{\r\n        //                         margin: \"0.5rem 0rem\",\r\n        //                       }}\r\n        //                     >\r\n        //                       <span\r\n        //                         style={{\r\n        //                           backgroundColor: state.is_on[\r\n        //                             state.accounts.indexOf(d.accountId)\r\n        //                           ]\r\n        //                             ? \"rgb(217, 252, 239)\"\r\n        //                             : \"rgb(255, 229, 229)\",\r\n        //                           textAlign: \"center\",\r\n        //                           borderRadius: \"16px\",\r\n        //                           fontSize: \"0.8rem\",\r\n        //                           color: state.is_on[\r\n        //                             state.accounts.indexOf(d.accountId)\r\n        //                           ]\r\n        //                             ? \"rgb(0, 179, 125)\"\r\n        //                             : \"rgb(255, 71, 71)\",\r\n        //                           fontWeight: \"500\",\r\n        //                           padding: \"0.5rem 1rem\",\r\n        //                         }}\r\n        //                       >\r\n        //                         {state.is_on[\r\n        //                           state.accounts.indexOf(d.accountId)\r\n        //                         ]\r\n        //                           ? \"on\"\r\n        //                           : \"off\"}\r\n        //                       </span>\r\n        //                     </div>\r\n        //                   </div>\r\n        //                   <div>{d.time_zone}</div>\r\n        //                 </div>\r\n        //               </div>\r\n        //             </div>\r\n        //             {d.value._data.map((week, index) => {\r\n        //               return (\r\n        //                 <div\r\n        //                   style={{\r\n        //                     paddingTop: \"1rem\",\r\n        //                     display: \"flex\",\r\n        //                     justifyContent: \"space-between\",\r\n        //                   }}\r\n        //                 >\r\n        //                   <div\r\n        //                     style={{\r\n        //                       fontSize: \"1rem\",\r\n        //                       fontWeight: \"600\",\r\n        //                     }}\r\n        //                   >{`${days[index]}`}</div>\r\n        //                   <div\r\n        //                     style={{\r\n        //                       display: \"flex\",\r\n        //                     }}\r\n        //                   >\r\n        //                     {week.on_off == \"on\" ? (\r\n        //                       week.data.map((y) => (\r\n        //                         <p\r\n        //                           style={{\r\n        //                             display: \"flex\",\r\n        //                             fontSize: \"0.9rem\",\r\n        //                             paddingRight: \"0.9rem\",\r\n        //                           }}\r\n        //                         >\r\n        //                           {getFormatedTime(y._from)}~\r\n        //                           {getFormatedTime(y._to)}\r\n        //                         </p>\r\n        //                       ))\r\n        //                     ) : (\r\n        //                       <span\r\n        //                         style={{\r\n        //                           backgroundColor: \"#FFE5E5\",\r\n        //                           textAlign: \"center\",\r\n        //                           borderRadius: \"16px\",\r\n        //                           marginRight: \"1rem\",\r\n        //                           fontSize: \"0.8rem\",\r\n        //                           letterSpacing: \"-0.025rem\",\r\n        //                           color: \"#FF4747\",\r\n        //                           fontWeight: \"500\",\r\n        //                           padding: \"0.5rem 2rem\",\r\n        //                         }}\r\n        //                       >\r\n        //                         Off\r\n        //                       </span>\r\n        //                     )}\r\n        //                   </div>\r\n        //                 </div>\r\n        //               );\r\n        //             })}\r\n        //           </div>\r\n        //         </div>\r\n        //       );\r\n        //     }\r\n        //   })\r\n        // : \"Loading...\"}\r\n      }\r\n    </div>\r\n    {console.log(\"0001\")}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/Instance_time_review"}