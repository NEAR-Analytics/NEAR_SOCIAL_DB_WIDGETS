{"tx_hash": "C8DgqBwHTeYjAdgc9oCEfUbCw8vV4EyzfSwiaUJKJzco", "action_id_social": "4unVwQ7X5Qx2B9Ye6qH5e2XfKHyx5kURMb9vmoWjibL7-0-widget", "block_id": 80709060, "block_timestamp": "2022-12-15 13:58:17.396", "signer_id": "silkking.near", "widget_name": "voteMultipleChoice", "source_code": "if (!props.isPreview && !props.blockHeight) {\n  return \"Property blockHeight not set\";\n}\nif (!props.isPreview && isNaN(props.blockHeight)) {\n  return \"Property blockHeight should be a number\";\n}\n\nState.init({\n  vote: userVote ?? \"\",\n});\n\n// Utility function\nfunction getBlockTimestamp(blockHeight) {\n  // It is stored in nanoseconds which is 1e-6 miliseconds\n  return Near.block(blockHeight).header.timestamp / 1e6;\n}\n\n// Discards answers that were posted after question's end date\nfunction getTimeRelatedValidAnswers(answers) {\n  let low = 0;\n  let high = answers.length - 1;\n  const questionEndTimestamp = questionParams.value.endTimestamp;\n  let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\n  if (endBlockTimestamp < questionEndTimestamp) return answers;\n  // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\n  let tries = 10;\n  while (high - low > 1 && tries > 0) {\n    tries--;\n    let curr = Math.floor((high - low) / 2) + low;\n    let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\n    if (currBlockTimestamp < questionEndTimestamp) {\n      low = curr;\n    } else {\n      high = curr;\n    }\n  }\n  // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\n  return answers.slice(0, high);\n}\n\nfunction getOptionRelatedValidAnswers(answers) {\n  return answers.filter(\n    (a) =>\n      0 <= Number(a.value.answer) &&\n      Number(a.value.answer) < questionParams.value.choicesOptions.length\n  );\n}\n\nfunction getValidAnswers() {\n  let validTime = getTimeRelatedValidAnswers(answersToThisQuestion);\n  let validOptionAndTime = getOptionRelatedValidAnswers(validTime);\n  return validOptionAndTime;\n}\n\nconst isPreview = props.isPreview;\n\n// Getting question\nconst questionBlockHeight = Number(props.blockHeight);\nconst questions = Social.index(\"poll_question\", \"question-v3.0.1\");\nif (!questions) {\n  return \"Loading\";\n}\nconst questionParams = questions.find(\n  (q) => q.blockHeight == questionBlockHeight\n);\n\n// Getting valid answers\nconst answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\nif (!answers) {\n  return \"Loading\";\n}\nconst answersToThisQuestion = answers.filter(\n  (a) => a.value.questionBlockHeight == questionBlockHeight\n);\nconst validAnswersToThisQuestion = getValidAnswers(answersToThisQuestion);\nconsole.log(1, validAnswersToThisQuestion);\n\nlet userVote;\n// Getting if user has already voted\nconst currAccountId = context.accountId ?? \"\";\nfunction userHasVoted() {\n  return (\n    validAnswersToThisQuestion.find((a) => a.accountId == currAccountId) !=\n    undefined\n  );\n}\nlet hasVoted = userHasVoted();\nconst isQuestionOpen =\n  questionParams.value.startTimestamp < Date.now() &&\n  Date.now() < questionParams.value.endTimestamp;\nconst canVote = !hasVoted && isQuestionOpen;\n\n// Counting votes to display\n\nconst countVotes = validAnswersToThisQuestion.reduce((acc, curr) => {\n  let ans = curr.value.answer;\n  acc[Number(ans)] += 1;\n  return acc;\n}, new Array(questionParams.value.choicesOptions.length).fill(0));\n\nconst getPublicationParams = () => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"answer-v3.0.1\",\n          value: {\n            answer: state.vote,\n            questionBlockHeight,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nfunction calculatePercentage(votesToThisOption) {\n  if (validAnswersToThisQuestion.length == 0) return 0;\n  return (\n    (votesToThisOption / validAnswersToThisQuestion.length) *\n    100\n  ).toFixed(2);\n}\n\nlet styles = hasVoted\n  ? { color: \"#000\", width: \"90%\" }\n  : { color: \"#000\", width: \"100%\" };\n\nconst isValidInput = () => {\n  let result = state.vote != \"\";\n  return result && !isPreview;\n};\n\nreturn (\n  <>\n    {!isQuestionOpen ? \"This question is already closed\" : \"\"}\n    {questionParams.value.choicesOptions.map((option, index) => {\n      return (\n        <div>\n          <div className=\"d-flex\">\n            <div style={styles}>\n              {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\n              <div\n                style={{\n                  margin: \"0.3rem 0px\",\n                  content: \"\",\n                  display: \"table\",\n                  clear: \"both\",\n                  padding: \"0.01em 16px\",\n                  display: \"inline-block\",\n                  width: `${\n                    !canVote ? calculatePercentage(countVotes[index]) : 100\n                  }%`,\n                  textAlign: \"center\",\n                  overflow: \"visible\",\n                  whiteSpace: \"nowrap\",\n                  textAlign: \"left\",\n                  backgroundColor: `${\n                    (hasVoted && state.vote == index) ||\n                    state.vote == index + \"\"\n                      ? \"rgb(153, 255, 153)\"\n                      : \"lightgray\"\n                  }`,\n                }}\n                onClick={() => canVote && State.update({ vote: index + \"\" })}\n              >\n                <span style={{ overflow: \"visible\", fontWeight: \"500\" }}>\n                  {option}\n                  {!canVote && (\n                    <span\n                      className=\"text-secondary\"\n                      style={{ marginLeft: \"1rem\", fontWeight: \"400\" }}\n                    >\n                      ({countVotes[index]} votes)\n                    </span>\n                  )}\n                </span>\n              </div>\n            </div>\n            {!canVote && (\n              <span\n                style={{\n                  minWidth: \"max-content\",\n                  margin: \"0.3rem 0px 0.3rem 0.3rem\",\n                  fontWeight: \"500\",\n                }}\n              >\n                {calculatePercentage(countVotes[index])}%\n              </span>\n            )}\n          </div>\n        </div>\n      );\n    })}\n    {isQuestionOpen ? (\n      hasVoted ? (\n        <p\n          className=\"text-primary\"\n          style={{ textAlign: \"center\", fontWeight: \"500\" }}\n        >\n          Voted\n        </p>\n      ) : (\n        <CommitButton\n          className=\"my-2 btn btn-primary\"\n          data={getPublicationParams()}\n        >\n          Vote\n        </CommitButton>\n      )\n    ) : (\n      \"\"\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/voteMultipleChoice"}