{"tx_hash": "Azw5SANCsmjyuMna9dWWQG9NTqgaVMehuPsSm7LnYSaU", "action_id_social": "2PDJ5PRkr9mbPqtsXJZ5He7zsaG2L6iSUE2anY7QXrXV-0-widget", "block_id": 80515082, "block_timestamp": "2022-12-12 22:49:04.040", "signer_id": "silkking.near", "widget_name": "voteMultipleChoice", "source_code": "function validateProps(props) {\n  let errors = [];\n  // if (!props.question) errors.push(\"Props doesn't contain question key\");\n  // if (!props.option) errors.push(\"Props doesn't contain option key\");\n  // if (!props.index) errors.push(\"Props doesn't contain index key\");\n  // if (!props.haveVoted) errors.push(\"Props doesn't contain haveVoted key\");\n  // if (!props.userVote) errors.push(\"Props doesn't contain userVote key\");\n  return errors;\n}\n\nconst propErrors = validateProps(props);\nif (propErrors.length > 0) {\n  return (\n    <>\n      {propErrors.map((e) => (\n        <div>{e}</div>\n      ))}\n    </>\n  );\n}\n\nlet question = props.value;\nconsole.log(\"Q\", question);\n// let option = props.option;\n// let index = props.index;\n// let hasVoted = props.haveVoted;\n// let userVote = props.userVote;\nlet isPreview = props.isPreview;\n\nState.init({\n  vote: userVote ?? \"\",\n});\n\nconst getPublicationParams = (index) => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"answer-v3.0.1\",\n          value: {\n            answer: index + \"\",\n            questionBlockHeight: props.blockHeight,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\n//TODO get this data\nlet countVotes = [1, 0, 0];\n\nfunction calculatePercentage(votesToThisOption) {\n  if (question.value.answers.length == 0) return 0;\n  return (votesToThisOption / question.value.answers.length) * 100;\n}\n\nlet styles = hasVoted\n  ? { color: \"#000\", width: \"90%\" }\n  : { color: \"#000\", width: \"100%\" };\n\nconst isValidInput = () => {\n  let result = state.vote != \"\";\n  return result && !isPreview;\n};\n\nreturn (\n  <>\n    {question.choicesOptions.map((option, index) => {\n      return (\n        <div>\n          <div className=\"d-flex\">\n            <div style={styles}>\n              {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\n              <div\n                style={{\n                  margin: \"0.3rem 0px\",\n                  content: \"\",\n                  display: \"table\",\n                  clear: \"both\",\n                  padding: \"0.01em 16px\",\n                  display: \"inline-block\",\n                  width: `${\n                    hasVoted ? calculatePercentage(countVotes[index]) : 100\n                  }%`,\n                  textAlign: \"center\",\n                  overflow: \"visible\",\n                  whiteSpace: \"nowrap\",\n                  textAlign: \"left\",\n                  backgroundColor: `${\n                    (hasVoted && state.vote == index) ||\n                    state.vote == index + \"\"\n                      ? \"rgb(153, 255, 153)\"\n                      : \"lightgray\"\n                  }`,\n                }}\n                onClick={() => !hasVoted && State.update({ vote: index + \"\" })}\n              >\n                <span style={{ overflow: \"visible\", fontWeight: \"500\" }}>\n                  {option}\n                  {hasVoted && (\n                    <span\n                      className=\"text-secondary\"\n                      style={{ marginLeft: \"1rem\", fontWeight: \"400\" }}\n                    >\n                      ({question.answers.length} votes)\n                    </span>\n                  )}\n                </span>\n              </div>\n            </div>\n            {hasVoted && (\n              <span\n                style={{\n                  minWidth: \"max-content\",\n                  margin: \"0.3rem 0px 0.3rem 0.3rem\",\n                  fontWeight: \"500\",\n                }}\n              >\n                {calculatePercentage(countVotes[index])}%\n              </span>\n            )}\n          </div>\n\n          {hasVoted ? (\n            <p\n              className=\"text-primary\"\n              style={{ textAlign: \"center\", fontWeight: \"500\" }}\n            >\n              Voted\n            </p>\n          ) : (\n            <CommitButton\n              className=\"my-2 btn btn-primary\"\n              data={getPublicationParams(index)}\n            >\n              Vote\n            </CommitButton>\n          )}\n        </div>\n      );\n    })}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/voteMultipleChoice"}