{"tx_hash": "5J8Ww1LMSin2iQaP7zEZShHQ7Qcv7UTehN4W9W2Tuq8t", "action_id_social": "Gjfs9a3Bs8ZB65khKvjzSsvkEQJs76DNTZpDpkwuxqG3-0-widget", "block_id": 80565417, "block_timestamp": "2022-12-13 15:12:11.797", "signer_id": "silkking.near", "widget_name": "voteMultipleChoice", "source_code": "if (!props.blockHeight) {\n  return \"Property blockHeight not set\";\n}\n\nconst isPreview = props.isPreview;\nconst questionBlockHeight = props.blockHeight;\nconst questions = Social.index(\"poll_question\", \"question-v3.0.1\");\nconst questionParams = questions.find(\n  (q) => q.blockHeight == questionBlockHeight\n);\n\nconst answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\nconst answersToThisQuestion = answers.filter(\n  (a) => a.value.questionBlockHeight == questionBlockHeight\n);\n\nlet userVote;\nfunction userHasVoted() {\n  return (\n    answersToThisQuestion.find((a) => a.accountId == context.accountId) !=\n    undefined\n  );\n}\nlet hasVoted = userHasVoted();\n\nconst countVotes = answersToThisQuestion.reduce((acc, curr) => {\n  const ans = curr.value.answer;\n  const isValidAnswer =\n    !isNaN(ans) &&\n    Number(ans) >= 0 &&\n    Number(ans) < questionParams.value.choicesOptions.length;\n  if (isValidAnswer) {\n    acc[Number(ans)] += 1;\n    return acc;\n  } else {\n    return acc;\n  }\n}, new Array(questionParams.value.choicesOptions.length).fill(0));\n\nState.init({\n  vote: userVote ?? \"\",\n});\n\nconst getPublicationParams = () => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"answer-v3.0.1\",\n          value: {\n            answer: state.vote,\n            questionBlockHeight,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nfunction calculatePercentage(votesToThisOption) {\n  if (answersToThisQuestion.length == 0) return 0;\n  return (votesToThisOption / answersToThisQuestion.length) * 100;\n}\n\nlet styles = hasVoted\n  ? { color: \"#000\", width: \"90%\" }\n  : { color: \"#000\", width: \"100%\" };\n\nconst isValidInput = () => {\n  let result = state.vote != \"\";\n  return result && !isPreview;\n};\n\nreturn (\n  <>\n    {questionParams.value.choicesOptions.map((option, index) => {\n      return (\n        <div>\n          <div className=\"d-flex\">\n            <div style={styles}>\n              {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\n              <div\n                style={{\n                  margin: \"0.3rem 0px\",\n                  content: \"\",\n                  display: \"table\",\n                  clear: \"both\",\n                  padding: \"0.01em 16px\",\n                  display: \"inline-block\",\n                  width: `${\n                    hasVoted ? calculatePercentage(countVotes[index]) : 100\n                  }%`,\n                  textAlign: \"center\",\n                  overflow: \"visible\",\n                  whiteSpace: \"nowrap\",\n                  textAlign: \"left\",\n                  backgroundColor: `${\n                    (hasVoted && state.vote == index) ||\n                    state.vote == index + \"\"\n                      ? \"rgb(153, 255, 153)\"\n                      : \"lightgray\"\n                  }`,\n                }}\n                onClick={() => !hasVoted && State.update({ vote: index + \"\" })}\n              >\n                <span style={{ overflow: \"visible\", fontWeight: \"500\" }}>\n                  {option}\n                  {hasVoted && (\n                    <span\n                      className=\"text-secondary\"\n                      style={{ marginLeft: \"1rem\", fontWeight: \"400\" }}\n                    >\n                      ({countVotes[index]} votes)\n                    </span>\n                  )}\n                </span>\n              </div>\n            </div>\n            {hasVoted && (\n              <span\n                style={{\n                  minWidth: \"max-content\",\n                  margin: \"0.3rem 0px 0.3rem 0.3rem\",\n                  fontWeight: \"500\",\n                }}\n              >\n                {calculatePercentage(countVotes[index])}%\n              </span>\n            )}\n          </div>\n\n          {hasVoted ? (\n            <p\n              className=\"text-primary\"\n              style={{ textAlign: \"center\", fontWeight: \"500\" }}\n            >\n              Voted\n            </p>\n          ) : (\n            <CommitButton\n              className=\"my-2 btn btn-primary\"\n              data={getPublicationParams()}\n            >\n              Vote\n            </CommitButton>\n          )}\n        </div>\n      );\n    })}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/voteMultipleChoice"}