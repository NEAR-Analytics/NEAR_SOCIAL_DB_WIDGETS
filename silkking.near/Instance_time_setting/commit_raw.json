{"tx_hash": "9uN1CepsSvmxiue41wr9EnqqXZe49L85vVL5r93HSpdX", "action_id_social": "6nscnDAB9mKNHhWv3QgVCSn3LDE5d6nSFSZnhnWMb57C-0-widget", "block_id": 86983897, "block_timestamp": "2023-03-10 14:05:05.376", "signer_id": "silkking.near", "widget_name": "Instance_time_setting", "source_code": "const updateInstanceTimeState = props.updateInstanceTimeState;\nconst tabs = props.tabs;\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) final.push(sortedTimeData[k]);\n  }\n  return final;\n};\n\nconst widgetOwner = \"silkking.near\";\n\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  const formated =\n    hours > 12\n      ? `${hours - 12 < 10 ? \"0\" : \"\"}${hours - 12}:${\n          mins == 0 ? \"00\" : mins\n        } PM`\n      : `${hours < 10 ? \"0\" : \"\"}${hours}:${mins == 0 ? \"00\" : mins} AM`;\n  return formated;\n};\nconst time_zone = props.data.time_zone ?? \"(UTC+00:00) UTC\";\nvar is_on = [false, false, false, false, false, false, false];\nvar _from = [\n  \"10:00 AM\",\n  \"10:00 AM\",\n  \"10:00 AM\",\n  \"10:00 AM\",\n  \"10:00 AM\",\n  \"10:00 AM\",\n  \"10:00 AM\",\n];\nvar _to = [\n  \"06:00 PM\",\n  \"06:00 PM\",\n  \"06:00 PM\",\n  \"06:00 PM\",\n  \"06:00 PM\",\n  \"06:00 PM\",\n  \"06:00 PM\",\n];\n\nif (props.data.schedule) {\n  for (var i = 0; i < 7; i++) {\n    is_on[i] = props.data.schedule[i].on_off;\n    if (is_on[i] == \"on\") {\n      _from[i] = getFormatedTime(props.data.schedule[i].data[0]._from);\n      _to[i] = getFormatedTime(props.data.schedule[i].data[0]._to);\n    }\n  }\n}\nState.init({\n  _is_on: is_on,\n  _from: _from,\n  _to: _to,\n  _validate_result: true,\n  _validate_error: [true, true, true, true, true, true, true],\n  _sent: false,\n  hoveringElement: \"\",\n});\n\nconst comboBox = (isActive) => {\n  let colors = isActive ? \"rgb(53, 58, 64)\" : \"rgb(225, 233, 240)\";\n  return {\n    backgroundColor: \"white\",\n    padding: \"0.5rem 1.5rem\",\n    borderRadius: \"0.8rem\",\n    border: `1.5px solid ${colors}`,\n    color: colors,\n    letterSpacing: \"-0.01em\",\n    borderRadius: \"1rem\",\n    padding: \"1rem\",\n  };\n};\n\nconst table = {\n  display: \"flex\",\n  flex: \"1\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  fontWeight: 600,\n};\nconst flex_row = {\n  display: \"flex\",\n  flex: \"1\",\n  flexDirection: \"row\",\n  fontSize: \"large\",\n};\nconst hours = [];\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\nconst tbl_headers = [\"Day\", \"Off/On\", \"From\", \"To\"];\nconst initialize = () => {\n  hours = [];\n  for (var i = 0; i < 2; i++)\n    for (var j = 0; j <= 12; j++)\n      for (var k = 0; k < 4; k++) {\n        i % 2 == 0\n          ? hours.push(`${j < 10 ? `0${j}` : j}:${k == 0 ? \"00\" : k * 15} AM`)\n          : hours.push(`${j < 10 ? `0${j}` : j}:${k == 0 ? \"00\" : k * 15} PM`);\n      }\n};\ninitialize();\nconst validate = () => {\n  var result = true;\n  for (var i = 0; i < 7; i++) {\n    if (!state._validate_error[i]) result = false;\n  }\n  State.update({ _validate_result: result });\n};\nconst getTime = (time) => {\n  const ap = time.split(\" \")[1];\n  const hour = parseInt(time.split(\":\")[0]);\n  const mins = parseInt(time.split(\":\")[1]) / 60;\n  const time_by_hours = ap == \"AM\" ? hour + mins : hour + 12 + mins;\n  return time_by_hours;\n};\nconst onTimeChanged = (value, index, is_from_to, in_de) => {\n  let temp = is_from_to ? state._from : state._to;\n  const i = hours.indexOf(value);\n  if (i + in_de >= 0 && i + in_de < hours.length) {\n    temp[index] = hours[i + in_de];\n    is_from_to ? State.update({ _from: temp }) : State.update({ _to: temp });\n    let error_temp = state._validate_error;\n    if (getTime(state._from[index]) >= getTime(state._to[index])) {\n      error_temp[index] = false;\n    } else {\n      error_temp[index] = true;\n    }\n    validate();\n    State.update({\n      _validate_error: error_temp,\n    });\n  }\n};\n\nconst getData = () => {\n  var zone = time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\n  var hours = parseInt(zone[0]);\n  var offset = hours + (parseInt(zone[1]) / 60) * ((hours > 0) * 2 - 1);\n  var temp = [];\n  var flag = false;\n  for (var i = 0; i < 7; i++) {\n    if (state._is_on[i]) {\n      for (var j = 0; j < 2; j++) {\n        const time =\n          j == 0\n            ? getTime(state._from[i]) + 24 * i - offset\n            : getTime(state._to[i]) + 24 * i - offset;\n        if (time > 168) {\n          temp.push(time - 168);\n          flag = true;\n        } else if (time < 0) {\n          temp.push(time + 168);\n          flag = true;\n        } else temp.push(time);\n      }\n    }\n  }\n  const final = sortAndRemoveRepeated(flag, temp);\n  return {\n    index: {\n      Instance_time: JSON.stringify(\n        {\n          key: \"schedule\",\n          value: {\n            _data: final,\n            _time_zone: time_zone,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\nconst timeSelector = (f, index) => {\n  return (\n    <div style={table}>\n      <div className=\"d-flex\">\n        <select\n          style={comboBox(state._is_on[index])}\n          value={f ? state._from[index] : state._to[index]}\n          disabled={!state._is_on[index]}\n          onChange={(e) => {\n            onTimeChanged(e.target.value, index, f, 0);\n          }}\n        >\n          {hours.map((hour) => (\n            <option value={hour}>{hour}</option>\n          ))}\n        </select>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <div\n          onClick={() => {\n            if (state._is_on[index]) {\n              const value = f ? state._from[index] : state._to[index];\n              onTimeChanged(value, index, f, 1);\n            }\n          }}\n        >\n          <i\n            className=\"bi-caret-up\"\n            style={\n              state._is_on[index]\n                ? { color: \"rgb(53, 58, 64)\" }\n                : { color: \"rgb(225, 233, 240)\" }\n            }\n          ></i>\n        </div>\n        <div\n          onClick={() => {\n            if (state._is_on[index]) {\n              const value = f ? state._from[index] : state._to[index];\n              onTimeChanged(value, index, f, -1);\n            }\n          }}\n        >\n          <i\n            className=\"bi-caret-down\"\n            style={\n              state._is_on[index]\n                ? { color: \"rgb(53, 58, 64)\" }\n                : { color: \"rgb(225, 233, 240)\" }\n            }\n          ></i>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <div>\n    {context.accountId ? (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n        className=\"align-items-center\"\n      >\n        <div\n          style={{\n            width: \"100%\",\n            justifyContent: \"center\",\n            color: \"black\",\n            borderRadius: \"1rem\",\n            flexDirection: \"column\",\n          }}\n        >\n          <div\n            style={{\n              marginTop: \"1rem\",\n              justifyContent: \"center\",\n              width: \"100%\",\n              color: \"black\",\n              fontWeight: 400,\n              borderRadius: \"1rem\",\n              flexDirection: \"column\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n              className=\"mt-3\"\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  background: \"white\",\n                  padding: \"6px\",\n                }}\n              >\n                <div style={flex_row}>\n                  {tbl_headers.map((header) => (\n                    <div style={table}>{header}</div>\n                  ))}\n                </div>\n              </div>\n              {days.map((day, index) => (\n                <div\n                  className=\"mb-2\"\n                  style={{\n                    display: \"flex\",\n                    background: \"white\",\n                    padding: \"6px\",\n                    backgroundColor: \"white\",\n                    padding: \"0.5rem 1.5rem\",\n                    borderRadius: \"0.8rem\",\n                    border: \"1.5px solid rgb(225, 233, 240)\",\n                    color: \"rgb(71, 77, 85)\",\n                    letterSpacing: \"-0.01em\",\n                    width: \"100%\",\n                  }}\n                >\n                  <div style={flex_row}>\n                    <div style={table}>{day}</div>\n                    <div style={table}>\n                      <div className=\"form-check form-switch\">\n                        <input\n                          style={\n                            state._is_on[index]\n                              ? {\n                                  backgroundColor: \"rgb(53, 58, 64)\",\n                                  borderColor: \"rgb(71, 77, 85)\",\n                                }\n                              : {\n                                  backgroundColor: \"white\",\n                                  borderColor: \"rgb(118, 123, 142)\",\n                                }\n                          }\n                          className=\"form-check-input\"\n                          type=\"checkbox\"\n                          role=\"switch\"\n                          checked={state._is_on[index]}\n                          id={day + index}\n                          key={day + index + state._is_on[index]}\n                          onChange={(e) => {\n                            let temp = state._is_on;\n                            temp[index] = !temp[index];\n                            State.update({ _is_on: temp });\n                            if (!e.target.value) {\n                              state._from[index] = \"0\";\n                              state._to[index] = \"0\";\n                              let error_temp = state._validate_error;\n                              State.update({\n                                _error_msg: `${(error_temp[index] = true)}`,\n                              });\n                              validate();\n                            }\n                          }}\n                        />\n                      </div>\n                    </div>\n                    {timeSelector(true, index)}\n                    {timeSelector(false, index)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flex: \"1\",\n            flexDirection: \"row\",\n            fontSize: \"large\",\n            color: \"red\",\n          }}\n        >\n          {days.map((day, index) => {\n            return !state._validate_error[index] && `${day} `;\n          })}\n          {!state._validate_result && \"time set wrong\"}\n        </div>\n        <div className=\"mt-3 w-100 d-flex flex-row-reverse justify-content-between\">\n          {!state._sent ? (\n            <CommitButton\n              style={\n                state.hoveringElement == \"saveButton\"\n                  ? {\n                      border: \"2px solid black\",\n                      color: \"black\",\n                      backgroundColor: \"white\",\n                      fontWeight: \"500\",\n                      fontSize: \"1rem\",\n                      margin: \"0\",\n                      padding: \"0.3rem 1.5rem\",\n                      borderRadius: \"12px\",\n                    }\n                  : {\n                      border: \"2px solid transparent\",\n                      fontWeight: \"500\",\n                      fontSize: \"1rem\",\n                      margin: \"0\",\n                      padding: \"0.3rem 1.5rem\",\n                      backgroundColor: \"#010A2D\",\n                      borderRadius: \"12px\",\n                      color: \"white\",\n                    }\n              }\n              onMouseEnter={() => {\n                State.update({ hoveringElement: \"saveButton\" });\n              }}\n              onMouseLeave={() => {\n                State.update({ hoveringElement: \"\" });\n              }}\n              onCommit={() => {\n                State.update({ _sent: true });\n              }}\n              disabled={!state._validate_result}\n              data={getData()}\n            >\n              Save\n            </CommitButton>\n          ) : (\n            <button\n              onClick={() => {\n                updateInstanceTimeState({ tab: tabs.ALL_SCHEDULE.id });\n              }}\n              style={\n                state.hoveringElement == \"viewScheduels\"\n                  ? {\n                      border: \"2px solid black\",\n                      color: \"black\",\n                      backgroundColor: \"white\",\n                      fontWeight: \"500\",\n                      fontSize: \"1rem\",\n                      margin: \"0\",\n                      padding: \"0.3rem 1.5rem\",\n                      borderRadius: \"12px\",\n                    }\n                  : {\n                      border: \"2px solid transparent\",\n                      fontWeight: \"500\",\n                      fontSize: \"1rem\",\n                      margin: \"0\",\n                      padding: \"0.3rem 1.5rem\",\n                      backgroundColor: \"#010A2D\",\n                      borderRadius: \"12px\",\n                      color: \"white\",\n                    }\n              }\n              onMouseEnter={() => {\n                State.update({ hoveringElement: \"viewScheduels\" });\n              }}\n              onMouseLeave={() => {\n                State.update({ hoveringElement: \"\" });\n              }}\n            >\n              View Scheduels\n            </button>\n          )}\n\n          <button\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"cancelNewSchedule\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => {\n              updateInstanceTimeState({ showAbortScheduleCreation: true });\n            }}\n            style={\n              state.hoveringElement == \"cancelNewSchedule\"\n                ? {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n                : {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n            }\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div>SignIn first plz!</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/silkking.near/widget/Instance_time_setting"}