{"tx_hash": "7KyNGQ5wx3L3KYj5EVvxxvemJ6DL5e9DzJEeCnLjLd5F", "action_id_social": "7UZWeXmoMPC761UMrNVgtUHyAhPWDA6jyUqGKmWpfJCV-0-widget", "block_id": 87879994, "block_timestamp": "2023-03-22 15:51:42.442", "signer_id": "sainthiago.near", "widget_name": "contract-stats", "source_code": "const statsQuery = JSON.stringify({\n  query: `\n  query getContractStats{\n    nfts: nft_tokens_aggregate( where: {nft_contracts: {id: {_eq: \"${state.contract}\"}}}) {\n      aggregate {\n        count\n      }\n    }\n\n    owners: nft_tokens_aggregate(distinct_on: owner, where: {nft_contracts: {id: {_eq: \"${state.contract}\"}}}) {\n        aggregate {\n          count\n        }\n    }\n\n    floor: nft_listings(order_by: {price: asc}, where: {unlisted_at: {_is_null: true}, invalidated_at: {_is_null: true}, accepted_at: {_is_null: true}, nft_contracts: { id: {_eq: \"${state.contract}\"}}}, limit: 10) {\n      price\n    }   \n\n    minters: mb_store_minters_aggregate(where: {nft_contract_id: {_eq: \"${state.contract}\"}}) {\n        aggregate {\n        count\n        }\n    }   \n    volume: nft_earnings_aggregate(where: {nft_contract_id: {_eq: \"${state.contract}\"}, _and: {approval_id: {_is_null: false}}}) {\n        aggregate {\n            sum {\n            amount\n            }\n        }\n    }}\n`,\n});\n\nfunction getContractStats() {\n  State.update({ loading: true });\n\n  asyncFetch(\"https://graph.mintbase.xyz\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: statsQuery,\n  }).then((res) => {\n    State.update({ stats: res?.body?.data, loading: false });\n  });\n}\n\nreturn (\n  <>\n    <div className=\"d-flex flex-column align-items-center\">\n      <input\n        type=\"text\"\n        onChange={(e) =>\n          State.update({\n            contract: e.target.value,\n            stats: null,\n            loading: false,\n          })\n        }\n        placeholder=\"\ud83d\udcc3 Contract Name\"\n      />\n      <div>\n        <button\n          className=\"btn btn-outline-secondary border mt-4\"\n          type=\"button\"\n          onClick={getContractStats}\n        >\n          Check Stats\n        </button>\n      </div>\n    </div>\n    {state?.loading ? (\n      <p className=\"text-center mt-5\">Loading...</p>\n    ) : state?.contract && state?.stats && Object.keys(state?.stats)?.length ? (\n      <div className=\"container mt-5\">\n        <div className=\"row flex-wrap justify-content-center\">\n          {Object.keys(state.stats).map((key, index) => (\n            <div className=\"col col-6 col-md-4 mb-4\">\n              <div className=\"card card-stats mb-4 mb-xl-0\">\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    <div className=\"col\">\n                      <h6 className=\"card-title text-uppercase text-muted mb-0\">\n                        {key}\n                      </h6>\n                      <span className=\"h6 font-weight-bold mb-0\">\n                        {key === \"volume\"\n                          ? `${(\n                              (state.stats[key].aggregate?.sum?.amount || 0) /\n                              1e24\n                            ).toFixed(2)} N`\n                          : key === \"floor\"\n                          ? `${(\n                              (state.stats[key][0]?.price || 0) / 1e24\n                            ).toFixed(2)} N`\n                          : state.stats[key].aggregate?.count || 0}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    ) : null}\n  </>\n);\n", "metadata": NaN, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/sainthiago.near/widget/contract-stats", "branch.draft": NaN, "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.component": NaN, "metadata.tags.contract-stats": NaN, "metadata.tags.stats": NaN}