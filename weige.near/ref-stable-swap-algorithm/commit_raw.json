{"tx_hash": "AMH59bdNbkdDcrCyBAD9aWS1kw45SA3vqnmr34415kfs", "action_id_social": "DVuyrZtfYa3nPaHW2iwr4tUF7jomwiZ5D9mbt2CcfFey-0-widget", "block_id": 88725518, "block_timestamp": "2023-04-03 13:18:02.170", "signer_id": "weige.near", "widget_name": "ref-stable-swap-algorithm", "source_code": "const shrinkToken = (value, decimals) => {\n  return new Big(value || 0).div(new Big(10).pow(decimals || 24)).toFixed();\n};\n\nconst REF_FI_CONTRACT_ID = \"v2.ref-finance.near\";\n\nconst FEE_DIVISOR = 10000;\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals)).toFixed();\n};\n\nconst tradeFee = (amount, trade_fee) => {\n  return (amount * trade_fee) / FEE_DIVISOR;\n};\n\nconst calc_d = (amp, c_amounts) => {\n  const token_num = c_amounts.length;\n\n  let sum_amounts = 0;\n  c_amounts.reduce((acc, cur) => {\n    sum_amounts = sum_amounts + cur;\n  }, 0);\n\n  let d_prev = 0;\n  let d = sum_amounts;\n  for (let i = 0; i < 256; i++) {\n    let d_prod = d;\n    for (let c_amount of c_amounts) {\n      d_prod = (d_prod * d) / (c_amount * token_num);\n    }\n    d_prev = d;\n    const ann = amp * Math.pow(token_num, token_num);\n    const numerator = d_prev * (d_prod * token_num + ann * sum_amounts);\n    const denominator = d_prev * (ann - 1) + d_prod * (token_num + 1);\n    d = numerator / denominator;\n    if (Math.abs(d - d_prev) <= 1) break;\n  }\n  return d;\n};\n\nconst calc_y = (amp, x_c_amount, current_c_amounts, index_x, index_y) => {\n  const token_num = current_c_amounts.length;\n  const ann = amp * Math.pow(token_num, token_num);\n  const d = calc_d(amp, current_c_amounts);\n  let s = x_c_amount;\n  let c = (d * d) / x_c_amount;\n  for (let i = 0; i < token_num; i++) {\n    if (i != index_x && i != index_y) {\n      s += current_c_amounts[i];\n      c = (c * d) / current_c_amounts[i];\n    }\n  }\n  c = (c * d) / (ann * Math.pow(token_num, token_num));\n  const b = d / ann + s;\n  let y_prev = 0;\n  let y = d;\n  for (let i = 0; i < 256; i++) {\n    y_prev = y;\n    const y_numerator = Math.pow(y, 2) + c;\n    const y_denominator = 2 * y + b - d;\n    y = y_numerator / y_denominator;\n    if (Math.abs(y - y_prev) <= 1) break;\n  }\n\n  return y;\n};\n\nconst calc_swap = (\n  amp,\n  in_token_idx,\n  in_c_amount,\n  out_token_idx,\n  old_c_amounts,\n  trade_fee\n) => {\n  const y = calc_y(\n    amp,\n    in_c_amount + old_c_amounts[in_token_idx],\n    old_c_amounts,\n    in_token_idx,\n    out_token_idx\n  );\n  const dy = old_c_amounts[out_token_idx] - y;\n  const fee = tradeFee(dy, trade_fee);\n  const amount_swapped = dy - fee;\n  return [amount_swapped, fee, dy];\n};\n\nconst getSwappedAmount = (\n  tokenInId,\n  tokenOutId,\n  amountIn,\n  stablePool,\n  stablePoolDecimal,\n  pool\n) => {\n  const amp = stablePool.amp;\n  const trade_fee = stablePool.total_fee;\n\n  console.log(stablePool, \"stablepool\");\n\n  const in_token_idx = stablePool.token_account_ids.findIndex(\n    (id) => id === tokenInId\n  );\n\n  const out_token_idx = stablePool.token_account_ids.findIndex(\n    (id) => id === tokenOutId\n  );\n\n  const STABLE_LP_TOKEN_DECIMALS = stablePoolDecimal;\n\n  const rates = stablePool.rates.map((r) =>\n    shrinkToken(r, STABLE_LP_TOKEN_DECIMALS)\n  );\n\n  const base_old_c_amounts = stablePool.c_amounts.map((amount) =>\n    shrinkToken(amount, STABLE_LP_TOKEN_DECIMALS)\n  );\n\n  const old_c_amounts = base_old_c_amounts\n    .map((amount, i) =>\n      expandToken(\n        new Big(amount || 0).mul(new Big(rates[i])).toFixed(),\n        STABLE_LP_TOKEN_DECIMALS\n      )\n    )\n    .map((amount) => Number(amount));\n\n  const in_c_amount = Number(\n    expandToken(\n      new Big(amountIn).mul(new Big(rates[in_token_idx])).toFixed(),\n      STABLE_LP_TOKEN_DECIMALS\n    )\n  );\n\n  console.log(in_c_amount, old_c_amounts, base_old_c_amounts, rates, rates);\n\n  const [amount_swapped, fee, dy] = calc_swap(\n    amp,\n    in_token_idx,\n    in_c_amount,\n    out_token_idx,\n    old_c_amounts,\n    trade_fee\n  );\n\n  const res = [\n    amount_swapped / Number(rates[out_token_idx]),\n    fee,\n    dy / Number(rates[out_token_idx]),\n  ];\n\n  const amountOut = res[0] < 0 ? \"0\" : new Big(res[0]).toFixed(0, 0);\n\n  return shrinkToken(amountOut, STABLE_LP_TOKEN_DECIMALS);\n};\n\nconst getStablePoolDetail = (pool_id, pool_kind) => {\n  if (pool_kind === \"RATED_SWAP\") {\n    const pool_info = Near.view(REF_FI_CONTRACT_ID, \"get_rated_pool\", {\n      pool_id: Number(pool_id),\n    });\n\n    console.log(pool_info, \"pool_info\");\n\n    return {\n      ...pool_info,\n      id: pool_id,\n    };\n  } else {\n    const pool_info = Near.view(REF_FI_CONTRACT_ID, \"get_stable_pool\", {\n      pool_id: Number(pool_id),\n    });\n\n    console.log(pool_info, \"pool_info\");\n\n    return {\n      ...pool_info,\n      id: pool_id,\n      rates: pool_info.c_amounts.map((i) => expandToken(\"1\", 18).toFixed()),\n    };\n  }\n};\n\nconst { tokenIn, tokenOut, amountIn, pool, loadRes } = props;\nconsole.log(pool, \" pool\");\n\nconst stablePoolDecimal = pool.pool_kind === \"STABLE_SWAP\" ? 18 : 24;\n\nconst stablePool = getStablePoolDetail(pool.id, pool.pool_kind);\n\nconsole.log(stablePool, \" stablePool\");\n\nconst res = getSwappedAmount(\n  tokenIn.id,\n  tokenOut.id,\n  amountIn,\n  stablePool,\n  stablePoolDecimal,\n  pool\n);\n\nloadRes({\n  tokenIn,\n  tokenOut,\n  estimate: res,\n  pool,\n});\n\nreturn <div />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/weige.near/widget/ref-stable-swap-algorithm"}