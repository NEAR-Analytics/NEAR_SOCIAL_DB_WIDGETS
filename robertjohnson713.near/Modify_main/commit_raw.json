{"tx_hash": "Cs8J1Jmi6w7qgSjX6bG66DByXqYDAZJEhrMP6XFi6fFj", "action_id_social": "EC9XCmpaXPVMRZjBzMwmGA4RNwKPbmcZoRBziTT1UgY4-0-widget", "block_id": 94587698, "block_timestamp": "2023-06-20T04:02:35.520Z", "signer_id": "robertjohnson713.near", "widget_name": "Modify_main", "source_code": "State.init({\r\n  questionbar_view: true,\r\n  ques_id: [],\r\n  ques_content: [],\r\n  showPoll: 0,\r\n  showPollbar: false,\r\n  showPollcontent: 0,\r\n  profile: {},\r\n  polls: {},\r\n  answers: {},\r\n  setpoll: {},\r\n  showkeyval: 0,\r\n  setpoll: {},\r\n  setblockHeiht: 0,\r\n});\r\n\r\n//Define Style\r\nconst scrolldiv = styled.div`\r\n    ::-webkit-scrollbar {\r\n        width: 6px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-track {\r\n        background: none;\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: white;\r\n        border-radius: 20px;\r\n    }\r\n`;\r\nconst widgetOwner = \"easypoll.near\";\r\nconst contentbgcolor = \"#c7bdbe\";\r\nconst accountlistcolor = \"#00bcd4\";\r\nconst accountlistsetcolor = \"#ff9800\";\r\nconst bgcolor = \"#373a3b\";\r\nconst accountbgcolor = \"#c7bdbe\";\r\nconst sidebgcolor = \"#a99a9c\";\r\nconst viewpollbg = \"#71757b\";\r\nconst mainbg = \"#C6C9D0\";\r\nconst bgAccountheight = \"65vh\";\r\nconst bgPollheight = \"60vh\";\r\nconst bgQuestionheight = \"65vh\";\r\nconst boxShadow =\r\n  \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\";\r\nconst boxShadowTitle =\r\n  \"0 4px 2px 0 rgba(0, 0, 0, 0.2), 0 2px 1px 0 rgba(0, 0, 0, 0.1)\";\r\nconst divinputsytle = styled.div`\r\n  width: 5%;\r\n  float: left;\r\n  display: inline-block;\r\n`;\r\nconst divlabelstyle = styled.div`\r\n  color: black;\r\n  margin-left: 2%;\r\n  width: 90%\"\r\n  display: inline-block;\r\n`;\r\n\r\nconst Gettime = (time) => {\r\n  const d = new Date(time);\r\n  let years = d.getFullYear();\r\n  let months = d.getMonth();\r\n  let days = d.getDate();\r\n  let hours = d.getHours();\r\n  let minutes = d.getMinutes();\r\n  let seconds = d.getSeconds();\r\n  return (\r\n    years +\r\n    \"-\" +\r\n    months +\r\n    \"-\" +\r\n    days +\r\n    \" \" +\r\n    hours +\r\n    \":\" +\r\n    minutes +\r\n    \":\" +\r\n    seconds\r\n  );\r\n};\r\n//Shorter AccountId\r\nfunction ShorterId(accountId, length) {\r\n  if (accountId.length > length) {\r\n    return accountId.slice(0, length) + \"...\";\r\n  }\r\n  return accountId;\r\n}\r\n\r\nfunction sliceString(string, newStringLength) {\r\n  if (string.length > newStringLength) {\r\n    return string.slice(0, newStringLength) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction isActive(polls) {\r\n  return polls.startTimestamp < Date.now() && Date.now() < polls.endTimestamp;\r\n}\r\n\r\nfunction isUpcoming(polls) {\r\n  return polls.startTimestamp > Date.now();\r\n}\r\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\r\n  const answers = Social.index(\"poll_question\", \"answer-v3.1.0\");\r\n\r\n  if (JSON.stringify(answers) != JSON.stringify(state.answers)) {\r\n    State.update({ answers: answers });\r\n  }\r\n\r\n  if (!answers) {\r\n    return \"Loading\";\r\n  }\r\n  const answersFromThisQuestion = answers.filter(\r\n    (a) => a.value.questionBlockHeight == questionBlockHeight\r\n  );\r\n  const usersWithAnswers = answersFromThisQuestion.map((a) => a.accountId);\r\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\r\n    (u, index) => usersWithAnswers.indexOf(u) == index\r\n  );\r\n  return usersWithAnswersWithoutDuplicates.length;\r\n}\r\n\r\n//Loading Polls\r\n//Input Polls\r\nlet polls = Social.index(\"poll_question\", \"question-v3.1.0\");\r\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\r\n  State.update({ polls: polls });\r\n}\r\nif (!polls) {\r\n  return \"loading\";\r\n}\r\npolls.sort((a, b) => b.value.startTimestamp - a.value.startTimestamp);\r\nlet sort_polls = [\r\n  {\r\n    id: polls[0].accountId,\r\n    value: [polls[0].value],\r\n    blockHeight: polls[0].blockHeight,\r\n    activeCount: 0,\r\n    upcomeingCount: 0,\r\n    closedCount: 0,\r\n  },\r\n];\r\nfor (let i = 1; i < polls.length; i++) {\r\n  let flag = 0;\r\n  for (let j = 0; j < sort_polls.length; j++) {\r\n    if (polls[i].accountId != sort_polls[j].id) {\r\n      flag = 1;\r\n    } else {\r\n      flag = 0;\r\n      sort_polls[j].value.push(polls[i].value);\r\n      sort_polls[j].blockHeight.push(polls[i].blockHeight);\r\n      {\r\n        isUpcoming(polls[i].value)\r\n          ? sort_polls[j].upcomeingCount++\r\n          : isActive(polls[i].value)\r\n          ? sort_polls[j].activeCount++\r\n          : sort_polls[j].closedCount++;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (flag == 1) {\r\n    sort_polls.push({\r\n      id: polls[i].accountId,\r\n      value: [polls[i].value],\r\n      blockHeight: [polls[i].blockHeight],\r\n    });\r\n    sort_polls[sort_polls.length - 1].upcomeingCount = 0;\r\n    sort_polls[sort_polls.length - 1].activeCount = 0;\r\n    sort_polls[sort_polls.length - 1].closedCount = 0;\r\n    isUpcoming(polls[i].value)\r\n      ? sort_polls[sort_polls.length - 1].upcomeingCount++\r\n      : isActive(polls[i].value)\r\n      ? sort_polls[sort_polls.length - 1].activeCount++\r\n      : sort_polls[sort_polls.length - 1].closedCount++;\r\n  }\r\n}\r\nif (!sort_polls) {\r\n  return \"loading\";\r\n}\r\n\r\n//View User's Profile\r\nconst onviewAccount = (id, view_site, activeCount) => {\r\n  let profile = Social.getr(`${id}/profile`);\r\n  if (JSON.stringify(profile) != JSON.stringify(state.profile)) {\r\n    State.update({ profile: profile });\r\n  }\r\n\r\n  if (state.profile == {}) {\r\n    return \"Loading\";\r\n  }\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"d-flex\"\r\n        style={{\r\n          float: \"left\",\r\n          display: \"inline-block\",\r\n          borderRadius: \"5px\",\r\n          width: \"90%\",\r\n        }}\r\n      >\r\n        <a\r\n          className=\"d-flex\"\r\n          href={`https://near.social/#/mob.near/widget/ProfilePage?accountId=${id}`}\r\n          style={{ color: \"#010A2D\" }}\r\n        >\r\n          {profile ? (\r\n            <Widget\r\n              src=\"mob.near/widget/ProfileImage\"\r\n              props={{\r\n                profile,\r\n                accountId: id,\r\n                className: \"float-start d-inline-block me-1 \",\r\n                style: { width: \"2em\", height: \"2em\" },\r\n              }}\r\n            />\r\n          ) : (\r\n            <div className=\"d-flex\">\r\n              <div\r\n                className=\"profile-image d-inline-block me-1 \"\r\n                style={{ width: \"2em\", height: \"2em\" }}\r\n              >\r\n                <img\r\n                  className=\"rounded w-100 h-100\"\r\n                  src=\"https://i.near.social/thumbnail/https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\"\r\n                  alt={id}\r\n                  style={{ objectFit: \"cover\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </a>\r\n        {view_site == 0 ? (\r\n          <div>\r\n            <div\r\n              style={{\r\n                fontWeight: \"500\",\r\n                fontSize: \"0.8rem\",\r\n                textDecotarion: \"none\",\r\n                padding: \"0\",\r\n                float: \"left\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              {profile == {}\r\n                ? \"Loading\"\r\n                : profile != undefined\r\n                ? ShorterId(profile.name, 12)\r\n                : ShorterId(id, 12)}\r\n            </div>\r\n            <div\r\n              style={{\r\n                textDecotarion: \"none\",\r\n                padding: \"0\",\r\n                fontSize: \"0.6rem\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              {ShorterId(id, 15)}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {profile == {}\r\n              ? \"Loading\"\r\n              : profile != undefined\r\n              ? ShorterId(profile.name, 25)\r\n              : ShorterId(id, 25)}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div\r\n        style={{\r\n          float: \"right\",\r\n          display: \"inline-block\",\r\n          borderRadius: \"5px\",\r\n          width: \"10%\",\r\n        }}\r\n      >\r\n        {activeCount != 0 && view_site == 0 && (\r\n          <span\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              padding: \"0 5px\",\r\n              fontSize: \"0.7rem\",\r\n              borderRadius: \"10px\",\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            {activeCount}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div\r\n    className=\"pt-4\"\r\n    style={{\r\n      borderRadius: \"0.375rem\",\r\n      backgroundImage: `linear-gradient(to right bottom, white, ${mainbg})`,\r\n      boxShadow: boxShadow,\r\n      padding: \"20px 20px\",\r\n      height: \"80vh\",\r\n      margin: \"0 auto\",\r\n    }}\r\n  >\r\n    <div\r\n      style={{\r\n        padding: \"3px 3px\",\r\n        backgroundColor: \"white\",\r\n        boxShadow: boxShadow,\r\n        borderRadius: \"20px\",\r\n        textAlign: \"center\",\r\n        textShadow: \"2px 2px 4px #000000\",\r\n        fontWeight: 800,\r\n        fontSize: \"1rem\",\r\n      }}\r\n    >\r\n      View_Polls\r\n    </div>\r\n    <div\r\n      className=\"\"\r\n      style={{\r\n        backgroundColor: `${accountbgcolor}`,\r\n        width: \"20%\",\r\n        display: \"inline-block\",\r\n        float: \"left\",\r\n        padding: \"2px, 2px\",\r\n        borderTopLeftRadius: \"10px\",\r\n        boxShadow: boxShadow,\r\n        marginBottom: \"1 auto\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          padding: \"3px 3px\",\r\n        }}\r\n      >\r\n        <input\r\n          type=\"search\"\r\n          style={{\r\n            padding: \"2px 3px\",\r\n            width: \"100%\",\r\n            color: \"black\",\r\n            height: \"30px\",\r\n            Maxheight: \"30px\",\r\n          }}\r\n          placeholder=\"Search\"\r\n        ></input>\r\n      </div>\r\n      <scrolldiv\r\n        style={{\r\n          height: `${bgAccountheight}`,\r\n          maxHeight: `${bgAccountheight}`,\r\n          paddingTop: \"5px\",\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        {sort_polls.length > 0 ? (\r\n          sort_polls.map((account, index) => (\r\n            <button\r\n              key={index}\r\n              style={{\r\n                padding: \"1px 2px\",\r\n                marginLeft: \"2%\",\r\n                marginTop: \"1px\",\r\n                backgroundColor: `${\r\n                  index == state.showPoll\r\n                    ? accountlistsetcolor\r\n                    : accountlistcolor\r\n                }`,\r\n                boxShadow: boxShadow,\r\n                width: \"98%\",\r\n                overflow: \"hidden\",\r\n                borderStyle: \"none\",\r\n              }}\r\n              onClick={() => {\r\n                State.update({ showPoll: index, showPollbar: false });\r\n              }}\r\n            >\r\n              {onviewAccount(account.id, 0, account.activeCount)}\r\n            </button>\r\n          ))\r\n        ) : (\r\n          <h4>No sort_polls found...</h4>\r\n        )}\r\n      </scrolldiv>\r\n    </div>\r\n    {state.showPollbar == false && (\r\n      <div\r\n        style={{\r\n          backgroundColor: `${contentbgcolor}`,\r\n          width: `${state.questionbar_view == true ? \"50%\" : \"80%\"}`,\r\n          display: \"inline-block\",\r\n          boxShadow: boxShadowTitle,\r\n          borderTopRightRadius: `${\r\n            state.questionbar_view == true ? \"\" : \"15px\"\r\n          }`,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            boxShadow: boxShadowTitle,\r\n          }}\r\n        >\r\n          <h3\r\n            style={{\r\n              color: \"white\",\r\n              textAlign: \"center\",\r\n              textShadow: \"2px 2px 4px #000000\",\r\n              height: \"30px\",\r\n              Maxheight: \"30px\",\r\n            }}\r\n          >\r\n            POLLS\r\n          </h3>\r\n          <div>\r\n            {state.questionbar_view == true ? (\r\n              <button\r\n                onClick={() => {\r\n                  State.update({\r\n                    questionbar_view: false,\r\n                  });\r\n                }}\r\n                style={{\r\n                  backgroundColor: \"white\",\r\n                  width: \"5px\",\r\n                  padding: \"10px 10px\",\r\n                  borderRadius: \"15px\",\r\n                  boxShadow: boxShadow,\r\n                  borderStyle: \"none\",\r\n                  marginRight: \"-10px\",\r\n                  float: \"right\",\r\n                }}\r\n              ></button>\r\n            ) : (\r\n              <button\r\n                onClick={() => {\r\n                  State.update({\r\n                    questionbar_view: true,\r\n                    showPollbar: false,\r\n                  });\r\n                }}\r\n                style={{\r\n                  backgroundColor: \"white\",\r\n                  width: \"5px\",\r\n                  padding: \"15px 15px\",\r\n                  borderRadius: \"15px\",\r\n                  boxShadow: boxShadow,\r\n                  borderStyle: \"none\",\r\n                  marginRight: \"-15px\",\r\n                  float: \"right\",\r\n                }}\r\n              ></button>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"d-flex\"\r\n          style={{\r\n            backgroundColor: sidebgcolor,\r\n            boxShadow: boxShadow,\r\n            borderTopRightRadius: \"30px\",\r\n            marginBottom: \"10px\",\r\n            width: \"90%\",\r\n          }}\r\n        >\r\n          <p\r\n            style={{\r\n              color: \"white\",\r\n              display: \"inline-block\",\r\n              marginLeft: \"2%\",\r\n              marginTop: \"4px\",\r\n              marginBottom: \"0\",\r\n              overflow: \"hidden\",\r\n              width: \"75%\",\r\n            }}\r\n          >\r\n            {onviewAccount(sort_polls[state.showPoll].id, 1)}\r\n          </p>\r\n          <div\r\n            style={{\r\n              width: \"25%\",\r\n              display: \"inline-block\",\r\n              float: \"right\",\r\n              fontSize: \"0.8rem\",\r\n              marginBottom: \"0px\",\r\n            }}\r\n          >\r\n            <p style={{ color: \"white\", margin: \"0px\" }}>\r\n              Active:\r\n              <span\r\n                style={{\r\n                  marginLeft: \"8px\",\r\n                  backgroundColor: \"#D9FCEF\",\r\n                  borderRadius: \"10px\",\r\n                  padding: \"0 5px\",\r\n                  color: \"black\",\r\n                }}\r\n              >\r\n                {sort_polls[state.showPoll].activeCount}\r\n              </span>\r\n            </p>\r\n            <p style={{ color: \"white\", margin: \"0px\" }}>\r\n              Closed:\r\n              <span\r\n                style={{\r\n                  marginLeft: \"5px\",\r\n                  backgroundColor: \"#FFE5E5\",\r\n                  borderRadius: \"10px\",\r\n                  padding: \"0 5px\",\r\n                  color: \"black\",\r\n                }}\r\n              >\r\n                {sort_polls[state.showPoll].closedCount}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <scrolldiv\r\n          className=\"\"\r\n          style={{\r\n            height: `${bgPollheight}`,\r\n            maxHeight: `${bgPollheight}`,\r\n            overflowY: \"auto\",\r\n          }}\r\n        >\r\n          {sort_polls[state.showPoll].value.length > 0 ? (\r\n            sort_polls[state.showPoll].value.map((polls, index) => (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  padding: \"10px 10px\",\r\n                  marginLeft: \"2%\",\r\n                  marginRight: \"2%\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n                onClick={() => {\r\n                  let keyval = isUpcoming(polls) ? 0 : isActive(polls) ? 1 : 2;\r\n                  State.update({\r\n                    showPollcontent: index,\r\n                    showkeyval: keyval,\r\n                    setpoll: polls,\r\n                    setblockHeiht:\r\n                      sort_polls[state.showPoll].blockHeight[index],\r\n                  });\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    padding: \"3px\",\r\n                    borderTopLeftRadius: \"10px\",\r\n                    borderTopRightRadius: \"10px\",\r\n                  }}\r\n                >\r\n                  <button\r\n                    style={{\r\n                      position: \"relative\",\r\n                      border: \"2px solid transparent\",\r\n                      fontWeight: \"500\",\r\n                      fontSize: \"0.8rem\",\r\n                      padding: \"0rem 0.2rem\",\r\n                      backgroundColor: bgcolor,\r\n                      marginRight: \"5px\",\r\n                      color: \"white\",\r\n                      float: \"right\",\r\n                      zIndex: \"9\",\r\n                    }}\r\n                    onClick={() => {\r\n                      let keyval = isUpcoming(polls)\r\n                        ? 0\r\n                        : isActive(polls)\r\n                        ? 1\r\n                        : 2;\r\n                      State.update({\r\n                        showPollbar: true,\r\n                        showPollcontent: index,\r\n                        showkeyval: keyval,\r\n                        setpoll: polls,\r\n                        setblockHeiht:\r\n                          sort_polls[state.showPoll].blockHeight[index],\r\n                      });\r\n                    }}\r\n                  >\r\n                    {isUpcoming(polls)\r\n                      ? \"Preview\"\r\n                      : isActive(polls)\r\n                      ? \"Vote\"\r\n                      : \"Result\"}\r\n                  </button>\r\n                  <div>\r\n                    <span\r\n                      style={{\r\n                        backgroundColor: isUpcoming(polls)\r\n                          ? \"#FFF3B4\"\r\n                          : isActive(polls)\r\n                          ? \"#D9FCEF\"\r\n                          : \"#FFE5E5\",\r\n                        height: \"1.5rem\",\r\n                        width: \"4rem\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"5px\",\r\n                        marginRight: \"1rem\",\r\n                        lineHeight: \"1.5rem\",\r\n                        fontSize: \"0.8rem\",\r\n                        letterSpacing: \"-0.025rem\",\r\n                        padding: \"2px 4px\",\r\n                        color: isUpcoming(polls)\r\n                          ? \"#FFC905\"\r\n                          : isActive(polls)\r\n                          ? \"#00B37D\"\r\n                          : \"#FF4747\",\r\n                        fontWeight: \"500\",\r\n                      }}\r\n                    >\r\n                      {isUpcoming(polls)\r\n                        ? \"Upcoming\"\r\n                        : isActive(polls)\r\n                        ? \"Active\"\r\n                        : \"Closed\"}\r\n                    </span>\r\n                    <span>\r\n                      <i className=\"bi bi-people\"></i>\r\n                      <span>\r\n                        {getValidAnswersQtyFromQuestion(\r\n                          sort_polls[state.showPoll].blockHeight[index]\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                <h5\r\n                  style={{\r\n                    padding: \"5px 5px\",\r\n                    color: \"#76c2f3\",\r\n                    backgroundColor: `${contentbgcolor}`,\r\n                    paddingLeft: \"2%\",\r\n                    borderBottomStyle: \"solid\",\r\n                    borderBottomWidth: \"2px\",\r\n                    borderBottomColor: \"white\",\r\n                    boxShadow: boxShadow,\r\n                    marginBottom: \"0\",\r\n                  }}\r\n                >\r\n                  <p\r\n                    style={{\r\n                      color: \"black\",\r\n                      marginBottom: \"0\",\r\n                      fontSize: \"1.1rem\",\r\n                    }}\r\n                  >\r\n                    TiTlE:\r\n                    <span style={{ marginLeft: \"5px\", color: \"white\" }}>\r\n                      {polls.title}\r\n                    </span>\r\n                  </p>\r\n                </h5>\r\n                <div\r\n                  style={{\r\n                    backgroundColor: `white`,\r\n                    borderColor: \"white\",\r\n                    borderStyle: \"solid\",\r\n                    borderWidth: \"2px\",\r\n                    boxShadow: boxShadow,\r\n                    width: \"100%\",\r\n\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <p\r\n                    style={{\r\n                      color: \"bloack\",\r\n                      paddingLeft: \"2%\",\r\n                      textShadow: \"2px 2px 4px #000000\",\r\n                      margin: 0,\r\n                      textDecorationLine: \"underline\",\r\n                      textDecorationColor: \"blue\",\r\n                    }}\r\n                  >\r\n                    Description:\r\n                  </p>\r\n                  <p\r\n                    style={{\r\n                      color: \"black\",\r\n                      width: \"100%\",\r\n                      backgroundColor: \"white\",\r\n                      paddingLeft: \"3%\",\r\n                      marginBottom: 2,\r\n                    }}\r\n                  >\r\n                    {polls.description}\r\n                  </p>\r\n                </div>\r\n                <h5\r\n                  style={{\r\n                    padding: \"5px 5px\",\r\n                    color: \"#76c2f3\",\r\n                    backgroundColor: `${contentbgcolor}`,\r\n                    paddingLeft: \"2%\",\r\n                    borderBottomStyle: \"solid\",\r\n                    borderBottomWidth: \"2px\",\r\n                    borderBottomColor: \"white\",\r\n                    borderBottomLeftRadius: \"15px\",\r\n                    borderBottomRightRadius: \"15px\",\r\n                    boxShadow: boxShadow,\r\n                    marginBottom: \"0\",\r\n                  }}\r\n                >\r\n                  <p\r\n                    style={{\r\n                      color: \"black\",\r\n                      marginBottom: \"0\",\r\n                      fontSize: \"0.7rem\",\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    <span\r\n                      style={{\r\n                        color: `black`,\r\n                        marginRight: \"2px\",\r\n                        borderRadius: \"3px\",\r\n                        fontWeight: \"500\",\r\n                        fontSize: \"1rem\",\r\n                      }}\r\n                    >\r\n                      Period:\r\n                    </span>\r\n                    {Gettime(polls.startTimestamp)}\r\n                    <span style={{ marginLeft: \"2px\" }}>-</span>\r\n                    {Gettime(polls.endTimestamp)}\r\n                    <span style={{ color: \"blue\" }}>\r\n                      {Date.now() < polls.startTimestamp ||\r\n                      (Date.now() > polls.startTimestamp &&\r\n                        Date.now() < polls.endTimestamp) ? (\r\n                        <span>|Ends</span>\r\n                      ) : (\r\n                        <span>|Ended</span>\r\n                      )}\r\n                      <Widget\r\n                        src={`silkking.near/widget/timeAgo`}\r\n                        props={{\r\n                          reduced: true,\r\n                          timeInFuture: polls.endTimestamp,\r\n                        }}\r\n                      />\r\n                    </span>\r\n                  </p>\r\n                </h5>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <h4 style={{ color: \"white\" }}>No sort_polls found...</h4>\r\n          )}\r\n        </scrolldiv>\r\n      </div>\r\n    )}\r\n    {state.questionbar_view == true && (\r\n      <div\r\n        className=\"\"\r\n        style={{\r\n          backgroundColor: sidebgcolor,\r\n          width: `${state.showPollbar == false ? \"30%\" : \"80%\"}`,\r\n          display: \"inline-block\",\r\n          float: \"right\",\r\n          borderTopRightRadius: \"10px\",\r\n        }}\r\n      >\r\n        <h3\r\n          style={{\r\n            color: \"white\",\r\n            textAlign: \"center\",\r\n            textShadow: \"2px 2px 4px #000000\",\r\n            height: \"30px\",\r\n            Maxheight: \"30px\",\r\n            boxShadow: boxShadowTitle,\r\n          }}\r\n        >\r\n          QUESTIONS\r\n        </h3>\r\n        <scrolldiv\r\n          style={{\r\n            height: `${bgQuestionheight}`,\r\n            maxHeight: `${bgQuestionheight}`,\r\n            overflowY: \"auto\",\r\n            overflowX: \"hidden\",\r\n          }}\r\n        >\r\n          {state.showPollbar == true && (\r\n            <button\r\n              onClick={() => {\r\n                State.update({\r\n                  showPollbar: false,\r\n                });\r\n              }}\r\n              style={{\r\n                position: \"relative\",\r\n                border: \"2px solid transparent\",\r\n                fontWeight: \"500\",\r\n                fontSize: \"0.8rem\",\r\n                padding: \"0.1rem 0.2rem\",\r\n                backgroundColor: bgcolor,\r\n                borderTopLeftRadius: \"15px\",\r\n                borderTopRightRadius: \"15px\",\r\n                color: \"white\",\r\n                float: \"right\",\r\n                marginRight: \"2%\",\r\n              }}\r\n            >\r\n              View_Des.\r\n            </button>\r\n          )}\r\n          <p\r\n            style={{\r\n              color: \"black\",\r\n              marginLeft: \"2%\",\r\n              marginTop: \"20px\",\r\n              marginBottom: 0,\r\n              width: \"96%\",\r\n              backgroundColor: \"white\",\r\n              borderTopLeftRadius: \"10px\",\r\n              borderTopRightRadius: \"10px\",\r\n              textAlign: \"center\",\r\n              boxShadow: boxShadow,\r\n            }}\r\n          >\r\n            Title:\r\n            <span>\r\n              {sort_polls[state.showPoll].value[state.showPollcontent].title}\r\n            </span>\r\n          </p>\r\n          {sort_polls[state.showPoll].value[state.showPollcontent].questions\r\n            .length > 0 ? (\r\n            sort_polls[state.showPoll].value[\r\n              state.showPollcontent\r\n            ].questions.map((questions, index) => (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  padding: \"1px 2px\",\r\n                  marginLeft: \"2%\",\r\n                  backgroundColor: accountbgcolor,\r\n                  borderColor: \"black\",\r\n                  borderBottomLeftRadius: \"10px\",\r\n                  borderBottomRightRadius: \"10px\",\r\n                  borderTopLeftRadius: `${index >= 1 && \"10px\"}`,\r\n                  borderTopRightRadius: `${index >= 1 && \"10px\"}`,\r\n                  width: \"96%\",\r\n                  overflow: \"hidden\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    height: \"2px\",\r\n                    width: \"100%\",\r\n                    backgroundColor: \"white\",\r\n                    boxShadow: boxShadow,\r\n                  }}\r\n                ></div>\r\n                <div className=\"d-flex\">\r\n                  <div style={{ width: \"12%\" }}>\r\n                    <p\r\n                      style={{\r\n                        backgroundColor: bgcolor,\r\n                        width: \"1.5rem\",\r\n                        color: \"white\",\r\n                        padding: \"0px 5px\",\r\n                        borderBottomLeftRadius: \"10px\",\r\n                        borderBottomRightRadius: \"10px\",\r\n                        marginLeft: \"2px\",\r\n                        textAlign: \"center\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    >\r\n                      {index + 1}\r\n                    </p>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      width: \"88%\",\r\n                      marginTop: \"-3px\",\r\n                      fontSize: \"1rem\",\r\n                      display: \"inline-block\",\r\n                    }}\r\n                  >\r\n                    {questions.question}\r\n                  </div>\r\n                </div>\r\n                <div style={{ fontSize: \"0.8rem\" }}>\r\n                  <p\r\n                    style={{\r\n                      color: \"white\",\r\n                      backgroundColor: `${contentbgcolor}`,\r\n                      paddingLeft: \"2%\",\r\n                      margin: 0,\r\n                      fontSize: \"0.9rem\",\r\n                    }}\r\n                  >\r\n                    Write your answer :\r\n                  </p>\r\n                  {questions.questionType == \"0\" && (\r\n                    <div style={{ marginLeft: \"2%\" }}>\r\n                      <div className=\"d-flex\">\r\n                        <divinputsytle>\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"radio\"\r\n                          ></input>\r\n                        </divinputsytle>\r\n                        <divlabelstyle>\r\n                          <label>Yes:</label>\r\n                        </divlabelstyle>\r\n                      </div>\r\n                      <div className=\"d-flex\">\r\n                        <divinputsytle>\r\n                          <input\r\n                            className=\"form-check-input\"\r\n                            type=\"radio\"\r\n                          ></input>\r\n                        </divinputsytle>\r\n                        <divlabelstyle>\r\n                          <label>No:</label>\r\n                        </divlabelstyle>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  {questions.questionType == \"1\" && (\r\n                    <div style={{ marginLeft: \"2%\" }}>\r\n                      {questions.choicesOptions.length > 0 ? (\r\n                        questions.choicesOptions.map((select, index) => (\r\n                          <div key={index} className=\"d-flex\">\r\n                            <divinputsytle>\r\n                              <input\r\n                                className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                              ></input>\r\n                            </divinputsytle>\r\n                            <divlabelstyle>\r\n                              <label>{select}:</label>\r\n                            </divlabelstyle>\r\n                          </div>\r\n                        ))\r\n                      ) : (\r\n                        <h4 style={{ color: \"white\" }}>\r\n                          No sort_polls found...\r\n                        </h4>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  {questions.questionType == \"2\" && (\r\n                    <div style={{ marginLeft: \"2%\" }}>\r\n                      {questions.choicesOptions.length > 0 ? (\r\n                        questions.choicesOptions.map((select, index) => (\r\n                          <div key={index} className=\"d-flex\">\r\n                            <divinputsytle>\r\n                              <input\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                              ></input>\r\n                            </divinputsytle>\r\n                            <divlabelstyle>\r\n                              <label>{select}:</label>\r\n                            </divlabelstyle>\r\n                          </div>\r\n                        ))\r\n                      ) : (\r\n                        <h4 style={{ color: \"white\" }}>\r\n                          No sort_polls found...\r\n                        </h4>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  {questions.questionType == \"3\" && (\r\n                    <div style={{ marginLeft: \"2%\" }}>\r\n                      <textarea\r\n                        rows=\"2\"\r\n                        style={{ width: \"98%\", color: \"black\" }}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <h4 style={{ color: \"white\" }}>No sort_polls found...</h4>\r\n          )}\r\n          <button\r\n            style={{\r\n              padding: \"0rem 1rem\",\r\n              marginRight: \"2%\",\r\n              backgroundColor: bgcolor,\r\n              float: \"right\",\r\n              borderBottomLeftRadius: \"15px\",\r\n              borderBottomRightRadius: \"15px\",\r\n              marginTop: \"-5px\",\r\n              borderStyle: \"none\",\r\n            }}\r\n          >\r\n            vote\r\n          </button>\r\n        </scrolldiv>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/robertjohnson713.near/widget/Modify_main", "__row_index": 0}