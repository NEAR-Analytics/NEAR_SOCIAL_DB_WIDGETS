{"tx_hash": "D7eT3QppnvQxGwe6qfNzXVs76KPzk2hWYc5LsjZmiPw7", "action_id_social": "bTCjvCrpHD7FqZTZu4Cdp5gv9e6XkUhU2reZzf5uVrm-0-widget", "block_id": 90112812, "block_timestamp": "2023-04-21 18:30:54.641", "signer_id": "dorgon108.near", "widget_name": "AccountProfileCard", "source_code": "const SEARCH_API_KEY = props.searchApiKey ?? \"0e42c01107b8f555a41bcc0fa7f2a4df\";\nconst APPLICATION_ID = props.appId ?? \"B6PI9UKKJT\";\nconst INDEX = props.index ?? \"prod_near-social-feed\";\nconst API_URL =\n  props.apiUrl ??\n  `https://${APPLICATION_ID}-dsn.algolia.net/1/indexes/${INDEX}/query?`;\nconst INITIAL_PAGE = props.initialPage ?? 0;\nconst facets = props.facets ?? [\"All\", \"People\", \"Apps\", \"Components\", \"Posts\"];\nconst tab = props.tab ?? \"All\";\nconst showHeader = props.showHeader ?? true;\nconst showSearchBar = props.showSearchBar ?? true;\nconst showPagination = props.showPagination ?? true;\nconst userId = props.accountId ?? context.accountId;\n\nState.init({\n  currentPage: 0,\n  selectedTab: \"All\",\n  facet: tab,\n  isFiltersPanelVisible: false,\n  numColumns: 3,\n  selectedTags: [],\n  searchResults: [], // Assuming search results are stored here\n  allTags: [],\n  activeTags: [],\n\n  showFollowed: false,\n  showNotFollowed: false,\n});\n\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\n\nconst componentsUrl = `/#/near/widget/ComponentsPage`;\nconst peopleUrl = `/#/near/widget/PeoplePage`;\n\n// Styling Specifications\n\nconst typeAheadContainer = {\n  width: \"513px\",\n  height: \"458px\",\n  zIndex: \"3\",\n  backgroundColor: \"black\",\n  borderRadius: \"10px\",\n  transform: \"translateX(50px)\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  textAlign: \"center\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  paddingLeft: \"24px\",\n  paddingRight: \"24px\",\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  max-width: 600px;\n  margin: 0 auto;\n  padding-left: 16px;\n  padding-right: 16px;\n  width: 100%;\n`;\nconst NoResults = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  font-size: 1.5rem;\n  color: #444;\n`;\n\nconst Header = styled.div`\n\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nconst Facets = styled.div`\n  overflow: auto;\n  \n`;\n\nconst H1 = styled.h1`\n  font-weight: 600;\n  font-size: 32px;\n  line-height: 39px;\n  color: #11181c;\n  margin: 0;\n\n`;\n\nconst FixedTabs = styled.div`\n    text-align: right;\n    top:0;\n  `;\n\nconst H2 = styled.h2`\n  font-weight: 400;\n  font-size: 20px;\n  line-height: 24px;\n  color: #687076;\n  margin: 0;\n\n`;\n\nconst H3 = styled.h3`\n  color: #687076;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-transform: uppercase;\n  margin: 0;\n`;\n\nconst Group = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n      margin:10px;\n\n`;\n\nconst GroupHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  line-height: 1.5rem;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"\")};\n  white-space: ${(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n  overflow-wrap: anywhere;\n\n  b {\n    font-weight: 600;\n    color: #11181c;\n  }\n\n  &[href] {\n    color: #006adc;\n    outline: none;\n    font-weight: 600;\n\n    &:hover,\n    &:focus {\n      color: #006adc;\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst Items = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  height: 48px;\n  border-bottom: 1px solid #eceef0;\n  overflow: auto;\n  scroll-behavior: smooth;\n\n  @media (max-width: 1200px) {\n    background: #f8f9fa;\n    border-top: 1px solid #eceef0;\n    margin-left: -12px;\n    margin-right: -12px;\n\n    > * {\n      flex: 1;\n    }\n  }\n`;\n\nconst Button = styled.button`\n    background-color: transparent;\n    border: none;\n    font-size: 14px;\n    font-weight: 600;\n    color: #9799f8;\n    cursor: pointer;\n    padding: 0;\n    text-decoration: underline;\n            text-align:right\n\n\n    &:hover {\n      color: #9799f8;\n    }\n  `;\n\nconst FixedFooter = styled.div`\n    padding: 1rem;\n    text-align: right;\n    border-top: 1px solid rgba(96, 109, 122, 0.4);\n    bottom: 0;\n    left: 16px;\n    right: 16px;\n    text-align:right\n    height:56px;\n    width: calc(100% - 32px); // 100% minus the parent's left and right padding\n`;\n\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 12px;\n  padding: 0 12px;\n  position: relative;\n  color: ${(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n\n  &:hover {\n    color: #11181c;\n  }\n\n  &::after {\n    content: \"\";x\n    display: ${(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n`;\n\nconst ScrollableContent = styled.div`\n    overflow-y: auto;\n    flex-grow: 1;\n    width:100%;\n    height:350px\n  `;\n\nconst Item = styled.div``;\n\n//*********SEARCH FUNCTIONS ******** */\n\n// Reset Search Results\nconst resetSearcheHits = () => {\n  State.update({\n    currentPage: 0,\n    search: undefined,\n    paginate: undefined,\n    facet: undefined,\n  });\n};\n\n// updates search params as the user enters in a search value\nconst writeStateTerm = (term) => {\n  State.update({\n    term,\n  });\n\n  if (term === \"\") {\n    resetSearcheHits();\n  }\n};\n\n// creates an array of profiles\nconst profiles = (records) => {\n  const profiles = [];\n  for (const [i, record] of records ?? []) {\n    profiles.push({\n      accountId: record.author,\n      searchPosition: i,\n    });\n  }\n  return profiles;\n};\n\n// creates an array of objects that provide the details of the loaded posts\nconst posts = (content, postType) => {\n  const posts = [];\n  for (const [i, post] of content || []) {\n    const accountId = post.author;\n    const blockHeight = post.objectID.split(\"/\").slice(-1)[0];\n    const postContent = {\n      type: \"md\",\n      text: post.content,\n    };\n    const headerStyling =\n      postType === \"post\"\n        ? \"border rounded-4 p-3 pb-1\"\n        : \"pt-3 border-top pb-2\";\n\n    posts.push({\n      accountId,\n      blockHeight,\n      postContent,\n      postType,\n      headerStyling,\n      searchPosition: i,\n    });\n  }\n  return posts;\n};\n\n// creates an array of components\nconst components = (records) => {\n  const components = [];\n  for (const [i, component] of records || []) {\n    const idParts = component.objectID.split(\"/\");\n    const widgetName = idParts[idParts.length - 1];\n    const accountId = component.author;\n    components.push({\n      accountId,\n      widgetName,\n      searchPosition: i,\n    });\n  }\n  return components;\n};\n\nconst categorizeSearchHits = (rawResp) => {\n  const results = {};\n  for (const [i, result] of rawResp.hits?.entries()) {\n    const { categories: categories_raw } = result;\n    if (categories_raw.length > 1) {\n      categories_raw.sort();\n    }\n\n    const categories = categories_raw.join(\", \");\n    results[categories] = results[categories] || [];\n    results[categories].push([i + 1, result]);\n  }\n  return {\n    results,\n    hitsTotal: rawResp.nbHits,\n    hitsPerPage: rawResp.hitsPerPage,\n  };\n};\n\nconst debounce = (callable, timeout) => {\n  return (args) => {\n    clearTimeout(state.timer);\n    State.update({\n      timer: setTimeout(() => callable(args), timeout ?? 50),\n    });\n  };\n};\n\nconst fetchSearchHits = (query, { pageNumber, configs, optionalFilters }) => {\n  configs = configs ?? configsPerFacet(state.facet);\n  let body = {\n    query,\n    page: pageNumber ?? 0,\n    hitsPerPage: rawResp.hitsPerPage,\n    optionalFilters: optionalFilters ?? [\n      \"categories:profile<score=3>\",\n      \"categories:widget<score=2>\",\n      \"categories:post<score=1>\",\n      \"categories:comment<score=0>\",\n    ],\n    clickAnalytics: true,\n    ...configs,\n  };\n  return asyncFetch(API_URL, {\n    body: JSON.stringify(body),\n    headers: {\n      \"Content-Type\": \"application/json; charset=UTF-8\",\n      \"X-Algolia-Api-Key\": SEARCH_API_KEY,\n      \"X-Algolia-Application-Id\": APPLICATION_ID,\n    },\n    method: \"POST\",\n  });\n};\n\nconst updateSearchHits = debounce(({ term, pageNumber, configs }) => {\n  fetchSearchHits(term, { pageNumber, configs }).then((resp) => {\n    const { results, hitsTotal, hitsPerPage } = categorizeSearchHits(resp.body);\n    const combinedResults = [\n      ...profiles(results[\"profile\"]),\n      ...components(results[\"widget\"]),\n      ...posts(results[\"post\"], \"post\"),\n      ...posts(results[\"comment, post\"], \"post-comment\"),\n    ];\n\n    State.update({\n      search: {\n        profiles: profiles(results[\"profile\"]),\n        components: components(results[\"widget\"]),\n        postsAndComments: posts(results[\"post\"], \"post\").concat(\n          posts(results[\"comment, post\"], \"post-comment\")\n        ),\n      },\n      currentPage: pageNumber,\n      paginate: {\n        hitsTotal,\n        hitsPerPage,\n      },\n      queryID: resp.body.queryID,\n    });\n\n    getAllTagsFromSearchResults(combinedResults);\n  });\n});\n\nconst onSearchChange = ({ term }) => {\n  writeStateTerm(term);\n  updateSearchHits({ term, pageNumber: INITIAL_PAGE });\n};\n\nconst onPageChange = (pageNumber) => {\n  const algoliaPageNumber = pageNumber - 1;\n  if (algoliaPageNumber === state.currentPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n  // Need to clear out old search data otherwise we'll get multiple entries\n  // from the previous pages as well. Seems to be cache issue on near.social.\n  State.update({\n    search: undefined,\n    currentPage: algoliaPageNumber,\n  });\n  updateSearchHits({ term: state.term, pageNumber: algoliaPageNumber });\n};\n\nconst FACET_TO_CATEGORY = {\n  People: \"profile\",\n  Apps: \"app\",\n  Components: \"widget\",\n  Posts: \"post\",\n};\n\nconst searchFilters = (facet) => {\n  const category = FACET_TO_CATEGORY[facet];\n  let filters = category ? `categories:${category}` : undefined;\n  if (category === \"post\") {\n    filters = `(${filters} OR categories:comment)`;\n  }\n  if (category === \"app\") {\n    filters = `(${filters} OR tags:app)`;\n  }\n  if (filters) {\n    filters = `${filters} AND `;\n  }\n  filters = `${filters}NOT author:hypefairy.near AND NOT _tags:hidden`;\n\n  return filters;\n};\n\nconst restrictSearchable = (facet) => {\n  const category = FACET_TO_CATEGORY[facet];\n  let restrictSearchableAttrs = undefined;\n  if (category === \"post\") {\n    // Only the content should be searchable when the posts facet is selected.\n    restrictSearchableAttrs = [\"content\"];\n  }\n  return restrictSearchableAttrs;\n};\n\nconst configsPerFacet = (facet) => {\n  return {\n    filters: searchFilters(facet),\n    restrictSearchableAttributes: restrictSearchable(facet),\n  };\n};\nconst onFacetClick = (facet) => {\n  if (facet === state.selectedTab) {\n    return;\n  }\n\n  State.update({\n    selectedTab: facet,\n  });\n\n  displayResultsByFacet(facet);\n};\nconst onSearchResultClick = ({ searchPosition, objectID, eventName }) => {\n  const position =\n    searchPosition + state.currentPage * state.paginate.hitsPerPage;\n  const event = {\n    type: \"clickedObjectIDsAfterSearch\",\n    data: {\n      eventName,\n      userToken: userId.replace(\".\", \"+\"),\n      queryID: state.queryID,\n      objectIDs: [objectID],\n      positions: [position],\n      timestamp: Date.now(),\n    },\n  };\n\n  // Deferred due to State.update causing multiple clicks to be needed\n  // before the browser redirect to the page the user clicks on.\n  setTimeout(() => {\n    // This will trigger the Insights widget:\n    State.update({ event });\n  }, 50);\n};\n\nconst getComponentTags = (accountId, widgetName) => {\n  const metadata = Social.get(\n    `${accountId}/widget/${widgetName}/metadata/**`,\n    \"final\"\n  );\n  const tags = Object.keys(metadata.tags || {});\n  State.update({ selectedTags: tags });\n};\nconst getAllTagsFromSearchResults = (results) => {\n  const allTags = [];\n  const userTags = [];\n  const componentTags = [];\n\n  results.forEach((result) => {\n    if (result.widgetName) {\n      const metadata = Social.get(\n        `${result.accountId}/widget/${result.widgetName}/metadata/**`,\n        \"final\"\n      );\n      const widgetTags = Object.keys(metadata.tags || {});\n      componentTags.push(...widgetTags);\n      allTags.push(...widgetTags);\n    } else {\n      const profile = Social.get(`${result.accountId}/profile/**`, \"final\");\n      const profileTags = Object.keys(profile.tags || {});\n      userTags.push(...profileTags);\n      allTags.push(...profileTags);\n    }\n  });\n};\n\nconst topTwoAccounts = () => {\n  let output = [];\n\n  if (state.selectedTab === \"People\") {\n    for (let i = 0; i < 6; i++) {\n      if (i < state.search.profiles.length) {\n        output.push(state.search.profiles[i]);\n      }\n    }\n  } else {\n    output = state.search.profiles.slice(0, 2);\n    console.log(\"else called\", output);\n  }\n\n  console.log(output);\n\n  return output.map((profile, i) => (\n    <Item key={profile.accountId}>\n      <Widget\n        src=\"dorgon108.near/widget/AccountProfileCard\"\n        props={{\n          accountId: profile.accountId,\n          onClick: () =>\n            onSearchResultClick({\n              searchPosition: profile.searchPosition,\n              objectID: `${profile.accountId}/profile`,\n              eventName: \"Clicked Profile After Search\",\n            }),\n        }}\n      />\n    </Item>\n  ));\n};\n\nconst topTwoComponents = () => {\n  let output = [];\n\n  if (state.selectedTab === \"Components\") {\n    for (let i = 0; i < 6; i++) {\n      if (i < state.search.components.length) {\n        output.push(state.search.components[i]);\n      }\n    }\n  } else {\n    output = state.search.components.slice(0, 2);\n    console.log(\"else called\", output);\n  }\n\n  console.log(output);\n\n  return output.map((component, i) => (\n    <Item key={component.accountId + component.widgetName}>\n      <Widget\n        src=\"dorgon108.near/widget/ComponentCard\"\n        props={{\n          src: `${component.accountId}/widget/${component.widgetName}`,\n          onClick: () =>\n            onSearchResultClick({\n              searchPosition: component.searchPosition,\n              objectID: `${component.accountId}/widget/${component.widgetName}`,\n              eventName: \"Clicked Component After Search\",\n            }),\n        }}\n      />\n    </Item>\n  ));\n};\n\nconst topTwoComments = () => {\n  let output = [];\n\n  if (state.selectedTab === \"Posts\") {\n    for (let i = 0; i < 6; i++) {\n      if (i < state.search.postsAndComments.length) {\n        output.push(state.search.postsAndComments[i]);\n      }\n    }\n  } else {\n    output = state.search.postsAndComments.slice(0, 2);\n    console.log(\"else called\", output);\n  }\n\n  console.log(output);\n\n  return output.map((post, i) => (\n    <Item key={`${post.accountId}/${post.postType}/${post.blockHeight}`}>\n      {console.log(\"the content is\", JSON.stringify(post.postContent))}\n      <Widget\n        src=\"dorgon108.near/widget/SearchPost\"\n        props={{\n          accountId: post.accountId,\n          blockHeight: post.blockHeight,\n          content: post.postContent,\n          term: props.term,\n        }}\n      />\n    </Item>\n  ));\n};\n\nconst displayResultsByFacet = (selectedTab) => {\n  switch (selectedTab) {\n    case \"People\":\n      return state.search?.profiles.length > 0 ? (\n        <Group>\n          <GroupHeader>\n            <H3>\n              People\n              <span\n                style={{\n                  marginLeft: \"10px\",\n                }}\n              >\n                {` ${state.search?.profiles.length ?? 0}`}\n              </span>{\" \"}\n            </H3>\n          </GroupHeader>\n\n          <Items>{topTwoAccounts()}</Items>\n        </Group>\n      ) : (\n        <div>No People Found</div>\n      );\n    case \"Apps\": {\n      const appComponents = state.search?.components\n        .filter((component, index) => {\n          const metadata = Social.get(\n            `${component.accountId}/widget/${component.widgetName}/metadata/**`,\n            \"final\"\n          );\n          const tags = Object.keys(metadata.tags || {});\n          const displayCondition =\n            (state.selectedTab === \"Apps\" && tags.includes(\"Apps\")) ||\n            (tags.includes(\"app\") && index < 7);\n\n          return displayCondition;\n        })\n        .map((component, i) => {\n          return (\n            <Item key={component.accountId + component.widgetName}>\n              <Widget\n                src=\"dorgon108.near/widget/ComponentCard\"\n                props={{\n                  src: `${component.accountId}/widget/${component.widgetName}`,\n                  onClick: () =>\n                    onSearchResultClick({\n                      searchPosition: component.searchPosition,\n                      objectID: `${component.accountId}/widget/${component.widgetName}`,\n                      eventName: \"Clicked Component After Search\",\n                    }),\n                }}\n              />\n            </Item>\n          );\n        });\n\n      return appComponents.length > 0 ? (\n        <Group>\n          <GroupHeader>\n            <H3>\n              Apps{\" \"}\n              <span\n                style={{\n                  marginLeft: \"10px\",\n                }}\n              >\n                {` ${appComponents.length}`}\n              </span>{\" \"}\n            </H3>\n          </GroupHeader>\n          <Items>{appComponents}</Items>\n        </Group>\n      ) : (\n        <NoResults>No Apps Found</NoResults>\n      );\n    }\n\n    case \"Components\":\n      return state.search?.components.length > 0 ? (\n        <Group>\n          <GroupHeader>\n            <H3>\n              Components{\" \"}\n              <span\n                style={{\n                  marginLeft: \"10px\",\n                }}\n              >\n                {` ${state.search?.components.length ?? 0}`}\n              </span>{\" \"}\n            </H3>\n          </GroupHeader>\n\n          <Items>{topTwoComponents()}</Items>\n        </Group>\n      ) : (\n        <NoResults>No Components Found</NoResults>\n      );\n    case \"Posts\":\n      return state.search?.postsAndComments.length > 0 ? (\n        <Group style={{ marginTop: \"20px\" }}>\n          <GroupHeader>\n            <H3>\n              Posts and Comments\n              <span\n                style={{\n                  marginLeft: \"10px\",\n                }}\n              >\n                {` ${state.search?.postsAndComments.length ?? 0}`}\n              </span>{\" \"}\n            </H3>\n          </GroupHeader>\n\n          <Items>{topTwoComments()}</Items>\n        </Group>\n      ) : (\n        <div>No People Found</div>\n      );\n    case \"All\":\n      return (\n        <>\n          {state.search?.profiles.length > 0 && (\n            <Group>\n              <GroupHeader>\n                <H3>\n                  People\n                  <span\n                    style={{\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    {` ${state.search?.profiles.length ?? 0}`}\n                  </span>{\" \"}\n                </H3>\n              </GroupHeader>\n              <Items>{topTwoAccounts()}</Items>\n            </Group>\n          )}\n          {state.search?.components.length > 0 && (\n            <Group>\n              <GroupHeader>\n                <H3>\n                  Components{\" \"}\n                  <span\n                    style={{\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    {` ${state.search?.components.length ?? 0}`}\n                  </span>{\" \"}\n                </H3>\n              </GroupHeader>\n              <Items>{topTwoComponents()}</Items>\n            </Group>\n          )}\n          {state.search?.postsAndComments.length > 0 && (\n            <Group style={{ marginTop: \"20px\" }}>\n              <GroupHeader>\n                <H3>\n                  Posts and Comments\n                  <span\n                    style={{\n                      marginLeft: \"10px\",\n                    }}\n                  >\n                    {` ${state.search?.postsAndComments.length ?? 0}`}\n                  </span>{\" \"}\n                </H3>\n              </GroupHeader>\n              <Items>{topTwoComments()}</Items>\n            </Group>\n          )}\n        </>\n      );\n  }\n};\n\nif (props.term !== state.lastSyncedTerm) {\n  State.update({\n    lastSyncedTerm: props.term,\n  });\n  onSearchChange({ term: props.term });\n}\n\nreturn (\n  <div style={typeAheadContainer}>\n    <Wrapper>\n      {state.search && (\n        <FixedTabs>\n          <Widget\n            src=\"dorgon108.near/widget/Facets\"\n            props={{\n              facets,\n              onFacetClick,\n              defaultFacet: facets[0],\n            }}\n          />\n        </FixedTabs>\n      )}\n      <ScrollableContent>\n        {state.paginate?.hitsTotal == 0 && (\n          <H2\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"absolute\",\n              top: \"50%\", // Adjust this value to position the text lower\n              width: \"100%\",\n            }}\n          >\n            No matches were found for \"{state.term}\".\n          </H2>\n        )}\n        {displayResultsByFacet(state.selectedTab)}\n      </ScrollableContent>\n\n      <FixedFooter>\n        <a\n          href={`https://alpha.near.org/chaotictempest.near/widget/Search?term=${props.term}`}\n        >\n          <Button\n            onClick={() => {\n              console.log(\"redirect you\");\n            }}\n          >\n            {console.log(\"the count\", state.search?.totalCount)}\n            {state.search?.totalCount\n              ? ` See ${state.search?.totalCount} Results`\n              : null}\n          </Button>\n        </a>\n      </FixedFooter>\n      {!props.disableInsights && (\n        <Widget\n          src=\"chaotictempest.near/widget/Insights\"\n          props={{\n            event: state.event,\n            searchApiKey: SEARCH_API_KEY,\n            appId: APPLICATION_ID,\n            index: INDEX,\n          }}\n        />\n      )}\n    </Wrapper>\n  </div>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/dorgon108.near/widget/AccountProfileCard", "branch.draft.": NaN, "branch.draft.metadata": NaN}