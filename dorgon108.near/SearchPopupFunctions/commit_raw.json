{"tx_hash": "CuRHRS3dLDg1jZoAFRNMcAgyT38NhECuRqi5VPu9jvh", "action_id_social": "J7UdJom7L3pLvU4qgjMYj21VvLN5ad6FGEFg87C86jjb-0-widget", "block_id": 89282130, "block_timestamp": "2023-04-10 19:41:55.645", "signer_id": "dorgon108.near", "widget_name": "SearchPopupFunctions", "source_code": "// Constants\nconst SEARCH_API_KEY = props.searchApiKey ?? \"0e42c01107b8f555a41bcc0fa7f2a4df\";\nconst APPLICATION_ID = props.appId ?? \"B6PI9UKKJT\";\nconst INDEX = props.index ?? \"prod_near-social-feed\";\nconst API_URL =\n  props.apiUrl ??\n  `https://${APPLICATION_ID}-dsn.algolia.net/1/indexes/${INDEX}/query?`;\nconst INITIAL_PAGE = props.initialPage ?? 0;\nconst facets = props.facets ?? [\"All\", \"Users\", \"Apps\", \"Components\", \"Posts\"];\n\nconst showHeader = props.showHeader ?? true;\nconst showSearchBar = props.showSearchBar ?? true;\nconst showPagination = props.showPagination ?? true;\n// Update context to include the user account id\nconst userId = props.accountId ?? context.accountId;\n\n// Reset Search Results\nconst resetSearcheHits = () => {\n  State.update({\n    currentPage: 0,\n    search: undefined,\n    paginate: undefined,\n    facet: undefined,\n  });\n};\n\n// updates search params as the user enters in a search value\nconst writeStateTerm = (term) => {\n  State.update({\n    term,\n  });\n\n  if (term === \"\") {\n    resetSearcheHits();\n  }\n};\n\nwriteStateTerm(\"dorgon\");\n\n// creates an array of profiles\nconst profiles = (records) => {\n  const profiles = [];\n  for (const [i, record] of records ?? []) {\n    profiles.push({\n      accountId: record.author,\n      searchPosition: i,\n    });\n  }\n  return profiles;\n};\n\n// creates an array of objects that provide the details of the loaded posts\nconst posts = (content, postType) => {\n  const posts = [];\n  for (const [i, post] of content || []) {\n    const accountId = post.author;\n    const blockHeight = post.objectID.split(\"/\").slice(-1)[0];\n    const postContent = {\n      type: \"md\",\n      text: post.content,\n    };\n    const headerStyling =\n      postType === \"post\"\n        ? \"border rounded-4 p-3 pb-1\"\n        : \"pt-3 border-top pb-2\";\n\n    posts.push({\n      accountId,\n      blockHeight,\n      postContent,\n      postType,\n      headerStyling,\n      searchPosition: i,\n    });\n  }\n  return posts;\n};\n\n// creates an array of components\nconst components = (records) => {\n  const components = [];\n  for (const [i, component] of records || []) {\n    const idParts = component.objectID.split(\"/\");\n    const widgetName = idParts[idParts.length - 1];\n    const accountId = component.author;\n    components.push({\n      accountId,\n      widgetName,\n      searchPosition: i,\n    });\n  }\n  return components;\n};\n\nconst categorizeSearchHits = (rawResp) => {\n  const results = {};\n  for (const [i, result] of rawResp.hits?.entries()) {\n    const { categories: categories_raw } = result;\n    if (categories_raw.length > 1) {\n      categories_raw.sort();\n    }\n\n    const categories = categories_raw.join(\", \");\n    results[categories] = results[categories] || [];\n    results[categories].push([i + 1, result]);\n  }\n  return {\n    results,\n    hitsTotal: rawResp.nbHits,\n    hitsPerPage: rawResp.hitsPerPage,\n  };\n};\n\nconst debounce = (callable, timeout) => {\n  return (args) => {\n    clearTimeout(state.timer);\n    State.update({\n      timer: setTimeout(() => callable(args), timeout ?? 50),\n    });\n  };\n};\n\nconst fetchSearchHits = (query, { pageNumber, configs, optionalFilters }) => {\n  configs = configs ?? configsPerFacet(state.facet);\n  let body = {\n    query,\n    page: pageNumber ?? 0,\n    optionalFilters: optionalFilters ?? [\n      \"categories:profile<score=3>\",\n      \"categories:widget<score=2>\",\n      \"categories:post<score=1>\",\n      \"categories:comment<score=0>\",\n    ],\n    clickAnalytics: true,\n    ...configs,\n  };\n  return asyncFetch(API_URL, {\n    body: JSON.stringify(body),\n    headers: {\n      \"Content-Type\": \"application/json; charset=UTF-8\",\n      \"X-Algolia-Api-Key\": SEARCH_API_KEY,\n      \"X-Algolia-Application-Id\": APPLICATION_ID,\n    },\n    method: \"POST\",\n  });\n};\n\nconst updateSearchHits = debounce(({ term, pageNumber, configs }) => {\n  fetchSearchHits(term, { pageNumber, configs }).then((resp) => {\n    const { results, hitsTotal, hitsPerPage } = categorizeSearchHits(resp.body);\n    State.update({\n      search: {\n        profiles: profiles(results[\"profile\"]),\n        components: components(results[\"widget\"]),\n        postsAndComments: posts(results[\"post\"], \"post\").concat(\n          posts(results[\"comment, post\"], \"comment\")\n        ),\n      },\n      currentPage: 0,\n      paginate: {\n        hitsTotal,\n        hitsPerPage,\n      },\n      queryID: resp.body.queryID,\n    });\n  });\n});\n\nconst onSearchChange = ({ term }) => {\n  writeStateTerm(term);\n  updateSearchHits({ term, pageNumber: INITIAL_PAGE });\n};\n\nconst onPageChange = (pageNumber) => {\n  const algoliaPageNumber = pageNumber - 1;\n  if (algoliaPageNumber === state.currentPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n  // Need to clear out old search data otherwise we'll get multiple entries\n  // from the previous pages as well. Seems to be cache issue on near.social.\n  State.update({\n    search: undefined,\n    currentPage: algoliaPageNumber,\n  });\n  updateSearchHits({ term: state.term, pageNumber: algoliaPageNumber });\n};\n\nconst FACET_TO_CATEGORY = {\n  Users: \"profile\",\n  Apps: \"app\",\n  Components: \"widget\",\n  Posts: \"post\",\n};\n\nconst searchFilters = (facet) => {\n  const category = FACET_TO_CATEGORY[facet];\n  let filters = category ? `categories:${category}` : undefined;\n  if (category === \"post\") {\n    filters = `(${filters} OR categories:comment)`;\n  }\n  if (category === \"app\") {\n    filters = `(${filters} OR tags:app)`;\n  }\n  if (filters) {\n    filters = `${filters} AND `;\n  }\n  filters = `${filters}NOT author:hypefairy.near AND NOT _tags:hidden`;\n\n  return filters;\n};\n\nconst restrictSearchable = (facet) => {\n  const category = FACET_TO_CATEGORY[facet];\n  let restrictSearchableAttrs = undefined;\n  if (category === \"post\") {\n    // Only the content should be searchable when the posts facet is selected.\n    restrictSearchableAttrs = [\"content\"];\n  }\n  return restrictSearchableAttrs;\n};\n\nconst configsPerFacet = (facet) => {\n  return {\n    filters: searchFilters(facet),\n    restrictSearchableAttributes: restrictSearchable(facet),\n  };\n};\n\nconst onFacetClick = (facet) => {\n  if (facet === state.facet) {\n    console.log(\"Clicked the same facet\");\n    return;\n  }\n\n  State.update({\n    facet,\n  });\n\n  updateSearchHits({\n    term: state.term,\n    configs: configsPerFacet(facet),\n  });\n};\n\nconst onSearchResultClick = ({ searchPosition, objectID, eventName }) => {\n  const position =\n    searchPosition + state.currentPage * state.paginate.hitsPerPage;\n  const event = {\n    type: \"clickedObjectIDsAfterSearch\",\n    data: {\n      eventName,\n      userToken: userId.replace(\".\", \"+\"),\n      queryID: state.queryID,\n      objectIDs: [objectID],\n      positions: [position],\n      timestamp: Date.now(),\n    },\n  };\n\n  setTimeout(() => {\n    // This will trigger the Insights widget:\n    State.update({ event });\n  }, 50);\n};\n\nreturn (\n  <div>\n    <Widget\n      src=\"dorgon108.near/widget/SearchPopup\"\n      props={{\n        resetSearchHits: resetSearcheHits,\n        writeStateTerm: writeStateTerm,\n        profiles: profiles,\n        posts: posts,\n        components: components,\n        categorizeSearchHits: categorizeSearchHits,\n        debounce: debounce,\n        fetchSearchHits: fetchSearchHits,\n        updateSearchHits: updateSearchHits,\n        onSearchChange: onSearchChange,\n        onPageChange: onPageChange,\n        searchFilters: searchFilters,\n        restrictSearchable: restrictSearchable,\n        configsPerFacet: configsPerFacet,\n        onFacetClick: onFacetClick,\n        onSearchResultClick: onSearchResultClick,\n        facets: facets,\n      }}\n    />\n  </div>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/dorgon108.near/widget/SearchPopupFunctions", "branch.draft.": null, "branch.draft.metadata": NaN}