{"tx_hash": "GCj5sfjK93g4W6dH5e79XfvMZi8jrcCEGwnVB1DYDg3y", "action_id_social": "6jHJMsox3KmfdKg8rH5nwb44oi851jofd7nLUzYu3ym4-1-widget", "block_id": 89891403, "block_timestamp": "2023-04-18 20:44:29.106", "signer_id": "kenjon.near", "widget_name": "Ken-multi-chain", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n\nState.init({\n  selectedTab: props.tab || \"posts\",\n});\n\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\n\nconst activityUrl = `/#/near/widget/ActivityPage`;\n\nconst Wrapper = styled.div`\n  margin-top: calc(var(--body-top-padding) * -1);\n  padding-bottom: 48px;\n`;\n\nconst Main = styled.div`\n  display: grid;\n  grid-template-columns: 290px minmax(0, 1fr) 290px;\n  grid-gap: 16px;\n\n  @media (max-width: 1200px) {\n    display: block;\n  }\n`;\n\nconst Section = styled.div`\n  padding-top: 24px;\n  border-left: ${(p) => (p.primary ? \"1px solid #ECEEF0\" : \"none\")};\n  border-right: ${(p) => (p.primary ? \"1px solid #ECEEF0\" : \"none\")};\n\n  > div {\n    padding-bottom: 24px;\n    margin-bottom: 24px;\n    border-bottom: 1px solid #eceef0;\n\n    &:last-child {\n      padding-bottom: 0;\n      margin-bottom: 0;\n      border-bottom: none;\n    }\n  }\n\n  @media (max-width: 1200px) {\n    padding-top: 0px;\n    border-left: none;\n    border-right: none;\n    display: ${(p) => (p.active ? \"block\" : \"none\")};\n    margin: ${(p) => (p.negativeMargin ? \"0 -12px\" : \"0\")};\n  }\n`;\n\nconst Tabs = styled.div`\n  display: none;\n  height: 48px;\n  background: #f8f9fa;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: ${(p) => (p.noMargin ? \"0\" : p.halfMargin ? \"24px\" : \"24px\")};\n  overflow: auto;\n  scroll-behavior: smooth;\n\n  @media (max-width: 1200px) {\n    display: flex;\n    margin-left: -12px;\n    margin-right: -12px;\n\n    > * {\n      flex: 1;\n    }\n  }\n`;\n\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 12px;\n  padding: 0 12px;\n  position: relative;\n  color: ${(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n\n  &:hover {\n    color: #11181c;\n  }\n\n  &::after {\n    content: \"\";\n    display: ${(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n`;\n\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\ninitState({\n  token: \"\",\n  tokenDecimals: \"\",\n  sendTo: \"\",\n  sender,\n  senderBalance: \"0\",\n  receiverBalance: \"0\",\n  receiver: \"\",\n  amount: \"1\",\n});\n\nconst tokens = {\n  \"Select Token\": \"\",\n  USDT: \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n  DAI: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  USDC: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n  MKR: \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\",\n};\n\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option value={tokens[token]}>{token}</option>\n));\n\nconst setSendTo = (sendTo) => {\n  const receiver = Ethers.resolveName(sendTo);\n  State.update({ sendTo, receiver: receiver ?? \"\" });\n  refreshBalances();\n};\n\nconst setToken = (token) => {\n  State.update({ token });\n  getTokenDecimals();\n};\n\nconst getTokenBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(state.tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getTokenDecimals = () => {\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n      refreshBalances();\n    });\n};\n\nconst refreshBalances = () => {\n  getTokenBalance(state.sender).then((value) => {\n    State.update({ senderBalance: value });\n  });\n\n  getTokenBalance(state.receiver).then((value) => {\n    State.update({ receiverBalance: value });\n  });\n};\n\nconst sendTokens = () => {\n  const erc20 = new ethers.Contract(\n    state.token,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(state.amount, state.tokenDecimals);\n\n  erc20.transfer(state.receiver, amount);\n\n  console.log(\"transactionHash is \" + transactionHash);\n};\n\nreturn (\n  <>\n    <h3>Send ERC-20 tokens</h3>\n    <div class=\"mb-3\">\n      <label for=\"selectToken\">Select token</label>\n      <select\n        class=\"form-select\"\n        id=\"selectToken\"\n        onChange={(e) => {\n          setToken(e.target.value);\n        }}\n      >\n        {tokensMenuItems}\n      </select>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"send-to\" class=\"form-label\">\n        Recepient address\n      </label>\n      <input\n        value={state.sendTo}\n        class=\"form-control\"\n        id=\"send-to\"\n        placeholder=\"vitalik.eth\"\n        onChange={(e) => setSendTo(e.target.value)}\n      />\n      {state.receiver && (\n        <div class=\"text-secondary mt-3\">Resolved to {state.receiver}</div>\n      )}\n      {state.receiverBalance != \"0\" && (\n        <div class=\"text-secondary mt-3\">\n          Receiver's balance: {state.receiverBalance}\n        </div>\n      )}\n\n      {state.senderBalance != \"0\" && (\n        <div class=\"text-secondary mt-3\">\n          Sender's balance: {state.senderBalance}\n        </div>\n      )}\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"amount\" class=\"form-label\">\n        Enter the amount\n      </label>\n      <input\n        value={state.amount}\n        class=\"form-control\"\n        id=\"amount\"\n        placeholder=\"\"\n        onChange={(e) => State.update({ amount: e.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <button onClick={sendTokens}>Send</button>\n    </div>\n    <Wrapper negativeMargin={state.selectedTab === \"posts\"}>\n      <Tabs\n        halfMargin={state.selectedTab === \"apps\"}\n        noMargin={state.selectedTab === \"posts\"}\n      >\n        <TabsButton\n          href={`${activityUrl}?tab=posts`}\n          selected={state.selectedTab === \"posts\"}\n        >\n          Posts\n        </TabsButton>\n\n        <TabsButton\n          href={`${activityUrl}?tab=apps`}\n          selected={state.selectedTab === \"apps\"}\n        >\n          Components\n        </TabsButton>\n\n        <TabsButton\n          href={`${activityUrl}?tab=explore`}\n          selected={state.selectedTab === \"explore\"}\n        >\n          Explore\n        </TabsButton>\n      </Tabs>\n\n      <Main>\n        <Section active={state.selectedTab === \"apps\"}>\n          <Widget src=\"near/widget/FeaturedComponents\" />\n          <Widget src=\"near/widget/LatestComponents\" />\n        </Section>\n        <Section negativeMargin primary active={state.selectedTab === \"posts\"}>\n          <Widget src=\"near/widget/Posts\" />\n        </Section>\n        <Section active={state.selectedTab === \"explore\"}>\n          <Widget src=\"near/widget/ExploreWidgets\" />\n        </Section>\n      </Main>\n    </Wrapper>\n  </>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kenjon.near/widget/Ken-multi-chain", "metadata.tags.ethdenver2023": ""}