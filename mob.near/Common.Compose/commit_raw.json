{"tx_hash": "44sAnde4GkYUJwA5fGJULWcwNjBzgJ86M8fjE253k1rf", "action_id_social": "4e4VSwvcbxnEFjaADfNzP6wDts2NFPQvpb1jA58ms9S8-0-widget", "block_id": 86496193, "block_timestamp": "2023-03-03 23:16:05.952", "signer_id": "mob.near", "widget_name": "Common.Compose", "source_code": "const autocompleteEnabled = props.autocompleteEnabled ?? true;\n\nif (state.image === undefined) {\n  State.init({\n    image: {},\n    text: props.initialText || \"\",\n  });\n\n  if (props.onHelper) {\n    const extractMentions = (text) => {\n      const mentionRegex =\n        /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n      mentionRegex.lastIndex = 0;\n      const accountIds = new Set();\n      for (const match of text.matchAll(mentionRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n          match[1].length >= 2 &&\n          match[1].length <= 64\n        ) {\n          accountIds.add(match[1].toLowerCase());\n        }\n      }\n      return [...accountIds];\n    };\n\n    const extractHashtags = (text) => {\n      const hashtagRegex = /#(\\w+)/gi;\n      hashtagRegex.lastIndex = 0;\n      const hashtags = new Set();\n      for (const match of text.matchAll(hashtagRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n        ) {\n          hashtags.add(match[1].toLowerCase());\n        }\n      }\n      return [...hashtags];\n    };\n\n    const extractMentionNotifications = (text, item) =>\n      extractMentions(text || \"\")\n        .filter((accountId) => accountId !== context.accountId)\n        .map((accountId) => ({\n          key: accountId,\n          value: {\n            type: \"mention\",\n            item,\n          },\n        }));\n\n    props.onHelper({\n      extractHashtags,\n      extractMentions,\n      extractTagNotifications: extractMentionNotifications,\n      extractMentionNotifications,\n    });\n  }\n}\n\nconst content = (state.text || state.image.cid) && {\n  type: \"md\",\n  text: state.text,\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n};\n\nif (content && props.extraContent) {\n  Object.assign(content, props.extraContent);\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst onChange = (text) => {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(text);\n  State.update({ text, showAccountAutocomplete });\n};\n\nconst jContent = JSON.stringify(content);\nif (props.onChange && jContent !== state.jContent) {\n  State.update({\n    jContent,\n  });\n  props.onChange({ content });\n}\n\nconst onCompose = () => {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n};\n\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n\n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 5em;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2)) calc(40px + (var(--padding) * 2));\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n\n  &::after {\n    content: attr(data-value) ' ';\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n`;\n\nreturn (\n  <div className=\"text-bg-light rounded-4\">\n    <TextareaWrapper className=\"p-3\" data-value={state.text || \"\"}>\n      <textarea\n        value={state.text || \"\"}\n        onInput={(event) => onChange(event.target.value)}\n        onKeyUp={(event) => {\n          if (event.key === \"Escape\") {\n            State.update({ showAccountAutocomplete: false });\n          }\n        }}\n        placeholder={props.placeholder ?? \"What's happening?\"}\n      />\n      {autocompleteEnabled && state.showAccountAutocomplete && (\n        <div className=\"pt-1 w-100 overflow-hidden\">\n          <Widget\n            src=\"mob.near/widget/AccountAutocomplete\"\n            props={{\n              term: state.text.split(\"@\").pop(),\n              onSelect: autoCompleteAccountId,\n              onClose: () => State.update({ showAccountAutocomplete: false }),\n            }}\n          />\n        </div>\n      )}\n    </TextareaWrapper>\n    <div className=\"d-flex flex-row p-2 border-top\">\n      <div className=\"flex-grow-1\">\n        <IpfsImageUpload\n          image={state.image}\n          className=\"btn btn-outline-secondary border-0 rounded-3\"\n        />\n      </div>\n      <div>{props.composeButton && props.composeButton(onCompose)}</div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mob.near/widget/Common.Compose"}