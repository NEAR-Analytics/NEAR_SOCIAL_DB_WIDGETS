{"tx_hash": "6UsMTj1fzvmDjePqWz4NJxhHPimUm59ATgqzbhrZW72y", "action_id_social": "JBZM8m8MFVczEoixwbZiAMuKe4rdBi4aPzgpfsPhDYZU-0-widget", "block_id": 77954698, "block_timestamp": "2022-11-08 00:23:43.455", "signer_id": "mob.near", "widget_name": "LastWidgets", "source_code": "const accountId = props.accountId ?? \"*\";\n\nconst data = Social.keys(`${accountId}/widget/*`, \"final\", {\n  return_type: \"BlockHeight\",\n});\n\nif (!data) {\n  return \"Loading\";\n}\n\nconst processData = (data) => {\n  const accounts = Object.entries(data);\n\n  const allItems = accounts\n    .map((account) => {\n      const accountId = account[0];\n      const widgets = account[1].widget;\n      return Object.entries(widgets).map((kv) => ({\n        accountId,\n        widgetName: kv[0],\n        blockHeight: kv[1],\n      }));\n    })\n    .flat();\n\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n  return allItems;\n};\n\nconst itemToWidget = (a) => (\n  <div className=\"mb-3\" key={JSON.stringify(a)} style={{ minHeight: \"10em\" }}>\n    <Widget src=\"mob.near/widget/WidgetMetadata\" props={a} />\n  </div>\n);\n\nState.init({\n  allItems: processData(data),\n  widgets: [],\n});\n\nconst makeMoreItems = () => {\n  const newItems = state.allItems\n    .slice(state.widgets.length, state.widgets.length + 10)\n    .map(itemToWidget);\n  newItems.forEach((widget) => state.widgets.push(widget));\n  State.update();\n};\n\nreturn (\n  <div className=\"px-2 mx-auto\" style={{ maxWidth: \"42em\" }}>\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={makeMoreItems}\n      hasMore={state.widgets.length < state.allItems.length}\n      loader={<div className=\"loader\">Loading ...</div>}\n    >\n      {state.widgets}\n    </InfiniteScroll>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mob.near/widget/LastWidgets", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.feed": NaN, "metadata.tags.widget": NaN, "metadata": NaN, "metadata.tags.tag": NaN}