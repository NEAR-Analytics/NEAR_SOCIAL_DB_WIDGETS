{"tx_hash": "Eqe2iyv8tA5RbGDjJaZ5R1tmKLjcMmXkZ2v4uv1zG7iD", "action_id_social": "43iQuHHxHuMvRa1HNaQBErqTJP7NTok3vxX6tCAyKYg3-0-widget", "block_id": 80574741, "block_timestamp": "2022-12-13 18:17:02.288", "signer_id": "mob.near", "widget_name": "ComponentSearch", "source_code": "const allMetadata =\n  Social.get(\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\n    \"final\"\n  ) || {};\nconst keys = Social.keys([\"*/widget/*\"], \"final\", { values_only: true }) || {};\n\nconst requiredTag = props.filterTag;\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._-]/)\n    .filter((s) => !!s.trim());\n\n  const matchedWidgets = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 20;\n  const MaxScore = MaxSingleScore * 3.5;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.max(1, 20 - pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(keys).forEach(([accountId, data]) => {\n    const accountIdScore = computeScore(accountId);\n    Object.keys(data.widget).forEach((componentId) => {\n      const componentIdScore = computeScore(componentId);\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\n      const name = metadata.name || \"\";\n      if (requiredTag && !(metadata.tags && requiredTag in metadata.tags)) {\n        return;\n      }\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\n      const nameScore = computeScore(name);\n      const tagsScore = Math.min(\n        20,\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\n      );\n      const score =\n        (accountIdScore / 2 + componentIdScore + nameScore + tagsScore) /\n        MaxScore;\n      if (score > 0) {\n        matchedWidgets.push({\n          score,\n          accountId,\n          widgetName: componentId,\n          widgetSrc: `${accountId}/widget/${componentId}`,\n          name,\n          tags,\n        });\n      }\n    });\n  });\n\n  matchedWidgets.sort((a, b) => b.score - a.score);\n  const result = matchedWidgets.slice(0, limit);\n\n  State.update({\n    term,\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, result });\n  }\n};\n\nreturn (\n  <>\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      value={state.term ?? \"\"}\n      onChange={(e) => computeResults(e.target.value)}\n      placeholder={props.placeholder ?? `\ud83d\udd0d Search Components`}\n    />\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mob.near/widget/ComponentSearch", "metadata.description": "Generic component search.\n\nProps:\n- `filterTag` (optional) - tag to require to be present on the component metadata\n- `onChange` - function that receives the results on search\n- `placeholder` (optional) - placeholder for the input", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.dev": NaN, "metadata.tags.inline": NaN, "metadata.tags.search": NaN}