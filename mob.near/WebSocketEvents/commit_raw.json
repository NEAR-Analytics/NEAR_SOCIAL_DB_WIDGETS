{"tx_hash": "22AYjJyYqcuiWHr3UsTz6MdSBkHNJ2hKUZQD7mEa6P7X", "action_id_social": "CWVZxT8cujQSpYeFmQfeLoEJoUoGKJ57rmsmNYEnmrf5-0-widget", "block_id": 90944388, "block_timestamp": "2023-05-02 17:30:07.037", "signer_id": "mob.near", "widget_name": "WebSocketEvents", "source_code": "if (state.ws === undefined) {\n  const eventsFilter = {} || {\n    status: \"SUCCESS\",\n    account_id: \"contract.main.burrow.near\",\n    event: {\n      standard: \"burrow\",\n    },\n  };\n\n  function startWebSocket(processEvents) {\n    const scheduleReconnect = (timeOut) => {\n      console.log(\"reconnect\");\n      if (state.reconnectTimeout) {\n        clearTimeout(state.reconnectTimeout);\n        state.reconnectTimeout = null;\n      }\n      state.reconnectTimeout = setTimeout(() => {\n        state.startWebSocket(processEvents);\n      }, timeOut);\n      State.update();\n    };\n\n    let ws = state.ws;\n\n    if (ws) {\n      ws.close();\n      return;\n    }\n\n    ws = new WebSocket(\"wss://events.near.stream/ws\");\n\n    ws.onopen = () => {\n      console.log(`Connection to WS has been established`);\n      ws.send(\n        JSON.stringify({\n          secret: \"near-social-events\",\n          filter: eventsFilter,\n          fetch_past_events: 100,\n        })\n      );\n    };\n    ws.onclose = () => {\n      State.update({ ws: null });\n      console.log(`WS Connection has been closed`);\n      scheduleReconnect(1);\n    };\n    ws.onmessage = (e) => {\n      const data = JSON.parse(e.data);\n      processEvents(data.events);\n    };\n    ws.onerror = (err) => {\n      State.update({ ws: null });\n      console.log(\"WebSocket error\", err);\n    };\n\n    State.update({ ws });\n  }\n\n  function processEvent(event) {\n    return {\n      time: new Date(parseFloat(event.block_timestamp) / 1e6),\n      accountId: event.event.data[0].account_id,\n      event: event.event.event,\n      data: event.event.data[0],\n    };\n  }\n\n  function processEvents(events) {\n    events = events.flatMap(processEvent);\n    events.reverse();\n\n    State.update((prevState) => {\n      if (Math.random() > 0.5) {\n        console.log(\"closing\", prevState);\n        prevState.ws.close();\n        console.log(\"closed\");\n      }\n\n      const prevActions = prevState.actions || [];\n      const actions = [\n        ...events.filter(\n          (event) =>\n            prevActions.length === 0 ||\n            event.time.getTime() > prevActions[0].time.getTime()\n        ),\n        ...prevActions,\n      ];\n      return Object.assign(prevState, { actions: actions.slice(0, 10) });\n    });\n  }\n\n  State.init({\n    startWebSocket,\n    processEvent,\n    processEvents,\n  });\n  state.startWebSocket(state.processEvents);\n}\n\nreturn state.actions;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mob.near/widget/WebSocketEvents"}