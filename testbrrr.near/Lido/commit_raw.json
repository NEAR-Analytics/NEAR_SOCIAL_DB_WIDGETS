{"tx_hash": "ACGMUCy3LQMtTBZgRRMfQP72DeFjzgWkf1U3UZTeezkD", "action_id_social": "2XzBt34wsGHQq8Xtf727ncDoHFwMUcGWPh54YP77u4LM-1-widget", "block_id": 88323740, "block_timestamp": "2023-03-28 21:57:28.219", "signer_id": "testbrrr.near", "widget_name": "Lido", "source_code": "// FETCH LIDO ABI\n\nconst _l2Receiver = \"0xF518Fa3344Ba498f1b9DEcBE1B9c7f0e1960ea29\";\nconst _l1Token = \"0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4\";\nconst _amount = 100000;\nconst _l2TxGasLimi = 734935;\nconst _l2TxGasPerPubdataByte = 800;\n\nconst usdc = \"0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4\";\nconst zkContract = \"0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063\";\nconst tokenDecimals = 18;\n\nconst zkAbi =\n  '[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]';\nif (!zkAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(zkAbi.body);\n\nconst getUSDCBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: usdc,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    zkContract,\n    zkAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20\n    .deposit(\n      _l2Receiver,\n      _l1Token,\n      _amount,\n      _l2TxGasLimi,\n      _l2TxGasPerPubdataByte,\n      { value: amount }\n    )\n    .then((transactionHash) => {\n      console.log(\"transactionHash is \" + transactionHash);\n    });\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.usdcBalance === undefined && state.sender) {\n  getUSDCBalance(state.sender).then((usdcBalance) => {\n    State.update({ usdcBalance });\n  });\n}\n\n// FETCH TX COST\n\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">zkSync Bridge</div>\n      <div class=\"SubHeader\">Transfer to zkSync</div>\n\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to send</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\">\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;stETH\n              </span>\n            </div>\n          </div>\n          <div class=\"LidoFormTopContainerRight\">\n            <div class=\"LidoAprContainer\">\n              <div class=\"LidoAprTitle\">Lido APR</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\n              ></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (parseFloat(state.balance) - 0.05).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitEthers(state.strEther, state.sender)}\n          >\n            <span>Deposit</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <div class=\"LidoFooterContainer\">\n          {state.sender && (\n            <div class=\"LidoFooterRaw\">\n              <div class=\"LidoFooterRawLeft\">You will receive</div>\n              <div class=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\n            </div>\n          )}\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Exchange rate</div>\n            <div class=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>\n          </div>\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Transaction cost</div>\n            <div class=\"LidoFooterRawRight\">{state.txCost}</div>\n          </div>\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Reward fee</div>\n            <div class=\"LidoFooterRawRight\">10%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testbrrr.near/widget/Lido", "metadata.tags.ethdenver2023": "", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.eth": NaN}