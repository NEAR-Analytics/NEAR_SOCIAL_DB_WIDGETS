{"tx_hash": "EmZ3xkt5ht3dmqeTd2urww6ajNeJZFRTm3hxTiS4u3BU", "action_id_social": "A2bK9socLFEK9BtYxKpUqoxLtgDNMQw2M8R5V8z9hg7z-0-widget", "block_id": 90491420, "block_timestamp": "2023-04-26 18:13:02.766", "signer_id": "nearhorizon.near", "widget_name": "Request.Form", "source_code": "const ownerId = \"nearhorizon.near\";\nconst accountId = props.accountId;\n\nconst LineContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 0.25em;\n\n  img {\n    vertical-align: top;\n  }\n`;\n\nconst Name = styled.div`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 0.95em;\n  line-height: 1em;\n  color: #101828;\n`;\n\nconst AccountId = styled.div`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 0.75em;\n  line-height: 1em;\n  color: #7e868c;\n`;\n\nconst ImageCircle = styled.img`\n  background: #fafafa;\n  border-radius: 8px;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n`;\n\nconst ImageContainer = styled.div`\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n`;\n\nconst createProjectLine = (accountId, name, image) => {\n  const fullName = name ?? accountId;\n  const url =\n    (image.ipfs_cid\n      ? `https://ipfs.near.social/ipfs/${image.ipfs_cid}`\n      : image.url) || \"https://thewiki.io/static/media/sasha_anon.6ba19561.png\";\n  const imageSrc = `https://i.near.social/thumbnail/${url}`;\n\n  return (\n    <LineContainer>\n      <ImageContainer title={`${fullName} @${accountId}`}>\n        <ImageCircle src={imageSrc} alt=\"profile image\" />\n      </ImageContainer>\n      <Name>{name}</Name>\n      <AccountId>@{accountId}</AccountId>\n    </LineContainer>\n  );\n};\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  width: 60%;\n  gap: 1em;\n`;\n\nconst FormHeader = styled.h3`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 0px 0px 0.5em;\n  border-bottom: 1px solid #eceef0;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.125em;\n  line-height: 1.25em;\n  color: #000000;\n  width: 100%;\n`;\n\nconst FormFooter = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 3em;\n  padding-bottom: 3em;\n`;\n\nconst Header = styled.h1`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 2em;\n  line-height: 1.4em;\n  text-align: center;\n  color: #000000;\n`;\n\nconst SubHeader = styled.h2`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 0.95em;\n  line-height: 1.25em;\n  text-align: center;\n  color: #101828;\n`;\n\nconst ProgressBar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  gap: 0.375em;\n  width: 100%;\n  height: 0.5em;\n  padding: 0;\n  margin: 0;\n\n  div {\n    flex-grow: 1;\n    height: 100%;\n    width: 50%;\n    background: #00ec97;\n  }\n\n  &.half {\n    div:last-child {\n      background: #eceef0;\n    }\n  }\n`;\n\nconst CancelButton = styled.a`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 0.75em 1em;\n  gap: 0.5em;\n  background: #ffffff;\n  border: 1px solid #eceef0;\n  border-radius: 50px;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 0.95em;\n  line-height: 1em;\n  text-align: center;\n  color: #101828;\n`;\n\nState.init({\n  projectId: null,\n  projectIdError: \"\",\n  projects: [],\n  projectsIsFetched: false,\n  tags: [],\n  tagsError: \"\",\n  title: \"\",\n  titleError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  requestType: null,\n  requestTypes: [],\n  requestTypeError: \"\",\n  paymentType: null,\n  paymentTypes: [],\n  paymentTypeError: \"\",\n  paymentSource: null,\n  paymentSources: [],\n  paymentSourceError: \"\",\n  budget: null,\n  budgetError: \"\",\n  deadline: null,\n  deadlineError: \"\",\n});\n\nconst validateForm = () => {\n  return (\n    state.title &&\n    state.titleError === \"\" &&\n    state.description &&\n    state.descriptionError === \"\" &&\n    state.requestType &&\n    state.requestTypeError === \"\" &&\n    state.paymentType &&\n    state.paymentTypeError === \"\" &&\n    state.paymentSource &&\n    state.paymentSourceError === \"\" &&\n    state.budget &&\n    state.budgetError === \"\" &&\n    state.deadline &&\n    state.deadlineError === \"\"\n  );\n};\n\nif (!state.projectsIsFetched) {\n  Near.asyncView(ownerId, \"get_payment_types\", {}, \"final\", false).then(\n    (paymentTypes) =>\n      State.update({\n        paymentTypes: paymentTypes.map((value) => ({ value, text: value })),\n      })\n  );\n  Near.asyncView(ownerId, \"get_payment_sources\", {}, \"final\", false).then(\n    (paymentSources) =>\n      State.update({\n        paymentSources: paymentSources.map((value) => ({ value, text: value })),\n      })\n  );\n  Near.asyncView(ownerId, \"get_request_types\", {}, \"final\", false).then(\n    (requestTypes) =>\n      State.update({\n        requestTypes: requestTypes.map((value) => ({ value, text: value })),\n      })\n  );\n  Near.asyncView(\n    ownerId,\n    \"get_admin_projects\",\n    { account_id: context.accountId },\n    \"final\",\n    false\n  ).then((projects) => {\n    Near.asyncView(\n      \"social.near\",\n      \"get\",\n      { keys: projects.map((accountId) => `${accountId}/profile/**`) },\n      \"final\",\n      false\n    ).then((data) =>\n      State.update({\n        projects: projects.map((accountId) => ({\n          // text: <Widget\n          //   src={`${ownerId}/widget/Project.Line`}\n          //   props={{ accountId, size: \"1em\" }}\n          // />,\n          text: createProjectLine(\n            accountId,\n            data[accountId].profile.name,\n            data[accountId].profile.image\n          ),\n          value: accountId,\n        })),\n        projectsIsFetched: true,\n        ...(accountId\n          ? {\n              projectId: {\n                text: createProjectLine(\n                  accountId,\n                  data[accountId].profile.name,\n                  data[accountId].profile.image\n                ),\n                value: accountId,\n              },\n            }\n          : {}),\n      })\n    );\n  });\n  return <>Loading...</>;\n}\n\nreturn (\n  <Container>\n    {/*<ProgressBar className={state.step === \"step1\" ? \"half\" : \"\"}><div /><div /></ProgressBar>*/}\n    <div>\n      <Header>Create new contribution request</Header>\n      <SubHeader>\n        Use this form to post your business needs and match with reputable\n        contributors and service providers with ease\n      </SubHeader>\n    </div>\n    <Form>\n      <FormHeader>Request details</FormHeader>\n      <Widget\n        src={`${ownerId}/widget/Inputs.Select`}\n        props={{\n          label: \"Request as *\",\n          value: state.projectId,\n          options: state.projects,\n          onChange: (projectId) => State.update({ projectId }),\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.Text`}\n        props={{\n          label: \"Title\",\n          placeholder: \"Looking for Rust developer to create smart contracts\",\n          value: state.title,\n          onChange: (title) => State.update({ title }),\n          validate: () => {\n            if (state.title.length < 3) {\n              State.update({\n                titleError: \"Title must be at least 3 characters\",\n              });\n              return;\n            }\n\n            if (state.title.length > 50) {\n              State.update({\n                titleError: \"Title must be less than 50 characters\",\n              });\n              return;\n            }\n\n            State.update({ titleError: \"\" });\n          },\n          error: state.titleError,\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.TextArea`}\n        props={{\n          label: \"Description\",\n          placeholder:\n            \"Crypto ipsum bitcoin ethereum dogecoin litecoin. Holo stacks fantom kava flow algorand. Gala dogecoin gala XRP binance flow. Algorand polygon bancor arweave avalanche. Holo kadena telcoin kusama BitTorrent flow holo velas horizen. TerraUSD helium filecoin terra shiba-inu. Serum algorand horizen kava flow maker telcoin algorand enjin. Dai bitcoin.\",\n          value: state.description,\n          onChange: (description) => State.update({ description }),\n          validate: () => {\n            if (state.description.length < 10) {\n              State.update({\n                descriptionError: \"Description must be at least 10 characters\",\n              });\n              return;\n            }\n\n            if (state.description.length > 500) {\n              State.update({\n                descriptionError: \"Name must be less than 500 characters\",\n              });\n              return;\n            }\n\n            State.update({ descriptionError: \"\" });\n          },\n          error: state.descriptionError,\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.MultiSelect`}\n        props={{\n          label: \"Tags\",\n          placeholder: \"DeFi, Gaming...\",\n          options: [{ name: \"Wallets\" }, { name: \"Games\" }],\n          value: state.tags,\n          onChange: (tags) =>\n            State.update({\n              tags: tags.map(({ name }) => ({\n                name: name.trim().replaceAll(/\\s+/g, \"-\"),\n              })),\n            }),\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.Select`}\n        props={{\n          label: \"Request type *\",\n          options: state.requestTypes,\n          value: state.requestType,\n          onChange: (requestType) => State.update({ requestType }),\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.Select`}\n        props={{\n          label: \"Payment type *\",\n          options: state.paymentTypes,\n          value: state.paymentType,\n          onChange: (paymentType) => State.update({ paymentType }),\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.Select`}\n        props={{\n          label: \"Payment source *\",\n          options: state.paymentSources,\n          value: state.paymentSource,\n          onChange: (paymentSource) => State.update({ paymentSource }),\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.Number`}\n        props={{\n          label: \"Budget *\",\n          placeholder: 1500,\n          value: state.budget,\n          onChange: (budget) => State.update({ budget }),\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.Date`}\n        props={{\n          label: \"Deadline *\",\n          value: state.deadline,\n          onChange: (deadline) => State.update({ deadline }),\n        }}\n      />\n      <FormFooter>\n        <Widget\n          src={`${ownerId}/widget/Buttons.Green`}\n          props={{\n            onClick: () => {\n              Near.call(ownerId, \"add_request\", {\n                request: {\n                  project_id: state.projectId.value,\n                  title: state.title,\n                  description: state.description,\n                  open: true,\n                  request_type: state.requestType.value,\n                  payment_type: state.paymentType.value,\n                  tags: state.tags.map(({ name }) => name),\n                  source: state.paymentSource.value,\n                  deadline: `${new Date(state.deadline).getTime()}`,\n                  budget: Number(state.budget),\n                },\n              });\n            },\n            text: (\n              <>\n                <svg\n                  width=\"18\"\n                  height=\"18\"\n                  viewBox=\"0 0 18 18\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M7.87464 10.1251L15.7496 2.25013M7.97033 10.3712L9.94141 15.4397C10.1151 15.8862 10.2019 16.1094 10.327 16.1746C10.4354 16.2311 10.5646 16.2312 10.6731 16.1748C10.7983 16.1098 10.8854 15.8866 11.0596 15.4403L16.0023 2.77453C16.1595 2.37164 16.2381 2.1702 16.1951 2.04148C16.1578 1.92969 16.0701 1.84197 15.9583 1.80462C15.8296 1.76162 15.6281 1.84023 15.2252 1.99746L2.55943 6.94021C2.11313 7.11438 1.88997 7.20146 1.82494 7.32664C1.76857 7.43516 1.76864 7.56434 1.82515 7.67279C1.89033 7.7979 2.11358 7.88472 2.56009 8.05836L7.62859 10.0294C7.71923 10.0647 7.76455 10.0823 7.80271 10.1095C7.83653 10.1337 7.86611 10.1632 7.89024 10.1971C7.91746 10.2352 7.93508 10.2805 7.97033 10.3712Z\"\n                    stroke=\"#11181C\"\n                    stroke-width=\"1.66667\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n                Publish request\n              </>\n            ),\n          }}\n        />\n        <CancelButton href={`/${ownerId}/widget/Index`}>Cancel</CancelButton>\n      </FormFooter>\n    </Form>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearhorizon.near/widget/Request.Form"}