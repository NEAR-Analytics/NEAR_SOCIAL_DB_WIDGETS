{"tx_hash": "EkeCHhMrJidVXZ5A35pZTvRMSsjCwoWLNLj9a7E8HzWm", "action_id_social": "9CD5CvGwsB4rqTHk4VFqWPmFBKDGNLPV8tDRvG72KdHT-0-widget", "block_id": 94185199, "block_timestamp": "2023-06-14T14:46:36.041Z", "signer_id": "nearhorizon.near", "widget_name": "Inputs.Filters.Inner", "source_code": "const ownerId = \"nearhorizon.near\";\nconst filters = props.filters ?? {\n  first: {\n    text: \"Vertical\",\n    value: \"vertical\",\n    options: [\n      { text: \"DeSci\", value: \"desci\" },\n      { text: \"DeFi\", value: \"defi\" },\n      { text: \"Gaming\", value: \"gaming\" },\n      { text: \"Metaverse\", value: \"metaverse\" },\n      { text: \"Commercial\", value: \"commercial\" },\n      { text: \"Sports and Entertainment\", value: \"sports-and-entertainment\" },\n      { text: \"Infrastructure\", value: \"infrastructure\" },\n      { text: \"Social\", value: \"social\" },\n      { text: \"Social Impact\", value: \"social-impact\" },\n      { text: \"Creative\", value: \"creative\" },\n      { text: \"Education\", value: \"education\" },\n    ],\n  },\n  second: [\n    {\n      text: \"Readiness\",\n      value: \"readiness\",\n      options: [\n        { text: \"Pitch ready\", value: \"pitch-ready\" },\n        { text: \"Profile completed\", value: \"profile-completed\" },\n        { text: \"Documents ready\", value: \"documents-ready\" },\n      ],\n    },\n    {\n      text: \"Team size\",\n      value: \"size\",\n      options: [\n        { text: \"1-10\", value: \"1-10\" },\n        { text: \"10-50\", value: \"10-50\" },\n        { text: \"50-100\", value: \"50-100\" },\n        { text: \"100+\", value: \"100-1000\" },\n      ],\n    },\n    {\n      text: \"Chain\",\n      value: \"integration\",\n      options: [\n        { text: \"NEAR native\", value: \"native\" },\n        { text: \"Multichain\", value: \"multichain\" },\n        { text: \"Interested\", value: \"interested\" },\n      ],\n    },\n    {\n      text: \"Distribution\",\n      value: \"distribution\",\n      options: [\n        { text: \"Open source\", value: \"open-source\" },\n        { text: \"Partial\", value: \"partial\" },\n        { text: \"Proprietary\", value: \"proprietary\" },\n      ],\n    },\n    {\n      text: \"Stage\",\n      value: \"dev\",\n      options: [\n        { text: \"Idea stage\", value: \"idea\" },\n        { text: \"Testnet launched\", value: \"testnet\" },\n        { text: \"Mainnet launched\", value: \"mainnet\" },\n        { text: \"Scaling startup\", value: \"scaling\" },\n        { text: \"Established business\", value: \"established\" },\n      ],\n    },\n    {\n      text: \"Funding stage\",\n      value: \"stage\",\n      options: [\n        { text: \"Pre-seed\", value: \"pre-seed\" },\n        { text: \"Seed\", value: \"seed\" },\n        { text: \"Series A\", value: \"series-a\" },\n        { text: \"Series B\", value: \"series-b\" },\n        { text: \"Series C\", value: \"series-c\" },\n        { text: \"Series D\", value: \"series-d\" },\n      ],\n    },\n  ],\n};\nconst quickFilters = props.quickFilters ?? [\n  { text: \"Infrastructure\", value: \"infrastructure\", key: \"vertical\" },\n  { text: \"DeFi\", value: \"defi\", key: \"vertical\" },\n  { text: \"DeSci\", value: \"desci\", key: \"vertical\" },\n  { text: \"Metaverse\", value: \"metaverse\", key: \"vertical\" },\n  { text: \"Creative\", value: \"creative\", key: \"vertical\" },\n  { text: \"Education\", value: \"education\", key: \"vertical\" },\n  { text: \"Pitch ready\", value: \"pitch-ready\", key: \"readiness\" },\n  { text: \"NEAR native\", value: \"native\", key: \"integration\" },\n  { text: \"Open source\", value: \"open-source\", key: \"distribution\" },\n];\nState.init({\n  value: props.urlFilters ?? {},\n  search: props.search ?? \"\",\n});\nconst update = (value) => State.update({ value: { ...state.value, ...value } });\nconst getSort = () =>\n  Storage.get(`${props.entity ?? \"projects\"}-sort`) ?? \"timedesc\";\nconst clear = () => {\n  State.update({ value: {}, search: \"\" });\n  Storage.set(`${props.entity ?? \"projects\"}-sort`, \"timedesc\");\n};\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  gap: 30px;\n\n  & > a {\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding: 8px 16px;\n    gap: 8px;\n    background: #00ec97;\n    border: 1px solid #00ec97;\n    border-radius: 50px;\n    font-family: \"Inter\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 142%;\n    text-align: center;\n    color: #101828;\n    white-space: nowrap;\n  }\n\n  &.not {\n    display: none;\n  }\n\n  &.selected {\n    justify-content: flex-start;\n    gap: 13px;\n\n    & > button.clear {\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      align-items: center;\n      padding: 3px 8px;\n      gap: 3px;\n      background: #11181c;\n      border: 1px solid #11181c;\n      border-radius: 6px;\n      font-family: \"Inter\";\n      font-style: normal;\n      font-weight: 500;\n      font-size: 12px;\n      line-height: 15px;\n      text-align: center;\n      color: #ffffff;\n    }\n\n    & > div {\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      align-items: center;\n      padding: 3px 4px 3px 8px;\n      gap: 3px;\n      background: #ffffff;\n      border: 1px solid #e6e8eb;\n      border-radius: 6px;\n      font-family: \"Inter\";\n      font-style: normal;\n      font-weight: 500;\n      font-size: 12px;\n      line-height: 18px;\n      text-align: center;\n      color: #11181c;\n\n      & > button {\n        background: transparent;\n        border: none;\n        padding: 0;\n        margin: 0;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n\n        &:hover,\n        &:focus,\n        &:active {\n          outline: none !important;\n          background: transparent !important;\n          border: none !important;\n        }\n      }\n    }\n  }\n\n  &.bottom {\n    justify-content: flex-start;\n    gap: 13px;\n\n    & > button {\n      white-space: nowrap;\n      font-family: \"Inter\";\n      font-style: normal;\n      font-weight: 500;\n      font-size: 12px;\n      line-height: 18px;\n      text-align: center;\n      color: #006adc;\n      background: transparent;\n      border: none;\n      padding: 0;\n      margin: 0;\n\n      &:hover,\n      &:focus,\n      &:active {\n        outline: none !important;\n        background: transparent !important;\n        border: none !important;\n        color: #006adc !important;\n      }\n    }\n  }\n\n  & > span {\n    white-space: nowrap;\n    font-family: \"Inter\";\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    text-align: center;\n    color: #11181c;\n  }\n`;\n\nconst Search = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 12px;\n  gap: 8px;\n  width: 100%;\n  height: 2.4em;\n  background: #ffffff;\n  border: 1px solid #d0d5dd;\n  box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);\n  border-radius: 4px;\n`;\n\nconst Input = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: 0;\n  border: none;\n  outline: none;\n  background: transparent;\n\n  &::placeholder {\n    font-family: \"Inter\";\n    font-style: normal;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 140%;\n    letter-spacing: 0.01em;\n    color: #101828;\n  }\n`;\n\nconst slideDown = styled.keyframes`\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-collapsible-content-height);\n  }\n`;\n\nconst slideUp = styled.keyframes`\n  from {\n    height: var(--radix-collapsible-content-height);\n  }\n  to {\n    height: 0;\n  }\n`;\n\nconst CollapsibleContent = styled(\"Collapsible.Content\")`\n  overflow: hidden;\n  min-height: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 24px;\n  gap: 24px;\n  width: 100%;\n  background: #fafafa;\n\n  &[data-state=\"open\"] {\n    animation: ${slideDown} 300ms ease-out;\n  }\n\n  &[data-state=\"closed\"] {\n    animation: ${slideUp} 300ms ease-out;\n  }\n\n  & > div.content {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n    width: 100%;\n    gap: 24px;\n\n    span {\n      font-family: \"Inter\";\n      font-style: normal;\n      font-weight: 600;\n      font-size: 14px;\n      line-height: 142%;\n      text-align: center;\n      color: #11181c;\n    }\n\n    div.column {\n      display: flex;\n      flex-direction: column;\n      align-items: flex-start;\n      justify-content: flex-start;\n      gap: 6px;\n    }\n\n    div.row {\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: stretch;\n      justify-content: flex-start;\n      gap: 6px;\n\n      &.large {\n        flex-wrap: nowrap !important;\n        justify-content: space-between;\n      }\n\n      & > div {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: flex-start;\n        gap: 14px;\n        width: fit-content;\n        margin: 0;\n        padding: 0;\n      }\n    }\n\n    & button {\n      width: fit-content;\n      white-space: nowrap;\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      align-items: center;\n      padding: 6px 18px;\n      gap: 5px;\n      background: #ffffff;\n      border: 1px solid #eceef0;\n      border-radius: 50px;\n      font-family: \"Inter\";\n      font-style: normal;\n      font-weight: 500;\n      font-size: 12px;\n      line-height: 142%;\n      text-align: center;\n      letter-spacing: 0.01em;\n      color: #101828;\n\n      &.selected {\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n        padding: 6px 18px;\n        gap: 5px;\n        background: #11181c;\n        border: 1px solid #eceef0;\n        border-radius: 50px;\n        font-family: \"Inter\";\n        font-style: normal;\n        font-weight: 500;\n        font-size: 12px;\n        line-height: 142%;\n        text-align: center;\n        letter-spacing: 0.01em;\n        color: #ffffff;\n      }\n    }\n  }\n\n  & > div.buttons {\n    display: flex;\n    flex-direction: row;\n    align-items: stretch;\n    justify-content: space-between;\n    width: 100%;\n\n    & > div {\n      display: flex;\n      flex-direction: row;\n      align-items: stretch;\n      justify-content: space-between;\n      gap: 24px;\n\n      &.left {\n        justify-content: flex-start;\n      }\n\n      & > button {\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n        padding: 8px 16px;\n        gap: 8px;\n        background: #ffffff;\n        border: 1px solid #eceef0;\n        border-radius: 50px;\n        font-family: \"Inter\";\n        font-style: normal;\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 142%;\n        text-align: center;\n        color: #101828;\n\n        &.green {\n          background: #00ec97;\n          border-radius: 50px;\n          border: none;\n        }\n      }\n\n      & > a {\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n        padding: 8px 16px;\n        gap: 8px;\n        background: #00ec97;\n        border: 1px solid #00ec97;\n        border-radius: 50px;\n        font-family: \"Inter\";\n        font-style: normal;\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 142%;\n        text-align: center;\n        color: #101828;\n      }\n    }\n  }\n`;\n\nconst Button = styled(\"Collapsible.Trigger\")`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 16px;\n  gap: 8px;\n  background: #fafafa;\n  border: 1px solid #eceef0;\n  border-radius: 50px;\n\n  &.selected {\n    background: #161615;\n    border: 1px solid #161615;\n    color: white;\n  }\n\n  &.close {\n    background: #ffffff;\n    border: 1px solid #eceef0;\n    color: #101828;\n  }\n`;\n\nconst selected = () => {\n  const selectedKeys = Object.keys(state.value);\n  return (\n    selectedKeys.length > 0 &&\n    selectedKeys.some((key) => state.value[key].size > 0)\n  );\n};\n\nconst url = () => {\n  const urlString = \"\";\n\n  if (selected()) {\n    const selectedKeys = Object.keys(state.value);\n\n    urlString += \"&\";\n    urlString += selectedKeys\n      .map((key) => {\n        const values = Array.from(state.value[key]);\n        return `${key}=${values.join(\",\")}`;\n      })\n      .join(\"&\");\n  }\n\n  if (state.search) {\n    urlString += `&q=${state.search}`;\n  }\n\n  const sort = getSort();\n\n  if (sort) {\n    urlString += `&sort=${sort}`;\n  }\n\n  return urlString;\n};\n\nreturn (\n  <>\n    <Row>\n      <Search>\n        <svg\n          width=\"18\"\n          height=\"18\"\n          viewBox=\"0 0 18 18\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M16.5 16.5L11.5001 11.5M13.1667 7.33333C13.1667 10.555 10.555 13.1667 7.33333 13.1667C4.11167 13.1667 1.5 10.555 1.5 7.33333C1.5 4.11167 4.11167 1.5 7.33333 1.5C10.555 1.5 13.1667 4.11167 13.1667 7.33333Z\"\n            stroke=\"#667085\"\n            stroke-width=\"1.66667\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n        </svg>\n        <Input\n          placeholder=\"Search\"\n          type=\"search\"\n          value={state.search}\n          onKeyUp={({ key }) => {\n            if (key === \"Enter\") {\n              props.change({ filters: state.value, search: state.search });\n            }\n          }}\n          onChange={({ target: { value } }) => State.update({ search: value })}\n        />\n      </Search>\n      {props.noFilters ? (\n        <a\n          href={`/${ownerId}/widget/Index?tab=${props.entity ?? \"projects\"\n            }${url()}`}\n        >\n          <svg\n            width=\"14\"\n            height=\"11\"\n            viewBox=\"0 0 14 11\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M13 1.5L4.75 9.75L1 6\"\n              stroke=\"#11181C\"\n              stroke-width=\"1.66667\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            />\n          </svg>\n          Apply filters\n        </a>\n      ) : (\n        <Button className={selected() ? \"selected\" : \"\"}>\n          <svg\n            width=\"16\"\n            height=\"12\"\n            viewBox=\"0 0 16 12\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M3.5 6H12.5M1.25 1.5H14.75M5.75 10.5H10.25\"\n              stroke=\"currentColor\"\n              stroke-width=\"1.66667\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            />\n          </svg>\n          Filters\n        </Button>\n      )}\n    </Row>\n    {props.noFilters ? (\n      <></>\n    ) : (\n      <>\n        <CollapsibleContent>\n          <div className=\"content\">\n            <div>\n              <span>{filters.first.text}</span>\n              <div className=\"row\">\n                {filters.first.options.map(({ value, text }) => {\n                  const selected = state.value[filters.first.value]\n                    ? state.value[filters.first.value].has(value)\n                    : false;\n\n                  return (\n                    <button\n                      className={selected ? \"selected\" : \"\"}\n                      key={value}\n                      onClick={() => {\n                        if (selected) {\n                          state.value[filters.first.value].delete(value);\n                        } else if (state.value[filters.first.value]) {\n                          state.value[filters.first.value].add(value);\n                        } else {\n                          state.value[filters.first.value] = new Set([value]);\n                        }\n                        update({\n                          [filters.first.value]:\n                            state.value[filters.first.value],\n                        });\n                      }}\n                    >\n                      {text}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n            <div className=\"row large\">\n              {filters.second.map(({ value, text, options }) => (\n                <div key={value}>\n                  <span>{text}</span>\n                  <div className=\"column\">\n                    {options.map((option) => {\n                      const selected = state.value[value]\n                        ? state.value[value].has(option.value)\n                        : false;\n\n                      return (\n                        <button\n                          className={selected ? \"selected\" : \"\"}\n                          key={option.value}\n                          onClick={() => {\n                            if (selected) {\n                              state.value[value].delete(option.value);\n                            } else if (state.value[value]) {\n                              state.value[value].add(option.value);\n                            } else {\n                              state.value[value] = new Set([option.value]);\n                            }\n                            update({\n                              [value]: state.value[value],\n                            });\n                          }}\n                        >\n                          {option.text}\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <div className=\"left\">\n              <Button>Close</Button>\n            </div>\n            <div>\n              <button onClick={() => clear()}>Clear</button>\n              <a\n                href={`/${ownerId}/widget/Index?tab=${props.entity ?? \"projects\"\n                  }${url()}`}\n              >\n                <svg\n                  width=\"14\"\n                  height=\"11\"\n                  viewBox=\"0 0 14 11\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M13 1.5L4.75 9.75L1 6\"\n                    stroke=\"#11181C\"\n                    stroke-width=\"1.66667\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n                Apply filters\n              </a>\n            </div>\n          </div>\n        </CollapsibleContent>\n        <Row className={selected() ? \"selected\" : \"not\"}>\n          <button className=\"clear\" onClick={() => clear()}>\n            Clear all\n          </button>\n          {Object.keys(state.value).map((key) => {\n            /** @type {Set<string>} */\n            const set = state.value[key];\n            /** @type {{value: string;text: string}[]} */\n            const selected =\n              key === filters.first.value\n                ? filters.first.options.filter(({ value }) => set.has(value))\n                : filters.second\n                  .find(({ value }) => value === key)\n                  .options.filter(({ value }) => set.has(value));\n\n            return selected.map(({ value, text }) => (\n              <div key={`${key}-${value}`}>\n                {text}\n                <button\n                  onClick={() => {\n                    state.value[key].delete(value);\n                    update({ [key]: state.value[key] });\n                  }}\n                >\n                  <svg\n                    width=\"8\"\n                    height=\"8\"\n                    viewBox=\"0 0 8 8\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M6.5 1.5L1.5 6.5M1.5 1.5L6.5 6.5\"\n                      stroke=\"#98A2B3\"\n                      stroke-width=\"1.5\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            ));\n          })}\n        </Row>\n        {/*<Row className=\"bottom\">\n          <span>Quick filters:</span>\n          {quickFilters.map(({ text, value, key }) => (\n            <button\n              key={`${key}-${value}`}\n              onClick={() => {\n                if (!state.value[key]) {\n                  state.value[key] = new Set([value]);\n                } else {\n                  state.value[key].add(value);\n                }\n                update({ [key]: state.value[key] });\n              }}\n            >\n              {text}\n            </button>\n          ))}\n        </Row>*/}\n      </>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearhorizon.near/widget/Inputs.Filters.Inner", "__row_index": 2}