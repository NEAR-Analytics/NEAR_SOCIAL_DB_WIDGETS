{"tx_hash": "8ECkfSScerX9vKbfLW4AXoqXhLRqqYzA3r2ppV1gQRjj", "action_id_social": "5zghjcyceQxE5mZ8YRbY7cudrxUa6PCp4LX6kbr3RWdn-0-widget", "block_id": 94105573, "block_timestamp": "2023-06-13T09:42:31.327Z", "signer_id": "rubycop.near", "widget_name": "NDC-elections", "source_code": "const {\n  id,\n  typ,\n  title,\n  ref_link,\n  start,\n  end,\n  quorum,\n  voters_num,\n  seats,\n  result,\n  voters,\n  votes,\n  contractName,\n  ndcOrganization,\n} = props;\n\nconst _bookmarked = Social.index(ndcOrganization, typ);\nconst currentUser = context.accountId;\n\nState.init({\n  loading: false,\n  availableVotes: votes.available,\n  selected: null,\n  bookmarked: _bookmarked ? _bookmarked[_bookmarked.length - 1].value : [],\n  selectedCandidates: [],\n  candidates: result,\n  filter: {\n    bookmark: false,\n    candidate: false,\n    votes: false,\n    my_votes: false,\n  },\n});\n\nconst H4 = styled.h4`\n  margin-bottom: 0;\n`;\n\nconst H3 = styled.h3`\n  margin-bottom: 0;\n`;\n\nconst Container = styled.div`\n  font-family: Avenir;\n  font-size: 16px;\n`;\n\nconst StyledLink = styled.a`\n  color: inherit !important;\n  width: 100px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TxnLink = styled.a`\n  color: inherit !important;\n  width: 310px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst NominationLink = styled.a`\n  font-size: 12px;\n  line-height: 24px;\n  background: ${(props) =>\n    props.selected\n      ? \"linear-gradient(90deg, #ffffff 0%, #ffffff 100%)\"\n      : \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%)\"};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  border: ${(props) =>\n    props.selected ? \"1px solid #ffffff\" : \"1px solid #9333EA\"};\n  padding: 0 10px;\n  border-radius: 5px;\n`;\n\nconst CandidateItem = styled.div`\n  padding: 0 20px;\n  height: 48px;\n  border-radius: 12px;\n  margin-bottom: 8px;\n  border: 1px solid;\n  background: ${(props) =>\n    props.selected\n      ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%)\"\n      : \"#F8F8F9\"};\n  border-color: ${(props) => (props.selected ? \"#4F46E5\" : \"#F8F8F9\")};\n  color: ${(props) => (props.selected ? \"white\" : \"inherit\")};\n\n  &:hover {\n    cursor: pointer;\n    border: 1px solid #4F46E5;\n    background: ${(props) =>\n      props.selected\n        ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%)\"\n        : \"linear-gradient(90deg, rgba(147, 51, 234, 0.08) 0%, rgba(79, 70, 229, 0.08) 100%)\"};\n  }\n`;\n\nconst VoterItem = styled.div`\n  font-size: 14px;\n  padding: 0 20px;\n  height: 48px;\n  border-bottom: 1px solid #D0D6D9;\n\n  &:last-child {\n    border: 0;\n  }\n`;\n\nconst VotersContainer = styled.div`\n  padding: 5px 0;\n`;\n\nconst Bookmark = styled.div`\n  width: 100px;\n\n  #bookmark.bi-bookmark-fill {\n    color: ${(props) => (props.selected ? \"#fff\" : \"#4F46E5\")};\n  }\n`;\n\nconst Votes = styled.div`\n  width: 90px;\n  margin-left: 20px;\n  text-align: center;\n`;\n\nconst Nomination = styled.div`\n  width: 102px;\n`;\n\nconst FilterRow = styled.div`\n  padding: 15px 20px;\n`;\n\nconst PrimaryButton = styled.button`\n  padding: 8px 20px;\n  background: #FFD50D;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 24px;\n  border: 0;\n`;\n\nconst SecondaryButton = styled.button`\n  padding: 4px 10px;\n  border: 1px solid #FFD50D;\n  background: transparent;\n  border-radius: 10px;\n  font-size: 12px;\n  font-weight: 500;\n  margin-left: 10px;\n`;\n\nconst CastVotesSection = styled.div`\n  background: #FDFEFF;\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  padding: 16px;\n\n  h3, h4 {\n    margin: 0 3px;\n  }\n\n  h3 {\n    font-weight: 900;\n  }\n\n  .text-secondary {\n    margin-left: 10px;\n  }\n`;\n\nconst Link = ({ title, src }) => (\n  <>\n    <StyledLink href={src}>{title}</StyledLink>\n    <span>\n      <i class=\"bi bi-arrow-up-right\" />\n    </span>\n  </>\n);\n\nconst Loader = () => (\n  <span\n    className=\"spinner-grow spinner-grow-sm me-1\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  />\n);\n\nconst handleSelectCandidate = (accountId) => {\n  const selectedItems = state.selectedCandidates.includes(accountId)\n    ? state.selectedCandidates.filter((el) => el !== accountId)\n    : [...state.selectedCandidates, accountId];\n\n  const availableVotes = votes.total - selectedItems.length;\n  if (availableVotes < 0) return;\n\n  State.update({\n    selectedCandidates: selectedItems,\n    availableVotes: availableVotes,\n  });\n};\n\nconst selectedBookmarks = (accountId) => {\n  let selectedItems = state.bookmarked.includes(accountId)\n    ? state.bookmarked.filter((el) => el !== accountId)\n    : [...state.bookmarked, accountId];\n\n  return [...new Set(selectedItems)];\n};\n\nconst handleBookmarkCandidate = (accountId) => {\n  let selectedItems = selectedBookmarks(accountId);\n  State.update({ loading: accountId });\n\n  Social.set(\n    {\n      index: {\n        [ndcOrganization]: JSON.stringify({\n          key: typ,\n          value: selectedBookmarks(accountId),\n        }),\n      },\n    },\n    {\n      force: true,\n      onCommit: () => {\n        if (selectedItems.length === 0)\n          State.update({ selectedCandidates: result });\n        State.update({ bookmarked: selectedItems, loading: false });\n      },\n      onCancel: () => State.update({ loading: false }),\n    }\n  );\n};\n\nconst handleVote = () => {\n  Near.call([\n    {\n      contractName: contractName,\n      methodName: \"vote\",\n      args: { prop_id: id, vote: state.selectedCandidates },\n      gas: \"70000000000000\",\n      deposit: 0.002,\n    },\n  ]);\n};\n\nconst alreadyVoted = (accountId) =>\n  voters.some(\n    (v) => v.accountId === currentUser && v.candidateId === accountId\n  );\n\nconst filterBy = (option) => {\n  if (option.bookmark)\n    if (!state.filter.bookmark)\n      State.update({\n        candidates: state.candidates.filter(([accountId, _votes], _index) =>\n          state.bookmarked.includes(accountId)\n        ),\n        filter: { bookmark: true },\n      });\n    else\n      State.update({\n        candidates: result,\n        filter: { bookmark: false },\n      });\n  else if (option.candidate)\n    State.update({\n      candidates: state.candidates.sort((a, b) =>\n        state.filter.candidate ? a[1] - b[1] : b[1] - a[1]\n      ),\n      filter: { candidate: !state.filter.candidate },\n    });\n  else if (option.votes)\n    State.update({\n      candidates: state.candidates.sort((a, b) =>\n        state.filter.votes ? a[1] - b[1] : b[1] - a[1]\n      ),\n      filter: { votes: !state.filter.votes },\n    });\n  else if (option.my_votes)\n    if (!state.filter.my_votes)\n      State.update({\n        candidates: state.candidates.filter(([accountId, _votes], _index) =>\n          alreadyVoted(accountId)\n        ),\n        filter: { my_votes: true },\n      });\n    else\n      State.update({\n        candidates: result,\n        filter: { my_votes: false },\n      });\n  else\n    State.update({\n      candidates: result,\n      filter: { bookmark: false, my_votes: false },\n    });\n};\n\nconst VotersList = ({ voters }) => (\n  <VotersContainer>\n    {voters.map((voter) => (\n      <VoterItem className=\"d-flex align-items-center justify-content-between\">\n        <div className=\"d-flex\">\n          <Bookmark />\n          <Widget\n            src=\"mob.near/widget/ProfileImage\"\n            props={{\n              accountId: voter.accountId,\n              imageClassName: \"rounded-circle w-100 h-100\",\n              style: { width: \"24px\", height: \"24px\", marginRight: 4 },\n            }}\n          />\n          <Link\n            src={`https://wallet.near.org/profile/${voter.accountId}`}\n            title={voter.accountId}\n          />\n        </div>\n        <div className=\"d-flex align-items-center\">\n          <TxnLink\n            role=\"button\"\n            src={`https://explorer.mainnet.near.org/transactions/${voter.txn_url}`}\n          >\n            {voter.txn_url}\n          </TxnLink>\n          <span>\n            <i class=\"bi bi-arrow-up-right\" />\n          </span>\n        </div>\n      </VoterItem>\n    ))}\n  </VotersContainer>\n);\n\nconst CandidateList = ({ accountId, votes }) => {\n  return (\n    <div>\n      <CandidateItem\n        className=\"d-flex align-items-center justify-content-between\"\n        onClick={(e) => {\n          if (e.target.id === \"input\" || e.target.id === \"bookmark\") return;\n\n          State.update({\n            selected: state.selected === accountId ? null : accountId,\n          });\n        }}\n        selected={state.selected === accountId}\n      >\n        <div className=\"d-flex\">\n          <Bookmark selected={state.selected === accountId}>\n            {state.loading === accountId ? (\n              <Loader />\n            ) : (\n              <i\n                id=\"bookmark\"\n                onClick={() => handleBookmarkCandidate(accountId)}\n                className={`bi ${\n                  state.bookmarked.includes(accountId)\n                    ? \"bi-bookmark-fill\"\n                    : \"bi-bookmark\"\n                }`}\n              />\n            )}\n          </Bookmark>\n          <div className=\"d-flex\">\n            <Widget\n              src=\"mob.near/widget/ProfileImage\"\n              props={{\n                accountId,\n                imageClassName: \"rounded-circle w-100 h-100\",\n                style: { width: \"24px\", height: \"24px\", marginRight: 4 },\n              }}\n            />\n            <Link\n              src={`https://wallet.near.org/profile/${accountId}`}\n              title={accountId}\n            />\n          </div>\n        </div>\n        <div className=\"d-flex\">\n          <NominationLink\n            href={ref_link}\n            selected={state.selected === accountId}\n          >\n            Nomination\n            <span className=\"ml-2 text-secondary\">\n              <i className=\"bi bi-arrow-up-right\" />\n            </span>\n          </NominationLink>\n          <Votes>{votes}</Votes>\n          <Votes>\n            <input\n              id=\"input\"\n              disabled={alreadyVoted(accountId)}\n              onClick={() => handleSelectCandidate(accountId)}\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              checked={\n                state.selectedCandidates.includes(accountId) ||\n                alreadyVoted(accountId)\n              }\n            />\n          </Votes>\n        </div>\n      </CandidateItem>\n      {state.selected === accountId && (\n        <VotersList\n          voters={voters.filter((v) => v.candidateId === accountId)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst Filters = () => {\n  return (\n    <FilterRow className=\"d-flex align-items-center justify-content-between\">\n      <div className=\"d-flex\">\n        <Bookmark\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ bookmark: true })}\n        >\n          <small>Bookmark</small>\n          <i className=\"bi bi-funnel\" />\n        </Bookmark>\n        <div\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ candidate: true })}\n        >\n          <small>Candidate</small>\n          <i\n            className={`bi ${\n              state.filter.candidate ? \"bi-arrow-down\" : \"bi-arrow-up\"\n            }`}\n          />\n        </div>\n      </div>\n      <div className=\"d-flex\">\n        <Nomination className=\"text-secondary\">\n          <small>Platform</small>\n        </Nomination>\n        <Votes\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ votes: true })}\n        >\n          <small>Total votes</small>\n          <i\n            className={`bi ${\n              state.filter.votes ? \"bi-arrow-down\" : \"bi-arrow-up\"\n            }`}\n          />\n        </Votes>\n        <Votes\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ my_votes: true })}\n        >\n          <small>My votes</small>\n          <i className=\"bi bi-funnel\" />\n        </Votes>\n      </div>\n    </FilterRow>\n  );\n};\n\nreturn (\n  <Container>\n    <h1>{title}</h1>\n    <Filters />\n    {state.candidates.map(([accountId, votes], index) => (\n      <CandidateList accountId={accountId} votes={votes} key={index} />\n    ))}\n    <CastVotesSection className=\"d-flex align-items-center justify-content-between\">\n      <div className=\"d-flex align-items-end\">\n        <H3>{state.availableVotes}</H3>\n        <span>/</span>\n        <H4>{votes.total}</H4>\n        <span className=\"text-secondary\">votes left</span>\n        {state.selectedCandidates.length > 0 && (\n          <SecondaryButton\n            onClick={() =>\n              State.update({\n                selectedCandidates: [],\n                availableVotes: votes.total,\n              })\n            }\n          >\n            Reset Selection\n          </SecondaryButton>\n        )}\n      </div>\n      <PrimaryButton\n        disabled={!state.selectedCandidates.length}\n        onClick={handleVote}\n      >\n        Cast {state.selectedCandidates.length || \"\"} Votes\n      </PrimaryButton>\n    </CastVotesSection>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rubycop.near/widget/NDC-elections", "__row_index": 21}