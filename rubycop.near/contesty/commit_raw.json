{"tx_hash": "AMotJfwcp3sULsNjr5KgUd9JA6XtbotMPyg7hKADrZGe", "action_id_social": "34bvVaJ9UL6BEMQJPK8wkqWGb73MPBccSytK47vnbs3D-0-widget", "block_id": 82512642, "block_timestamp": "2023-01-08 22:22:26.848", "signer_id": "rubycop.near", "widget_name": "contesty", "source_code": "if (!props.accountId || !context.accountId) {\n  return \"\";\n}\n\nconst RETRY = 40;\nconst index = {\n  action: \"graph\",\n  key: \"nft_stats\",\n  options: {\n    subscribe: true,\n    order: \"desc\",\n  },\n};\n\nState.init({ nftPair: [], loading: false, tryAgain: false });\n\nconst getSample = (arr) => arr[Math.floor(Math.random() * arr.length)];\n\nconst fetchCollections = (accountId) =>\n  fetch(`https://api.kitwallet.app/account/${accountId}/likelyNFTsFromBlock`);\n\nconst profiles = Social.get([\"*/profile/name\"], \"final\") || {};\nconst stats = Social.index(\"graph\", \"nft_stats\", { order: \"desc\" });\nconsole.log(\"\", stats);\n\nconst getUserNFTContract = (accountId) => {\n  const nftResponse = fetchCollections(accountId);\n  if (!nftResponse.ok) return;\n\n  const collections = nftResponse.body.list;\n\n  return getSample(collections);\n};\n\nconst getRandom = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst findUser = (retry) => {\n  if (retry === 0) return;\n\n  const profileNames = Object.keys(profiles);\n  const accountId = profileNames[getRandom(profileNames.length)];\n  const contractId = getUserNFTContract(accountId);\n\n  if (!contractId) return findUser(retry - 1);\n\n  const userNFTs = allNfts(contractId, accountId);\n  const nft = getSample(userNFTs);\n\n  if (!nft || !nft.token_id) return findUser(retry - 1);\n\n  const data = stats.find((i) => i.value.nft_stats.contract_id === contractId);\n\n  return {\n    accountId: accountId,\n    contractId: contractId,\n    nft: nft,\n    rating: data ? data.rating : 0,\n  };\n};\n\nconst getPair = () => {\n  State.update({ loading: true });\n\n  const userNFT1 = findUser(RETRY);\n  const userNFT2 = findUser(RETRY);\n\n  State.update({\n    nftPair: [userNFT1, userNFT2],\n    loading: false,\n  });\n};\n\nconst allNfts = (contractId, accountId) =>\n  Near.view(contractId, \"nft_tokens_for_owner\", {\n    account_id: accountId,\n    from_index: \"0\",\n    limit: 10,\n  });\n\nif (state.loading) return <div>Loading ... </div>;\n\nreturn (\n  <>\n    <div className=\"d-flex gap-1 flex-wrap\">\n      {state.nftPair.map((obj, i) => (\n        <div className=\"d-block\">\n          <Widget\n            src=\"mob.near/widget/NftImage\"\n            props={{\n              nft: {\n                tokenId: obj.nft.token_id,\n                contractId: obj.contractId,\n              },\n              style: {\n                width: \"10em\",\n                height: \"10em\",\n                objectFit: \"cover\",\n                minWidth: \"10em\",\n                minHeight: \"10em\",\n                maxWidth: \"10em\",\n                maxHeight: \"10em\",\n                overflowWrap: \"break-word\",\n              },\n              className: \"img-thumbnail\",\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n              alt: `NFT ${obj.contractId} ${obj.nft.token_id}`,\n            }}\n          />\n\n          {obj.nft.token_id && (\n            <div className=\"btn-block mt-1\">\n              <CommitButton\n                data={{\n                  index: {\n                    graph: JSON.stringify({\n                      key: \"nft_stats\",\n                      value: {\n                        nft_stats: {\n                          contract_id: obj.contractId,\n                          token_id: obj.nft.token_id,\n                          rating: obj.rating + 1,\n                        },\n                      },\n                    }),\n                    notify: JSON.stringify({\n                      key: obj.accountId,\n                      value: \"Congrats! \ud83c\udf89 your NFT was liked\",\n                    }),\n                  },\n                }}\n              >\n                {`Like (${obj.rating || 0})`}\n              </CommitButton>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n\n    <div>\n      <div className=\"btn-block my-2\">\n        <button onClick={getPair}>Find Random NFT Pair</button>\n      </div>\n      <h3>Leaderboard</h3>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">NFT contract rating</th>\n            <th scope=\"col\">NFT token id</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stats\n            .map((k) => k.value.nft_stats)\n            .sort((a, b) => b.rating - a.rating)\n            .map(({ contract_id, token_id, rating }, i) => (\n              <tr key={i}>\n                <td>{i + 1}</td>\n                <td>\n                  <b>{rating}</b>\n                </td>\n                <td>\n                  <a\n                    href={`#mob.near/widget/NftImage?tokenId=${token_id}&contractId=${contract_id}`}\n                  >\n                    {token_id}\n                  </a>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n      <div className=\"mt-2\">\n        <small>\n          Follow <a href=\"https://twitter.com/ContestyNFT\">Contesty.app</a>\n        </small>\n      </div>\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rubycop.near/widget/contesty", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.contest": NaN, "metadata.tags.nft": NaN}