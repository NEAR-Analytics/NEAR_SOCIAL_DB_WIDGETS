{"tx_hash": "CWJerVhFrfzfULDgSEdnKenbAx1oJCtRwTHSrRfmYwss", "action_id_social": "DUXr5X6gZHAnHjwDhHGEFmLLCtycsyzxdE2aZGpBoUbU-0-widget", "block_id": 94849293, "block_timestamp": "2023-06-23T14:20:06.195Z", "signer_id": "rubycop.near", "widget_name": "NDC.Elections.Candidates", "source_code": "const {\n  electionContract,\n  registryContract,\n  ndcOrganization,\n  id,\n  typ,\n  title,\n  ref_link,\n  start,\n  end,\n  quorum,\n  voters_num,\n  seats,\n  result,\n} = props;\n\nconst widgets = {\n  voters: \"rubycop.near/widget/NDC.Elections.Voters\",\n  button: \"rubycop.near/widget/NDC.StyledComponents\",\n};\n\nconst _bookmarked = Social.index(ndcOrganization, typ);\nconst currentUser = context.candidateId;\n\nconst fetchVoters = () => {\n  // indexer call to get voters for particular 'houseId'\n  return [\n    {\n      accountId: \"rubycop.near\",\n      candidateId: \"zomland.near\",\n      txn_url: \"3ZunLtfdnkAC1oTgUxy5KXJb7qQWULmcFpVvkaq2pd6b\",\n    },\n    {\n      accountId: \"voter1.near\",\n      candidateId: \"zomland.near\",\n      txn_url: \"3ZunLtfdnkAC1oTgUxy5KXJb7qQWULmcFpVvkaq2pd6b\",\n    },\n    {\n      accountId: \"voter1\",\n      candidateId: \"zomland.near\",\n      txn_url: \"3ZunLtfdnkAC1oTgUxy5KXJb7qQWULmcFpVvkaq2pd6b\",\n    },\n  ];\n};\n\nState.init({\n  loading: false,\n  availableVotes: seats,\n  selected: null,\n  bookmarked: _bookmarked ? _bookmarked[_bookmarked.length - 1].value : [],\n  selectedCandidates: [],\n  candidates: result,\n  filter: {\n    bookmark: false,\n    candidate: false,\n    votes: false,\n    my_votes: false,\n  },\n  voters: fetchVoters(),\n});\n\nconst H4 = styled.h4`\n  margin-bottom: 0;\n`;\n\nconst H3 = styled.h3`\n  margin-bottom: 0;\n`;\n\nconst Container = styled.div`\n  position: relative:\n  font-family: Avenir;\n  font-size: 16px;\n`;\n\nconst StyledLink = styled.a`\n  color: inherit !important;\n  width: 100px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst NominationLink = styled.a`\n  font-size: 12px;\n  line-height: 24px;\n  background: ${(props) =>\n    props.selected\n      ? \"linear-gradient(90deg, #ffffff 0%, #ffffff 100%)\"\n      : \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%)\"};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  border: ${(props) =>\n    props.selected ? \"1px solid #ffffff\" : \"1px solid #9333EA\"};\n  padding: 0 10px;\n  border-radius: 5px;\n`;\n\nconst CandidateItem = styled.div`\n  padding: 0 20px;\n  height: 48px;\n  border-radius: 12px;\n  margin-bottom: 8px;\n  border: 1px solid;\n  background: ${(props) =>\n    props.selected\n      ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%)\"\n      : \"#F8F8F9\"};\n  border-color: ${(props) => (props.selected ? \"#4F46E5\" : \"#F8F8F9\")};\n  color: ${(props) => (props.selected ? \"white\" : \"inherit\")};\n\n  &:hover {\n    cursor: pointer;\n    border: 1px solid #4F46E5;\n    background: ${(props) =>\n      props.selected\n        ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%)\"\n        : \"linear-gradient(90deg, rgba(147, 51, 234, 0.08) 0%, rgba(79, 70, 229, 0.08) 100%)\"};\n  }\n`;\n\nconst Bookmark = styled.div`\n  width: 100px;\n\n  #bookmark.bi-bookmark-fill {\n    color: ${(props) => (props.selected ? \"#fff\" : \"#4F46E5\")};\n  }\n`;\n\nconst Votes = styled.div`\n  width: 90px;\n  margin-left: 20px;\n  text-align: center;\n`;\n\nconst Action = styled.div`\n  width: 90px;\n  min-width: 20px;\n  margin-left: 20px;\n  text-align: center;\n`;\n\nconst Nomination = styled.div`\n  width: 102px;\n`;\n\nconst FilterRow = styled.div`\n  padding: 15px 20px;\n`;\n\nconst CandidatesContainer = styled.div`\n  overflow-y: scroll;\n  max-height: 490px;\n  width: 100%;\n`;\n\nconst StickyContainer = styled.div`\n  position: \"fixed\",\n  left: 0;\n  bottom: 0;\n  height: 60px;\n  width: 100%;\n`;\n\nconst PrimaryLink = styled.a`\n  padding: 8px 20px;\n  background: #FFD50D;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 24px;\n  color: inherit;\n\n  &:hover {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nconst CastVotesSection = styled.div`\n  background: #FDFEFF;\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  padding: 16px;\n\n  h3, h4 {\n    margin: 0 3px;\n  }\n\n  h3 {\n    font-weight: 900;\n  }\n\n  .text-secondary {\n    margin-left: 10px;\n  }\n\n  &.not-verified {\n    h4 {\n      font-size: 16px;\n      margin: 0 0 5px 0;\n      font-weight: 600;\n    }\n\n    h5 {\n      margin: 0;\n      font-size: 12px;\n    }\n  }\n`;\n\nconst UserLink = ({ title, src }) => (\n  <>\n    <StyledLink href={src}>{title}</StyledLink>\n    <span>\n      <i class=\"bi bi-arrow-up-right\" />\n    </span>\n  </>\n);\n\nconst Loader = () => (\n  <span\n    className=\"spinner-grow spinner-grow-sm me-1\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  />\n);\n\nconst handleSelectCandidate = (candidateId) => {\n  const selectedItems = state.selectedCandidates.includes(candidateId)\n    ? state.selectedCandidates.filter((el) => el !== candidateId)\n    : [...state.selectedCandidates, candidateId];\n\n  const availableVotes = seats - selectedItems.length;\n  if (availableVotes < 0) return;\n\n  State.update({\n    selectedCandidates: selectedItems,\n    availableVotes: availableVotes,\n  });\n};\n\nconst selectedBookmarks = (candidateId) => {\n  let selectedItems = state.bookmarked.includes(candidateId)\n    ? state.bookmarked.filter((el) => el !== candidateId)\n    : [...state.bookmarked, candidateId];\n\n  return [...new Set(selectedItems)];\n};\n\nconst handleBookmarkCandidate = (candidateId) => {\n  let selectedItems = selectedBookmarks(candidateId);\n  State.update({ loading: candidateId });\n\n  Social.set(\n    {\n      index: {\n        [ndcOrganization]: JSON.stringify({\n          key: typ,\n          value: selectedBookmarks(candidateId),\n        }),\n      },\n    },\n    {\n      force: true,\n      onCommit: () => {\n        if (selectedItems.length === 0)\n          State.update({ selectedCandidates: result });\n        State.update({ bookmarked: selectedItems, loading: false });\n      },\n      onCancel: () => State.update({ loading: false }),\n    }\n  );\n};\n\nconst handleVote = () => {\n  Near.call(\n    electionContract,\n    \"vote\",\n    { prop_id: id, vote: state.selectedCandidates },\n    \"70000000000000\",\n    0.002\n  );\n};\n\nconst isIAmHuman = () => {\n  Near.view(registryContract, \"is_human\", { account: context.accountId });\n};\n\nconst alreadyVoted = (candidateId) =>\n  state.voters.some(\n    (v) => v.candidateId === currentUser && v.candidateId === candidateId\n  );\n\nconst filterBy = (option) => {\n  if (option.bookmark)\n    if (!state.filter.bookmark)\n      State.update({\n        candidates: state.candidates.filter(([candidateId, _votes], _index) =>\n          state.bookmarked.includes(candidateId)\n        ),\n        filter: { bookmark: true },\n      });\n    else\n      State.update({\n        candidates: result,\n        filter: { bookmark: false },\n      });\n  else if (option.candidate)\n    State.update({\n      candidates: state.candidates.sort((a, b) =>\n        state.filter.candidate ? a[1] - b[1] : b[1] - a[1]\n      ),\n      filter: { candidate: !state.filter.candidate },\n    });\n  else if (option.votes)\n    State.update({\n      candidates: state.candidates.sort((a, b) =>\n        state.filter.votes ? a[1] - b[1] : b[1] - a[1]\n      ),\n      filter: { votes: !state.filter.votes },\n    });\n  else if (option.my_votes)\n    if (!state.filter.my_votes)\n      State.update({\n        candidates: state.candidates.filter(([candidateId, _votes], _index) =>\n          alreadyVoted(candidateId)\n        ),\n        filter: { my_votes: true },\n      });\n    else\n      State.update({\n        candidates: result,\n        filter: { my_votes: false },\n      });\n  else\n    State.update({\n      candidates: result,\n      filter: { bookmark: false, my_votes: false },\n    });\n};\n\nconst CandidateList = ({ candidateId, votes }) => {\n  return (\n    <div>\n      <CandidateItem\n        className=\"d-flex align-items-center justify-content-between\"\n        onClick={(e) => {\n          if (e.target.id === \"input\" || e.target.id === \"bookmark\") return;\n\n          State.update({\n            selected: state.selected === candidateId ? null : candidateId,\n          });\n        }}\n        selected={state.selected === candidateId}\n      >\n        <div className=\"d-flex\">\n          {isIAmHuman() && (\n            <Bookmark selected={state.selected === candidateId}>\n              {state.loading === candidateId ? (\n                <Loader />\n              ) : (\n                <i\n                  id=\"bookmark\"\n                  onClick={() => handleBookmarkCandidate(candidateId)}\n                  className={`bi ${\n                    state.bookmarked.includes(candidateId)\n                      ? \"bi-bookmark-fill\"\n                      : \"bi-bookmark\"\n                  }`}\n                />\n              )}\n            </Bookmark>\n          )}\n          <div className=\"d-flex\">\n            <Widget\n              src=\"mob.near/widget/ProfileImage\"\n              props={{\n                accountId: candidateId,\n                imageClassName: \"rounded-circle w-100 h-100\",\n                style: { width: \"24px\", height: \"24px\", marginRight: 4 },\n              }}\n            />\n            <UserLink\n              src={`https://wallet.near.org/profile/${candidateId}`}\n              title={candidateId}\n            />\n          </div>\n        </div>\n        <div className=\"d-flex\">\n          <NominationLink\n            className=\"d-flex\"\n            href={ref_link}\n            selected={state.selected === candidateId}\n          >\n            <span className=\"d-none d-md-block\">Nomination</span>\n\n            <i className=\"bi bi-arrow-up-right\" />\n          </NominationLink>\n          <Votes>{votes}</Votes>\n          {isIAmHuman() && (\n            <Votes>\n              <input\n                id=\"input\"\n                disabled={alreadyVoted(candidateId)}\n                onClick={() => handleSelectCandidate(candidateId)}\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                checked={\n                  state.selectedCandidates.includes(candidateId) ||\n                  alreadyVoted(candidateId)\n                }\n              />\n            </Votes>\n          )}\n        </div>\n      </CandidateItem>\n      {state.selected === candidateId && (\n        <Widget src={widgets.voters} props={{ voters: state.voters }} />\n      )}\n    </div>\n  );\n};\n\nconst Filters = () => {\n  return (\n    <FilterRow className=\"d-flex align-items-center justify-content-between\">\n      <div className=\"d-flex\">\n        {isIAmHuman() && (\n          <Bookmark\n            role=\"button\"\n            className=\"text-secondary\"\n            onClick={() => filterBy({ bookmark: true })}\n          >\n            <small>Bookmark</small>\n            <i className=\"bi bi-funnel\" />\n          </Bookmark>\n        )}\n        <div\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ candidate: true })}\n        >\n          <small>Candidate</small>\n          <i\n            className={`bi ${\n              state.filter.candidate ? \"bi-arrow-down\" : \"bi-arrow-up\"\n            }`}\n          />\n        </div>\n      </div>\n      <div className=\"d-flex\">\n        <Nomination className=\"text-secondary text-end text-md-start\">\n          <small>Platform</small>\n        </Nomination>\n        <Votes\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ votes: true })}\n        >\n          <small>Total votes</small>\n          <i\n            className={`bi ${\n              state.filter.votes ? \"bi-arrow-down\" : \"bi-arrow-up\"\n            }`}\n          />\n        </Votes>\n        {isIAmHuman() && (\n          <Action\n            role=\"button\"\n            className=\"text-secondary\"\n            onClick={() => filterBy({ my_votes: true })}\n          >\n            <small>My votes</small>\n            <i className=\"bi bi-funnel\" />\n          </Action>\n        )}\n      </div>\n    </FilterRow>\n  );\n};\n\nconst CastVotes = () => (\n  <CastVotesSection className=\"d-flex align-items-center justify-content-between\">\n    <div className=\"d-flex align-items-end\">\n      <H3>{state.availableVotes}</H3>\n      <span>/</span>\n      <H4>{seats}</H4>\n      <span className=\"text-secondary\">votes left</span>\n      {state.selectedCandidates.length > 0 && (\n        <Widget\n          src={widgets.button}\n          props={{\n            Button: {\n              text: \"Reset Selection\",\n              onClick: () =>\n                State.update({\n                  selectedCandidates: [],\n                  availableVotes: seats,\n                }),\n            },\n          }}\n        />\n      )}\n    </div>\n    <Widget\n      src={widgets.button}\n      props={{\n        Button: {\n          disabled: !state.selectedCandidates.length,\n          text: `Cast ${state.selectedCandidates.length || \"\"} Votes`,\n          onClick: handleVote,\n        },\n      }}\n    />\n  </CastVotesSection>\n);\n\nconst VerifyHuman = () => (\n  <CastVotesSection className=\"not-verified d-flex align-items-center justify-content-between\">\n    <div>\n      <h4>Want to vote?</h4>\n      <h5 className=\"text-secondary\">\n        Click on the button next to and Verify as a Human to proceed.\n      </h5>\n    </div>\n    <PrimaryLink href=\"https://i-am-human.app/\">Verify as Human</PrimaryLink>\n  </CastVotesSection>\n);\n\nreturn (\n  <Container>\n    <h1>{title}</h1>\n    {state.candidates.length > 0 && (\n      <>\n        <Filters />\n        <CandidatesContainer>\n          {state.candidates.map(([candidateId, votes], index) => (\n            <CandidateList\n              candidateId={candidateId}\n              votes={votes}\n              key={index}\n            />\n          ))}\n        </CandidatesContainer>\n      </>\n    )}\n    <div className=\"position-sticky\">\n      {isIAmHuman() ? <CastVotes /> : <VerifyHuman />}\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rubycop.near/widget/NDC.Elections.Candidates", "__row_index": 24}