{"tx_hash": "23Cu6JfeCQow5MmctHxNL6zGZd67C3p9jNUm5ptswLDg", "action_id_social": "ECxb8adfEXomZZKX9Kb7CBSzBtspFiYp3sUfSKF8uF6q-0-widget", "block_id": 93167179, "block_timestamp": "2023-05-31T23:31:57.013Z", "signer_id": "devs.near", "widget_name": "dev.config", "source_code": "const path =\n  props.path || `${props.accountId || context.accountId}/settings/dev/**`;\nconst blockHeight = props.blockHeight || \"final\";\n\nif (accountId === null) {\n  return <p>Please connect a NEAR account...</p>;\n}\n\nconst settings = Social.get(path, blockHeight);\n\nif (!settings) {\n  return <p>Loading...</p>;\n}\n\nconst FormContainer = styled.div`\n  width: 500px;\n  margin: 0 auto;\n`;\n\nconst SectionTitle = styled.h2`\n  font-size: 24px;\n  margin-top: 20px;\n`;\n\nconst SectionContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 10px;\n  margin-bottom: 20px;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 18px;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px;\n`;\n\nconst Button = styled.button`\n  margin-left: 5px;\n`;\n\nState.init({\n  formData: settings,\n  modifiedInputs: {},\n});\n\nfunction composeData(section) {\n  const modifiedData = Object.entries(state.modifiedInputs).reduce(\n    (result, [key, value]) => {\n      const [currentSection, currentKey] = key.split(\"/\");\n      if (currentSection === section && value) {\n        const [_, index] = currentKey.split(\"/\");\n        const parsedIndex = parseInt(index, 10);\n        if (Number.isInteger(parsedIndex)) {\n          if (!result[currentSection]) {\n            result[currentSection] = {};\n          }\n          if (!result[currentSection][currentKey]) {\n            result[currentSection][currentKey] = [];\n          }\n          result[currentSection][currentKey][parsedIndex] =\n            state.formData[currentSection][currentKey][parsedIndex];\n        } else {\n          if (!result[currentSection]) {\n            result[currentSection] = {};\n          }\n          result[currentSection][currentKey] =\n            state.formData[currentSection][currentKey];\n        }\n      }\n      return result;\n    },\n    {}\n  );\n  return modifiedData;\n}\n\nconst handleInputChange = (section, key, index, value) => {\n  const updatedData = { ...state.formData };\n  const modifiedInputs = { ...state.modifiedInputs };\n\n  if (Array.isArray(JSON.parse(updatedData[section][key]))) {\n    try {\n      const inputs = JSON.parse(updatedData[section][key]);\n      const originalValue = JSON.parse(settings[section][key]);\n\n      inputs[index].src = value;\n      updatedData[section][key] = JSON.stringify(inputs);\n\n      modifiedInputs[`${section}/${key}/${index}`] =\n        inputs[index].src !== originalValue[index].src;\n\n      State.update({ formData: updatedData, modifiedInputs });\n    } catch (error) {\n      console.log(\n        `Error updating input value for ${section}/${key}/${index}:`,\n        error\n      );\n    }\n  } else {\n    const originalValue = settings[section][key];\n    updatedData[section][key] = value;\n\n    modifiedInputs[`${section}/${key}/0`] =\n      updatedData[section][key] !== originalValue;\n\n    State.update({ formData: updatedData, modifiedInputs });\n  }\n};\nconst moveInputUp = (section, key, index) => {\n  const updatedData = { ...state.formData };\n  const modifiedInputs = { ...state.modifiedInputs };\n\n  try {\n    const inputs = JSON.parse(updatedData[section][key]);\n\n    if (index > 0) {\n      const temp = inputs[index];\n      inputs[index] = inputs[index - 1];\n      inputs[index - 1] = temp;\n\n      const currentModifiedKey = `${section}/${key}/${index}`;\n      const previousModifiedKey = `${section}/${key}/${index - 1}`;\n\n      // Check if the current input value matches the original value\n      const originalValue = JSON.parse(settings[section][key]);\n      const isCurrentInputModified =\n        inputs[index].src !== originalValue[index].src;\n      const isPreviousInputModified =\n        inputs[index - 1].src !== originalValue[index - 1].src;\n\n      modifiedInputs[currentModifiedKey] = isCurrentInputModified;\n      modifiedInputs[previousModifiedKey] = isPreviousInputModified;\n\n      // Remove modified flag if the inputs match the original values\n      if (!isCurrentInputModified) {\n        delete modifiedInputs[currentModifiedKey];\n      }\n      if (!isPreviousInputModified) {\n        delete modifiedInputs[previousModifiedKey];\n      }\n\n      updatedData[section][key] = JSON.stringify(inputs);\n\n      State.update({ formData: updatedData, modifiedInputs });\n    }\n  } catch (error) {\n    console.log(`Error moving input up for ${section}/${key}/${index}:`, error);\n  }\n};\n\nconst moveInputDown = (section, key, index) => {\n  const updatedData = { ...state.formData };\n  const modifiedInputs = { ...state.modifiedInputs };\n\n  try {\n    const inputs = JSON.parse(updatedData[section][key]);\n\n    if (index < inputs.length - 1) {\n      const temp = inputs[index];\n      inputs[index] = inputs[index + 1];\n      inputs[index + 1] = temp;\n\n      const currentModifiedKey = `${section}/${key}/${index}`;\n      const nextModifiedKey = `${section}/${key}/${index + 1}`;\n\n      // Check if the current input value matches the original value\n      const originalValue = JSON.parse(settings[section][key]);\n      const isCurrentInputModified =\n        inputs[index].src !== originalValue[index].src;\n      const isNextInputModified =\n        inputs[index + 1].src !== originalValue[index + 1].src;\n\n      modifiedInputs[currentModifiedKey] = isCurrentInputModified;\n      modifiedInputs[nextModifiedKey] = isNextInputModified;\n\n      // Remove modified flag if the inputs match the original values\n      if (!isCurrentInputModified) {\n        delete modifiedInputs[currentModifiedKey];\n      }\n      if (!isNextInputModified) {\n        delete modifiedInputs[nextModifiedKey];\n      }\n\n      updatedData[section][key] = JSON.stringify(inputs);\n\n      State.update({ formData: updatedData, modifiedInputs });\n    }\n  } catch (error) {\n    console.log(\n      `Error moving input down for ${section}/${key}/${index}:`,\n      error\n    );\n  }\n};\n\nreturn (\n  <FormContainer>\n    <h1>settings</h1>\n    {Object.entries(state.formData).map(([section, values]) => (\n      <SectionContainer key={section}>\n        <SectionTitle>{section}</SectionTitle>\n        {Object.entries(values).map(([key, input]) => {\n          let parsedInput = JSON.parse(input);\n          if (parsedInput === null) {\n            parsedInput = input;\n          }\n          return (\n            <FormGroup key={key}>\n              <Label>{key}</Label>\n              {Array.isArray(parsedInput) ? (\n                parsedInput.map((item, index) => {\n                  return (\n                    <InputContainer key={index}>\n                      <Input\n                        type=\"text\"\n                        value={item.src}\n                        style={{\n                          border: state.modifiedInputs[\n                            `${section}/${key}/${index}`\n                          ]\n                            ? \"2px solid #f00\"\n                            : \"1px solid #ccc\",\n                        }}\n                        onChange={(e) =>\n                          handleInputChange(section, key, index, e.target.value)\n                        }\n                      />\n                      <Button\n                        onClick={() => moveInputUp(section, key, index)}\n                        disabled={index === 0}\n                      >\n                        &uarr;\n                      </Button>\n                      <Button\n                        onClick={() => moveInputDown(section, key, index)}\n                        disabled={index === parsedInput.length - 1}\n                      >\n                        &darr;\n                      </Button>\n                    </InputContainer>\n                  );\n                })\n              ) : (\n                <InputContainer>\n                  <Input\n                    type=\"text\"\n                    value={parsedInput}\n                    style={{\n                      border: state.modifiedInputs[`${section}/${key}/0`]\n                        ? \"2px solid #f00\"\n                        : \"1px solid #ccc\",\n                    }}\n                    onChange={(e) =>\n                      handleInputChange(section, key, 0, e.target.value)\n                    }\n                  />\n                </InputContainer>\n              )}\n            </FormGroup>\n          );\n        })}\n        <CommitButton\n          force\n          data={() => composeData(section)}\n          disabled={!Object.keys(composeData(section)).length}\n          className=\"styless\"\n        >\n          save\n        </CommitButton>\n      </SectionContainer>\n    ))}\n  </FormContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devs.near/widget/dev.config", "__row_index": 1}