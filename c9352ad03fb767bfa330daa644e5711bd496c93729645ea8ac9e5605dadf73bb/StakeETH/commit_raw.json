{"tx_hash": "FnyjoGPE6iU9ASm8wxECvS8CD8dtWZbFeXgAmjFjpXwV", "action_id_social": "2WuUmHpVY1ohfWVKF548SG6C9xEf6yDWwuTgC8dgEUqq-1-widget", "block_id": 87958126, "block_timestamp": "2023-03-23 17:56:49.275", "signer_id": "c9352ad03fb767bfa330daa644e5711bd496c93729645ea8ac9e5605dadf73bb", "widget_name": "StakeETH", "source_code": "// FETCH LIDO ABI\r\n\r\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\r\nconst tokenDecimals = 18;\r\n\r\nconst lidoAbi = fetch(\r\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\r\n);\r\nif (!lidoAbi.ok) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst iface = new ethers.utils.Interface(lidoAbi.body);\r\n\r\n// FETCH LIDO STAKING APR\r\n\r\nif (state.lidoArp === undefined) {\r\n  const apr = fetch(\r\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\r\n  );\r\n  if (!apr) return;\r\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\r\n}\r\n\r\n// HELPER FUNCTIONS\r\n\r\nconst getStakedBalance = (receiver) => {\r\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\r\n\r\n  return Ethers.provider()\r\n    .call({\r\n      to: lidoContract,\r\n      data: encodedData,\r\n    })\r\n    .then((rawBalance) => {\r\n      const receiverBalanceHex = iface.decodeFunctionResult(\r\n        \"balanceOf\",\r\n        rawBalance\r\n      );\r\n\r\n      return Big(receiverBalanceHex.toString())\r\n        .div(Big(10).pow(tokenDecimals))\r\n        .toFixed(2)\r\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n    });\r\n};\r\n\r\nconst submitEthers = (strEther, _referral) => {\r\n  if (!strEther) {\r\n    return console.log(\"Amount is missing\");\r\n  }\r\n  const erc20 = new ethers.Contract(\r\n    lidoContract,\r\n    lidoAbi.body,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\r\n\r\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\r\n    console.log(\"transactionHash is \" + transactionHash);\r\n  });\r\n};\r\n\r\n// DETECT SENDER\r\n\r\nif (state.sender === undefined) {\r\n  State.update({ sender: Ethers.send(\"eth_requestAccounts\", [])[0] });\r\n}\r\n\r\nif (!state.sender) return \"Please login first\";\r\n\r\n// FETCH SENDER BALANCE\r\n\r\nif (state.balance === undefined) {\r\n  Ethers.provider()\r\n    .getBalance(state.sender)\r\n    .then((balance) => {\r\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\r\n    });\r\n}\r\n\r\n// FETCH SENDER STETH BALANCE\r\n\r\nif (state.stakedBalance === undefined) {\r\n  getStakedBalance(state.sender).then((stakedBalance) => {\r\n    State.update({ stakedBalance });\r\n  });\r\n}\r\n\r\n// FETCH TX COST\r\n\r\nif (state.txCost === undefined) {\r\n  const gasEstimate = ethers.BigNumber.from(1875000);\r\n  const gasPrice = ethers.BigNumber.from(1500000000);\r\n\r\n  const gasCostInWei = gasEstimate.mul(gasPrice);\r\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\r\n\r\n  let responseGql = fetch(\r\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\r\n    {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        query: `{\r\n          bundle(id: \"1\" ) {\r\n            ethPrice\r\n          }\r\n        }`,\r\n      }),\r\n    }\r\n  );\r\n\r\n  if (!responseGql) return \"\";\r\n\r\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\r\n\r\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\r\n\r\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\r\n}\r\n\r\n// FETCH CSS\r\n\r\nconst cssFont = fetch(\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\r\n).body;\r\nconst css = fetch(\r\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\r\n).body;\r\n\r\nif (!cssFont || !css) return \"\";\r\n\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n    ${cssFont}\r\n    ${css}\r\n`,\r\n  });\r\n}\r\nconst Theme = state.theme;\r\n\r\n// OUTPUT UI\r\n\r\nreturn (\r\n  <Theme>\r\n    <div class=\"LidoContainer\">\r\n      <div class=\"Header\">Stake Ether</div>\r\n      <div class=\"SubHeader\">Stake ETH and receive stETH while staking.</div>\r\n\r\n      <div class=\"LidoForm\">\r\n        <div class=\"LidoFormTopContainer\">\r\n          <div class=\"LidoFormTopContainerLeft\">\r\n            <div class=\"LidoFormTopContainerLeftContent1\">\r\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\r\n                <span>Available to stake</span>\r\n                <div class=\"LidoFormTopContainerLeftContent1Circle\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"LidoFormTopContainerLeftContent2\">\r\n              <span>{state.balance ?? \"...\"}&nbsp;ETH</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"LidoFormTopContainerRight\">\r\n            <div class=\"LidoFormTopContainerRightContent1\">\r\n              <div class=\"LidoFormTopContainerRightContent1Text\">\r\n                <span>\r\n                  {state.sender.substring(0, 6)}...\r\n                  {state.sender.substring(\r\n                    state.sender.length - 4,\r\n                    state.sender.length\r\n                  )}{\" \"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"LidoSplitter\" />\r\n        <div class=\"LidoFormBottomContainer\">\r\n          <div class=\"LidoFormTopContainerLeft\">\r\n            <div class=\"LidoFormTopContainerLeftContent1\">\r\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\r\n                <span>Staked amount</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"LidoFormTopContainerLeftContent2\">\r\n              <span>{state.stakedBalance ?? \"...\"}&nbsp;stETH</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"LidoFormTopContainerRight\">\r\n            <div class=\"LidoAprContainer\">\r\n              <div class=\"LidoAprTitle\">Lido APR</div>\r\n              <div class=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"LidoStakeForm\">\r\n        <div class=\"LidoStakeFormInputContainer\">\r\n          <span class=\"LidoStakeFormInputContainerSpan1\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\r\n              ></path>\r\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\r\n              ></path>\r\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\r\n              <path\r\n                opacity=\"0.2\"\r\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\r\n              ></path>\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\r\n              ></path>\r\n            </svg>\r\n          </span>\r\n          <span class=\"LidoStakeFormInputContainerSpan2\">\r\n            <input\r\n              class=\"LidoStakeFormInputContainerSpan2Input\"\r\n              value={state.strEther}\r\n              onChange={(e) => State.update({ strEther: e.target.value })}\r\n              placeholder=\"Amount\"\r\n            />\r\n          </span>\r\n          <span\r\n            class=\"LidoStakeFormInputContainerSpan3\"\r\n            onClick={() => {\r\n              State.update({\r\n                strEther: (parseFloat(state.balance) - 0.05).toFixed(2),\r\n              });\r\n            }}\r\n          >\r\n            <button class=\"LidoStakeFormInputContainerSpan3Content\">\r\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\r\n            </button>\r\n          </span>\r\n        </div>\r\n        <button\r\n          class=\"LidoStakeFormSubmitContainer\"\r\n          onClick={() => submitEthers(state.strEther, state.sender)}\r\n        >\r\n          <span>Submit</span>\r\n        </button>\r\n\r\n        <div class=\"LidoFooterContainer\">\r\n          <div class=\"LidoFooterRaw\">\r\n            <div class=\"LidoFooterRawLeft\">You will receive</div>\r\n            <div class=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\r\n          </div>\r\n          <div class=\"LidoFooterRaw\">\r\n            <div class=\"LidoFooterRawLeft\">Exchange rate</div>\r\n            <div class=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>\r\n          </div>\r\n          <div class=\"LidoFooterRaw\">\r\n            <div class=\"LidoFooterRawLeft\">Transaction cost</div>\r\n            <div class=\"LidoFooterRawRight\">{state.txCost}</div>\r\n          </div>\r\n          <div class=\"LidoFooterRaw\">\r\n            <div class=\"LidoFooterRawLeft\">Reward fee</div>\r\n            <div class=\"LidoFooterRawRight\">10%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c9352ad03fb767bfa330daa644e5711bd496c93729645ea8ac9e5605dadf73bb/widget/StakeETH", "metadata.tags.ethdenver2023": ""}