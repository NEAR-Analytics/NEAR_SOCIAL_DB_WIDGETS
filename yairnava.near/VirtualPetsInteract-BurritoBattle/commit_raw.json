{"tx_hash": "3bqmjsyVCsjoKqnXkvb4Yswmg8HUXFyYL7yK3i5zonML", "action_id_social": "GtvvBPoKC1g1KxtEbQmEMiBArDq3RGPeLy8Fr26J4PpP-0-widget", "block_id": 94753945, "block_timestamp": "2023-06-22T08:26:14.793Z", "signer_id": "yairnava.near", "widget_name": "VirtualPetsInteract-BurritoBattle", "source_code": null, "metadata": null, "branch": {"draft": {"": "const virtualPetContract = \"0xA611e8a7e0e935237AA8D83eD4b8D6334308b41e\";\n\nconst virtualPetAbi = fetch(\n  \"https://indigo-fluttering-emu-841.mypinata.cloud/ipfs/QmSmUspM2y4AjuMWw9M4WUumkqrE6Ky4nmHUcmVJLxkMhV\"\n);\n\nif (!virtualPetAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(virtualPetAbi.body);\n\nState.init({\n  inputTokenId: 0,\n  firstSearch: true,\n  tokenId: 0,\n  pet: null,\n  idleImg: null,\n  playImg: null,\n  eatImg: null,\n  sleepImg: null,\n  currentActivity: null,\n  currentImg: null,\n});\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nif (state.sender && state.tokenId && state.firstSearch) {\n  console.log(1);\n  const contract = new ethers.Contract(\n    virtualPetContract,\n    virtualPetAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  // Consultar mascota del usuario\n  contract.getTokenInfoById(state.tokenId).then((res) => {\n    const petInfo = [res].map(_castData);\n    console.log(petInfo);\n    State.update({\n      firstSearch: false,\n      pet: petInfo[0],\n      idleImg: _getIdleImg(petInfo[0].image),\n      playImg: _getPlayImg(petInfo[0].image),\n      eatImg: _getEatImg(petInfo[0].image),\n      sleepImg: _getSleepImg(petInfo[0].image),\n      currentActivity: petInfo[0].currentActivity,\n      currentImg: _getIdleImg(petInfo[0].image),\n    });\n  });\n}\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nconst _castData = (data) => {\n  return {\n    tokenId: data[0],\n    image: data[1],\n    name: data[2],\n    happiness: data[3],\n    hunger: data[4],\n    sleep: data[5],\n    currentActivity: data[6],\n    isHungry: data[7],\n    isSleepy: data[8],\n    isBored: data[9],\n  };\n};\n\nconst _getIdleImg = (img) => {\n  switch (img) {\n    case \"https://pin.ski/3Jjp95g\":\n      return \"https://pin.ski/3XjzdRA\";\n  }\n};\n\nconst _getPlayImg = (img) => {\n  switch (img) {\n    case \"https://pin.ski/3Jjp95g\":\n      return \"https://pin.ski/46ka6SE\";\n  }\n};\n\nconst _getEatImg = (img) => {\n  switch (img) {\n    case \"https://pin.ski/3Jjp95g\":\n      return \"https://pin.ski/3peflmc\";\n  }\n};\n\nconst _getSleepImg = (img) => {\n  switch (img) {\n    case \"https://pin.ski/3Jjp95g\":\n      return \"https://pin.ski/44a09FA\";\n  }\n};\n\nconst play = () => {\n  State.update({\n    currentImg: state.playImg,\n  });\n};\n\nconst eat = () => {\n  setTimeout(() => {\n    State.update({\n      currentImg: state.eatImg,\n    });\n  }, \"1500\");\n  State.update({\n    currentImg: \"https://pin.ski/3Xj02Fs\",\n  });\n};\n\nconst sleep = () => {\n  setTimeout(() => {\n    State.update({\n      currentImg: state.sleepImg,\n    });\n  }, \"500\");\n  State.update({\n    currentImg: \"https://pin.ski/43Sak1T\",\n  });\n};\n\nconst getNft = () => {\n  State.update({\n    tokenId: state.inputTokenId,\n  });\n  const contract = new ethers.Contract(\n    virtualPetContract,\n    virtualPetAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  // Consultar mascota del usuario\n  contract.getTokenInfoById(state.inputTokenId).then((res) => {\n    const petInfo = [res].map(_castData);\n    State.update({\n      firstSearch: false,\n      pet: petInfo[0],\n      idleImg: _getIdleImg(petInfo[0].image),\n      playImg: _getPlayImg(petInfo[0].image),\n      eatImg: _getEatImg(petInfo[0].image),\n      sleepImg: _getSleepImg(petInfo[0].image),\n      currentActivity: petInfo[0].currentActivity,\n      currentImg: _getIdleImg(petInfo[0].image),\n    });\n  });\n};\n\nconst ItemBackground = styled.div`\n        width: 100%;\n        height: 100vh;\n        display: flex;\n        justify-content: center;\n        margin-bottom: -50px;\n        background-image: url('https://pin.ski/444ghZP');\n        background-repeat: no-repeat;\n        background-size: cover;\n        `;\n\nconst ItemContainer = styled.div`\n        margin-top: 30px;\n        box-sizing: border-box;\n        min-width: 500px;\n        max-width: 600px;\n        width: 100%;\n        padding: 0px 32px;\n        position: relative;\n        `;\n\nconst ItemTitle = styled.h3`\n        font-weight: 900;\n        text-align: center;\n        color: white;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin-bottom: 1rem;\n        `;\n\nconst ItemImage = styled.img`\n            width: 40px;\n            margin-right: 15px;\n        `;\n\nconst ItemHeader = styled.div`\n        background: rgb(242,167,115);\n        font-weight: 400;\n        font-size: 12px;\n        line-height: 1.6em;\n        border-radius: 20px;\n        margin: 0px;\n        padding: 20px;\n        box-shadow: none;\n        color: rgb(255, 255, 255);\n        border: rgb(139,68,37);\n        border-top-style: outset;\n        `;\n\nconst ItemBody = styled.div`\n        font-weight: 400;\n        font-size: 1em;\n        line-height: 1.6em;\n        border-radius: 0px 0px 20px 20px;\n        margin: -20px 0px 0px;\n        padding-inline: 32px;\n        box-shadow: none;\n        background-image: url('https://pin.ski/3NcSWOa');\n        background-repeat: no-repeat;\n        background-size: cover;        \n        color: rgb(242,167,115);\n        min-height: 500px;\n        max-height: auto;\n        border: solid 5px;\n        `;\n\nconst ItemPetsSection = styled.div`\n        gap: 3rem  7rem !important;\n        display: grid;\n        gap: 10px;\n        grid-template-columns: repeat(auto-fit, 160px);\n        justify-content: center;\n        min-height: 500px;\n        max-height: 550px;\n        align-content: end;\n        `;\n\nconst ItemPet = styled.div`\n    display: flex !important;\n    width: 100%;\n    display: flex !important;\n    justify-content: center;\n    cursor: pointer;\n`;\n\nconst ItemPetAction = styled.div`\n    gap: 0.25rem !important;\n    padding: 1rem !important;\n    flex-direction: column !important;\n    display: flex !important;\n    border: solid 3px;\n    border-radius: 20px;\n    color: black;\n    background: rgb(0 0 0 / 40%);\n    align-items: center;\n    cursor: pointer;\n`;\n\nconst ItemPetImg = styled.img`\n    height: 400px;\n`;\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\nreturn (\n  <Theme>\n    <ItemBackground>\n      <ItemContainer>\n        <ItemHeader>\n          <ItemTitle class=\"row\">\n            <div class=\"col-4\" style={{ \"text-align\": \"left\" }}>\n              <ItemImage src=\"https://pin.ski/3Jkha80\"></ItemImage>\n            </div>\n            <div class=\"col-4\">{state.pet.name}</div>\n            <div class=\"col-4\" style={{ \"text-align\": \"right\" }}>\n              {state.sender ? (\n                <button\n                  style={{\n                    \"box-shadow\":\n                      \"0 0px 13px 0 rgba(0,0,0,0.2), 0 0px 13px 0 rgba(0,0,0,0.19)\",\n                  }}\n                  onClick={async () => {\n                    mint();\n                  }}\n                >\n                  Mint Pet\n                </button>\n              ) : null}\n            </div>\n          </ItemTitle>\n        </ItemHeader>\n        {state.sender ? (\n          state.tokenId == 0 ? (\n            <ItemBody>\n              <div class=\"m-5\">\n                <div style={{ \"text-align\": \"center\" }}>\n                  <h3>Get Burrito</h3>\n                </div>\n                <br />\n                <div class=\"container\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-4\">\n                      <input\n                        placeholder=\"Token Id\"\n                        onChange={(e) =>\n                          State.update({ inputTokenId: e.target.value })\n                        }\n                      />\n                    </div>\n                  </div>\n                  <br />\n                  <div style={{ \"text-align\": \"center\" }}>\n                    <button\n                      class=\"btn btn-primary mt-2\"\n                      onClick={async () => {\n                        getNft();\n                      }}\n                    >\n                      Get NFT\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </ItemBody>\n          ) : (\n            <ItemBody>\n              <div\n                class=\"row\"\n                style={{ \"text-align\": \"center\", \"margin-top\": \"20px\" }}\n              >\n                <div class=\"col-4\">\n                  <ItemPetAction\n                    onClick={async () => {\n                      play();\n                    }}\n                  >\n                    Jugar\n                  </ItemPetAction>\n                </div>\n                <div class=\"col-4\">\n                  <ItemPetAction\n                    onClick={async () => {\n                      eat();\n                    }}\n                  >\n                    Comer\n                  </ItemPetAction>\n                </div>\n                <div class=\"col-4\">\n                  <ItemPetAction\n                    onClick={async () => {\n                      sleep();\n                    }}\n                  >\n                    Dormir\n                  </ItemPetAction>\n                </div>\n              </div>\n              <ItemPetsSection>\n                <ItemPet>\n                  <>\n                    <ItemPetImg src={state.currentImg}></ItemPetImg>\n                  </>\n                </ItemPet>\n              </ItemPetsSection>\n            </ItemBody>\n          )\n        ) : (\n          <ItemBody>\n            <br />\n            <Web3Connect\n              className=\"LidoStakeFormSubmitContainer\"\n              connectLabel=\"Connect with Web3 to View your Virtual Pets\"\n            />\n          </ItemBody>\n        )}\n      </ItemContainer>\n    </ItemBackground>\n  </Theme>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/yairnava.near/widget/VirtualPetsInteract-BurritoBattle", "__row_index": 0}