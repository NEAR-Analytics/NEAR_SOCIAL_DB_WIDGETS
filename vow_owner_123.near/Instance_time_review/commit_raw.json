{"tx_hash": "8CXQP1YreTvkxCF4mWvvPNcfUTZbcuY7kUMFtKGRCLmm", "action_id_social": "BXMjGzpTtYGrZZMrDP5jVC2LKUbvrNxF6zQKGBzQEFd2-0-widget", "block_id": 83065972, "block_timestamp": "2023-01-16 07:51:35.558", "signer_id": "vow_owner_123.near", "widget_name": "Instance_time_review", "source_code": "State.init({\n  _account: \"All\",\n});\nconst card = {\n  background: \"#FFA629\",\n  border: \"1px solid black\",\n  borderRadius: \"5px\",\n  textAlign: \"center\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"1rem\",\n};\nconst comboBox = {\n  background: \"black\",\n  color: \"white\",\n  borderRadius: \"1rem\",\n  padding: \"1rem\",\n};\nconst container_on = {\n  display: \"flex\",\n  width: \"100%\",\n  justifyContent: \"center\",\n  padding: \"1rem\",\n  margin: \"0.5rem\",\n  background: \"#9747FF\",\n  color: \"white\",\n  fontWeight: 400,\n  fontSize: \"16px\",\n  borderRadius: \"1rem\",\n  flexDirection: \"column\",\n};\nconst container_off = {\n  display: \"flex\",\n  width: \"100%\",\n  justifyContent: \"center\",\n  padding: \"1rem\",\n  margin: \"0.5rem\",\n  background: \"rgb(170 173 201)\",\n  color: \"white\",\n  fontWeight: 400,\n  fontSize: \"16px\",\n  borderRadius: \"1rem\",\n  flexDirection: \"column\",\n};\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\nconst data = Social.index(\"Instance_time\", \"data\");\nif (!data) {\n  return \"Loading datas\";\n}\nvar sortedData = data.sort((d1, d2) => d2.blockHeight - d1.blockHeight);\nvar finalData = [];\nvar accountIds = [\"All\"];\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) final.push(sortedTimeData[k]);\n  }\n  return final;\n};\nfor (let i = 0; i < sortedData.length; i++) {\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\n    accountIds.push(sortedData[i].accountId);\n    var date = new Date();\n    var utc_offset = -date.getTimezoneOffset() / 60;\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    console.log(\"times\", times);\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    console.log(\"final\", final);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n    console.log(weeklyData);\n    finalData.push({\n      accountId: sortedData[i].accountId,\n      value: {\n        _data: weeklyData,\n      },\n    });\n  }\n}\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  let formated =\n    hours > 12\n      ? `${hours - 12}:${mins == 0 ? \"00\" : mins} PM`\n      : `${hours}:${mins == 0 ? \"00\" : mins} AM`;\n  return formated;\n};\n\nreturn (\n  <div>\n    <div className=\"d-flex flex-row\">\n      <div className=\"w-50 p-2 d-flex flex-row align-items-left justify-content-left\">\n        <select\n          style={comboBox}\n          name=\"accounts\"\n          id=\"accounts\"\n          value={state._account}\n          onChange={(e) => {\n            State.update({ _account: e.target.value });\n          }}\n        >\n          {accountIds.map((account) => (\n            <option value={account}>{account}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"w-50 d-flex justify-content-end\">\n        <div\n          className=\"w-50 d-flex align-items-center cursor-pointer\"\n          style={container_on}\n        >\n          <a\n            href={\n              \"https://near.social/#/vow_owner_123.near/widget/Instance_time_setting\"\n            }\n          >\n            Set Schedule\n          </a>\n        </div>\n      </div>\n    </div>\n    {finalData\n      ? finalData.map((d) => {\n          if (state._account == \"All\" || state._account == d.accountId) {\n            return (\n              <div style={card}>\n                <Widget\n                  src=\"mob.near/widget/ProfileImage\"\n                  props={{\n                    accountId: d.accountId,\n                    className: \"d-inline-block\",\n                    style: {\n                      width: \"1.5em\",\n                      height: \"1.5em\",\n                      fontSize: \"x-large\",\n                    },\n                  }}\n                />\n                <a\n                  href={`#/mob.near/widget/ProfilePage?accountId=${d.accountId}`}\n                >\n                  {d.accountId}\n                </a>\n                <div>\n                  <div className=\"d-flex flex-row\">\n                    {d.value._data.map((week, index) => {\n                      return (\n                        <div\n                          style={\n                            week.on_off == \"on\" ? container_on : container_off\n                          }\n                        >\n                          <div>{`${days[index]}`}</div>\n                          <div>\n                            {week.data.map((y) => (\n                              <li>{`${getFormatedTime(\n                                y._from\n                              )} - ${getFormatedTime(y._to)}`}</li>\n                            ))}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            );\n          }\n        })\n      : \"Loading...\"}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vow_owner_123.near/widget/Instance_time_review"}