{"tx_hash": "B5xwpy9CU6pffAJxokMtLefEbs5FcWtmU8rcJe7Kn9t5", "action_id_social": "6a7qTrDiuVTDNXW1H2n1fR8QeahHXy7WrmMr1g9mRFjm-0-widget", "block_id": 82482347, "block_timestamp": "2023-01-08 12:46:43.906", "signer_id": "vow_owner_123.near", "widget_name": "Instance_time", "source_code": "State.init({\n  _is_on: [\"off\", \"off\", \"off\", \"off\", \"off\", \"off\", \"off\"],\n  _from: [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n  _to: [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n  _time_zone: \"(UTC+00:00) UTC\",\n  _validate_result: true,\n  _validate_error: [true, true, true, true, true, true, true],\n});\nconst widgetName = \"Instance_time\";\nconst widgetPath = `vow_owner_123.near/widget/${widgetName}`;\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\nconst card = {\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\n  border: \"1px solid black\",\n  borderRadius: \"5px\",\n  textAlign: \"center\",\n  color: \"white\",\n  padding: \"10px\",\n};\nconst button = {\n  borderRadius: \"5px\",\n  margin: \"5px 0\",\n  padding: \"8px\",\n  marginTop: \"10px\",\n  textAlign: \"center\",\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\n  border: \"2px solid black\",\n  fontWeight: \"bold\",\n};\nconst table = {\n  display: \"flex\",\n  flex: \"1\",\n  marginTop: \"1rem\",\n};\nconst time_zones = [\n  \"(UTC-11:00) Samoa\",\n  \"(UTC-10:00) Hawaii\",\n  \"(UTC-09:00) Alaska\",\n  \"(UTC-08:00) Pacific Time\",\n  \"(UTC-07:00) Arizona\",\n  \"(UTC-06:00) Central America\",\n  \"(UTC-06:00) Saskatchewan\",\n  \"(UTC-05:00) Eastern Time\",\n  \"(UTC-04:00) Atlantic Time\",\n  \"(UTC-04:30) Caracas\",\n  \"(UTC-04:00) Santiago\",\n  \"(UTC-03:30) Newfoundland\",\n  \"(UTC-03:00) Brasilia\",\n  \"(UTC-02:00) Mid-Atlantic\",\n  \"(UTC-01:00) Azores\",\n  \"(UTC+00:00) UTC\",\n  \"(UTC+01:00) Amsterdam\",\n  \"(UTC+02:00) Athens\",\n  \"(UTC+03:00) Baghdad\",\n  \"(UTC+04:00) Abu Dhabi\",\n  \"(UTC+04:30) Kabul\",\n  \"(UTC+05:00) Islamabad\",\n  \"(UTC+05:30) Chennai\",\n  \"(UTC+05:45) Kathmandu\",\n  \"(UTC+06:00) Almaty\",\n  \"(UTC+06:30) Rangoon\",\n  \"(UTC+07:00) Bangkok\",\n  \"(UTC+08:00) Beijing\",\n  \"(UTC+09:00) Irkutsk\",\n  \"(UTC+09:00) Seoul\",\n  \"(UTC+09:00) Tokyo\",\n  \"(UTC+09:30) Adelaide\",\n  \"(UTC+10:00) Guam\",\n  \"(UTC+11:00) Vladivostok\",\n  \"(UTC+12:00) Auckland\",\n  \"(UTC+13:00) Nuku'alofa\",\n];\nconst hours = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24,\n];\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\nconst data = Social.index(\"Instance_time\", \"data\");\nif (!data) {\n  return \"Loading datas\";\n}\nvar sortedData = data.sort((d1, d2) => d2.blockHeight - d1.blockHeight);\nvar finalData = [];\nvar accountIds = [];\nconst validate = () => {\n  var result = true;\n  for (var i = 0; i < 7; i++) {\n    if (!state._validate_error[i]) result = false;\n  }\n  State.update({ _validate_result: result });\n};\nconst onTimeChanged = (e, index, is_from_to) => {\n  let temp = is_from_to ? state._from : state._to;\n  temp[index] = e.target.value;\n  is_from_to ? State.update({ _from: temp }) : State.update({ _to: temp });\n  let error_temp = state._validate_error;\n  if (parseInt(state._from[index]) >= parseInt(state._to[index])) {\n    error_temp[index] = false;\n  } else {\n    error_temp[index] = true;\n  }\n  validate();\n  State.update({\n    _validate_error: error_temp,\n  });\n};\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) final.push(sortedTimeData[k]);\n  }\n  return final;\n};\nconst getData = () => {\n  var zone = state._time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\n  var hours = parseInt(zone[0]);\n  var offset = hours + (parseInt(zone[1]) / 60) * ((hours > 0) * 2 - 1);\n  var temp = [];\n  var flag = false;\n  for (var i = 0; i < 7; i++) {\n    if (state._is_on[i] == \"on\") {\n      for (var j = 0; j < 2; j++) {\n        const time =\n          j == 0\n            ? parseInt(state._from[i]) + 24 * i - offset\n            : parseInt(state._to[i]) + 24 * i - offset;\n        if (time > 168) {\n          temp.push(time - 168);\n          flag = true;\n        } else if (time < 0) {\n          temp.push(time + 168);\n          flag = true;\n        } else temp.push(time);\n      }\n    }\n  }\n  const final = sortAndRemoveRepeated(flag, temp);\n  return {\n    index: {\n      Instance_time: JSON.stringify(\n        {\n          key: \"data\",\n          value: {\n            _data: final,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\nfor (let i = 0; i < sortedData.length; i++) {\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\n    accountIds.push(sortedData[i].accountId);\n    var date = new Date();\n    var utc_offset = -date.getTimezoneOffset() / 60;\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n    finalData.push({\n      accountId: sortedData[i].accountId,\n      value: {\n        _data: weeklyData,\n      },\n    });\n  }\n}\nreturn (\n  <div>\n    <br />\n    <br />\n    <div className=\"d-flex flex-column align-self-center\">\n      <h3>Weekly Schedule</h3>\n      <div className=\"d-flex flex-row align-items-center\">\n        <div className=\"p-2\" style={table}>\n          current_user:\n        </div>\n        <div style={table}>{context.accountId}</div>\n      </div>\n      <div className=\"d-flex flex-row align-items-center\">\n        <div className=\"p-2 flex-1\" style={table}>\n          Select Time zone:\n        </div>\n        <div className=\"d-flex flex-1\" style={table}>\n          <select\n            name=\"zones\"\n            id=\"zones\"\n            value={state._time_zone}\n            onChange={(e) => {\n              State.update({ _time_zone: e.target.value });\n            }}\n          >\n            {time_zones.map((zone) => (\n              <option value={zone}>{zone}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n    </div>\n    <div className=\"d-flex flex-column mt-3\">\n      <div className=\"d-flex flex-row\">\n        <div style={table}>Day</div>\n        <div style={table}>On</div>\n        <div style={table}>From</div>\n        <div style={table}>To</div>\n      </div>\n      {days.map((day, index) => (\n        <div className=\"d-flex flex-row\">\n          <div style={table}>{day}</div>\n          <div style={table}>\n            <select\n              value={state._is_on[index]}\n              onChange={(e) => {\n                let temp = state._is_on;\n                temp[index] = e.target.value;\n                State.update({ _is_on: temp });\n                if (e.target.value == \"off\") {\n                  state._from[index] = \"0\";\n                  state._to[index] = \"1\";\n                  let error_temp = state._validate_error;\n                  State.update({\n                    _error_msg: `${(error_temp[index] = true)}`,\n                  });\n                  validate();\n                }\n              }}\n            >\n              <option value=\"on\">on</option>\n              <option value=\"off\">off</option>\n            </select>\n          </div>\n          <div style={table}>\n            <select\n              value={state._from[index]}\n              disabled={state._is_on[index] == \"off\"}\n              onChange={(e) => {\n                onTimeChanged(e, index, true);\n              }}\n            >\n              {hours.map((hour) => (\n                <option value={hour}>{hour}</option>\n              ))}\n            </select>\n          </div>\n          <div style={table}>\n            <select\n              value={state._to[index]}\n              disabled={state._is_on[index] == \"off\"}\n              onChange={(e) => {\n                onTimeChanged(e, index, false);\n              }}\n            >\n              {hours.map((hour) => (\n                <option value={hour}>{hour}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      ))}\n    </div>\n    <CommitButton\n      style={button}\n      disabled={!state._validate_result}\n      data={getData()}\n    >\n      Send It!\n    </CommitButton>\n    <div className=\"pt=4\">\n      {days.map((day, index) => {\n        return !state._validate_error[index] && `${day} `;\n      })}\n      {!state._validate_result && \"time set wrong\"}\n    </div>\n    <br />\n    <br />\n    <div>\n      {finalData\n        ? finalData.map((d) => (\n            <div style={card}>\n              <Widget\n                src=\"mob.near/widget/ProfileImage\"\n                props={{\n                  accountId: d.accountId,\n                  className: \"d-inline-block\",\n                  style: { width: \"1.5em\", height: \"1.5em\" },\n                }}\n              />\n              <a\n                href={`#/mob.near/widget/ProfilePage?accountId=${d.accountId}`}\n              >\n                {d.accountId}\n              </a>\n              <div>\n                <div>\n                  <b>\n                    {d.value._data.map((week, index) => {\n                      return (\n                        <>\n                          <div>{`${days[index]} : ${week.on_off}`}</div>\n                          <div>\n                            {week.data.map((y) => (\n                              <li>{`${y._from} - ${y._to}`}</li>\n                            ))}\n                          </div>\n                        </>\n                      );\n                    })}\n                  </b>\n                </div>\n              </div>\n            </div>\n          ))\n        : \"Loading...\"}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vow_owner_123.near/widget/Instance_time"}