{"tx_hash": "D9XWm1xMYuvEvBgjygXDwk4EU1Zmi8U6iVxw1ctF8Wh1", "action_id_social": "ACHTuKBFG3Vvap8vusx5KmLG5LgjJzonqHUBCB8zN6aU-0-widget", "block_id": 82291478, "block_timestamp": "2023-01-06 00:30:46.019", "signer_id": "vow_owner_123.near", "widget_name": "Instance_time", "source_code": "State.init({\r\n  _is_on: [\"off\", \"off\", \"off\", \"off\", \"off\", \"off\", \"off\"],\r\n  _from: [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\r\n  _to: [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\r\n  _time_zone: \"(UTC+00:00) UTC\",\r\n});\r\n\r\nconst widgetName = \"Instance_time\";\r\nconst widgetPath = `vow_owner_123.near/widget/${widgetName}`;\r\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\r\n\r\nconst card = {\r\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\r\n  border: \"1px solid black\",\r\n  borderRadius: \"5px\",\r\n  textAlign: \"center\",\r\n  color: \"white\",\r\n  padding: \"10px\",\r\n};\r\n\r\nconst button = {\r\n  borderRadius: \"5px\",\r\n  margin: \"5px 0\",\r\n  padding: \"8px\",\r\n  textAlign: \"center\",\r\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\r\n  border: \"2px solid black\",\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst imgWH = {\r\n  width: \"25px\",\r\n  height: \"25px\",\r\n};\r\nconst time_zones = [\r\n  \"(UTC-11:00) Samoa\",\r\n  \"(UTC-10:00) Hawaii\",\r\n  \"(UTC-09:00) Alaska\",\r\n  \"(UTC-08:00) Pacific Time (US &amp; Canada)\",\r\n  \"(UTC-07:00) Arizona\",\r\n  \"(UTC-06:00) Central America\",\r\n  \"(UTC-06:00) Saskatchewan\",\r\n  \"(UTC-05:00) Eastern Time (US &amp; Canada)\",\r\n  \"(UTC-04:00) Atlantic Time (Canada)\",\r\n  \"(UTC-04:30) Caracas\",\r\n  \"(UTC-04:00) Santiago\",\r\n  \"(UTC-03:30) Newfoundland\",\r\n  \"(UTC-03:00) Brasilia\",\r\n  \"(UTC-02:00) Mid-Atlantic\",\r\n  \"(UTC-01:00) Azores\",\r\n  \"(UTC+00:00) UTC\",\r\n  \"(UTC+01:00) Amsterdam\",\r\n  \"(UTC+02:00) Athens\",\r\n  \"(UTC+03:00) Baghdad\",\r\n  \"(UTC+04:00) Abu Dhabi\",\r\n  \"(UTC+04:30) Kabul\",\r\n  \"(UTC+05:00) Islamabad\",\r\n  \"(UTC+05:30) Chennai\",\r\n  \"(UTC+05:45) Kathmandu\",\r\n  \"(UTC+06:00) Almaty\",\r\n  \"(UTC+06:30) Rangoon\",\r\n  \"(UTC+07:00) Bangkok\",\r\n  \"(UTC+08:00) Beijing\",\r\n  \"(UTC+09:00) Irkutsk\",\r\n  \"(UTC+09:00) Seoul\",\r\n  \"(UTC+09:00) Tokyo\",\r\n  \"(UTC+09:30) Adelaide\",\r\n  \"(UTC+10:00) Guam\",\r\n  \"(UTC+11:00) Vladivostok\",\r\n  \"(UTC+12:00) Auckland\",\r\n  \"(UTC+13:00) Nuku'alofa\",\r\n];\r\nconst utc_times = [\r\n  -11, -10, -9, -8, -7, -6, -6, -5, -4, -4.5, -4, -3.5, -3, -2, -1, 0, 1, 2, 3,\r\n  4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 8, 9, 9, 9, 9.5, 10, 11, 12, 13,\r\n];\r\nconst hours = [\r\n  \"0\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"10\",\r\n  \"11\",\r\n  \"12\",\r\n  \"13\",\r\n  \"14\",\r\n  \"15\",\r\n  \"16\",\r\n  \"17\",\r\n  \"18\",\r\n  \"19\",\r\n  \"20\",\r\n  \"21\",\r\n  \"22\",\r\n  \"23\",\r\n  \"24\",\r\n];\r\nconst days = [\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n  \"Sunday\",\r\n];\r\n\r\nconst data = Social.index(\"Instance_time\", \"data\");\r\nif (!data) {\r\n  return \"Loading datas\";\r\n}\r\n\r\nvar sortedData = data.sort((d1, d2) => d2.blockHeight - d1.blockHeight);\r\nvar finalData = [];\r\nvar accountIds = [];\r\nfor (let i = 0; i < sortedData.length; i++) {\r\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\r\n    accountIds.push(sortedData[i].accountId);\r\n    console.log(sortedData[i]);\r\n    var date = new Date();\r\n    var utc_offset = -date.getTimezoneOffset() / 60;\r\n    var times = sortedData[i].value._data;\r\n    var temp = [];\r\n    var flag = false;\r\n\r\n    for (var j = 0; j < times.length; j++) {\r\n      const time = times[j] + utc_offset;\r\n      if (time > 168) {\r\n        temp.push(time - 168);\r\n        flag = true;\r\n      } else if (time < 0) {\r\n        temp.push(time + 168);\r\n        flag = true;\r\n      } else temp.push(time);\r\n    }\r\n    if (flag) temp.push(0, 168);\r\n    var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\r\n\r\n    var final = [];\r\n    for (var k = 0; k < sortedTimeData.length; k++) {\r\n      var repeated = false;\r\n      for (var l = 0; l < sortedTimeData.length; l++) {\r\n        if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\r\n          repeated = true;\r\n        }\r\n      }\r\n      if (!repeated) final.push(sortedTimeData[k]);\r\n    }\r\n\r\n    for (var m = 0; m < final.length - 1; m += 2) {\r\n      const _from = final[m];\r\n      const _to = final[m + 1];\r\n      for (var o = 1; o < 7; o++) {\r\n        if (o * 24 > _from && o * 24 < _to) {\r\n          final.push(o * 24, o * 24);\r\n        }\r\n      }\r\n    }\r\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\r\n\r\n    var weeklyData = [];\r\n    for (var t = 0; t < 7; t++) {\r\n      var dailyData = [];\r\n      var exist = false;\r\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\r\n        var _from = sortedTimeDataNew[p];\r\n        var _to = sortedTimeDataNew[p + 1];\r\n        // console.log(_from, _to, p, t * 24, (t + 1) * 24);\r\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\r\n          dailyData.push({\r\n            _from: _from - t * 24,\r\n            _to: _to - t * 24,\r\n          });\r\n          exist = true;\r\n        }\r\n      }\r\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\r\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\r\n    }\r\n    finalData.push({\r\n      accountId: sortedData[i].accountId,\r\n      value: {\r\n        _data: weeklyData,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nreturn (\r\n  <div>\r\n    <br />\r\n    <br />\r\n    <p>Select Time zone</p>\r\n    <select\r\n      name=\"zones\"\r\n      id=\"zones\"\r\n      value={state._time_zone}\r\n      onChange={(e) => {\r\n        State.update({ _time_zone: e.target.value });\r\n      }}\r\n    >\r\n      {time_zones.map((zone) => (\r\n        <option value={zone}>{zone}</option>\r\n      ))}\r\n    </select>\r\n    <div className=\"d-flex flex-column w-75 justify-content-around\">\r\n      {days.map((day, index) => (\r\n        <div>\r\n          <p>{day}</p>\r\n          <div className=\"d-flex justify-content-around\">\r\n            <p>On or Off</p>\r\n            <select\r\n              name=\"times\"\r\n              id=\"time\"\r\n              value={state._is_on[index]}\r\n              onChange={(e) => {\r\n                let temp = state._is_on;\r\n                temp[index] = e.target.value;\r\n                State.update({ _is_on: temp });\r\n                if (e.target.value == \"off\") {\r\n                  state._from[index] = \"0\";\r\n                  state._to[index] = \"0\";\r\n                }\r\n              }}\r\n            >\r\n              <option value=\"on\">on</option>\r\n              <option value=\"off\">off</option>\r\n            </select>\r\n            {state._is_on[index] == \"on\" && (\r\n              <>\r\n                <p>From</p>\r\n                <select\r\n                  name=\"times\"\r\n                  id=\"time\"\r\n                  value={state._from[index]}\r\n                  onChange={(e) => {\r\n                    let temp = state._from;\r\n                    if (parseInt(e.target.value) < parseInt(state._to[index])) {\r\n                      temp[index] = e.target.value;\r\n                      State.update({ _from: temp });\r\n                    }\r\n                  }}\r\n                >\r\n                  {hours.map((hour) => (\r\n                    <option value={hour}>{hour}</option>\r\n                  ))}\r\n                </select>\r\n                <p>To</p>\r\n                <select\r\n                  name=\"times\"\r\n                  id=\"time\"\r\n                  value={state._to[index]}\r\n                  onChange={(e) => {\r\n                    let temp = state._to;\r\n                    if (parseInt(e.target.value) > parseInt(state._to[index])) {\r\n                      temp[index] = e.target.value;\r\n                      State.update({ _to: temp });\r\n                    }\r\n                  }}\r\n                >\r\n                  {hours.map((hour) => (\r\n                    <option value={hour}>{hour}</option>\r\n                  ))}\r\n                </select>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <CommitButton\r\n      style={button}\r\n      data={() => {\r\n        const offset = -utc_times[time_zones.indexOf(state._time_zone)];\r\n        console.log(offset);\r\n        var temp = [];\r\n        var flag = false;\r\n        for (var i = 0; i < 7; i++) {\r\n          if (state._is_on[i] == \"on\") {\r\n            const _from = parseInt(state._from[i]) + 24 * i + offset;\r\n            const _to = parseInt(state._to[i]) + 24 * i + offset;\r\n            if (_from > 168) {\r\n              temp.push(_from - 168);\r\n              flag = true;\r\n            } else if (_from < 0) {\r\n              temp.push(_from + 168);\r\n              flag = true;\r\n            } else temp.push(_from);\r\n            if (_to < 0) {\r\n              temp.push(_to + 168);\r\n              flag = true;\r\n            } else if (_to > 168) {\r\n              temp.push(_to - 168);\r\n              flag = true;\r\n            } else temp.push(_to);\r\n          }\r\n        }\r\n        if (flag) temp.push(0, 168);\r\n        const sortedData = temp.sort((d2, d1) => d2 - d1);\r\n        var finalData = [];\r\n        for (var i = 0; i < sortedData.length; i++) {\r\n          var repeated = false;\r\n          for (var j = 0; j < sortedData.length; j++) {\r\n            if (i != j && sortedData[i] == sortedData[j]) {\r\n              repeated = true;\r\n            }\r\n          }\r\n          if (!repeated) finalData.push(sortedData[i]);\r\n        }\r\n        return {\r\n          index: {\r\n            Instance_time: JSON.stringify(\r\n              {\r\n                key: \"data\",\r\n                value: {\r\n                  _data: finalData,\r\n                },\r\n              },\r\n              undefined,\r\n              0\r\n            ),\r\n          },\r\n        };\r\n      }}\r\n      onCommit={() => {\r\n        State.update({\r\n          reloadData: true,\r\n        });\r\n      }}\r\n    >\r\n      Send It!\r\n    </CommitButton>\r\n    <br />\r\n    <br />\r\n    <div>\r\n      {finalData\r\n        ? finalData.map((d) => (\r\n            <div style={card}>\r\n              <Widget\r\n                src=\"mob.near/widget/ProfileImage\"\r\n                props={{\r\n                  accountId: d.accountId,\r\n                  className: \"d-inline-block\",\r\n                  style: { width: \"1.5em\", height: \"1.5em\" },\r\n                }}\r\n              />\r\n              <a\r\n                href={`#/mob.near/widget/ProfilePage?accountId=${d.accountId}`}\r\n              >\r\n                {d.accountId}\r\n              </a>\r\n              <div>\r\n                <div>\r\n                  <b>\r\n                    {d.value._data.map((week, index) => {\r\n                      return (\r\n                        <>\r\n                          <div>{`${days[index]} : ${week.on_off}`}</div>\r\n                          <div>\r\n                            {week.data.map((y) => (\r\n                              <li>{`${y._from} - ${y._to}`}</li>\r\n                            ))}\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </b>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))\r\n        : \"Loading...\"}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vow_owner_123.near/widget/Instance_time"}