{"tx_hash": "F2Y6axkpKwPAcdxc4KzcbkqiDsJTnUCwZbfL8CnQXjUY", "action_id_social": "33VRMogaE5i4Li2TeHy8SwESNLXg9X5GfM53VsLECHAz-0-widget", "block_id": 82950618, "block_timestamp": "2023-01-14 19:09:50.285", "signer_id": "vow_owner_123.near", "widget_name": "Instance_time", "source_code": "State.init({\r\n  _is_on: [\"on\", \"on\", \"on\", \"on\", \"on\", \"off\", \"off\"],\r\n  _from: [\"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\"],\r\n  _to: [\"18\", \"18\", \"18\", \"18\", \"18\", \"18\", \"18\"],\r\n  _time_zone: \"(UTC+00:00) UTC\",\r\n  _validate_result: true,\r\n  _validate_error: [true, true, true, true, true, true, true],\r\n});\r\nconst button = {\r\n  borderRadius: \"5px\",\r\n  margin: \"5px 0\",\r\n  padding: \"8px\",\r\n  marginTop: \"10px\",\r\n  textAlign: \"center\",\r\n  background: \"linear-gradient(to right, #4deeea, #f000ff)\",\r\n  border: \"2px solid black\",\r\n  fontWeight: \"bold\",\r\n};\r\nconst table = {\r\n  display: \"flex\",\r\n  flex: \"1\",\r\n  marginTop: \"1rem\",\r\n};\r\nconst flex_row = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n};\r\nconst flex_column = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n};\r\nconst time_zones = [\r\n  \"(UTC-11:00) Samoa\",\r\n  \"(UTC-10:00) Hawaii\",\r\n  \"(UTC-09:00) Alaska\",\r\n  \"(UTC-08:00) Pacific Time\",\r\n  \"(UTC-07:00) Arizona\",\r\n  \"(UTC-06:00) Central America\",\r\n  \"(UTC-06:00) Saskatchewan\",\r\n  \"(UTC-05:00) Eastern Time\",\r\n  \"(UTC-04:00) Atlantic Time\",\r\n  \"(UTC-04:30) Caracas\",\r\n  \"(UTC-04:00) Santiago\",\r\n  \"(UTC-03:30) Newfoundland\",\r\n  \"(UTC-03:00) Brasilia\",\r\n  \"(UTC-02:00) Mid-Atlantic\",\r\n  \"(UTC-01:00) Azores\",\r\n  \"(UTC+00:00) UTC\",\r\n  \"(UTC+01:00) Amsterdam\",\r\n  \"(UTC+02:00) Athens\",\r\n  \"(UTC+03:00) Baghdad\",\r\n  \"(UTC+04:00) Abu Dhabi\",\r\n  \"(UTC+04:30) Kabul\",\r\n  \"(UTC+05:00) Islamabad\",\r\n  \"(UTC+05:30) Chennai\",\r\n  \"(UTC+05:45) Kathmandu\",\r\n  \"(UTC+06:00) Almaty\",\r\n  \"(UTC+06:30) Rangoon\",\r\n  \"(UTC+07:00) Bangkok\",\r\n  \"(UTC+08:00) Beijing\",\r\n  \"(UTC+09:00) Irkutsk\",\r\n  \"(UTC+09:00) Seoul\",\r\n  \"(UTC+09:00) Tokyo\",\r\n  \"(UTC+09:30) Adelaide\",\r\n  \"(UTC+10:00) Guam\",\r\n  \"(UTC+11:00) Vladivostok\",\r\n  \"(UTC+12:00) Auckland\",\r\n  \"(UTC+13:00) Nuku'alofa\",\r\n];\r\nconst hours = [\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\r\n  22, 23, 24,\r\n];\r\nconst days = [\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n  \"Sunday\",\r\n];\r\nconst tbl_headers = [\"Day\", \"On\", \"From\", \"To\"];\r\n\r\nconst validate = () => {\r\n  var result = true;\r\n  for (var i = 0; i < 7; i++) {\r\n    if (!state._validate_error[i]) result = false;\r\n  }\r\n  State.update({ _validate_result: result });\r\n};\r\nconst onTimeChanged = (value, index, is_from_to) => {\r\n  let temp = is_from_to ? state._from : state._to;\r\n  temp[index] = value;\r\n  is_from_to ? State.update({ _from: temp }) : State.update({ _to: temp });\r\n  let error_temp = state._validate_error;\r\n  if (parseInt(state._from[index]) >= parseInt(state._to[index])) {\r\n    error_temp[index] = false;\r\n  } else {\r\n    error_temp[index] = true;\r\n  }\r\n  validate();\r\n  State.update({\r\n    _validate_error: error_temp,\r\n  });\r\n};\r\nconst sortAndRemoveRepeated = (flag, data) => {\r\n  var temp = data;\r\n  if (flag) temp.push(0, 168);\r\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\r\n\r\n  var final = [];\r\n  for (var k = 0; k < sortedTimeData.length; k++) {\r\n    var repeated = false;\r\n    for (var l = 0; l < sortedTimeData.length; l++) {\r\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\r\n        repeated = true;\r\n      }\r\n    }\r\n    if (!repeated) final.push(sortedTimeData[k]);\r\n  }\r\n  return final;\r\n};\r\nconst getData = () => {\r\n  var zone = state._time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\r\n  var hours = parseInt(zone[0]);\r\n  var offset = hours + (parseInt(zone[1]) / 60) * ((hours > 0) * 2 - 1);\r\n  var temp = [];\r\n  var flag = false;\r\n  for (var i = 0; i < 7; i++) {\r\n    if (state._is_on[i] == \"on\") {\r\n      for (var j = 0; j < 2; j++) {\r\n        const time =\r\n          j == 0\r\n            ? parseInt(state._from[i]) + 24 * i - offset\r\n            : parseInt(state._to[i]) + 24 * i - offset;\r\n        if (time > 168) {\r\n          temp.push(time - 168);\r\n          flag = true;\r\n        } else if (time < 0) {\r\n          temp.push(time + 168);\r\n          flag = true;\r\n        } else temp.push(time);\r\n      }\r\n    }\r\n  }\r\n  const final = sortAndRemoveRepeated(flag, temp);\r\n  return {\r\n    index: {\r\n      Instance_time: JSON.stringify(\r\n        {\r\n          key: \"data\",\r\n          value: {\r\n            _data: final,\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <br />\r\n    <br />\r\n    <div style={flex_column} className=\"align-self-center\">\r\n      <h3>Weekly Schedule</h3>\r\n      <div style={flex_row} className=\"align-items-center\">\r\n        <div className=\"p-2\" style={table}>\r\n          current_user:\r\n        </div>\r\n        <div style={table}>{context.accountId}</div>\r\n      </div>\r\n      <div style={flex_row}>\r\n        <div className=\"p-2 flex-1\" style={table}>\r\n          Select Time zone:\r\n        </div>\r\n        <div style={table}>\r\n          <select\r\n            name=\"zones\"\r\n            id=\"zones\"\r\n            value={state._time_zone}\r\n            onChange={(e) => {\r\n              State.update({ _time_zone: e.target.value });\r\n            }}\r\n          >\r\n            {time_zones.map((zone) => (\r\n              <option value={zone}>{zone}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div style={flex_column} className=\"mt-3\">\r\n      <div style={flex_row}>\r\n        {tbl_headers.map((header) => (\r\n          <div style={table}>{header}</div>\r\n        ))}\r\n      </div>\r\n      {days.map((day, index) => (\r\n        <div style={flex_row}>\r\n          <div style={table}>{day}</div>\r\n          <div style={table}>\r\n            <select\r\n              value={state._is_on[index]}\r\n              onChange={(e) => {\r\n                let temp = state._is_on;\r\n                temp[index] = e.target.value;\r\n                State.update({ _is_on: temp });\r\n                if (e.target.value == \"off\") {\r\n                  state._from[index] = \"0\";\r\n                  state._to[index] = \"1\";\r\n                  let error_temp = state._validate_error;\r\n                  State.update({\r\n                    _error_msg: `${(error_temp[index] = true)}`,\r\n                  });\r\n                  validate();\r\n                }\r\n              }}\r\n            >\r\n              <option value=\"on\">on</option>\r\n              <option value=\"off\">off</option>\r\n            </select>\r\n          </div>\r\n          <div style={table}>\r\n            <div className=\"d-flex\">\r\n              <select\r\n                value={state._from[index]}\r\n                disabled={state._is_on[index] == \"off\"}\r\n                onChange={(e) => {\r\n                  onTimeChanged(e.target.value, index, true);\r\n                }}\r\n              >\r\n                {hours.map((hour) => (\r\n                  <option value={hour}>{hour}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={flex_column}>\r\n              <div\r\n                onClick={() => {\r\n                  onTimeChanged(parseInt(state._from[index]) + 1, index, true);\r\n                }}\r\n              >\r\n                <i class=\"bi-caret-up\"></i>\r\n              </div>\r\n              <div\r\n                onClick={() => {\r\n                  onTimeChanged(parseInt(state._from[index]) - 1, index, true);\r\n                }}\r\n              >\r\n                <i class=\"bi-caret-down\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={table}>\r\n            <div style={flex_row}>\r\n              <select\r\n                value={state._to[index]}\r\n                disabled={state._is_on[index] == \"off\"}\r\n                onChange={(e) => {\r\n                  onTimeChanged(e.target.value, index, false);\r\n                }}\r\n              >\r\n                {hours.map((hour) => (\r\n                  <option value={hour}>{hour}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={flex_column}>\r\n              <div\r\n                onClick={() => {\r\n                  onTimeChanged(parseInt(state._to[index]) + 1, index, false);\r\n                }}\r\n              >\r\n                <i class=\"bi-caret-up\"></i>\r\n              </div>\r\n              <div\r\n                onClick={() => {\r\n                  onTimeChanged(parseInt(state._to[index]) - 1, index, false);\r\n                }}\r\n              >\r\n                <i class=\"bi-caret-down\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <CommitButton\r\n      style={button}\r\n      disabled={!state._validate_result}\r\n      data={getData()}\r\n    >\r\n      Send It!\r\n    </CommitButton>\r\n    <div className=\"pt=4\">\r\n      {days.map((day, index) => {\r\n        return !state._validate_error[index] && `${day} `;\r\n      })}\r\n      {!state._validate_result && \"time set wrong\"}\r\n    </div>\r\n    <br />\r\n    <br />\r\n    <div>\r\n      <Widget\r\n        src=\"vow_owner_123.near/widget/Instance_time_review\"\r\n        props={{\r\n          accountId: d.accountId,\r\n          className: \"d-inline-block\",\r\n          style: { width: \"1.5em\", height: \"1.5em\" },\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vow_owner_123.near/widget/Instance_time"}