{"tx_hash": "32fZP5yTqSfEXspJBXCXBzWFhigsMw3S3PYPdoQGJB81", "action_id_social": "tswAZuASzGBhiAVcL3qvwzKj4drYWJuRKvUpm8Be1oF-0-widget", "block_id": 83763744, "block_timestamp": "2023-01-25 13:18:57.553", "signer_id": "vow_owner_123.near", "widget_name": "Instance_time_setting", "source_code": "State.init({\n  _is_on: [\"on\", \"on\", \"on\", \"on\", \"on\", \"off\", \"off\"],\n  _from: [\n    \"10:00 AM\",\n    \"10:00 AM\",\n    \"10:00 AM\",\n    \"10:00 AM\",\n    \"10:00 AM\",\n    \"10:00 AM\",\n    \"10:00 AM\",\n  ],\n  _to: [\n    \"06:00 PM\",\n    \"06:00 PM\",\n    \"06:00 PM\",\n    \"06:00 PM\",\n    \"06:00 PM\",\n    \"06:00 PM\",\n    \"06:00 PM\",\n  ],\n  _validate_result: true,\n  _validate_error: [true, true, true, true, true, true, true],\n});\nconst time_zone = props.time_zone ?? \"(UTC+00:00) UTC\";\nconst container = {\n  display: \"flex\",\n  width: \"100%\",\n  justifyContent: \"center\",\n  color: \"black\",\n  fontWeight: 400,\n  borderRadius: \"1rem\",\n  flexDirection: \"column\",\n};\nconst tbl_container = {\n  display: \"flex\",\n  marginTop: \"1rem\",\n  justifyContent: \"center\",\n  padding: \"2rem\",\n  color: \"black\",\n  fontWeight: 400,\n  borderRadius: \"1rem\",\n  flexDirection: \"column\",\n};\nconst button = {\n  borderRadius: \"5px\",\n  margin: \"5px 0\",\n  padding: \"8px\",\n  marginTop: \"10px\",\n  textAlign: \"center\",\n  fontSize: \"x-large\",\n  border: \"2px solid black\",\n  fontWeight: \"bold\",\n};\nconst comboBox = {\n  borderRadius: \"1rem\",\n  padding: \"1rem\",\n};\nconst table = {\n  display: \"flex\",\n  flex: \"1\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  fontWeight: 600,\n};\nconst flex_row = {\n  display: \"flex\",\n  flex: \"1\",\n  flexDirection: \"row\",\n  fontSize: \"large\",\n};\nconst flex_column = {\n  display: \"flex\",\n  flexDirection: \"column\",\n};\nconst tbl_row = {\n  display: \"flex\",\n  background: \"white\",\n  margin: \"1px\",\n  padding: \"6px\",\n};\nconst hours = [];\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\nconst tbl_headers = [\"Day\", \"On\", \"From\", \"To\"];\nconst initialize = () => {\n  hours = [];\n  for (var i = 0; i < 2; i++)\n    for (var j = 0; j <= 12; j++)\n      for (var k = 0; k < 4; k++) {\n        i % 2 == 0\n          ? hours.push(`${j < 10 ? `0${j}` : j}:${k == 0 ? \"00\" : k * 15} AM`)\n          : hours.push(`${j < 10 ? `0${j}` : j}:${k == 0 ? \"00\" : k * 15} PM`);\n      }\n};\ninitialize();\n\nconst validate = () => {\n  var result = true;\n  for (var i = 0; i < 7; i++) {\n    if (!state._validate_error[i]) result = false;\n  }\n  State.update({ _validate_result: result });\n};\nconst getTime = (time) => {\n  const ap = time.split(\" \")[1];\n  const hour = parseInt(time.split(\":\")[0]);\n  const mins = parseInt(time.split(\":\")[1]) / 60;\n  const time_by_hours = ap == \"AM\" ? hour + mins : hour + 12 + mins;\n  return time_by_hours;\n};\nconst onTimeChanged = (value, index, is_from_to, in_de) => {\n  let temp = is_from_to ? state._from : state._to;\n  const i = hours.indexOf(value);\n  console.log(i, in_de);\n  if (i + in_de >= 0 && i + in_de < hours.length) {\n    temp[index] = hours[i + in_de];\n    is_from_to ? State.update({ _from: temp }) : State.update({ _to: temp });\n    let error_temp = state._validate_error;\n    if (getTime(state._from[index]) >= getTime(state._to[index])) {\n      error_temp[index] = false;\n    } else {\n      error_temp[index] = true;\n    }\n    validate();\n    State.update({\n      _validate_error: error_temp,\n    });\n  }\n};\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) final.push(sortedTimeData[k]);\n  }\n  return final;\n};\nconst getData = () => {\n  var zone = time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\n  var hours = parseInt(zone[0]);\n  var offset = hours + (parseInt(zone[1]) / 60) * ((hours > 0) * 2 - 1);\n  var temp = [];\n  var flag = false;\n  for (var i = 0; i < 7; i++) {\n    if (state._is_on[i] == \"on\") {\n      for (var j = 0; j < 2; j++) {\n        const time =\n          j == 0\n            ? getTime(state._from[i]) + 24 * i - offset\n            : getTime(state._to[i]) + 24 * i - offset;\n        if (time > 168) {\n          temp.push(time - 168);\n          flag = true;\n        } else if (time < 0) {\n          temp.push(time + 168);\n          flag = true;\n        } else temp.push(time);\n      }\n    }\n  }\n  const final = sortAndRemoveRepeated(flag, temp);\n  console.log(\"final\", final);\n  return {\n    index: {\n      Instance_time: JSON.stringify(\n        {\n          key: \"data\",\n          value: {\n            _data: final,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\nconst timeSelector = (f, index) => {\n  return (\n    <div style={table}>\n      <div className=\"d-flex\">\n        <select\n          style={comboBox}\n          value={f ? state._from[index] : state._to[index]}\n          disabled={state._is_on[index] == \"off\"}\n          onChange={(e) => {\n            onTimeChanged(e.target.value, index, f, 0);\n          }}\n        >\n          {hours.map((hour) => (\n            <option value={hour}>{hour}</option>\n          ))}\n        </select>\n      </div>\n      <div style={flex_column}>\n        <div\n          onClick={() => {\n            const value = f ? state._from[index] : state._to[index];\n            onTimeChanged(value, index, f, 1);\n          }}\n        >\n          <i class=\"bi-caret-up\"></i>\n        </div>\n        <div\n          onClick={() => {\n            const value = f ? state._from[index] : state._to[index];\n            onTimeChanged(value, index, f, -1);\n          }}\n        >\n          <i class=\"bi-caret-down\"></i>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <div>\n    {context.accountId ? (\n      <div style={flex_column} className=\"align-items-center\">\n        <div style={container}>\n          <div style={tbl_container}>\n            <div style={flex_column} className=\"mt-3\">\n              <div style={tbl_row}>\n                <div style={flex_row}>\n                  {tbl_headers.map((header) => (\n                    <div style={table}>{header}</div>\n                  ))}\n                </div>\n              </div>\n              {days.map((day, index) => (\n                <div style={tbl_row}>\n                  <div style={flex_row}>\n                    <div style={table}>{day}</div>\n                    <div style={table}>\n                      <select\n                        style={comboBox}\n                        value={state._is_on[index]}\n                        onChange={(e) => {\n                          let temp = state._is_on;\n                          temp[index] = e.target.value;\n                          State.update({ _is_on: temp });\n                          if (e.target.value == \"off\") {\n                            state._from[index] = \"0\";\n                            state._to[index] = \"0\";\n                            let error_temp = state._validate_error;\n                            State.update({\n                              _error_msg: `${(error_temp[index] = true)}`,\n                            });\n                            validate();\n                          }\n                        }}\n                      >\n                        <option value=\"on\">on</option>\n                        <option value=\"off\">off</option>\n                      </select>\n                    </div>\n                    {timeSelector(true, index)}\n                    {timeSelector(false, index)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div style={flex_row}>\n          {days.map((day, index) => {\n            return !state._validate_error[index] && `${day} `;\n          })}\n          {!state._validate_result && \"time set wrong\"}\n        </div>\n        <div style={flex_row}>\n          <CommitButton\n            className=\"m-2\"\n            style={button}\n            disabled={!state._validate_result}\n            data={getData()}\n          >\n            Send It!\n          </CommitButton>\n        </div>\n      </div>\n    ) : (\n      <div>SignIn first plz!</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vow_owner_123.near/widget/Instance_time_setting"}