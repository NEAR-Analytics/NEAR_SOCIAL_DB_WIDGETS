{"tx_hash": "7ACMpDSpHRA7AgXpU8v13rtbYVPgJJPvBnCc8BCSzeRY", "action_id_social": "B2roctGkt2TBaFP9SneQiZuySWSwynasaBPCeQDnu1e4-0-widget", "block_id": 89715771, "block_timestamp": "2023-04-16 12:59:26.567", "signer_id": "akshatg6.near", "widget_name": "AccountAbstraction", "source_code": "async function getCaptcha() {\n  const captchaAPI =\n    \"https://sx2mbwnkk9.execute-api.us-east-2.amazonaws.com/default/zkaptcha-py\";\n  try {\n    const response = await fetch(captchaAPI);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const resptext = await response.text();\n    const b64data = JSON.parse(resptext).png;\n    const pngData = b64data.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    State.update({\n      captcha: \"data:image/png;base64,\" + pngData,\n    });\n  } catch (error) {\n    console.error(\"Error fetching captcha:\", error);\n    return null;\n  }\n}\n\ninitState({\n  inputs: [{ id: 1, values: [\"\", \"\"] }],\n  captcha: [0],\n});\n\nconst addInput = () => {\n  const newId = state.inputs[state.inputs.length - 1].id + 1;\n  State.update({\n    inputs: [...state.inputs, { id: newId, values: [\"\", \"\"] }],\n  });\n};\n\nconst removeInput = (id) => {\n  State.update({\n    inputs: state.inputs.filter((input) => input.id !== id),\n  });\n};\n\nconst onSubmit = () => {\n  const inputValues = state.inputs.map((input) => input.values);\n  const message = `Input values: ${inputValues.join(\", \")}`;\n  State.update({\n    alert: message,\n  });\n};\n\nconst onChange = (id, index, value) => {\n  const updatedInputs = state.inputs.map((input) =>\n    input.id === id\n      ? {\n          ...input,\n          values: input.values.map((v, i) => (i === index ? value : v)),\n        }\n      : input\n  );\n  State.update({\n    inputs: updatedInputs,\n  });\n};\n\nconst onChangeCaptcha = (id, value) => {\n  // remove the 'index' parameter since captcha only has one value\n  State.update({ captcha: value, captchaId: id });\n};\n\nconst inputElements = state.inputs.map((input) => (\n  <div\n    class=\"LidoStakeFormInputContainer\"\n    style={{ border: \"1px solid black\", borderRadius: \"10px\" }}\n  >\n    <span class=\"LidoStakeFormInputContainerSpan1\"></span>\n    <div className=\"LidoStakeFormInputContainerSpan2\" key={input.id}>\n      <input\n        class=\"LidoStakeFormInputContainerSpan2Input LidoStakeFormInputContainerSpan2Input--left\"\n        placeholder={state.reciever || \"Address\"}\n        value={input.values[0]}\n        onChange={(e) => onChange(input.id, 0, e.target.value)}\n        style={{\n          marginRight: \"10px\",\n          width: \"70%\",\n          padding: \"10px\",\n          border: \"0.5px solid black\",\n          borderRadius: \"10px\",\n        }}\n      />\n      <input\n        class=\"LidoStakeFormInputContainerSpan2Input LidoStakeFormInputContainerSpan2Input--right\"\n        placeholder=\"Amount\"\n        value={input.values[1]}\n        onChange={(e) => onChange(input.id, 1, e.target.value)}\n        style={{\n          width: \"25%\",\n          padding: \"10px\",\n          border: \"0.5px solid black\",\n          borderRadius: \"10px\",\n        }}\n      />\n    </div>\n  </div>\n));\n\nconst inputElements2 = state.captcha.map(() => (\n  <div\n    class=\"LidoStakeFormInputContainer\"\n    style={{\n      display: \"flex\",\n      justifyContent: \"center\",\n      width: \"50%\",\n      margin: \"0 auto\",\n      paddingTop: \"15px\",\n      border: \"1px solid black\",\n      borderRadius: \"10px\",\n    }}\n    key={input1.id}\n  >\n    <span class=\"LidoStakeFormInputContainerSpan\"></span>\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginBottom: \"10px\",\n      }}\n    >\n      <img\n        src={state.captcha}\n        alt=\"Captcha\"\n        style={{\n          width: \"100px\",\n          height: \"50px\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          border: \"0.5px solid black\",\n          marginBottom: \"10px\",\n          borderRadius: \"10px\",\n          textAlign: \"center\",\n        }}\n      />\n      <input\n        class=\"LidoStakeFormInputContainerSpan2Input LidoStakeFormInputContainerSpan2Input--left\"\n        placeholder=\"Enter Captcha\"\n        value={input1.captcha || \"\"}\n        style={{\n          marginRight: \"10px\",\n          width: \"70%\",\n          padding: \"10px\",\n          display: \"block\",\n          margin: \"0 auto\",\n          border: \"0.5px solid black\",\n          borderRadius: \"10px\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n        }}\n      />\n    </div>\n  </div>\n));\n\n// FETCH LIDO ABI\n\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst tokenDecimals = 18;\n\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// FETCH LIDO STAKING APR\n\nif (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (address1, address2, address3, _referral) => {\n  if (!address1 || !address2 || !address3) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  // let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n\n// FETCH TX COST\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n//Keep track of the state for dynamic inputs\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"LidoForm\">\n        {state.sender && <></>}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\"></div>\n          </div>\n          <div class=\"LidoFormTopContainerRight\"></div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div>\n          {inputElements}\n          <div\n            className=\"LidoStakeFormInputContainerSpan2\"\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <button\n              style={{ border: \"1px solid black\", borderRadius: \"10px\" }}\n              onClick={addInput}\n            >\n              +\n            </button>\n          </div>\n          {inputElements2}\n          <span class=\"LidoStakeFormInputContainerSpan1\"></span>\n\n          {state.alert && <span>{state.alert}</span>}\n        </div>\n        <div className=\"LidoStakeFormInputContainerSpan2\">\n          <button\n            style={{\n              backgroundColor: \"#01a2ff\",\n              color: \"white\",\n              borderRadius: \"5px\",\n              margin: \"0 auto\",\n              border: \"none\",\n              cursor: \"pointer\",\n              marginTop: \"10px\",\n              width: \"100%\",\n            }}\n            onClick={onSubmit}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/akshatg6.near/widget/AccountAbstraction", "metadata.tags.ethdenver2023": NaN, "metadata": NaN}