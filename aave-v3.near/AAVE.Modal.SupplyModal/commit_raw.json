{"tx_hash": "AAmrXrKgVX9BWwj2GFUDxPqXMwxPnoZuN3wjUv7ryL8C", "action_id_social": "EDq59MpYXdrHp7xejZRgYjhaJJQdSuTT1hdpqgLGzA6t-0-widget", "block_id": 94670310, "block_timestamp": "2023-06-21T06:07:05.871Z", "signer_id": "aave-v3.near", "widget_name": "AAVE.Modal.SupplyModal", "source_code": "const { config, data, onRequestClose, onActionSuccess, chainId } = props;\n\nif (!data) {\n  return;\n}\n\nconst MIN_ETH_GAS_FEE = 0.001;\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  symbol,\n  balance,\n  marketReferencePriceInUsd,\n  supplyAPY,\n  usageAsCollateralEnabled,\n  decimals,\n  token,\n  name: tokenName,\n} = data;\n\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  loading: false,\n});\n\nfunction getNonce(tokenAddress, userAddress) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.nonces(userAddress).then((nonce) => nonce.toNumber());\n}\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} tokenName token name\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @returns raw signature string will could be used in supplyWithPermit\n */\nfunction signERC20Approval(user, reserve, tokenName, amount, deadline) {\n  return getNonce(reserve, user).then((nonce) => {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: \"name\", type: \"string\" },\n          { name: \"version\", type: \"string\" },\n          { name: \"chainId\", type: \"uint256\" },\n          { name: \"verifyingContract\", type: \"address\" },\n        ],\n        Permit: [\n          { name: \"owner\", type: \"address\" },\n          { name: \"spender\", type: \"address\" },\n          { name: \"value\", type: \"uint256\" },\n          { name: \"nonce\", type: \"uint256\" },\n          { name: \"deadline\", type: \"uint256\" },\n        ],\n      },\n      primaryType: \"Permit\",\n      domain: {\n        name: tokenName,\n        version: \"1\",\n        chainId,\n        verifyingContract: reserve,\n      },\n      message: {\n        owner: user,\n        spender: config.aavePoolV3Address,\n        value: amount,\n        nonce,\n        deadline,\n      },\n    };\n\n    const dataToSign = JSON.stringify(typeData);\n\n    return Ethers.provider().send(\"eth_signTypedData_v4\", [user, dataToSign]);\n  });\n}\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @param {string} rawSig signature from signERC20Approval\n * @returns txn object\n */\nfunction supplyWithPermit(user, reserve, amount, deadline, rawSig) {\n  const sig = ethers.utils.splitSignature(rawSig);\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    config.aavePoolV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n  return pool[\n    \"supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)\"\n  ](reserve, amount, user, 0, deadline, sig.v, sig.r, sig.s);\n}\n\nfunction depositETH(amount) {\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n      return wrappedTokenGateway.depositETH(\n        config.aavePoolV3Address,\n        address,\n        0,\n        {\n          value: amount,\n        }\n      );\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You supplied ${Big(amount)\n              .div(Big(10).pow(decimals))\n              .toFixed(8)} ${symbol}`,\n            callback: () => {\n              onRequestClose();\n              State.update({\n                loading: false,\n              });\n            },\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n          State.update({\n            loading: false,\n          });\n        }\n      });\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction depositErc20(amount) {\n  State.update({\n    loading: true,\n  });\n  const deadline = Math.floor(Date.now() / 1000 + 3600); // after an hour\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      signERC20Approval(userAddress, token, tokenName, amount, deadline)\n        .then((rawSig) => {\n          return supplyWithPermit(userAddress, token, amount, deadline, rawSig);\n        })\n        .then((tx) => {\n          tx.wait().then((res) => {\n            const { status } = res;\n            if (status === 1) {\n              onActionSuccess({\n                msg: `You supplied ${Big(amount)\n                  .div(Big(10).pow(decimals))\n                  .toFixed(8)} ${symbol}`,\n                callback: () => {\n                  onRequestClose();\n                  State.update({\n                    loading: false,\n                  });\n                },\n              });\n              console.log(\"tx succeeded\", res);\n            } else {\n              State.update({\n                loading: false,\n              });\n              console.log(\"tx failed\", res);\n            }\n          });\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nconst maxValue =\n  symbol === \"ETH\" || symbol === \"WETH\"\n    ? Big(balance).minus(MIN_ETH_GAS_FEE).toFixed()\n    : balance;\n\nconst changeValue = (value) => {\n  if (Number(value) > Number(maxValue)) {\n    value = maxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    State.update({\n      amountInUSD: Big(value)\n        .mul(marketReferencePriceInUsd)\n        .toFixed(2, ROUND_DOWN),\n    });\n  } else {\n    State.update({ amountInUSD: \"0.00\" });\n  }\n  State.update({ amount: value });\n};\n\nreturn (\n  <>\n    <Widget\n      src={`${config.ownerId}/widget/AAVE.Modal.BaseModal`}\n      props={{\n        title: `Supply ${symbol}`,\n        onRequestClose: onRequestClose,\n        children: (\n          <WithdrawContainer>\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Amount\",\n                config,\n                children: (\n                  <>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: (\n                          <TokenTexture>\n                            <Input\n                              type=\"number\"\n                              value={state.amount}\n                              onChange={(e) => {\n                                changeValue(e.target.value);\n                              }}\n                              placeholder=\"0\"\n                            />\n                          </TokenTexture>\n                        ),\n                        right: (\n                          <TokenWrapper>\n                            <img\n                              width={26}\n                              height={26}\n                              src={`https://app.aave.com/icons/tokens/${symbol.toLowerCase()}.svg`}\n                            />\n                            <TokenTexture>{symbol}</TokenTexture>\n                          </TokenWrapper>\n                        ),\n                      }}\n                    />\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <GrayTexture>${state.amountInUSD}</GrayTexture>,\n                        right: (\n                          <GrayTexture>\n                            Wallet Balance: {balance}\n                            <Max\n                              onClick={() => {\n                                changeValue(maxValue);\n                              }}\n                            >\n                              MAX\n                            </Max>\n                          </GrayTexture>\n                        ),\n                      }}\n                    />\n                  </>\n                ),\n              }}\n            />\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Transaction Overview\",\n                config,\n                children: (\n                  <TransactionOverviewContainer>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Supply APY</PurpleTexture>,\n                        right: (\n                          <WhiteTexture>\n                            {(Number(supplyAPY) * 100).toFixed(2)}%\n                          </WhiteTexture>\n                        ),\n                      }}\n                    />\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Collateralization</PurpleTexture>,\n                        right: usageAsCollateralEnabled ? (\n                          <GreenTexture>Enabled</GreenTexture>\n                        ) : (\n                          <RedTexture>Disabled</RedTexture>\n                        ),\n                      }}\n                    />\n                  </TransactionOverviewContainer>\n                ),\n              }}\n            />\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                config,\n                children: `Supply ${symbol}`,\n                loading: state.loading,\n                onClick: () => {\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  if (symbol === \"ETH\" || symbol === \"WETH\") {\n                    // supply weth\n                    depositETH(amount);\n                  } else {\n                    // supply common\n                    depositErc20(amount);\n                  }\n                },\n              }}\n            />\n          </WithdrawContainer>\n        ),\n        config,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/aave-v3.near/widget/AAVE.Modal.SupplyModal", "__row_index": 0}