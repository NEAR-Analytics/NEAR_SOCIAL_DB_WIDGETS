{"tx_hash": "5YdxX6bjeghngUGcRafWAgptDWwPk3GeNbB6kEq3kt3w", "action_id_social": "6SUZ32MB6E4eswgjkSwkz9r5Qtfjtr2rMoYk9uWTtMsU-0-widget", "block_id": 84649575, "block_timestamp": "2023-02-06 20:32:31.586", "signer_id": "calebjacob.near", "widget_name": "GlobalSearch", "source_code": "const profiles =\n  Social.get([\"*/profile/name\", \"*/profile/tags/*\"], \"final\") || {};\n\nconst appMetadata =\n  Social.get(\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\n    \"final\"\n  ) || {};\n\nconst appKeys =\n  Social.keys([\"*/widget/*\"], \"final\", { values_only: true }) || {};\n\nconst appFilterTag = \"app\";\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._-]/)\n    .filter((s) => !!s.trim());\n  const matchedAccountIds = [];\n  const matchedApps = [];\n\n  const limit = props.limit ?? 10;\n\n  const MaxSingleScore = 20;\n  const MaxScore = MaxSingleScore * 3;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.max(1, 20 - pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(profiles).forEach(([accountId, data]) => {\n    const accountIdScore = computeScore(accountId);\n    const name = data.profile.name || \"\";\n    const tags = Object.keys(data.profile.tags || {}).slice(0, 10);\n    const nameScore = computeScore(name);\n    const tagsScore = Math.min(\n      20,\n      tags.map(computeScore).reduce((s, v) => s + v, 0)\n    );\n    const score = (accountIdScore + nameScore + tagsScore) / MaxScore;\n    if (score > 0) {\n      matchedAccountIds.push({ score, accountId, name, tags });\n    }\n  });\n\n  matchedAccountIds.sort((a, b) => b.score - a.score);\n  const people = matchedAccountIds.slice(0, limit);\n\n  Object.entries(appKeys).forEach(([accountId, data]) => {\n    const accountIdScore = computeScore(accountId);\n    Object.keys(data.widget).forEach((componentId) => {\n      const componentIdScore = computeScore(componentId);\n      const metadata = allAppMetadata[accountId].widget[componentId].metadata;\n      const name = metadata.name || \"\";\n      if (appFilterTag && !(metadata.tags && appFilterTag in metadata.tags)) {\n        return;\n      }\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\n      const nameScore = computeScore(name);\n      const tagsScore = Math.min(\n        20,\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\n      );\n      const score =\n        (accountIdScore / 2 + componentIdScore + nameScore + tagsScore) /\n        MaxScore;\n      if (score > 0) {\n        matchedApps.push({\n          score,\n          accountId,\n          widgetName: componentId,\n          widgetSrc: `${accountId}/widget/${componentId}`,\n          name,\n          tags,\n        });\n      }\n    });\n  });\n\n  matchedApps.sort((a, b) => b.score - a.score);\n  const apps = matchedApps.slice(0, limit);\n\n  State.update({\n    term,\n    people,\n    apps,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, people, apps });\n  }\n};\n\nreturn (\n  <div>\n    <div>\n      <input\n        type=\"text\"\n        value={state.term ?? \"\"}\n        onChange={(e) => computeResults(e.target.value)}\n        placeholder=\"Search...\"\n      />\n      {state.term && (\n        <button type=\"button\" onClick={() => computeResults(\"\")}>\n          Clear\n        </button>\n      )}\n    </div>\n\n    <div>\n      <p>People:</p>\n\n      <ul>\n        {state.people &&\n          state.people.map((accountId, i) => <li key={i}>{accountId}</li>)}\n      </ul>\n    </div>\n\n    <div>\n      <p>Applications:</p>\n\n      <ul>\n        {state.apps &&\n          state.apps.map((app, i) => (\n            <li key={i}>\n              {app.widgetName}, {app.accountId}\n            </li>\n          ))}\n      </ul>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/calebjacob.near/widget/GlobalSearch"}