{"tx_hash": "njmRLubNEuo7j76FFoGrNQQULypy7ApUUhqbAry1MEK", "action_id_social": "Fz6xPFTQV19Ak4pTx1FpZdb8EE7bY3tE6CwNkYK2WvXs-0-widget", "block_id": 85825738, "block_timestamp": "2023-02-22 23:33:10.434", "signer_id": "calebjacob.near", "widget_name": "Comments.Compose", "source_code": "if (!context.accountId) {\n  return \"\";\n}\n\nconst autocompleteEnabled = true;\nconst item = props.item;\n\nState.init({\n  image: {},\n  text: props.initialText || \"\",\n});\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\n\nfunction composeData() {\n  const data = {\n    post: {\n      comment: JSON.stringify({\n        type: \"md\",\n        text: state.text,\n        image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n      }),\n    },\n    index: {\n      comment: JSON.stringify({\n        key: item,\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const notifications = extractTagNotifications(state.text, {\n    type: \"social\",\n    path: `${context.accountId}/post/comment`,\n  });\n\n  if (props.notifyAccountId && props.notifyAccountId !== context.accountId) {\n    notifications.push({\n      key: props.notifyAccountId,\n      value: {\n        type: \"comment\",\n        item,\n      },\n    });\n  }\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  return data;\n}\n\nfunction onCommit() {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n\n  if (props.onComment) {\n    props.onComment();\n  }\n}\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst Wrapper = styled.div`\n  --padding: 12px;\n  position: relative;\n  margin-left: -12px;\n  border-radius: 8px;\n  overflow: hidden;\n  transition: all 200ms;\n  border: 1px solid #ECEEF0;\n  border-radius: 8px;\n\n  &:focus-within {\n    box-shadow: inset 0 0 30px rgba(0,0,0,0.05);\n    border-color: #687076;\n  }\n`;\n\nconst Textarea = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  \n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 124px;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2))  var(--padding);\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  \n  &::after {\n    content: attr(data-value) ' ';\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n`;\n\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n\n  .commit-post-button {\n    background: #0091FF;\n    color: #fff;\n    border-radius: 6px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &:hover,\n    &:focus {\n      background: #0484e5;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #F1F3F5;\n    color: #006ADC;\n    border-radius: 6px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\n\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nreturn (\n  <Wrapper>\n    <Textarea data-value={state.text}>\n      <textarea\n        placeholder=\"Write your reply...\"\n        onInput={(event) => textareaInputHandler(event.target.value)}\n        value={state.text}\n      />\n    </Textarea>\n\n    {autocompleteEnabled && state.showAccountAutocomplete && (\n      <AutoComplete>\n        <Widget\n          src=\"calebjacob.near/widget/AccountAutocomplete\"\n          props={{\n            term: state.text.split(\"@\").pop(),\n            onSelect: autoCompleteAccountId,\n          }}\n        />\n      </AutoComplete>\n    )}\n\n    <Actions>\n      <IpfsImageUpload\n        image={state.image}\n        className=\"upload-image-button bi bi-image\"\n      />\n\n      <CommitButton\n        disabled={!state.text}\n        force\n        data={composeData}\n        onCommit={onCommit}\n        className=\"commit-post-button\"\n      >\n        Reply\n      </CommitButton>\n    </Actions>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/calebjacob.near/widget/Comments.Compose"}