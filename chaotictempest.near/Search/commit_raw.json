{"tx_hash": "64qXuS2rfQYDMUvqJoFET2JhdjJS91an8YTdsz9xobaz", "action_id_social": "8VSeGpxsAXtYvWTXAZcUpHwDbdEdSu1aVAAnTS2Ac5sT-0-widget", "block_id": 86662613, "block_timestamp": "2023-03-06 05:02:47.517", "signer_id": "chaotictempest.near", "widget_name": "Search", "source_code": "const SEARCH_API_KEY = props.searchApiKey ?? \"57ad1944e94432510f067a6e3d13f022\";\nconst APPLICATION_ID = props.appId ?? \"B6PI9UKKJT\";\nconst INDEX = props.index ?? \"test_near-social-feed\";\nconst API_URL =\n  props.apiUrl ??\n  `https://${APPLICATION_ID}-dsn.algolia.net/1/indexes/${INDEX}/query?`;\nconst INITIAL_PAGE = props.initialPage ?? 0;\nconst facets = props.facets ?? [\n  \"All\",\n  \"Users\",\n  \"Apps\",\n  \"Components\",\n  \"Posts\",\n  \"Comments\",\n];\n\nconst componentsUrl = `/#/calebjacob.near/widget/ComponentsPage`;\nconst peopleUrl = `/#/calebjacob.near/widget/PeoplePage`;\n\nconst Wrapper = styled.div` \n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding-bottom: 48px;\n  max-width: 600px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nconst Search = styled.div``;\n\nconst H1 = styled.h1`\n  font-weight: 600;\n  font-size: 32px;\n  line-height: 39px;\n  color: #11181C;\n  margin: 0;\n`;\n\nconst H2 = styled.h2`\n  font-weight: 400;\n  font-size: 20px;\n  line-height: 24px;\n  color: #687076;\n  margin: 0;\n`;\n\nconst H3 = styled.h3`\n  color: #687076;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-transform: uppercase;\n  margin: 0;\n`;\n\nconst Group = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nconst GroupHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  line-height: 1.5rem;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"\")};\n  white-space: ${(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n  overflow-wrap: anywhere;\n\n  b {\n    font-weight: 600;\n    color: #11181C;\n  }\n  \n  &[href] {\n    color: #006ADC;\n    outline: none;\n    font-weight: 600;\n\n    &:hover,\n    &:focus {\n      color: #006ADC;\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst Items = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  gap: 12px;\n`;\n\nconst Item = styled.div``;\n\nconst resetSearches = () => {\n  State.update({\n    currentPage: 0,\n    search: undefined,\n    paginate: undefined,\n  });\n};\n\nconst writeStateTerm = (term) => {\n  State.update({\n    term,\n  });\n\n  if (term === \"\") {\n    resetSearches();\n  }\n};\n\nconst profiles = (records) => {\n  const profiles = [];\n  for (const record of records ?? []) {\n    profiles.push({\n      accountId: record.author,\n    });\n  }\n  return profiles;\n};\n\nconst posts = (content, postType) => {\n  const posts = [];\n  for (const post of content || []) {\n    const accountId = post.author;\n    const blockHeight = post.objectID.split(\"/\").slice(-1)[0];\n    const postContent = {\n      type: \"md\",\n      text: post.content,\n    };\n    const headerStyling =\n      postType === \"post\"\n        ? \"border rounded-4 p-3 pb-1\"\n        : \"pt-3 border-top pb-2\";\n\n    posts.push({\n      accountId,\n      blockHeight,\n      postContent,\n      postType,\n      headerStyling,\n    });\n  }\n  return posts;\n};\n\nconst components = (records) => {\n  const components = [];\n  for (const component of records || []) {\n    const idParts = component.objectID.split(\"/\");\n    const widgetName = idParts[idParts.length - 1];\n    const accountId = component.author;\n    components.push({\n      accountId,\n      widgetName,\n    });\n  }\n  return components;\n};\n\nconst categorizeSearchHits = (rawResp) => {\n  const results = {};\n  for (const result of rawResp.hits) {\n    const { categories: categories_raw } = result;\n    if (categories_raw.length > 1) {\n      categories_raw.sort();\n    }\n\n    const categories = categories_raw.join(\", \");\n    results[categories] = results[categories] || [];\n    results[categories].push(result);\n  }\n\n  return {\n    results,\n    hitsTotal: rawResp.nbHits,\n    hitsPerPage: rawResp.hitsPerPage,\n  };\n};\n\nconst debounce = (callable, timeout) => {\n  return (args) => {\n    clearTimeout(state.timer);\n    State.update({\n      timer: setTimeout(() => callable(args), timeout ?? 50),\n    });\n  };\n};\n\nconst fetchSearchHits = (query, { pageNumber, filters, optionalFilters }) => {\n  let body = {\n    query,\n    page: pageNumber ?? 0,\n    filters,\n    optionalFilters: optionalFilters ?? [\n      \"categories:profile<score=3>\",\n      \"categories:widget<score=2>\",\n      \"categories:post<score=1>\",\n      \"categories:comment<score=0>\",\n    ],\n  };\n\n  return asyncFetch(API_URL, {\n    body: JSON.stringify(body),\n    headers: {\n      \"Content-Type\": \"application/json; charset=UTF-8\",\n      \"X-Algolia-Api-Key\": SEARCH_API_KEY,\n      \"X-Algolia-Application-Id\": APPLICATION_ID,\n    },\n    method: \"POST\",\n  });\n};\n\nconst computeResults = debounce(({ term, pageNumber, filters }) => {\n  fetchSearchHits(term, { pageNumber, filters }).then((resp) => {\n    const { results, hitsTotal, hitsPerPage } = categorizeSearchHits(resp.body);\n    State.update({\n      search: {\n        profiles: profiles(results[\"profile\"]),\n        components: components(results[\"widget\"]),\n        postsAndComments: posts(results[\"post\"], \"post\").concat(\n          posts(results[\"comment, post\"], \"comment\")\n        ),\n      },\n      paginate: {\n        hitsTotal,\n        hitsPerPage,\n      },\n    });\n  });\n});\n\nconst onSearchChange = ({ term }) => {\n  writeStateTerm(term);\n  computeResults({ term, pageNumber: INITIAL_PAGE });\n};\n\nconst onPageChange = (pageNumber) => {\n  const algoliaPageNumber = pageNumber - 1;\n  if (algoliaPageNumber === state.currentPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n  // Need to clear out old search data otherwise we'll get multiple entries\n  // from the previous pages as well. Seems to be cache issue on near.social.\n  State.update({\n    search: undefined,\n    currentPage: algoliaPageNumber,\n  });\n  computeResults({ term: state.term, pageNumber: algoliaPageNumber });\n};\n\nconst onFacetClick = (facet) => {\n  if (facet === state.facet) {\n    console.log(\"Clicked the same facet\");\n    return;\n  }\n\n  resetSearches();\n  State.update({\n    facet,\n  });\n\n  let filters = undefined;\n  if (facet === \"Users\") {\n    filters = \"categories:profile\";\n  }\n  if (facet === \"Components\") {\n    filters = \"categories:widget\";\n  }\n  if (facet === \"Apps\") {\n    filters = \"categories:app\";\n  }\n  if (facet === \"Posts\") {\n    filters = \"categories:post\";\n  }\n  if (facet === \"Comments\") {\n    filters = \"categories:comment\";\n  }\n\n  computeResults({\n    term: state.term,\n    filters,\n  });\n};\n\nreturn (\n  <Wrapper>\n    <Header>\n      <H1>Search</H1>\n      <H2>Explore and find everything on the Blockchain Operating System</H2>\n    </Header>\n\n    <Search>\n      <Widget\n        src=\"chaotictempest.near/widget/SearchPill\"\n        props={{\n          onChange: onSearchChange,\n          term: props.term,\n        }}\n      />\n    </Search>\n\n    {state.search && (\n      <Widget\n        src=\"chaotictempest.near/widget/Facets\"\n        props={{\n          facets,\n          onFacetClick,\n        }}\n      />\n    )}\n\n    {state.search?.profiles.length > 0 && (\n      <Group>\n        <GroupHeader>\n          <H3>People</H3>\n          <Text as=\"a\" href={peopleUrl} small>\n            View All\n          </Text>\n        </GroupHeader>\n\n        <Items>\n          {state.search.profiles.map((profile, i) => (\n            <Item key={profile.accountId}>\n              <Widget\n                src=\"calebjacob.near/widget/AccountProfileCard\"\n                props={{\n                  accountId: profile.accountId,\n                }}\n              />\n            </Item>\n          ))}\n        </Items>\n      </Group>\n    )}\n\n    {state.search?.components.length > 0 && (\n      <Group>\n        <GroupHeader>\n          <H3>Components</H3>\n          <Text as=\"a\" href={componentsUrl} small>\n            View All\n          </Text>\n        </GroupHeader>\n\n        <Items>\n          {state.search.components.map((component, i) => (\n            <Item key={component.accountId + component.widgetName}>\n              <Widget\n                src=\"calebjacob.near/widget/ComponentCard\"\n                props={{\n                  src: `${component.accountId}/widget/${component.widgetName}`,\n                }}\n              />\n            </Item>\n          ))}\n        </Items>\n      </Group>\n    )}\n\n    {state.search?.postsAndComments.length > 0 && (\n      <Group>\n        <GroupHeader>\n          <H3>Posts and Comments</H3>\n        </GroupHeader>\n\n        <Items>\n          {state.search.postsAndComments.map((post, i) => (\n            <Item\n              key={`${post.accountId}/${post.postType}/${post.blockHeight}`}\n            >\n              <Widget\n                src=\"chaotictempest.near/widget/SearchPost\"\n                props={{\n                  accountId: post.accountId,\n                  blockHeight: post.blockHeight,\n                  content: post.postContent,\n                }}\n              />\n            </Item>\n          ))}\n        </Items>\n      </Group>\n    )}\n\n    {state.paginate &&\n      state.paginate.hitsTotal > state.paginate.hitsPerPage && (\n        <Widget\n          src=\"chaotictempest.near/widget/Paginate\"\n          props={{\n            totalCount: state.paginate.hitsTotal,\n            pageSize: state.paginate.hitsPerPage,\n            onPageChange,\n          }}\n        />\n      )}\n\n    {props.debug && (\n      <div>\n        <p>Debug Data:</p>\n        <pre>{JSON.stringify(state, undefined, 2)}</pre>\n      </div>\n    )}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chaotictempest.near/widget/Search"}