{"tx_hash": "4UM7TSperW6ifKsEP6Go9wBF826HuLhHndmd5E1bXHKH", "action_id_social": "512vZeKmtTx2CQgu6kaLRpxWLe4PUv2VQoggu1xvFuv4-0-widget", "block_id": 85244920, "block_timestamp": "2023-02-14 23:52:16.763", "signer_id": "chaotictempest.near", "widget_name": "Search", "source_code": "const SEARCH_API_KEY = \"57ad1944e94432510f067a6e3d13f022\";\nconst APPLICATION_ID = \"B6PI9UKKJT\";\nlet search_params = \"query=\";\nconst api_url = `https://${APPLICATION_ID}-dsn.algolia.net/1/indexes/dev_near-social-feed/query?${search_params}`;\n\nconst LIMIT_PER_GROUP = 5;\n\nconst writeStateTerm = (term) => {\n  console.log(\"writeStateTerm:\", term);\n\n  State.update({\n    term,\n  });\n};\n\nconst computeResults = (term) => {\n  console.log(\"computeResults:\", term);\n  const raw_content = fetchAlgoliaData(term);\n\n  State.update({\n    term,\n    post: getCategoryResults(\"post\", raw_content),\n    comment: getCategoryResults(\"comment\", raw_content),\n    profile: getCategoryResults(\"profile\", raw_content),\n  });\n};\n\nconst fetchAlgoliaData = (queryURI) => {\n  search_params = \"query=\" + queryURI;\n  const res_data = useCache(\n    () =>\n      asyncFetch(api_url, {\n        body: `{ \"params\": \"${search_params}\" }`,\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"X-Algolia-Api-Key\": `${SEARCH_API_KEY}`,\n          \"X-Algolia-Application-Id\": `${APPLICATION_ID}`,\n        },\n        method: \"POST\",\n      }).then((res) => res.body),\n    \"apiResponse1\",\n    { subscribe: true }\n  );\n  return res_data;\n};\n\nconst getCategoryResults = (category, raw_result_data) => {\n  const results = [];\n  for (const result of raw_result_data.hits) {\n    const { author, content, objectID, categories: categories_raw } = result;\n    if (categories_raw.includes(category)) {\n      const categories = categories_raw.join(\", \");\n      results.push({\n        author,\n        content,\n        objectID,\n        categories,\n      });\n    }\n  }\n\n  return results.slice(0, LIMIT_PER_GROUP);\n};\n\nreturn (\n  <div>\n    <div>\n      <input\n        type=\"text\"\n        value={state.term ?? \"\"}\n        onChange={(e) => writeStateTerm(e.target.value)}\n        placeholder=\"Search...\"\n      />\n      {state.term && (\n        <button type=\"button\" onClick={() => writeStateTerm(\"\")}>\n          Clear\n        </button>\n      )}\n      {state.term && (\n        <button type=\"button\" onClick={() => computeResults(state.term)}>\n          Go\n        </button>\n      )}\n    </div>\n\n    {state.term && (\n      <>\n        {state.profile?.length > 0 && (\n          <div>\n            <p>Profiles:</p>\n\n            <ul>\n              {state.profile.map((data, i) => (\n                <li key={i}>{data.author}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {state.post?.length > 0 && (\n          <div>\n            <p>Posts:</p>\n\n            <ul>\n              {state.post.map((data, i) => (\n                <li key={i}>\n                  {data.author}, {data.content}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {state.comment?.length > 0 && (\n          <div>\n            <p>Comments:</p>\n\n            <ul>\n              {state.comment.map((data, i) => (\n                <li key={i}>\n                  {data.author}: {data.content}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </>\n    )}\n\n    {state.term && state.apps?.length === 0 && state.people?.length === 0 && (\n      <p>No people or applications match your search.</p>\n    )}\n\n    {props.debug && (\n      <div>\n        <p>Debug Data:</p>\n        <pre>{JSON.stringify(state, undefined, 2)}</pre>\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chaotictempest.near/widget/Search"}