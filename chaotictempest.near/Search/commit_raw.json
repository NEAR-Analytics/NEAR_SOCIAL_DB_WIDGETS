{"tx_hash": "6Gx3vy5pnSegC7SAbaBcRJjNWYzVLQ3WS7L1xgXNhwdD", "action_id_social": "HWfqJwagUBCwNrUUwcGE32uxnptiqJnUBNuEhVgpLL6o-0-widget", "block_id": 85892757, "block_timestamp": "2023-02-23 21:52:01.918", "signer_id": "chaotictempest.near", "widget_name": "Search", "source_code": "const SEARCH_API_KEY = \"57ad1944e94432510f067a6e3d13f022\";\nconst APPLICATION_ID = \"B6PI9UKKJT\";\nconst INDEX = \"test_near-social-feed\";\nconst API_URL = `https://${APPLICATION_ID}-dsn.algolia.net/1/indexes/${INDEX}/query?`;\nconst INITIAL_PAGE = 0;\n\nconst writeStateTerm = (term) => {\n  console.log(\"writeStateTerm:\", term);\n\n  State.update({\n    term,\n  });\n\n  if (term === \"\") {\n    State.update({\n      currentPage: 0,\n      post: [],\n      comment: [],\n      profile: [],\n      widget: [],\n      paginate: null,\n    });\n  }\n};\n\nconst profileWidgets = (content) => {\n  const profiles = [];\n\n  for (const profile of content || []) {\n    const accountId = profile.author;\n    profiles.push(\n      <div className=\"mb-2\">\n        <Widget src=\"mob.near/widget/Profile\" props={{ accountId }} />\n      </div>\n    );\n  }\n\n  return profiles;\n};\n\nconst postWidgets = (content, postType) => {\n  const posts = [];\n\n  for (const post of content || []) {\n    const accountId = post.author;\n    if (!post.ref) {\n      console.log(`No ref to ${postType} for ${accountId}`);\n    }\n\n    const blockHeight = post.ref.block_height;\n    const widgetType =\n      postType === \"post\" ? \"MainPage.Post.Page\" : \"MainPage.Comment.Page\";\n    const link = `#/mob.near/widget/${widgetType}?accountId=${accountId}&blockHeight=${blockHeight}`;\n    const post_content = {\n      type: \"md\",\n      text: post.content,\n    };\n\n    // ${\n    //   highlight ? \"bg-warning bg-opacity-10\" : \"\"\n    // }\n    const headerStyling =\n      postType === \"post\"\n        ? \"border rounded-4 p-3 pb-1\"\n        : \"pt-3 border-top pb-2\";\n\n    posts.push(\n      <div className={headerStyling}>\n        <Widget\n          src=\"mob.near/widget/MainPage.Post.Header\"\n          props={{ accountId, blockHeight, link, postType }}\n        />\n        <div className=\"mt-3 text-break\">\n          <Widget\n            src=\"mob.near/widget/MainPage.Post.Content\"\n            props={{ content: post_content }}\n          />\n        </div>\n      </div>\n    );\n  }\n  return posts;\n};\n\nconst componentWidgets = (content) => {\n  const widgets = [];\n  for (const component of content || []) {\n    const id = component.objectID;\n    const idParts = id.split(\"/\");\n    const widgetRawName = idParts[idParts.length - 1];\n    const accountId = component.author;\n\n    // objectId is already in the form of widget src: <accountId>/widget/<WidgetName>\n    const widgetSrc = id;\n\n    // onHide: () => State.update({ apps: null }),\n    widgets.push(\n      <div>\n        <Widget\n          src=\"mob.near/widget/ComponentSearch.Item\"\n          props={{\n            link: `#/${widgetSrc}`,\n            accountId,\n            widgetName: widgetRawName,\n            extraButtons: ({ widgetPath }) => (\n              <a\n                target=\"_blank\"\n                className=\"btn btn-outline-secondary\"\n                href={`#/mob.near/widget/WidgetSource?src=${widgetPath}`}\n              >\n                Source\n              </a>\n            ),\n          }}\n        />\n      </div>\n    );\n  }\n\n  return widgets;\n};\n\nconst onPageChange = (pageNumber) => {\n  if (pageNumber === state.currentPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n\n  // Need to clear out old search data otherwise we'll get multiple entries\n  // from the previous pages as well. Seems to be cache issue on near.social.\n  State.update({\n    post: [],\n    comment: [],\n    profile: [],\n    widget: [],\n    currentPage: pageNumber,\n  });\n  computeResults(state.term, pageNumber);\n};\n\nconst computeResults = (term, pageNumber) => {\n  console.log(\"computeResults:\", term);\n  fetchAlgoliaData(term, pageNumber).then((res) => {\n    const { results, hitsTotal, hitsPerPage } = getCategoryResults(res.body);\n    State.update({\n      term,\n      post: postWidgets(results[\"post\"], \"post\"),\n      comment: postWidgets(results[\"comment, post\"], \"comment\"),\n      profile: profileWidgets(results[\"profile\"]),\n      widget: componentWidgets(results[\"widget\"]),\n      paginate: {\n        hitsTotal,\n        hitsPerPage,\n      },\n    });\n  });\n};\n\nconst fetchAlgoliaData = (queryURI, pageNumber) => {\n  let search_params = `query=${queryURI}&page=${pageNumber}`;\n  return asyncFetch(API_URL, {\n    body: `{ \"params\": \"${search_params}\" }`,\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-Algolia-Api-Key\": `${SEARCH_API_KEY}`,\n      \"X-Algolia-Application-Id\": `${APPLICATION_ID}`,\n    },\n    method: \"POST\",\n  });\n};\n\nconst getCategoryResults = (raw_result_data) => {\n  console.log(\"RAW\", raw_result_data);\n  const results = {};\n  for (const result of raw_result_data.hits) {\n    const {\n      author,\n      content,\n      objectID,\n      tags,\n      categories: categories_raw,\n      ref,\n      _highlightResult,\n    } = result;\n\n    if (categories_raw.length > 1) {\n      categories_raw.sort();\n    }\n\n    const categories = categories_raw.join(\", \");\n    results[categories] = results[categories] || [];\n    results[categories].push({\n      author,\n      content,\n      objectID,\n      tags,\n      categories,\n      ref,\n      _highlightResult,\n    });\n  }\n\n  return {\n    results,\n    hitsTotal: raw_result_data.nbHits,\n    hitsPerPage: raw_result_data.hitsPerPage,\n  };\n};\n\nreturn (\n  <div>\n    <div>\n      <input\n        type=\"text\"\n        value={state.term ?? \"\"}\n        onChange={(e) => writeStateTerm(e.target.value)}\n        placeholder=\"Search...\"\n      />\n      {state.term && (\n        <div>\n          <button type=\"button\" onClick={() => writeStateTerm(\"\")}>\n            Clear\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => computeResults(state.term, INITIAL_PAGE)}\n          >\n            Go\n          </button>\n        </div>\n      )}\n    </div>\n\n    {state.term && (\n      <div>\n        {state.profile?.length > 0 && (\n          <div>\n            <p>Profiles:</p>\n            <ul>{state.profile}</ul>\n          </div>\n        )}\n        {state.widget?.length > 0 && (\n          <div className=\"mb-2\">\n            <p>Widgets:</p>\n            {state.widget}\n          </div>\n        )}\n        {state.post?.length > 0 && (\n          <div>\n            <p>Posts:</p>\n            <ul>{state.post}</ul>\n          </div>\n        )}\n        {state.comment?.length > 0 && (\n          <div>\n            <p>Comments:</p>\n            <ul>{state.comment}</ul>\n          </div>\n        )}\n        {state.paginate && (\n          <Widget\n            src=\"chaotictempest.near/widget/Paginate\"\n            props={{\n              totalCount: state.paginate.hitsTotal,\n              pageSize: state.paginate.hitsPerPage,\n              onPageChange,\n            }}\n          />\n        )}\n      </div>\n    )}\n\n    {state.term && state.apps?.length === 0 && state.people?.length === 0 && (\n      <p>No people or applications match your search.</p>\n    )}\n\n    {props.debug && (\n      <div>\n        <p>Debug Data:</p>\n        <pre>{JSON.stringify(state, undefined, 2)}</pre>\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chaotictempest.near/widget/Search"}