{"tx_hash": "HLgGpiziLnmgsxMRatqVjBeTohB4XTD9xH989HaYE5r8", "action_id_social": "BxXZECUxnhg7xV6Ug4svBmSiwpkrHfirW6PfYy7d5egs-0-widget", "block_id": 88979554, "block_timestamp": "2023-04-06 21:00:36.915", "signer_id": "chess-game.near", "widget_name": "ChessGame", "source_code": "const { game_id } = props;\nconst contractId = \"app.chess-game.near\";\nconst chessBoardWidget = \"chess-game.near/widget/ChessBoard\";\nif (!game_id) return <div>\"game_id\" missing in props</div>;\n\nconst board = Near.view(contractId, \"get_board\", {\n  game_id,\n});\nif (!board) return <div />;\n\nconst gameInfo = Near.view(contractId, \"game_info\", {\n  game_id,\n});\nif (!gameInfo) return <div />;\n\nState.init({\n  board,\n  gameInfo,\n  move: \"\",\n  assetType: state.assetType ?? \"default\",\n});\n\nconst BoardView = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\nconst GameInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-size: 1.4rem;\n  margin: 1rem;\n`;\n\nconst renderPlayer = (color, player) => {\n  if (player.Human) {\n    return (\n      <div>\n        Player {color}: {player.Human}\n      </div>\n    );\n  } else if (player.Ai) {\n    return (\n      <div>\n        Player {color}: AI ({player.Ai})\n      </div>\n    );\n  } else {\n    const err = new Error(`Unable to render player: ${player}`);\n    console.error(err);\n    return \"\";\n  }\n};\n\nconst TurnInput = styled.input`\n  border-radius: 4px;\n  border: 1px solid black;\n`;\nconst SendButton = styled.button`\n  border-radius: 4px;\n`;\n\nconst updateMove = (event) => {\n  State.update({\n    move: event.target.value,\n  });\n};\nconst selectAsset = (event) => {\n  console.log(\"event.target.value\", event.target.value);\n  State.update({\n    assetType: event.target.value,\n  });\n};\n\nconst playMove = () => {\n  if (!state.move) return;\n  Near.call(\n    contractId,\n    \"play_move\",\n    {\n      game_id,\n      mv: state.move,\n    },\n    \"300000000000000\"\n  );\n};\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 2rem;\n`;\n\nconst text = `\n  _A valid move will be parsed from a string._\n  \n  _Possible valid formats include:_\n  - \\\"e2e4\\\"\n  - \\\"e2 e4\\\"\n  - \\\"e2 to e4\\\"\n  - \\\"castle queenside\\\"\n  - \\\"castle kingside\\\"'\n`;\nconst assetText = `\n  _Assets are free to use right now, but will later be unlocked via NFTs._\n`;\n\nreturn (\n  <BoardView>\n    <GameInfo>\n      <div>ID: {game_id[0]}</div>\n      {renderPlayer(\"White\", state.gameInfo.white)}\n      {renderPlayer(\"Black\", state.gameInfo.black)}\n      <div>Turn: {state.gameInfo.turn_color}</div>\n    </GameInfo>\n    <Widget\n      src={chessBoardWidget}\n      props={{ board: state.board, assetType: state.assetType }}\n    />\n    <Footer>\n      <h3>Your Move:</h3>\n      <div>\n        <TurnInput\n          type=\"text\"\n          required\n          id=\"turn\"\n          value={state.move}\n          onChange={updateMove}\n        />\n        <SendButton onClick={playMove}>Play</SendButton>\n      </div>\n      <Markdown text={text} />\n\n      <h3>Assets:</h3>\n      <select onChange={selectAsset} value={state.assetType}>\n        <option value=\"default\">Regular</option>\n        <option value=\"hk\">Hollow Knight Style</option>\n      </select>\n      <Markdown text={assetText} />\n    </Footer>\n  </BoardView>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGame"}