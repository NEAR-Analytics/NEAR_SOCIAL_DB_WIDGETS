{"tx_hash": "6qhnRf5QcNc2QC3cPK1zANwv3vYRfkGJM1Aqho4vLWJA", "action_id_social": "4tshH1oKWkLLmFwdi3ToyPj7eGa7gs1VE4HCnaRP5MJ4-0-widget", "block_id": 88247740, "block_timestamp": "2023-03-27 18:46:28.831", "signer_id": "chess-game.near", "widget_name": "ChessGame", "source_code": "const { game_id } = props;\nconst contractId = \"app.chess-game.near\";\nif (!game_id) return <div>\"game_id\" missing in props</div>;\n\nconst board = Near.view(contractId, \"get_board\", {\n  game_id,\n});\nif (!board) return <div />;\n\nconst gameInfo = Near.view(contractId, \"game_info\", {\n  game_id,\n});\nif (!gameInfo) return <div />;\n\nState.init({\n  board,\n  gameInfo,\n  move: \"\",\n});\n\nconst BoardView = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\nconst GameInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-size: 1.4rem;\n  margin: 1rem;\n`;\nconst Board = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\nconst BoardRow = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst renderPlayer = (color, player) => {\n  if (player.Human) {\n    return (\n      <div>\n        Player {color}: {player.Human}\n      </div>\n    );\n  } else if (player.Ai) {\n    return (\n      <div>\n        Player {color}: AI ({player.Ai})\n      </div>\n    );\n  } else {\n    const err = new Error(`Unable to render player: ${player}`);\n    console.error(err);\n    return \"\";\n  }\n};\n\nconst renderPiece = (piece) => {\n  switch (piece) {\n    case \" \":\n      return \"\";\n    case \"\u265f\":\n      return (\n        <img\n          alt=\"black pawn\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/p-black.svg\"\n        />\n      );\n    case \"\u2659\":\n      return (\n        <img\n          alt=\"white pawn\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/P-white.svg\"\n        />\n      );\n    case \"\u265e\":\n      return (\n        <img\n          alt=\"black knight\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/n-black.svg\"\n        />\n      );\n    case \"\u2658\":\n      return (\n        <img\n          alt=\"white knight\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/N-white.svg\"\n        />\n      );\n    case \"\u265d\":\n      return (\n        <img\n          alt=\"black bishop\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/b-black.svg\"\n        />\n      );\n    case \"\u2657\":\n      return (\n        <img\n          alt=\"white bishop\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/B-white.svg\"\n        />\n      );\n    case \"\u265c\":\n      return (\n        <img\n          alt=\"black rook\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/r-black.svg\"\n        />\n      );\n    case \"\u2656\":\n      return (\n        <img\n          alt=\"white rook\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/R-white.svg\"\n        />\n      );\n    case \"\u265b\":\n      return (\n        <img\n          alt=\"black queen\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/q-black.svg\"\n        />\n      );\n    case \"\u2655\":\n      return (\n        <img\n          alt=\"white queen\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/Q-white.svg\"\n        />\n      );\n    case \"\u265a\":\n      return (\n        <img\n          alt=\"black king\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/k-black.svg\"\n        />\n      );\n    case \"\u2654\":\n      return (\n        <img\n          alt=\"white king\"\n          src=\"https://raw.githubusercontent.com/nikfrank/react-chess-pieces/master/src/K-white.svg\"\n        />\n      );\n    default:\n      return \"\";\n  }\n};\n\nconst fieldSize = \"3rem\";\nconst Legend = styled.div`\n  flex: 1 1 0;\n  max-width: ${fieldSize};\n  aspect-ratio: 1 / 1;\n  font-size: 1.6rem;\n  font-weight: 600;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst renderBoard = (board) => {\n  const boardRes = board.reverse().map((row, rowIndex) => {\n    const res = row.split(\"\").map((c, colIndex) => {\n      const background = (rowIndex + colIndex) % 2 === 0 ? \"#ddd\" : \"#555\";\n      const Field = styled.span`\n        flex: 1 1 auto;\n        max-width: ${fieldSize};\n        aspect-ratio: 1 / 1;\n        background: ${background};\n\n        img {\n          min-width: 100%;\n          min-height: 100%;\n          max-width: 100%;\n          max-height: 100%;\n        }\n        `;\n      return <Field>{renderPiece(c)}</Field>;\n    });\n    res.unshift(<Legend>{8 - rowIndex}</Legend>);\n    return <BoardRow>{res}</BoardRow>;\n  });\n  boardRes.push(\n    <BoardRow>\n      <Legend></Legend>\n      <Legend>A</Legend>\n      <Legend>B</Legend>\n      <Legend>C</Legend>\n      <Legend>D</Legend>\n      <Legend>E</Legend>\n      <Legend>F</Legend>\n      <Legend>G</Legend>\n      <Legend>H</Legend>\n    </BoardRow>\n  );\n  return boardRes;\n};\n\nconst TurnInput = styled.input`\n  border-radius: 4px;\n  border: 1px solid black;\n`;\nconst SendButton = styled.button`\n  border-radius: 4px;\n`;\n\nconst updateMove = (event) => {\n  State.update({\n    move: event.target.value,\n  });\n};\n\nconst playMove = () => {\n  if (!state.move) return;\n  Near.call(\n    contractId,\n    \"play_move\",\n    {\n      game_id,\n      mv: state.move,\n    },\n    \"300000000000000\"\n  );\n};\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst text = `\n  A valid move will be parsed from a string.\n  \n  Possible valid formats include:\n  - \\\"e2e4\\\"\n  - \\\"e2 e4\\\"\n  - \\\"e2 to e4\\\"\n  - \\\"castle queenside\\\"\n  - \\\"castle kingside\\\"'\n`;\n\nreturn (\n  <BoardView>\n    <GameInfo>\n      <div>ID: {game_id[0]}</div>\n      {renderPlayer(\"White\", state.gameInfo.white)}\n      {renderPlayer(\"Black\", state.gameInfo.black)}\n      <div>Turn: {state.gameInfo.turn_color}</div>\n    </GameInfo>\n    <Board>{renderBoard(state.board)}</Board>\n    <Footer>\n      <h3>Your Move:</h3>\n      <div>\n        <TurnInput\n          type=\"text\"\n          required\n          id=\"turn\"\n          value={state.move}\n          onChange={updateMove}\n        />\n        <SendButton onClick={playMove}>Play</SendButton>\n      </div>\n      <Markdown text={text} />\n    </Footer>\n  </BoardView>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGame"}