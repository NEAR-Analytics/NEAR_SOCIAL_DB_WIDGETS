{"tx_hash": "49m57WLxmDyf6MCnTHmAGFmcM5Y6StjY3ZHLNiBUncsa", "action_id_social": "HhSWHc3RCKcBCaxvEmNEkSpm96TALnBp6vjhMZd8H6jm-0-widget", "block_id": 94749271, "block_timestamp": "2023-06-22T06:59:32.086Z", "signer_id": "chess-game.near", "widget_name": "ChessGameLobby", "source_code": "const { accountId } = context;\nif (!accountId) {\n  return \"You need to login with your Near wallet first!\";\n}\n\nconst contractId = \"app.chess-game.near\";\nconst chessGameWidget = \"chess-game.near/widget/ChessGame\";\nconst chessGameReplayWidget = \"chess-game.near/widget/ChessGameReplay\";\nconst chessGameChallengeWidget = \"chess-game.near/widget/ChessGameChallenge\";\nconst chessGameAiWidget = \"chess-game.near/widget/ChessGameAi\";\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\nconst profileIcon = \"chess-game.near/widget/ProfileIcon\";\nconst githubIcon = \"chess-game.near/widget/GithubIcon\";\nconst twitterIcon = \"chess-game.near/widget/TwitterIcon\";\n\nconst LobbyView = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: ${(props) => (props.alignItems ? props.alignItems : \"center\")};\n  max-width: 550px;\n  margin: 0 auto;\n  box-sizing: border-box;\n\n  h1 {\n    align-self: center;\n  }\n\n  > * {\n    margin: 1.2rem 0;\n  }\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: ${(props) => (props.alignItems ? props.alignItems : \"center\")};\n\n  > * {\n    margin: 0.4rem 0;\n  }\n`;\nconst Disclaimer = styled.div`\n  margin-top: 1rem;\n  font-style: italic;\n  font-size: 1.2rem;\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.6rem;\n  justify-content: center;\n\n  a {\n    display: block;\n    align-items: center;\n    color: inherit;\n    text-decoration: inherit;\n    font-size: 1.4rem;\n    border-radius: 0.4rem;\n    border: 1px solid lightblue;\n    padding: 0.2rem;\n\n    &:hover {\n      border: 1px solid blue;\n      color: darkblue;\n    }\n  }\n`;\n\nconst isRegistered = Near.view(contractId, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\nconst registerAccount = () => {\n  Near.call(\n    contractId,\n    \"storage_deposit\",\n    {},\n    undefined,\n    \"50000000000000000000000\"\n  );\n};\n\nif (!isRegistered) {\n  return (\n    <LobbyView>\n      <h1>Chess On Chain</h1>\n      <Disclaimer>\n        You need to pay storage deposit of 0.05N first before being allowed to\n        play Chess On Chain\n      </Disclaimer>\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: registerAccount,\n          fontSize: \"1.2rem\",\n          content: \"Register Account\",\n        }}\n      />\n    </LobbyView>\n  );\n}\n\nState.init({\n  game_id: null,\n  replay_game_id: null,\n});\n\nconst gameIds = Near.view(contractId, \"get_game_ids\", {\n  account_id: accountId,\n});\nconst finishedGames = Near.view(contractId, \"finished_games\", {\n  account_id: accountId,\n}).sort((a, b) => b[0] - a[0]);\nconst recentFinishedGames = Near.view(contractId, \"recent_finished_games\", {});\n\nconst GameSelector = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n\n  > * {\n    margin: 1rem;\n  }\n`;\n\nconst selectGame = (gameId, isFinished) => () => {\n  if (isFinished) {\n    State.update({\n      replay_game_id: gameId,\n    });\n  } else {\n    State.update({\n      game_id: gameId,\n    });\n  }\n};\nconst returnToLobby = () => {\n  State.update({\n    game_id: null,\n    replay_game_id: null,\n  });\n};\nconst resign = () => {\n  Near.call(contractId, \"resign\", {\n    game_id: state.game_id,\n  });\n};\n\nconst renderGameIds = (gameIds, isFinished, displayPlayers) =>\n  gameIds.map((gameId) => {\n    let gameInfo;\n    if (!isFinished) {\n      gameInfo = Near.view(contractId, \"game_info\", {\n        game_id: gameId,\n      });\n    }\n    return (\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: selectGame(gameId, isFinished),\n          content: (\n            <>\n              <div>ID: {gameId[0]}</div>\n              {displayPlayers && (\n                <>\n                  <div>White: {gameId[1]}</div>\n                  {gameId[2] && <div>Black: {gameId[2]}</div>}\n                </>\n              )}\n              {gameInfo && (\n                <div>\n                  VS:{\" \"}\n                  {gameInfo.black.Ai ? (\n                    <>AI ({gameInfo.black.Ai})</>\n                  ) : (\n                    <>Player ({gameInfo.black.Human})</>\n                  )}\n                </div>\n              )}\n            </>\n          ),\n        }}\n      />\n    );\n  });\n\nlet content;\nif (state.game_id) {\n  content = (\n    <Content alignItems=\"stretch\">\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: returnToLobby,\n          alignSelf: \"center\",\n          content: \"Return To Lobby\",\n        }}\n      />\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: resign,\n          alignSelf: \"center\",\n          content: \"Resign\",\n        }}\n      />\n      <Widget src={chessGameWidget} props={{ game_id: state.game_id }} />\n    </Content>\n  );\n} else if (state.replay_game_id) {\n  content = (\n    <Content alignItems=\"stretch\">\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: returnToLobby,\n          alignSelf: \"center\",\n          content: \"Return To Lobby\",\n        }}\n      />\n      <Widget\n        src={chessGameReplayWidget}\n        props={{ game_id: state.replay_game_id }}\n      />\n    </Content>\n  );\n} else {\n  content = (\n    <>\n      {gameIds.length > 0 && (\n        <div>\n          <h2>Select Game:</h2>\n          <GameSelector>{renderGameIds(gameIds, false, false)}</GameSelector>\n        </div>\n      )}\n      <Widget src={chessGameChallengeWidget} />\n      <Widget src={chessGameAiWidget} />\n      {finishedGames.length > 0 && (\n        <div>\n          <h2>Replay your finished games:</h2>\n          <GameSelector>\n            {renderGameIds(finishedGames, true, false)}\n          </GameSelector>\n        </div>\n      )}\n      {recentFinishedGames.length > 0 && (\n        <div>\n          <h2>Replay recently finished games:</h2>\n          <GameSelector>\n            {renderGameIds(recentFinishedGames, true, true)}\n          </GameSelector>\n        </div>\n      )}\n    </>\n  );\n}\n\nreturn (\n  <LobbyView\n    alignItems={state.game_id || state.replay_game_id ? \"stretch\" : \"center\"}\n  >\n    <h1>Protocol Pawns</h1>\n    <Header>\n      <Disclaimer>\n        Play chess fully on chain powered by Near Protocol and the BOS. If you\n        want to learn more please visit the profile page.\n      </Disclaimer>\n      <a href=\"https://chess-game.near.social\" target=\"_blank\">\n        <Widget src={profileIcon} props={{ height: \"2rem\" }} />\n        <span>Profile</span>\n      </a>\n      <a href=\"https://github.com/Protocol-Pawns\" target=\"_blank\">\n        <Widget src={githubIcon} props={{ height: \"2rem\" }} />\n        <span>Github</span>\n      </a>\n      <a href=\"https://twitter.com/protocolpawns\" target=\"_blank\">\n        <Widget src={twitterIcon} props={{ height: \"2rem\" }} />\n        <span>Twitter</span>\n      </a>\n    </Header>\n    {content}\n    <Disclaimer>\n      If you won or lost a game it will no longer be displayed. You can check\n      the most recent transactions status on{\" \"}\n      <a\n        target=\"_blank\"\n        href=\"https://explorer.near.org/accounts/app.chess-game.near\"\n      >\n        Near Explorer\n      </a>{\" \"}\n      or{\" \"}\n      <a\n        target=\"_blank\"\n        href=\"https://nearblocks.io/address/app.chess-game.near\"\n      >\n        Nearblocks\n      </a>\n      .\n    </Disclaimer>\n  </LobbyView>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameLobby", "__row_index": 5}