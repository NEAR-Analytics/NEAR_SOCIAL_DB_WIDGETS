{"tx_hash": "Z5ddg6e9cCXfES6XBugCoLaDHcrnJVusNn4Cr8DaACT", "action_id_social": "6dujii6ewH9zoj7ZfXG2PgEKj87B4ppCC75W31YhNd3r-0-widget", "block_id": 89327268, "block_timestamp": "2023-04-11 09:55:55.028", "signer_id": "chess-game.near", "widget_name": "ChessGameLobby", "source_code": "const { accountId } = context;\nif (!accountId) {\n  return \"You need to login with your Near wallet first!\";\n}\n\nconst contractId = \"app.chess-game.near\";\nconst chessGameWidget = \"chess-game.near/widget/ChessGame\";\nconst chessGameReplayWidget = \"chess-game.near/widget/ChessGameReplay\";\n\nconst LobbyView = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: ${(props) => (props.alignItems ? props.alignItems : \"center\")};\n  max-width: 550px;\n  margin: 0 auto;\n\n  h1 {\n    align-self: center;\n  }\n\n  > * {\n    margin: 1.2rem 0;\n  }\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: ${(props) => (props.alignItems ? props.alignItems : \"center\")};\n\n  > * {\n      margin: 0.4rem 0;\n  }\n`;\nconst Button = styled.button`\n  display: flex;\n  flex-direction: column;\n  align-self: ${(props) => (props.alignSelf ? props.alignSelf : \"unset\")};\n  border: 1px solid black;\n  border-radius: 4px;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1rem\")};\n  max-width: 220px;\n\n  > * {\n    max-width: 100%;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n`;\nconst Disclaimer = styled.div`\n  margin-top: 1rem;\n  font-style: italic;\n  font-size: 1.2rem;\n`;\n\nconst isRegistered = Near.view(contractId, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\nconst registerAccount = () => {\n  Near.call(\n    contractId,\n    \"storage_deposit\",\n    {},\n    undefined,\n    \"50000000000000000000000\"\n  );\n};\n\nif (!isRegistered) {\n  return (\n    <LobbyView>\n      <h1>Chess On Chain</h1>\n      <Disclaimer>\n        You need to pay storage deposit of 0.05N first before being allowed to\n        play Chess On Chain\n      </Disclaimer>\n      <Button onClick={registerAccount} fontSize=\"1.2rem\">\n        Register Account\n      </Button>\n    </LobbyView>\n  );\n}\n\nState.init({\n  game_id: null,\n  replay_game_id: null,\n  difficulty: \"Easy\",\n});\n\nconst gameIds = Near.view(contractId, \"get_game_ids\", {\n  account_id: accountId,\n});\nconst finishedGames = Near.view(contractId, \"finished_games\", {\n  account_id: accountId,\n}).sort((a, b) => b[0] - a[0]);\nconst recentFinishedGames = Near.view(contractId, \"recent_finished_games\", {});\nconsole.log(\"recentFinishedGames\", recentFinishedGames);\n\nconst GameSelector = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n\n  > * {\n    margin: 1rem;\n  }\n`;\nconst GameCreator = styled.div`\n  margin-top: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  > *:not(h2) {\n    margin: 0.2rem 0;\n  }\n`;\n\nconst selectGame = (gameId, isFinished) => () => {\n  if (isFinished) {\n    State.update({\n      replay_game_id: gameId,\n    });\n  } else {\n    State.update({\n      game_id: gameId,\n    });\n  }\n};\nconst returnToLobby = () => {\n  State.update({\n    game_id: null,\n    replay_game_id: null,\n  });\n};\nconst resign = () => {\n  Near.call(contractId, \"resign\", {\n    game_id: state.game_id,\n  });\n};\nconst createAiGame = () => {\n  Near.call(contractId, \"create_ai_game\", {\n    difficulty: state.difficulty,\n  });\n};\nconst selectDifficulty = (event) => {\n  State.update({\n    difficulty: event.target.value,\n  });\n};\n\nconst renderGameIds = (gameIds, isFinished, displayPlayers) =>\n  gameIds.map((gameId) => {\n    let gameInfo;\n    if (!isFinished) {\n      gameInfo = Near.view(contractId, \"game_info\", {\n        game_id: gameId,\n      });\n    }\n    return (\n      <Button onClick={selectGame(gameId, isFinished)}>\n        <div>ID: {gameId[0]}</div>\n        {displayPlayers && (\n          <>\n            <div>White: {gameId[1]}</div>\n            {gameId[2] && <div>Black: {gameId[2]}</div>}\n          </>\n        )}\n        {gameInfo && <div>VS: AI ({gameInfo.black.Ai})</div>}\n      </Button>\n    );\n  });\n\nlet content;\nif (state.game_id) {\n  content = (\n    <Content alignItems=\"stretch\">\n      <Button alignSelf=\"center\" onClick={returnToLobby}>\n        Return To Lobby\n      </Button>\n      <Button alignSelf=\"center\" onClick={resign}>\n        Resign\n      </Button>\n      <Widget src={chessGameWidget} props={{ game_id: state.game_id }} />\n    </Content>\n  );\n} else if (state.replay_game_id) {\n  content = (\n    <Content alignItems=\"stretch\">\n      <Button alignSelf=\"center\" onClick={returnToLobby}>\n        Return To Lobby\n      </Button>\n      <Widget\n        src={chessGameReplayWidget}\n        props={{ game_id: state.replay_game_id }}\n      />\n    </Content>\n  );\n} else {\n  content = (\n    <>\n      {gameIds.length > 0 && (\n        <div>\n          <h2>Select Game:</h2>\n          <GameSelector>{renderGameIds(gameIds, false, false)}</GameSelector>\n        </div>\n      )}\n      <GameCreator>\n        <h2>Create New AI Game:</h2>\n        <span>Difficulty:</span>\n        <select onChange={selectDifficulty} value={state.difficulty}>\n          <option value=\"Easy\">Easy</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"Hard\">Hard</option>\n        </select>\n        <span>\n          <i>Higher difficulties consume more gas!</i>\n        </span>\n        <Button onClick={createAiGame} fontSize=\"1.4rem\">\n          Create\n        </Button>\n      </GameCreator>\n      {finishedGames.length > 0 && (\n        <div>\n          <h2>Replay your finished games:</h2>\n          <GameSelector>\n            {renderGameIds(finishedGames, true, false)}\n          </GameSelector>\n        </div>\n      )}\n      {recentFinishedGames.length > 0 && (\n        <div>\n          <h2>Replay recently finished games:</h2>\n          <GameSelector>\n            {renderGameIds(recentFinishedGames, true, true)}\n          </GameSelector>\n        </div>\n      )}\n    </>\n  );\n}\n\nreturn (\n  <LobbyView\n    alignItems={state.game_id || state.replay_game_id ? \"stretch\" : \"center\"}\n  >\n    <h1>Chess On Chain</h1>\n    {content}\n    <Disclaimer>\n      If you won or lost a game it will no longer be displayed. You can check\n      the most recent transactions status on{\" \"}\n      <a\n        target=\"_blank\"\n        href=\"https://explorer.near.org/accounts/app.chess-game.near\"\n      >\n        Near Explorer\n      </a>{\" \"}\n      or{\" \"}\n      <a\n        target=\"_blank\"\n        href=\"https://nearblocks.io/address/app.chess-game.near\"\n      >\n        Nearblocks\n      </a>\n      .\n    </Disclaimer>\n  </LobbyView>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameLobby", "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.game": NaN}