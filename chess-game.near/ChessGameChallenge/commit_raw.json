{"tx_hash": "HJRm7qp6vqxU3fjgAaP1kh1ik6YXzDkJDmy8BCJYWELr", "action_id_social": "4naUXsxBekxZ57jWeNiGRQJ5gne8w3YyaAiRv7TVewxa-0-widget", "block_id": 94742925, "block_timestamp": "2023-06-22T05:02:00.430Z", "signer_id": "chess-game.near", "widget_name": "ChessGameChallenge", "source_code": "const { accountId } = context;\nif (!accountId) {\n  return \"You need to login with your Near wallet first!\";\n}\n\nconst contractId = \"app.chess-game.near\";\n\nconst Button = styled.button`\n  display: flex;\n  flex-direction: column;\n  align-self: ${(props) => (props.alignSelf ? props.alignSelf : \"unset\")};\n  border: 1px solid black;\n  border-radius: 4px;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1rem\")};\n  max-width: 220px;\n\n  > * {\n    max-width: 100%;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n`;\nconst Challenge = styled.div`\n  display: flex;\n  font-size: 1.2rem;\n  flex-wrap: wrap;\n  gap: 0.2rem;\n  border-radius: 0.4rem;\n  border: 1px solid black;\n  padding: 0.3rem;\n\n  > *:first-child {\n    flex: 1 0 100%;\n  }\n`;\nconst GameSelector = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n\n  > * {\n    margin: 1rem;\n  }\n`;\nconst GameCreator = styled.div`\n  margin-top: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  > *:not(h2) {\n    margin: 0.2rem 0;\n  }\n\n  h2, h3, h4 {\n    align-self: center;\n  }\n`;\n\nconst challenges0 = Near.view(contractId, \"get_challenges\", {\n  account_id: accountId,\n  is_challenger: true,\n});\nconst challenges1 = Near.view(contractId, \"get_challenges\", {\n  account_id: accountId,\n  is_challenger: false,\n});\nconst openChallenges = [\n  ...challenges0.map((id) => ({\n    challenge_id: id,\n    is_challenger: true,\n  })),\n  ...challenges1.map((id) => ({\n    challenge_id: id,\n    is_challenger: false,\n  })),\n];\n\nState.init({\n  challenged_id: \"\",\n});\n\nconst updateChallengedId = ({ target }) => {\n  State.update({ challenged_id: target.value });\n};\nconst challenge = () => {\n  Near.call(contractId, \"challenge\", {\n    challenged_id: state.challenged_id,\n  });\n};\nconst acceptChallenge = (challenge_id) => () => {\n  Near.call(contractId, \"accept_challenge\", {\n    challenge_id,\n  });\n};\nconst rejectChallenge = (challenge_id, is_challenger) => () => {\n  Near.call(contractId, \"reject_challenge\", {\n    challenge_id,\n    is_challenger,\n  });\n};\n\nconst renderOpenChallenges = (challenges) => {\n  return (\n    <GameSelector>\n      {challenges.map(({ challenge_id, is_challenger }) => {\n        return (\n          <Challenge>\n            <span>{challenge_id.split(\"-vs-\").join(\" vs \")}</span>\n            {!is_challenger && (\n              <Button onClick={acceptChallenge(challenge_id)}>Accept</Button>\n            )}\n            <Button onClick={rejectChallenge(challenge_id, is_challenger)}>\n              Reject\n            </Button>\n          </Challenge>\n        );\n      })}\n    </GameSelector>\n  );\n};\n\nreturn (\n  <GameCreator>\n    <h2>PvP:</h2>\n    <h3>Open challenges:</h3>\n    {openChallenges.length === 0 ? (\n      <span>\n        No open challenges found.\n        <br />\n        Challenge your first opponent now below!\n      </span>\n    ) : (\n      renderOpenChallenges(openChallenges)\n    )}\n    <span>Account ID:</span>\n    <input onChange={updateChallengedId} value={state.challenged_id} />\n    <Button onClick={challenge} fontSize=\"1.4rem\">\n      Challenge!\n    </Button>\n  </GameCreator>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameChallenge", "__row_index": 1}