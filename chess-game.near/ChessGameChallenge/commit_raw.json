{"tx_hash": "Eo3iMnM9T1J4rkj8naXH6Ad9T6RBbr9xPEFYHY6nW9x4", "action_id_social": "27ZV7muGnhNwm2e3H4ag9JPJ1vtqSTkB4bVoY3Ejq8E9-0-widget", "block_id": 94821685, "block_timestamp": "2023-06-23T05:39:40.946Z", "signer_id": "chess-game.near", "widget_name": "ChessGameChallenge", "source_code": "const { accountId } = context;\nif (!accountId) {\n  return \"You need to login with your Near wallet first!\";\n}\n\nconst contractId = \"app.chess-game.near\";\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\n\nconst Challenge = styled.div`\n  display: flex;\n  font-size: 1.2rem;\n  flex-wrap: wrap;\n  gap: 0.2rem;\n  border-radius: 0.4rem;\n  border: 1px solid black;\n  padding: 0.3rem;\n\n  > *:first-child {\n    flex: 1 0 100%;\n  }\n`;\nconst GameSelector = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n\n  > * {\n    margin: 1rem;\n  }\n`;\nconst GameCreator = styled.div`\n  margin-top: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  > *:not(h2) {\n    margin: 0.2rem 0;\n  }\n\n  h2, h3, h4 {\n    align-self: center;\n  }\n`;\nconst AccountSearch = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  max-height: 400px;\n  max-width: 100%;\n  overflow: auto;\n`;\nconst SearchResult = styled.div`\n  background: #ddd;\n  line-height: 2rem;\n  padding: 0.5rem;\n  cursor: pointer;\n\n  &:hover {\n    background: #bbf;\n  }\n`;\n\nconst challenges0 = Near.view(contractId, \"get_challenges\", {\n  account_id: accountId,\n  is_challenger: true,\n});\nconst challenges1 = Near.view(contractId, \"get_challenges\", {\n  account_id: accountId,\n  is_challenger: false,\n});\nconst openChallenges = [\n  ...challenges0.map((id) => ({\n    challenge_id: id,\n    is_challenger: true,\n  })),\n  ...challenges1.map((id) => ({\n    challenge_id: id,\n    is_challenger: false,\n  })),\n];\n\nlet eloRatings = [...(state?.eloRatings ?? [])];\nif (!state.eloRatings) {\n  let skip = 0;\n  const limit = 100;\n  while (true) {\n    let newEloRatings = Near.view(contractId, \"get_elo_ratings\", {\n      skip,\n      limit,\n    });\n    skip += limit;\n    if (newEloRatings === 0) break;\n    eloRatings = eloRatings.concat(newEloRatings);\n    if (newEloRatings < limit) break;\n  }\n}\neloRatings.sort((a, b) => a[1] - b[1]);\n\nState.init({\n  challenged_id: \"\",\n  eloRatings,\n  displaySearch: state.displaySearch ?? false,\n});\n\nconst updateChallengedId = ({ target }) => {\n  State.update({ challenged_id: target.value });\n};\nconst challenge = () => {\n  Near.call(contractId, \"challenge\", {\n    challenged_id: state.challenged_id,\n  });\n};\nconst acceptChallenge = (challenge_id) => () => {\n  Near.call(contractId, \"accept_challenge\", {\n    challenge_id,\n  });\n};\nconst rejectChallenge = (challenge_id, is_challenger) => () => {\n  Near.call(contractId, \"reject_challenge\", {\n    challenge_id,\n    is_challenger,\n  });\n};\n\nconst renderOpenChallenges = (challenges) => {\n  return (\n    <GameSelector>\n      {challenges.map(({ challenge_id, is_challenger }) => {\n        return (\n          <Challenge>\n            <span>{challenge_id.split(\"-vs-\").join(\" vs \")}</span>\n            {!is_challenger && (\n              <Widget\n                src={buttonWidget}\n                props={{\n                  onClick: acceptChallenge(challenge_id),\n                  content: \"Accept\",\n                }}\n              />\n            )}\n            <Widget\n              src={buttonWidget}\n              props={{\n                onClick: rejectChallenge(challenge_id, is_challenger),\n                content: \"Reject\",\n              }}\n            />\n          </Challenge>\n        );\n      })}\n    </GameSelector>\n  );\n};\n\nconst onFocus = () => {\n  State.update({\n    displaySearch: true,\n  });\n};\nconst onBlur = () => {\n  State.update({\n    displaySearch: false,\n  });\n};\nconst selectPlayer = (accountId) => () => {\n  State.update({ challenged_id: accountId });\n};\n\nconst renderEloRatings = (eloRatings) => {\n  if (state.challenged_id == null || !Array.isArray(eloRatings)) return \"\";\n  return eloRatings\n    .filter((val) => val != null)\n    .filter(([accountId]) =>\n      state.challenged_id.split(\" \").some((val) => accountId.includes(val))\n    )\n    .map(([accountId, eloRating]) => (\n      <SearchResult onClick={selectPlayer(accountId)}>\n        {accountId.length > 20 ? accountId.substr(0, 20) + \"...\" : accountId}{\" \"}\n        (ELO: {eloRating})\n      </SearchResult>\n    ));\n};\n\nconst overlayContent = (\n  <AccountSearch visible={state.displaySearch}>\n    {renderEloRatings(state.eloRatings)}\n  </AccountSearch>\n);\n\nconsole.log(\"state\", state);\nreturn (\n  <GameCreator>\n    <h2>PvP:</h2>\n    <h3>Open challenges:</h3>\n    {openChallenges.length === 0 ? (\n      <span>\n        No open challenges found.\n        <br />\n        Challenge your first opponent now below!\n      </span>\n    ) : (\n      renderOpenChallenges(openChallenges)\n    )}\n    <span>Account ID:</span>\n    <OverlayTrigger\n      show={state.displaySearch}\n      delay={{ show: 250, hide: 300 }}\n      placement=\"bottom\"\n      overlay={overlayContent}\n    >\n      <input\n        onChange={updateChallengedId}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        value={state.challenged_id}\n      />\n    </OverlayTrigger>\n    <Widget\n      src={buttonWidget}\n      props={{\n        onClick: challenge,\n        fontSize: \"1.4rem\",\n        content: \"Challenge!\",\n      }}\n    />\n  </GameCreator>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameChallenge", "__row_index": 5}