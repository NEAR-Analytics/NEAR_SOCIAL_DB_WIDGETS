{"tx_hash": "9H1br7Cu4ciKfstKjh9jboaDcVNcyHcvSkkmptsAsFhL", "action_id_social": "3M4QTFj5GtwthBtyxL7kH7mY3XReFeX1Go4wTchPsXdR-0-widget", "block_id": 86632191, "block_timestamp": "2023-03-05 19:07:55.566", "signer_id": "reallyveryy.near", "widget_name": "smol-profiler", "source_code": "State.init({\n  is_stake_loading: false,\n  is_born_date_loading: false,\n  is_swap_loading: false,\n  is_children_loading: false,\n  is_ledger_loading: false,\n\n  address: \"\",\n  ledger_data: [],\n  stake_data: [],\n  swaps_data: [],\n  children_data: [],\n  born_data: [],\n\n  is_init: true,\n});\n\nconst {\n  is_stake_loading,\n  is_born_date_loading,\n  is_swap_loading,\n  is_children_loading,\n  is_ledger_loading,\n  address,\n  previous_address,\n  swaps_data,\n  stake_data,\n  ledger_data,\n  children_data,\n  born_data,\n  is_init,\n} = state;\n\nconst is_loading =\n  is_stake_loading &&\n  is_born_date_loading &&\n  is_swap_loading &&\n  // is_children_loading &&\n  is_ledger_loading;\n\nconst is_any_loading =\n  is_stake_loading ||\n  is_born_date_loading ||\n  is_swap_loading ||\n  is_children_loading ||\n  is_ledger_loading;\n\nconst fetchData = (sql, whichState, whichLoadingState) => {\n  //clear and reset data\n  State.update({ [whichLoadingState]: true, [whichState]: [] });\n  sql = sql.replace(\"{{address}}\", address).replace(/\\+/g, \"%2B\");\n  var formBody = [];\n  formBody.push(`statement=${sql}`);\n  formBody = formBody.join(\"&\");\n\n  // doesn't work\n  try {\n    asyncFetch(\"https://flipside.leslug.com/execute\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n      },\n      body: formBody,\n    }).then((res) => {\n      State.update({\n        [whichState]: res.body,\n        [whichLoadingState]: false,\n      });\n\n      //.catch doesn't work either\n    });\n  } catch {\n    State.update({\n      [whichLoadingState]: false,\n      [whichState]: [],\n    });\n  }\n};\n\nconst ellipsizeThis = (x, leftCharLength, rightCharLength) => {\n  let totalLength = leftCharLength + rightCharLength;\n\n  if (totalLength >= x.length) {\n    return x;\n  }\n\n  return x.substring(0, leftCharLength) + \"...\" + x.substr(-rightCharLength);\n};\n\nfunction toTwoDecimals(x) {\n  if (!x) {\n    return \"\";\n  }\n  if (typeof x === \"string\") {\n    x = parseFloat(x);\n  }\n  return x.toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n    minimumFractionDigits: 2,\n  });\n}\n\nconst getStakeData = () => {\n  let sql = `SELECT \n    t.block_timestamp,\n    t.tx_hash,\n    IFF(CONTAINS(tx:receipt[0]:outcome:logs[0], 'deposited'), 'Stake', 'Unstake') as action,\n    case action\n    when 'Stake' then REPLACE(REGEXP_SUBSTR(tx:receipt[0]:outcome:logs[0], 'deposited \\\\\\\\d+'), 'deposited')::decimal\n    else -REPLACE(REGEXP_SUBSTR(tx:receipt[0]:outcome:logs[0], 'unstaking \\\\\\\\d+'), 'unstaking')::decimal\n    end / 1e24 as deposit_amount\n    FROM near.core.fact_actions_events_function_call c\n    JOIN near.core.fact_transactions t\n    ON c.tx_hash = t.tx_hash\n    WHERE (method_name = 'deposit_and_stake' or method_name = 'unstake_all')\n    AND tx_signer = '{{address}}'\n        and tx_status = 'Success'\norder by block_timestamp desc`;\n\n  fetchData(sql, \"stake_data\", \"is_stake_loading\");\n};\n\nconst getIsLedgerData = () => {\n  let sql = `SELECT \n  COUNT(DISTINCT receiver_id) as is_ledger\nFROM near.core.fact_actions_events_addkey\n  WHERE permission:FunctionCall:method_names[0] = '__wallet__metadata'\n\t\tAND allowance = 0\n        AND receiver_id = '{{address}}'`;\n  fetchData(sql, \"ledger_data\", \"is_ledger_loading\");\n};\n\nconst getBornDateData = () => {\n  let sql = `  SELECT \n    tx_signer as given_by,\n    tx_hash,\n    block_timestamp as date\n  FROM near.core.fact_transfers\n  WHERE status and tx_receiver = '{{address}}'\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY tx_receiver ORDER BY block_timestamp) = 1\norder by block_timestamp desc`;\n  fetchData(sql, \"born_data\", \"is_born_date_loading\");\n};\n\nconst getSwapData = () => {\n  let sql = `with prices as (\n  select\n    timestamp::date as date,\n    token_contract,\n    symbol,\n    avg(price_usd) as price_usd\n  from near.core.fact_prices\n  group by 1,2,3\n)\n\nselect \n  block_timestamp,\n  tx_hash,\n  pool_id,\n  amount_in,\n  amount_in * p1.price_usd as amount_in_usd,\n  nvl(p1.symbol, token_in_contract) as symbol_in,\n  amount_out,\n  amount_out * p2.price_usd as amount_out_usd,\n  nvl(p2.symbol, token_out_contract) as symbol_out\nfrom near.core.ez_dex_swaps s\nleft join prices p1\non p1.token_contract = s.token_in_contract and p1.date = block_timestamp::date\nleft join prices p2\non p2.token_contract = s.token_out_contract and p2.date = block_timestamp::date\nwhere trader = '{{address}}'\norder by block_timestamp desc`;\n  fetchData(sql, \"swaps_data\", \"is_swap_loading\");\n};\n\nconst getChildrenData = () => {\n  let sql = `WITH first_deposits AS (\n  SELECT \n    block_timestamp,\n    tx_hash,\n    tx_receiver,\n    tx_signer\n  FROM near.core.fact_transfers\n  WHERE status\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY tx_receiver ORDER BY block_timestamp) = 1\n)\n\n  SELECT\n    block_timestamp,\n    tx_hash,\n    tx_receiver as underling\n  FROM first_deposits\n  where tx_signer = '{{address}}'\norder by block_timestamp desc`;\n  fetchData(sql, \"children_data\", \"is_children_loading\");\n};\n\nconst onAddressChange = ({ target }) => {\n  State.update({ address: target.value });\n};\n\nconst onSearch = () => {\n  State.update({ is_init: false });\n  getStakeData();\n  getBornDateData();\n  getIsLedgerData();\n  // getChildrenData();\n  getSwapData();\n};\n\nreturn (\n  <div>\n    <div class=\"d-flex flex-row align-items-center\">\n      <div class=\"w-100\">\n        <input\n          onChange={onAddressChange}\n          class=\"form-control\"\n          placeholder=\"Address\"\n        />\n      </div>\n      <div class=\"d-flex\">\n        <button\n          class=\"btn btn-success btn-sm d-flex flex-row ms-3\"\n          onClick={() => {\n            onSearch();\n          }}\n          disabled={is_any_loading}\n        >\n          {!is_any_loading && <i class=\"bi bi-search me-2\"></i>}\n          {is_any_loading && (\n            <div class=\"spinner-grow spinner-grow-sm me-2\" role=\"status\"></div>\n          )}\n          Search\n        </button>\n      </div>\n    </div>\n    <div class=\"d-flex w-100\" style={{ minHeight: 500 }}>\n      {is_loading && (\n        <div\n          class=\"spinner-border spinner-border-lg m-auto\"\n          role=\"status\"\n        ></div>\n      )}\n      {!is_loading && !is_init && (\n        <div class=\"d-flex flex-column w-100 h-100 p-3\">\n          <h2 class=\"text-lg mt-5\">General</h2>\n          <div class=\"row\">\n            <div class=\"col-6 row\">\n              <strong class=\"col-6\">Is Ledger:</strong>\n              <span class=\"col-6\">\n                {is_ledger_loading ? (\n                  <i class=\"spinner-grow spinner-grow-sm\"></i>\n                ) : ledger_data[0]?.is_ledger ? (\n                  <span class=\"text-success\">YES</span>\n                ) : (\n                  <span class=\"text-danger\">NO</span>\n                )}\n              </span>\n            </div>\n            <div class=\"col-6\"></div>\n            <div class=\"col-6 row\">\n              <strong class=\"col-6\">First Tx Date:</strong>\n              <span class=\"col-6\">\n                {is_born_date_loading ? (\n                  <i class=\"spinner-grow spinner-grow-sm\"></i>\n                ) : (\n                  born_data[0]?.date ?? \"N/A\"\n                )}\n              </span>\n            </div>\n            <div class=\"col-6 row\">\n              <strong class=\"col-6\">First Tx Hash:</strong>\n              <span class=\"col-6\">\n                {is_born_date_loading ? (\n                  <i class=\"spinner-grow spinner-grow-sm\"></i>\n                ) : (\n                  <a\n                    href={`https://explorer.near.org/transactions/${born_data[0]?.tx_hash}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {ellipsizeThis(born_data[0]?.tx_hash ?? \"N/A\", 6, 6)}\n                  </a>\n                )}\n              </span>\n            </div>\n          </div>\n          <Widget\n            src={`reallyveryy.near/widget/Stake-DataTable`}\n            props={{\n              is_stake_loading,\n              stake_data,\n            }}\n          />\n          <h2 class=\"text-lg mt-5\">Swaps</h2>\n          <div class=\"row\">\n            <div class=\"col-6 row\">\n              <strong class=\"col-6\">Number of Swap Txs:</strong>\n              <span class=\"col-6\">\n                {is_swap_loading ? (\n                  <i class=\"spinner-grow spinner-grow-sm\"></i>\n                ) : (\n                  swaps_data.length\n                )}\n              </span>\n            </div>\n          </div>\n          <div class=\"table-responsive mt-3\">\n            <table class=\"table-striped table\" style={{ minHeight: 100 }}>\n              <thead>\n                <tr>\n                  <th>Block Timestamp</th>\n                  <th>Tx Hash</th>\n                  <th>Pool ID</th>\n                  <th class=\"text-center\">Swap Route</th>\n                </tr>\n              </thead>\n              <tbody>\n                {swaps_data.map((x) => (\n                  <tr>\n                    <td>{x.block_timestamp}</td>\n                    <td>\n                      <a\n                        href={`https://explorer.near.org/transactions/${x.tx_hash}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {ellipsizeThis(x.tx_hash ?? \"N/A\", 6, 6)}\n                      </a>\n                    </td>\n                    <td>{x.pool_id}</td>\n                    <td class=\"text-center\">\n                      <div class=\"row\">\n                        <div class=\"col-5\">\n                          <strong>\n                            {toTwoDecimals(x.amount_out)}{\" \"}\n                            {ellipsizeThis(x.symbol_out, 6, 6)}\n                          </strong>\n                          <span>\n                            ($\n                            {x.amount_out_usd\n                              ? toTwoDecimals(x.amount_out_usd)\n                              : \"0.00\"}\n                            )\n                          </span>\n                        </div>\n                        <div class=\"col-2\">{\"\ud83e\udc46\"}</div>\n                        <div class=\"col-5\">\n                          <strong>\n                            {toTwoDecimals(x.amount_in)}{\" \"}\n                            {ellipsizeThis(x.symbol_in, 6, 6)}\n                          </strong>\n                          <span>\n                            ($\n                            {x.amount_out_usd\n                              ? toTwoDecimals(x.amount_in_usd)\n                              : \"0.00\"}\n                            )\n                          </span>\n                        </div>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/reallyveryy.near/widget/smol-profiler"}