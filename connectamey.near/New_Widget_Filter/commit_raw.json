{"tx_hash": "F93fi46eQc8JdQ1qTUTiLS8wKsi9L7Dnq1e2mQyBM97x", "action_id_social": "H89MjyT9GnGCdCV1AUsqujKGfVP8uV1yczG6QBaLYEwf-0-widget", "block_id": 89661382, "block_timestamp": "2023-04-15 20:00:18.248", "signer_id": "connectamey.near", "widget_name": "New_Widget_Filter", "source_code": "// const accountId = props.accountId ?? context.accountId; //context.accountId\r\n\r\n// const accountId = *;\r\n\r\n// const tag = props.tag;\r\n\r\nconst handleSearch = () => {\r\n  Console.log(\"tag \", state.tag);\r\n\r\n  if (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\r\n    State.update({\r\n      data,\r\n      allItems: processData(data),\r\n    });\r\n  }\r\n};\r\n// const meme = \"meme\";\r\n// let tag = \"meme\";\r\n\r\n//Initializing the state\r\nState.init({\r\n  tag: state.tag ?? \"meme\",\r\n});\r\n// state.tag ?? meme;\r\nlet keys = `${accountId ?? \"*\"}/widget/*`;\r\n\r\nif (state.tag) {\r\n  //   const taggedWidgets = Social.keys(\r\n  //     `${accountId ?? \"*\"}/widget/*/metadata/tags/${tag}`,\r\n  //     \"final\"\r\n  //   );\r\n  const taggedWidgets = Social.keys(\r\n    `${accountId ?? \"*\"}/widget/*/metadata/tags/${state.tag}`,\r\n    \"final\"\r\n  );\r\n\r\n  //   if (taggedWidgets === null) {\r\n  //     return \"Loading tags\";\r\n  //   }\r\n\r\n  keys = Object.entries(taggedWidgets)\r\n    .map((kv) => Object.keys(kv[1].widget).map((w) => `${kv[0]}/widget/${w}`))\r\n    .flat();\r\n\r\n  //   if (!keys.length) {\r\n  //     state.tag = \"\";\r\n  //     // return `No widgets found by tag ${state.tag}`;\r\n  //   }\r\n}\r\n\r\nconst data = Social.keys(keys, \"final\", {\r\n  return_type: \"BlockHeight\",\r\n});\r\n\r\n// if (data === null) {\r\n// state.tag = \"app\"\r\n// //   return \"Loading widgets\";\r\n// }\r\n\r\nconst processData = (data) => {\r\n  const accounts = Object.entries(data);\r\n\r\n  const allItems = accounts\r\n    .map((account) => {\r\n      const accountId = account[0];\r\n      return Object.entries(account[1].widget).map((kv) => ({\r\n        accountId,\r\n        widgetName: kv[0],\r\n        blockHeight: kv[1],\r\n      }));\r\n    })\r\n    .flat();\r\n\r\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\r\n  return allItems;\r\n};\r\n\r\nconst onChangeTag = (tag) => {\r\n  State.update({\r\n    tag,\r\n    data,\r\n    allItems: processData(data),\r\n  });\r\n  console.log(\"tag \", state.tag);\r\n};\r\n\r\nconst renderTag = (tag, tagBadge) => (\r\n  <a href={makeLink(accountId, tag)}>{tagBadge}</a>\r\n);\r\n\r\nconst renderItem = (a) => {\r\n  return (\r\n    <a\r\n      href={`#/${a.accountId}/widget/${a.widgetName}`}\r\n      className=\"text-decoration-none\"\r\n      key={JSON.stringify(a)}\r\n    >\r\n      <Widget\r\n        src=\"mob.near/widget/WidgetImage\"\r\n        props={{\r\n          tooltip: true,\r\n          accountId: a.accountId,\r\n          widgetName: a.widgetName,\r\n        }}\r\n      />\r\n    </a>\r\n  );\r\n};\r\n\r\nif (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\r\n  State.update({\r\n    data,\r\n    allItems: processData(data),\r\n  });\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"mb-2\">\r\n      Enter Tag Name:\r\n      <input type=\"text\" onChange={(e) => onChangeTag(e.target.value)} />\r\n    </div>\r\n    <button className=\"btn btn-primary mt-3\" onClick={handleSearch}>\r\n      SEARCH\r\n    </button>\r\n    <div className=\"d-flex flex-wrap gap-1 my-3\">\r\n      {state.allItems\r\n        .slice(0, props.limit ? parseInt(props.limit) : 999)\r\n        .map(renderItem)}\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/connectamey.near/widget/New_Widget_Filter"}