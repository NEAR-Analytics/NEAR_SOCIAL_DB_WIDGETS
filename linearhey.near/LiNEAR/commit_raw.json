{"tx_hash": "9QriaMYykqvS8LR3mJNidsjsMdiDPGDhMCDTLKXW8mY2", "action_id_social": "2cUP4orNoamwoHoQup4njcqk5sAuJxtaEnZn7DCiZy59-0-widget", "block_id": 89354973, "block_timestamp": "2023-04-11 18:55:32.307", "signer_id": "linearhey.near", "widget_name": "LiNEAR", "source_code": null, "metadata": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/linearhey.near/widget/LiNEAR", "branch.draft.": "const INITIAL_VALUE = {\n  inputValue: \"\",\n  inputError: \"\",\n};\nState.init(INITIAL_VALUE);\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst NEAR_DECIMALS = 24;\nconst LiNEAR_CONTRACT_ID = \"linear-protocol.near\";\n\nfunction getNearBalance(accountId) {\n  const account = fetch(\"https://rpc.mainnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  });\n  const { amount, storage_usage } = account.body.result;\n  const COMMON_MIN_BALANCE = 0.05;\n  if (!amount) return \"-\";\n  const availableBalance = new Big(amount || 0).minus(\n    new Big(storage_usage).mul(new Big(10).pow(19))\n  );\n  const balance = availableBalance\n    .div(new Big(10).pow(NEAR_DECIMALS))\n    .minus(COMMON_MIN_BALANCE);\n  return balance.lt(0) ? \"0\" : balance.toFixed(5);\n}\n\nfunction getAPY() {\n  const result = fetch(\"https://metrics.linearprotocol.org\", {\n    method: \"GET\",\n  });\n  const apy = result.body.apy;\n  if (!apy) return \"-\";\n  return Big(apy).mul(100).toFixed(2) + \"%\";\n}\n\nconst apy = getAPY();\nconst nearBalance = getNearBalance(accountId);\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst Title = styled.h1`\n      font-size: 40px;\n      font-weight: bold;\n  `;\n\nconst Main = styled.div`\n      color: white;\n      width: 100%;\n      height: 80vh;\n      background: #09071f;\n      padding: 20px;\n  \n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column\n  `;\n\nconst Description = styled.div`\n      font-size: 14px;\n      color: #999999;\n      margin-top: 5px;\n  `;\n\nconst StakeFormWrapper = styled.div`\n      width: 100%;\n      max-width: 500px;\n      padding: 20px;\n      background: #0f0f31;\n      border-radius: 10px;\n  `;\n\nconst disabledStakeButton =\n  !isValid(state.inputValue) || Big(state.inputValue).eq(0) || state.inputError;\nconst StakeButton = styled.button`\n      border: none;\n      color: white;\n      width: 100%;\n      border-radius: 10px;\n      font-size: 20px;\n      font-weight: bold;\n      overflow: hidden;\n      padding: 8px 0;\n  \n      background-size: 100%;\n      background-image: linear-gradient(180deg, #5561ff 0%, #3643fc 100%, #3643fc 100%);\n      position: relative;\n      z-index: 0;\n      &:disabled {\n          background: #1C2056;\n          color: #3D47D6;\n      }\n      &:before {\n          background-image: linear-gradient(180deg, #4954f2 0%, #2029a7 100%);\n          content: \"\";\n          display: block;\n          height: 100%;\n          position: absolute;\n          top: 0;\n          left: 0;\n          opacity: 0;\n          width: 100%;\n          z-index: -100;\n          transition: opacity 0.6s;\n      }\n      &:hover:before {\n          opacity: ${disabledStakeButton ? \"0\" : \"1\"};\n      }\n  `;\n\nconst InputWrapper = styled.div`\n      width: 100%;\n      border-radius: 10px;\n      background: #0d0d2b;\n      padding: 20px;\n      margin-bottom: 20px;\n  `;\n\nconst HorizentalLine = styled.hr`\n      height: 1px;\n      border: none;\n      background: white;\n      opacity: 0.1;\n      margin-top: 16px;\n      margin-bottom: 8px;\n  `;\n\nconst BalanceContainer = styled.div`\n      color: #c1c1c1;\n      font-size: 14px;\n      display: flex;\n      justify-content: space-between;\n      .error {\n          color: #ec6868;\n      }\n  `;\n\nconst APYContainer = styled.div`\n      font-size: 20px;\n      margin: 12px 0;\n      span {\n          margin-left: 12px;\n          font-weight: bold;\n      }\n  `;\n\nconst NEARInputContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst NEARIcon = () => (\n  <img\n    src={`https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly`}\n    width={26}\n    height={26}\n    alt=\"NEAR Icon\"\n  />\n);\n\nconst NEARTexture = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  margin-left: 10px;\n`;\n\nconst LogoWithText = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst NEARInputComp = ({ value, onChange, error }) => (\n  <input\n    style={{\n      \"text-align\": \"right\",\n      width: \"100%\",\n      background: \"transparent\",\n      border: \"0\",\n      \"font-size\": \"16px\",\n      \"font-weight\": \"bold\",\n      color: error ? \"#ec6868\" : \"white\",\n      outline: \"none\",\n      \"box-shadow\": \"none\",\n      \"margin-right\": \"16px\",\n\n      \"-webkit-appearance\": \"none\",\n      \"-moz-appearance\": \"textfield\",\n    }}\n    placeholder=\"NEAR amount to stake\"\n    value={value}\n    onChange={onChange}\n  />\n);\n\nconst MaxTexture = styled.div`\n  font-size: 24px;\n  color: #4451FD;\n  cursor: pointer;\n`;\n\nconst FooterLink = styled.a`\n    color: #4451FD;\n    text-decoration: underline;\n    transition: all 0.2s ease-in-out;\n    margin-top: 12px;\n`;\n\nconst NEARInput = ({ value, onChange, onClickMax }) => {\n  return (\n    <NEARInputContainer>\n      <LogoWithText>\n        <NEARIcon />\n        <NEARTexture>NEAR</NEARTexture>\n      </LogoWithText>\n      <NEARInputComp\n        value={value}\n        onChange={onChange}\n        error={state.inputError}\n      />\n      <MaxTexture onClick={onClickMax}>MAX</MaxTexture>\n    </NEARInputContainer>\n  );\n};\n\nreturn (\n  <Main>\n    <Title>Stake Your NEAR</Title>\n    <Description>\n      Stake NEAR and receive LiNEAR while earning staking rewards\n    </Description>\n    <APYContainer>\n      APY <span>{apy}</span>\n    </APYContainer>\n    <StakeFormWrapper>\n      <InputWrapper>\n        <NEARInput\n          value={state.inputValue}\n          onChange={(e) => {\n            const targetValue = e.target.value;\n            if (targetValue !== \"\" && !targetValue.match(/^\\d*(\\.\\d*)?$/)) {\n              return;\n            }\n            let stakeAmount = targetValue.replace(/^0+/, \"0\"); // remove prefix 0\n            /** limit 24 decimals */\n            const most24DecimalsPattern = /^-?\\d+(\\.\\d{0,24})?$/;\n            if (!most24DecimalsPattern.test(stakeAmount)) {\n              stakeAmount = value.match(most24DecimalsPattern)[0];\n            }\n            if (\n              nearBalance &&\n              (isNaN(Number(stakeAmount)) ||\n                stakeAmount === \"\" ||\n                Big(stakeAmount).lt(1) ||\n                Big(stakeAmount).gt(Big(nearBalance)))\n            ) {\n              if (\n                isNaN(Number(stakeAmount)) ||\n                stakeAmount === \"\" ||\n                Big(stakeAmount).lt(1)\n              ) {\n                State.update({\n                  ...state,\n                  inputValue: stakeAmount,\n                  inputError: \"Stake at least 1 NEAR\",\n                });\n              } else if (Big(stakeAmount).gt(Big(nearBalance))) {\n                State.update({\n                  ...state,\n                  inputValue: stakeAmount,\n                  inputError: `Max is ${nearBalance} NEAR`,\n                });\n              } else {\n                State.update({\n                  ...state,\n                  inputValue: stakeAmount,\n                  inputError: \"\",\n                });\n              }\n              return;\n            }\n            State.update({\n              ...state,\n              inputValue: e.target.value,\n              inputError: \"\",\n            });\n          }}\n          onClickMax={() => {\n            if (\n              isNaN(Number(nearBalance)) ||\n              nearBalance === \"\" ||\n              Big(nearBalance).lt(1)\n            ) {\n              State.update({\n                ...state,\n                inputValue: nearBalance,\n                inputError: \"Stake at least 1 NEAR\",\n              });\n              return;\n            } else {\n              State.update({\n                ...state,\n                inputValue: nearBalance,\n                inputError: \"\",\n              });\n            }\n          }}\n        />\n        <HorizentalLine />\n        <BalanceContainer>\n          <p>Balance: {nearBalance} NEAR</p>\n          <p className=\"error\">{state.inputError}</p>\n        </BalanceContainer>\n      </InputWrapper>\n      <StakeButton\n        disabled={disabledStakeButton}\n        onClick={async () => {\n          const stakeAmount = state.inputValue;\n          if (\n            nearBalance &&\n            (isNaN(Number(stakeAmount)) ||\n              stakeAmount === \"\" ||\n              new Big(stakeAmount).lt(1) ||\n              new Big(stakeAmount).gt(new Big(nearBalance)))\n          ) {\n            if (\n              isNaN(Number(stakeAmount)) ||\n              stakeAmount === \"\" ||\n              new Big(stakeAmount).lt(1)\n            ) {\n              State.update({ ...state, inputError: \"Stake at least 1 NEAR\" });\n            } else if (Big(stakeAmount).gt(Big(nearBalance))) {\n              State.update({\n                ...state,\n                inputError: `Max is ${nearBalance} NEAR`,\n              });\n            } else setInputError(\"\");\n            return;\n          }\n          Near.call(\n            LiNEAR_CONTRACT_ID,\n            \"deposit_and_stake\",\n            {},\n            undefined,\n            new Big(state.inputValue)\n              .mul(new Big(10).pow(NEAR_DECIMALS))\n              .toFixed(0)\n          );\n          State.update(INITIAL_VALUE);\n        }}\n      >\n        Stake\n      </StakeButton>\n    </StakeFormWrapper>\n    <FooterLink\n      href=\"https://app.linearprotocol.org/?tab=unstake\"\n      target=\"_blank\"\n    >\n      Go to Unstake <strong>$LiNEAR</strong>\n    </FooterLink>\n  </Main>\n);\n", "branch.draft.metadata": NaN, "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.defi": NaN, "metadata.tags.linear": NaN, "metadata.tags.liquid": NaN, "metadata.tags.near": NaN, "metadata.tags.staking": NaN, "branch.draft.metadata.description": NaN, "branch.draft.metadata.image.ipfs_cid": NaN, "branch.draft.metadata.linktree.website": NaN, "branch.draft.metadata.name": NaN, "branch.draft.metadata.tags.defi": NaN, "branch.draft.metadata.tags.linear": NaN, "branch.draft.metadata.tags.liquid": NaN, "branch.draft.metadata.tags.near": NaN, "branch.draft.metadata.tags.staking": NaN, "branch": NaN}