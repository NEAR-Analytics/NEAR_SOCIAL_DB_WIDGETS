{"tx_hash": "HSDEjWdB2EiuwWATBJ1AfNHp222xCzWuDSW5zQZZZqc2", "action_id_social": "4VU2zME8Wq48ghgdEz82Kkd3MhwQNu9XoQRpHoQFAkts-0-widget", "block_id": 90328484, "block_timestamp": "2023-04-24 14:31:33.084", "signer_id": "bos_check.near", "widget_name": "TxStream", "source_code": "const MAX_BLOCKS = 50;\nconst MAX_RETRIES = 15;\n\nState.init({\n  currentBlockNumber: props.blockNumber || null,\n  nexBlockNumber: null,\n  blocksData: new Map(),\n  retryCount: 0,\n});\n\nconst endPointUrl = props.endPointUrl || \"https://mainnet.aurora.dev\";\n\nconst fetchBlockData = (number) => {\n  const response = fetch(endPointUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByNumber\",\n      params: [number, true],\n      id: 1,\n    }),\n  });\n\n  if (!response) return \"\";\n  const data = response?.body?.result;\n\n  if (data) {\n    const newData = new Map(state.blocksData);\n    const block = {\n      number: data.number,\n      hash: data.hash,\n      timestamp: data.timestamp,\n      transactions: data.transactions,\n    };\n\n    newData.set(data.number, block);\n\n    if (newData.size > MAX_BLOCKS) {\n      const oldestKey = Array.from(newData.keys())[0];\n      newData.delete(oldestKey);\n    }\n\n    State.update({\n      blocksData: newData,\n      currentBlockNumber: number,\n      nextBlockNumber: number + 1,\n      retryCount: 0,\n    });\n  } else {\n    if (state.retryCount >= MAX_RETRIES) {\n      State.update({\n        nextBlockNumber: number + 1,\n        retryCount: 0,\n      });\n    } else {\n      State.update({\n        retryCount: state.retryCount + 1,\n      });\n    }\n  }\n};\n\nconst fetchCurrentBlockNumber = () => {\n  const response = fetch(endPointUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"eth_blockNumber\",\n      params: [],\n      id: 1,\n    }),\n  });\n\n  if (!response) return;\n  if (response?.body?.result) {\n    State.update({\n      currentBlockNumber: parseInt(response.body.result, 16),\n    });\n  }\n};\n\nif (!endPointUrl) {\n  return (\n    <div>\n      <p>Please provide an endpoint URL</p>\n    </div>\n  );\n}\n\nif (!state.currentBlockNumber) {\n  fetchCurrentBlockNumber();\n}\n\nif (state.currentBlockNumber && !state.nextBlockNumber) {\n  fetchBlockData(state.currentBlockNumber);\n}\n\nif (\n  state.currentBlockNumber &&\n  state.nextBlockNumber &&\n  state.currentBlockNumber !== state.nextBlockNumber\n) {\n  setTimeout(() => {\n    fetchBlockData(state.nextBlockNumber);\n  }, 500);\n}\n\nconst List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ListItem = styled.li`\n  margin-bottom: 20px;\n  border: 1px solid #fff;\n  padding: 20px;\n`;\n\nreturn (\n  <div>\n    <h1>Tx stream</h1>\n\n    <p>Current block number: {state.currentBlockNumber}</p>\n\n    {state.blocksData.size > 0 ? (\n      <List>\n        {Array.from(state.blocksData.values())\n          .reverse()\n          .map((block) => {\n            if (!block) {\n              return null;\n            }\n\n            return block.transactions.map((tx) => {\n              if (!tx) {\n                return null;\n              }\n\n              return (\n                <ListItem key={tx.hash}>\n                  <p>\n                    Tx hash\n                    <br />\n                    {tx.hash}\n                  </p>\n                  <p>\n                    Block number\n                    <br />\n                    {tx.blockNumber}\n                  </p>\n                  <p>\n                    Tx from\n                    <br />\n                    {tx.from}\n                  </p>\n                  {(tx.to || tx.contractAddress) && (\n                    <p>\n                      Tx to\n                      <br />\n                      {tx.to || tx.contractAddress}\n                    </p>\n                  )}\n                </ListItem>\n              );\n            });\n          })}\n      </List>\n    ) : null}\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos_check.near/widget/TxStream", "metadata.tags.ethdenver2023": null}