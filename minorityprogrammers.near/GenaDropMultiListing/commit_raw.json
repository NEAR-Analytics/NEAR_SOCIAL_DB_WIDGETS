{"tx_hash": "DYrYBHUR21gwDuXfCpWBMKmZrLygyd3yJKK1u3Qd1ZvU", "action_id_social": "Psau8S1Xg3FoRkhNCFj2ukVpoZWWWDqdyZoJaLs4g8V-0-widget", "block_id": 87627022, "block_timestamp": "2023-03-19 06:55:39.981", "signer_id": "minorityprogrammers.near", "widget_name": "GenaDropMultiListing", "source_code": "// NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\nconst image = props.image;\nconst onChange = props.onChange;\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\nconst accountId = context.accountId; // add check for context it\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n}; // just in case need to pass in a NFT\nconst contractId = \"genadrop-contract.nftgen.near\"; // default nft contract\nconst tokenId = \"1679119560198\"; // maybe condtional check if props is eempty // default nft\nconst fewfarmarket = \"market.fewandfar.near\";\nconst tradeportmarket = \"market.tradeport.near\";\n// fewfar link // display button if listed // asking them for format and they are working on a fix // https://fewfar.com/genadrop-single-nft-near/1675689302938/\nconst tradeportLink =\n  \"https://www.tradeport.xyz/near/collection/\" + contractId + \"/\" + tokenId;\n// maybe utilize the helper funciton here\n// const fewfarlink =\nconst defaultCustomMarket = \"apollo42.near\";\nconst msg =\n  '{\"price\":' +\n  '\"' +\n  amount +\n  '\"' +\n  ',\"market_type\":\"sale\",\"ft_token_id\":\"near\"}';\n// need to find custom market link to work with\n\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\n  token_id: tokenId,\n});\nconsole.log(tokenInfo.approved_account_ids);\ninitState({\n  contractId: contractId,\n  tokenId: tokenId,\n  fewfar: false,\n  tradeport: true,\n  amount: amount,\n  msg: msg,\n  tradeportLink: tradeportLink,\n  custom: false,\n  customMarketLink: defaultCustomMarket,\n  validMarketLink: true,\n  nftMetadata: nftMetadata,\n  tokenInfo: tokenInfo,\n  ownsNFT: false, // change this and check intially\n  url: image.url,\n  nft: image.nft ?? {}, // from santiago\n});\nfunction ownsNFT() {\n  const ownsNFT = context.accountId === state.tokenInfo.owner_id;\n  State.update({\n    ownsNFT: ownsNFT,\n  });\n}\nownsNFT();\nfunction updateTradeportLink() {\n  // Function body goes here\n  const updatedLink =\n    \"https://www.tradeport.xyz/near/collection/\" +\n    state.contractId +\n    \"/\" +\n    state.tokenId;\n  State.update({\n    tradeportLink: updatedLink,\n  });\n}\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\nconst onChangeAmount = (amount) => {\n  const scientificNotationNumber = \"1.23e+7\";\n\n  const [mantissa, exponent] = scientificNotationNumber.split(\"e+\");\n  const [integerPart, fractionalPart] = mantissa.split(\".\");\n\n  let result = parseInt(integerPart);\n  console.log(result); // Output: \"12300000\"\n\n  if (fractionalPart) {\n    let fractionalValue = parseInt(fractionalPart);\n    for (let i = 0; i < exponent; i++) {\n      fractionalValue *= 10;\n    }\n    for (let i = 0; i < exponent; i++) {\n      result *= 10;\n    }\n    result += fractionalValue;\n  } else {\n    for (let i = 0; i < exponent; i++) {\n      result *= 10;\n    }\n  }\n\n  const bigIntNumberString = result.toString();\n  console.log(bigIntNumberString); // Output: \"12300000\"\n\n  const msgConcat =\n    '{\"price\":' +\n    '\"' +\n    amount +\n    '\"' +\n    ',\"market_type\":\"sale\",\"ft_token_id\":\"near\"}';\n  // console.log(bigIntNumber);\n  console.log(amount);\n  State.update({\n    amount,\n    msg: msgConcat,\n  });\n};\n\nconst onChangeMsg = () => {\n  State.update({\n    msg: msg,\n  });\n};\n\nconst onChangeContract = (contractId) => {\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\n  State.update({\n    contractId,\n    nftMetadata,\n  });\n  onChangeToken(state.tokenId);\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeToken = (tokenId) => {\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\n    token_id: tokenId,\n  });\n  State.update({\n    tokenId,\n    tokenInfo,\n  });\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeCustomMarket = (customMarketLink) => {\n  const validMarketLink = isNearAddress(customMarketLink);\n  State.update({\n    customMarketLink,\n    validMarketLink,\n  });\n};\n\nconst updateLink = () => {\n  if (state.contractId && state.tokenId) {\n  }\n};\n/* HELPER FUNCTION */\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst list = () => {\n  if (!accountId) {\n    return;\n  }\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 10000000000000000000000; // 0.01 near\n  Near.call(\n    [\n      state.tradeport\n        ? {\n            contractName: tradeportmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.tradeport\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: tradeportmarket,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: fewfarmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: fewfarmarket,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n      state.custom\n        ? {\n            contractName: state.customMarketLink,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.custom\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: state.customMarketLink,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n    ].filter((entry) => entry !== null)\n  );\n};\nconst selectFewFar = () => {\n  State.update({\n    fewfar: !state.fewfar,\n  });\n};\nconst selectTradeport = () => {\n  State.update({\n    tradeport: !state.tradeport,\n  });\n};\nconst selectCustom = () => {\n  State.update({\n    custom: !state.custom,\n  });\n}; // need better helper function for checking whether valid NEAR address\nreturn (\n  <div>\n    <h1> \ud83d\udecd\ufe0f List NFT to Multiple Marketplaces </h1>\n    <h3>\n      \ud83d\udca7\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n        GenaDrop\n      </a>\n      <Widget\n        src=\"miraclx.near/widget/Attribution\"\n        props={{ authors: [ownerId], dep: true }}\n      />\n    </h3>\n    <div>\n      <div\n        className=\"p-2\"\n        style={{\n          background: \"#fdfdfd\",\n          border: \"solid 1px #dee2e6\",\n          borderTop: 0,\n          borderBottomLeftRadius: \".375rem\",\n          borderBottomRightRadius: \".375rem\",\n          minHeight: \"9em\",\n        }}\n      >\n        <div>\n          <div className=\"mt-2\">\n            <Widget\n              src={`sainthiago.near/widget/nft-selector`}\n              props={{\n                onChange: ({ contractId, tokenId }) => {\n                  State.update({\n                    contractId: contractId,\n                    tokenId: tokenId,\n                  });\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        ContractID\n        <input\n          type=\"text\"\n          placeholder={state.contractId}\n          onChange={(e) => onChangeContract(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Token ID\n        <input\n          type=\"text\"\n          placeholder={state.tokenId}\n          onChange={(e) => onChangeToken(e.target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={state.fewfar}\n            onChange={selectFewFar}\n            id=\"fewfarbox\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"myCheckbox\">\n            List to Few and Far\n          </label>\n        </div>\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={state.tradeport}\n            onChange={selectTradeport}\n            id=\"tradeportbox\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"myCheckbox\">\n            List to Tradeport\n          </label>\n        </div>\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={state.custom}\n            onChange={selectCustom}\n            id=\"custombox\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"myCheckbox\">\n            Enter Custom Marketplace Address\n          </label>\n        </div>\n      </div>\n      {state.custom && (\n        <div className=\"col-lg-6 mb-2\">\n          Custom Marketplace\n          <input\n            type=\"text\"\n            placeholder={state.customMarketLink}\n            onChange={(e) => onChangeCustomMarket(e.target.value)}\n          />\n        </div>\n      )}\n    </div>\n    {state.custom && !state.validMarketLink && (\n      <div className=\"alert alert-danger\">\n        <i className=\"bi bi-x\"></i> Not a Valid NEAR Contract for your custom\n        Marketplace\n      </div>\n    )}\n    <div className=\" mb-2\">\n      Enter Price You Want to List (In NEAR) (WIP-Buggy)\n      <input\n        type=\"number\"\n        placeholder={state.amount / 1e24}\n        onChange={(e) => onChangeAmount(e.target.value * 1e24)}\n      />\n      <p>\n        * You will pay some gas in \u24c3 to deposit NEAR to marketplace address then\n        list your NFT\n      </p>\n    </div>\n    {state.ownsNFT && (\n      <button className=\"btn btn-primary mt-3\" onClick={list}>\n        List\n      </button>\n    )}\n    {!state.ownsNFT && (\n      <button className=\"btn btn-secondary mt-3\">\n        You Can Only List An NFT You Own\n      </button>\n    )}\n\n    <a\n      href={state.tradeportLink}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      class=\"btn btn-dark mt-3\"\n    >\n      View on Tradeport\n    </a>\n    <br></br>\n    <div className=\"row\">\n      <div className=\"col-lg-6 border border-secondary rounded\">\n        <h1>\ud83d\uddbc\ufe0f NFT Details</h1>\n        <p>Collection Name: </p>\n        <h3 className=\"\">{state.nftMetadata.name}</h3>\n        {!state.ownsNFT && (\n          <div className=\"alert alert-danger\">\n            <i className=\"bi bi-x\"></i> You do not own this NFT & cannot list it\n            Marketplace\n          </div>\n        )}\n        {state.ownsNFT && (\n          <div className=\"alert alert-success\">\n            <i className=\"bi bi-x\"></i> You own this NFT\n          </div>\n        )}\n        <p>NFT Name: </p>\n        <h4 className=\"\">{state.tokenInfo.metadata.title}</h4>\n        <p className=\"\">Description: {state.tokenInfo.metadata.description}</p>\n        <p>\n          <a href={state.tokenInfo.media} target=\"_blank\">\n            {state.tokenInfo.media}\n          </a>\n        </p>\n        <Widget\n          src=\"mob.near/widget/NftImage\"\n          props={{\n            nft: { tokenId: state.tokenId, contractId: state.contractId },\n            className: \"col-lg-12\",\n          }}\n        />\n      </div>\n      <div className=\"col-lg-6\">\n        <h1> Listed Markets (not updating)</h1>\n        <div>\n          {typeof state.tokenInfo.approved_account_id === \"object\" &&\n            Object.keys(state.tokenInfo.approved_account_ids).map((key) => (\n              <p>\n                {key}: {state.tokenInfo.approved_account_ids[key]}\n              </p>\n            ))}\n        </div>\n      </div>\n    </div>\n\n    <br></br>\n    <Widget\n      src=\"minorityprogrammers.near/widget/genadropMinter\"\n      props={{ authors: [ownerId], dep: true }}\n    />\n  </div>\n);\n\n// TODO: Only listing to marketplaces (already listed) to marketplaces that this nft hasnt been listed on\n// add buttons to links in the marketplaces if they have been listed\n// add ability to list on different marketplaces at different price\n// add conditional for not being able to list if their is invalid custom maretkpalce trying to list to or invalid anything\n", "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/minorityprogrammers.near/widget/GenaDropMultiListing", "metadata.name": NaN, "metadata": NaN, "metadata.description": NaN, "metadata.image.nft.contractId": NaN, "metadata.image.nft.tokenId": NaN, "metadata.linktree.website": NaN, "metadata.tags.few-and-far": NaN, "metadata.tags.fewfar": NaN, "metadata.tags.genadrop": NaN, "metadata.tags.listing": NaN, "metadata.tags.nft": NaN, "metadata.tags.nft-approve": NaN, "metadata.tags.nft-listing": NaN, "metadata.tags.nft-marketplace": NaN, "metadata.tags.tradeport": NaN, "branch.draft": NaN}