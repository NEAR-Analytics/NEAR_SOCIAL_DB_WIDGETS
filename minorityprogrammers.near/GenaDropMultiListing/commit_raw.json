{"tx_hash": "2pRvnN4Rso19N4Cz419meBhEUVsu2dG2RTREZsjKGDSt", "action_id_social": "5khiYEGQTGmXA7d9AymAtrp6LsLyaajDty9xJXYt9ctm-0-widget", "block_id": 87593642, "block_timestamp": "2023-03-18 20:20:53.971", "signer_id": "minorityprogrammers.near", "widget_name": "GenaDropMultiListing", "source_code": "// NEED TO ADD CONDITIONALS FOR MARKETPLACE LISITNG AND FEW AND FAR, NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\n// Define the NEAR amount to list at\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // maybe off\nconst accountId = context.accountId; // add check for context it\n\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n};\nconst contractId = \"genadrop-contract.nftgen.near\"; // pass as\n// error for serialization of reciever id, maybe need a buffer\nconst tokenId = \"1679119560198\"; // maybe condtional check if props is eempty\nconst fewfarmarket = \"market.fewandfar.near\";\nconst tradeportmarket = \"market.tradeport.near\";\n// tradeport link https://www.tradeport.xyz/near/collection/genadrop-contract.nftgen.near/1679119560198\n// fewfar link // display button if listed\n// add marketplaces listed state\nconst tradeportLink =\n  \"https://www.tradeport.xyz/near/collection/\" + contractId + \"/\" + tokenId;\n// maybe utilize the helper funciton here\n\nconst msg =\n  '{\"price\":' +\n  '\"' +\n  amount +\n  '\"' +\n  ',\"market_type\":\"sale\",\"ft_token_id\":\"near\"}';\n\ninitState({\n  contractId: contractId,\n  tokenId: tokenId,\n  fewfar: false,\n  tradeport: true,\n  amount: amount,\n  msg: msg,\n  tradeportLink: tradeportLink,\n});\nfunction updateTradeportLink() {\n  // Function body goes here\n  const updatedLink =\n    \"https://www.tradeport.xyz/near/collection/\" +\n    state.contractId +\n    \"/\" +\n    state.tokenId;\n  State.update({\n    tradeportLink: updatedLink,\n  });\n  console.log(state.tradeportLink);\n}\n\nconst onChangeAmount = (amount) => {\n  const msgConcat =\n    '{\"price\":' +\n    '\"' +\n    amount +\n    '\"' +\n    ',\"market_type\":\"sale\",\"ft_token_id\":\"near\"}';\n  console.log(msgConcat);\n  State.update({\n    amount,\n    msg: msgConcat,\n  });\n};\n\nconst onChangeMsg = () => {\n  State.update({\n    msg: msg,\n  });\n};\n\nconst onChangeContract = (contractId) => {\n  State.update({\n    contractId,\n  });\n  updateTradeportLink();\n};\n\nconst onChangeToken = (tokenId) => {\n  State.update({\n    tokenId,\n  });\n  updateTradeportLink();\n};\n\nconst updateLink = () => {\n  if (state.contractId && state.tokenId) {\n  }\n};\n\n// improve this so it shows in same transaction\nconst list = () => {\n  if (!accountId) {\n    return;\n  }\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 10000000000000000000000; // 0.01 near\n  Near.call(\n    [\n      state.tradeport\n        ? {\n            contractName: tradeportmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.tradeport\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: tradeportmarket,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: fewfarmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: fewfarmarket,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n    ].filter((entry) => entry !== null)\n  );\n};\nconst selectFewFar = () => {\n  State.update({\n    fewfar: !state.fewfar,\n  });\n};\nconst selectTradeport = () => {\n  State.update({\n    tradeport: !state.tradeport,\n  });\n};\n\n// nneed to add checkbox for which marketplaces\nreturn (\n  <div>\n    <h1> \ud83d\udecd\ufe0f List NFT to Multiple Marketplaces </h1>\n    <h3>\ud83d\udca7 by GenaDrop</h3>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        ContractID\n        <input\n          type=\"text\"\n          placeholder={state.contractId}\n          onChange={(e) => onChangeContract(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Token ID\n        <input\n          type=\"text\"\n          placeholder={state.tokenId}\n          onChange={(e) => onChangeToken(e.target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={state.fewfar}\n            onChange={selectFewFar}\n            id=\"fewfarbox\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"myCheckbox\">\n            List to Few and Far\n          </label>\n        </div>\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={state.tradeport}\n            onChange={selectTradeport}\n            id=\"tradeportbox\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"myCheckbox\">\n            List to Tradeport\n          </label>\n        </div>\n      </div>\n    </div>\n    <div className=\" mb-2\">\n      Enter Price Your Want to List (In NEAR)\n      <input\n        type=\"number\"\n        placeholder={state.amount / 1e24}\n        onChange={(e) => onChangeAmount(e.target.value * 1e24)} // maybe 1e24 degen match\n      />\n      <p>\n        * You will pay some gas in \u24c3 to deposit NEAR to marketplace address then\n        list your NFT\n      </p>\n    </div>\n    <button className=\"btn btn-primary mt-3\" onClick={list}>\n      List\n    </button>\n    <a\n      href={state.tradeportLink}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      class=\"btn btn-secondary mt-3\"\n    >\n      View on Tradeport\n    </a>\n    <h1>Marketplaces this NFT is Already Listed On (Not Ready)</h1>\n    <h3>Here are marketplaces they already listed on</h3>\n\n    <Widget\n      src=\"mob.near/widget/NftImage\"\n      props={{\n        nft: { tokenId: state.tokenId, contractId: state.contractId },\n        className: \"img-fluid\",\n      }}\n    />\n  </div>\n);\n\n// future limit where you can list to based on where they are already listed\n// add buttons to links in the marketplaces\n// add mint to genadrop\n// add ability to list on different marketplaces to different pirces\n", "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/minorityprogrammers.near/widget/GenaDropMultiListing", "metadata.name": NaN, "metadata": NaN, "metadata.description": NaN, "metadata.image.nft.contractId": NaN, "metadata.image.nft.tokenId": NaN, "metadata.linktree.website": NaN, "metadata.tags.few-and-far": NaN, "metadata.tags.fewfar": NaN, "metadata.tags.genadrop": NaN, "metadata.tags.listing": NaN, "metadata.tags.nft": NaN, "metadata.tags.nft-approve": NaN, "metadata.tags.nft-listing": NaN, "metadata.tags.nft-marketplace": NaN, "metadata.tags.tradeport": NaN, "branch.draft": NaN}