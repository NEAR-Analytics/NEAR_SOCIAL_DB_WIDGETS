{"tx_hash": "4NZnt8ktbuygdU4neYnQGWqRitH34V7k7U8A2nF1Tg1g", "action_id_social": "GAKZ3D5qjM2XjqZrkXedJjbpcpYeyRdRj6TLpH3CREtZ-0-widget", "block_id": 94244251, "block_timestamp": "2023-06-15T13:58:36.471Z", "signer_id": "minorityprogrammers.near", "widget_name": "ETH_connect", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\ninitState({\n  sender,\n});\n\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option value={tokens[token]}>{token}</option>\n));\n\nconst setSendTo = (sendTo) => {\n  const receiver = Ethers.resolveName(sendTo);\n  State.update({ sendTo, receiver: receiver ?? \"\" });\n  refreshBalances();\n};\n\nconst setToken = (token) => {\n  State.update({ token });\n  getTokenDecimals();\n};\n\nconst getTokenBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(state.tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getTokenDecimals = () => {\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n      refreshBalances();\n    });\n};\n\nconst refreshBalances = () => {\n  getTokenBalance(state.sender).then((value) => {\n    State.update({ senderBalance: value });\n  });\n\n  getTokenBalance(state.receiver).then((value) => {\n    State.update({ receiverBalance: value });\n  });\n};\n\nconst sendTokens = () => {\n  const erc20 = new ethers.Contract(\n    state.token,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(state.amount, state.tokenDecimals);\n\n  erc20.transfer(state.receiver, amount);\n\n  console.log(\"transactionHash is \" + transactionHash);\n};\n\nreturn (\n  <>\n    <h3>Your Balance</h3>\n    <div>{state.sender}</div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/minorityprogrammers.near/widget/ETH_connect", "__row_index": 2}