{"tx_hash": "HtxiDvrTiC7piAZ7J1zY8AubQnx2CCGh8LcxnNvmfSfh", "action_id_social": "FKhSNyHCxrV9s8eLLqgatVy7s1PM8uqSyBQLTmFkHKge-0-widget", "block_id": 87539360, "block_timestamp": "2023-03-18 02:54:46.788", "signer_id": "minorityprogrammers.near", "widget_name": "RainbowBridge", "source_code": "// const fetch = require('node-fetch');\n\n// Define the NEAR account and amount to bridge\nconst nearAccount = \"your_near_account\";\nconst amount = \"1000000000000000000\"; // 1 NEAR\n\n// Define the Aurora address to receive the bridged NEAR\nconst accountId = props.accountId || context.accountId;\n\nconst auroraAddress = \"0x97B882530830a10f07A9f9A733cB7d0491F808Dc\"; // minority programmersEth address\n\ninitState({\n  near_sender: accountId, // not necessary that account id is here unless for two way bridge, takne from context\n  near_amount: amount,\n  ethereum_receiver: auroraAddress,\n});\n// Define the Rainbow Bridge API endpoint\nconst bridgeEndpoint = \"https://bridge-api.mainnet.near.org\";\n\nconst onChangeAddress = (ethereum_receiver) => {\n  State.update({\n    ethereum_receiver,\n  });\n};\n\nconst onChangeNEAR = (near_amount) => {\n  State.update({\n    near_amount,\n  });\n};\n\n// Define the bridge method and parameters\nconst method = \"eth.near_bridge\";\n\nconst bridge = () => {\n  const params = {\n    near_sender: accountId,\n    near_amount: amount,\n    ethereum_receiver: auroraAddress,\n  };\n  let response = fetch(\"https://byz-multi-chain-01.hasura.app/v1/graphql\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: 0,\n      method,\n      params,\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n\n// Make the API request to the Rainbow Bridge endpoint\n// const bridge = fetch(bridgeEndpoint, {\n//   method: \"POST\",\n//   body: JSON.stringify({\n//     jsonrpc: \"2.0\",\n//     id: 0,\n//     method,\n//     params,\n//   }),\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// })\n//   .then((response) => response.json())\n//   .then((data) => console.log(data.result))\n//   .catch((error) => console.error(error));\n\nreturn (\n  <div>\n    <div className=\" mb-2\">\n      Aurora Address Your Want to Bridge\n      <input\n        type=\"text\"\n        placeholder={state.ethereum_receiver}\n        onChange={(e) => onChangeAddress(e.target.value)}\n      />\n    </div>\n    <div className=\" mb-2\">\n      Enter Amount of NEAR to Bridge\n      <input\n        type=\"number\"\n        placeholder={state.near_amount / 1e18}\n        onChange={(e) => onChangeNEAR(e.target.value * 1e18)} // maybe 1e24 degen match\n      />\n      <p>\n        * You will pay some extra gas in \u24c30.1 to bridge and the asset will be\n        wrapped NEAR on Aurora\n      </p>\n    </div>\n    <button className=\"btn btn-primary mt-3\" onClick={bridge}>\n      Bridge\n    </button>\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/minorityprogrammers.near/widget/RainbowBridge", "metadata.image.url": NaN, "metadata.tags.ethdenver2023": NaN, "metadata.linktree.website": "rainbowbridge.app/transfer", "metadata.name": "Rainbow Bridge: NEAR -> Aurora (WIP)", "metadata.tags.aurora": "", "metadata.description": "Rainbow Bridge WIP: NEAR -> Aurora ", "metadata.image.ipfs_cid": "bafkreidegnrcqi5uuirgqiv2i6fi3k3pdmeszfxyj3in7dwixkjsx2l5x4", "metadata.tags.bridge": ""}