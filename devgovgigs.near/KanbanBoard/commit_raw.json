{"tx_hash": "ETN8yAnGgB87TN4RRGWGY4EpDCUbBRvF4yaNwSLTEipv", "action_id_social": "2kr7JL4YweKoaUYcRcZCDWH8MzsKwNNA7xUEWh4DWkcf-0-widget", "block_id": 82373249, "block_timestamp": "2023-01-07 02:30:13.064", "signer_id": "devgovgigs.near", "widget_name": "KanbanBoard", "source_code": "const ownerId = \"devgovgigs.near\";\n\nconst requiredLabels = props.requiredLabels ?? [\"near-social\"];\nconst columnLabels = props.columnLabels ?? [\n  \"widget\",\n  \"integration\",\n  \"feature-request\",\n];\n\nconst requiredPostsNested = requiredLabels.map((rl) => {\n  return Near.view(ownerId, \"get_posts_by_label\", {\n    label: rl,\n  });\n});\nconst requiredPostsFlat = requiredPostsNested.flat(1);\nconst requiredPostsSet = new Set(requiredPostsFlat);\n\nconst postsPerLabel = columnLabels.map((cl) => {\n  let allIds = Near.view(ownerId, \"get_posts_by_label\", {\n    label: cl,\n  }).reverse();\n  if (requiredLabels.length > 0) {\n    return { label: cl, posts: allIds.filter((i) => requiredPostsSet.has(i)) };\n  } else {\n    // No extra filtering is required.\n    return { label: cl, posts: allIds };\n  }\n});\n\nreturn (\n  <div class=\"row\">\n    {postsPerLabel.map((col) => {\n      return (\n        <div class=\"col\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <span class=\"badge text-bg-primary\">{col.label}</span>\n            </div>\n            <div class=\"card-body border-secondary\">\n              {col.posts.map((postId) => {\n                return (\n                  <Widget\n                    src={`${ownerId}/widget/CompactPost`}\n                    props={{ id: postId }}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      );\n    })}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.near/widget/KanbanBoard"}