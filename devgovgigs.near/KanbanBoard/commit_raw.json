{"tx_hash": "8hPeJiPPDGiTpiC7oX11u7Zi1M2vHFy2XkMhcA1AZYpp", "action_id_social": "8FNon6fMFXTRCL98Pj4csM2JSW191keWv9ubp6x8Y7bk-0-widget", "block_id": 83159458, "block_timestamp": "2023-01-17 13:29:49.541", "signer_id": "devgovgigs.near", "widget_name": "KanbanBoard", "source_code": "const ownerId = \"devgovgigs.near\";\n\nconst requiredLabels = props.requiredLabels ?? [\"near-social\"];\nconst excludedLabels = props.excludedLabels ?? [\"nft\"];\nconst columnLabels = props.columnLabels ?? [\n  \"widget\",\n  \"integration\",\n  \"feature-request\",\n];\n\nconst labelsToIdSet = (labels) => {\n  const ids = labels.map((label) => {\n    return (\n      Near.view(ownerId, \"get_posts_by_label\", {\n        label,\n      }) ?? []\n    );\n  });\n  const idsFlat = ids.flat(1);\n  return new Set(idsFlat);\n};\n\nconst requiredPostsSet = labelsToIdSet(requiredLabels);\nconst excludedPostsSet = labelsToIdSet(excludedLabels);\n\nconst postsPerLabel = columnLabels.map((cl) => {\n  let allIds = (\n    Near.view(ownerId, \"get_posts_by_label\", {\n      label: cl,\n    }) ?? []\n  ).reverse();\n  if (requiredLabels.length > 0) {\n    return {\n      label: cl,\n      posts: allIds.filter(\n        (i) => requiredPostsSet.has(i) && !excludedPostsSet.has(i)\n      ),\n    };\n  } else {\n    // No extra filtering is required.\n    return { label: cl, posts: allIds };\n  }\n});\n\nreturn (\n  <div>\n    <div class=\"row mb-2\">\n      {props.boardId ? (\n        <div class=\"col\">\n          <small class=\"text-muted\">\n            <a\n              class=\"card-link\"\n              href={`https://near.social/#/devgovgigs.near/widget/Ideas?selectedBoardId=${props.boardId}`}\n              role=\"button\"\n              target=\"_blank\"\n              title=\"Link to this board\"\n            >\n              <div class=\"hstack gap-3\">\n                <div class=\"bi bi-share\"></div>\n                <div>Link to this board</div>\n              </div>\n            </a>\n          </small>\n        </div>\n      ) : null}\n\n      {requiredLabels.length > 0 ? (\n        <div class=\"col\">\n          <small class=\"text-muted\">\n            Required labels:\n            {requiredLabels.map((label) => {\n              return (\n                <a\n                  href={`https://near.social/#/devgovgigs.near/widget/Ideas?label=${label}`}\n                >\n                  <span class=\"badge text-bg-primary me-1\">{label}</span>\n                </a>\n              );\n            })}\n          </small>\n        </div>\n      ) : null}\n      {excludedLabels.length > 0 ? (\n        <div class=\"col\">\n          <small class=\"text-muted\">\n            Excluded labels:\n            {excludedLabels.map((label) => {\n              return (\n                <a\n                  href={`https://near.social/#/devgovgigs.near/widget/Ideas?label=${label}`}\n                >\n                  <span class=\"badge text-bg-primary me-1\">{label}</span>\n                </a>\n              );\n            })}\n          </small>\n        </div>\n      ) : null}\n    </div>\n    <div class=\"row\">\n      {postsPerLabel.map((col) => {\n        return (\n          <div class=\"col-4\">\n            <div class=\"card\">\n              <div class=\"card-body border-secondary\">\n                <h6 class=\"card-title\">\n                  {col.label.toUpperCase()}({col.posts.length})\n                </h6>\n                {col.posts.map((postId) => {\n                  return (\n                    <Widget\n                      src={`${ownerId}/widget/CompactPost`}\n                      props={{ id: postId }}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.near/widget/KanbanBoard"}