{"tx_hash": "BSMCTch3mwApW4PK5eacuY9o6PBUsVwTQ5UGid2C2iwA", "action_id_social": "BhVo4uBiCMTsw575KQXYGgahcnPx4aJyDtuo1UVtcmhB-0-widget", "block_id": 93082765, "block_timestamp": "2023-05-30T20:39:02.220Z", "signer_id": "devgovgigs.near", "widget_name": "gigs-board.pages.Create", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst parentId = props.parentId ?? null;\nconst postId = props.postId ?? null;\nconst mode = props.mode ?? \"Create\";\n\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\nconst labelStrings = (props.labels ? props.labels.split(\",\") : []).concat(\n  referralLabels\n);\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\ninitState({\n  seekingFunding: false,\n  //\n  author_id: context.accountId,\n  // Should be a list of objects with field \"name\".\n  labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings,\n  postType: \"Idea\",\n  name: props.name ?? \"\",\n  description: props.description ?? \"\",\n  amount: props.amount ?? \"\",\n  token: props.token ?? \"NEAR\",\n  supervisor: props.supervisor ?? \"neardevgov.near\",\n  githubLink: props.githubLink ?? \"\",\n  warning: \"\",\n});\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearDevGovGigsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst onSubmit = () => {\n  let labels = state.labelStrings;\n\n  let body = {\n    name: state.name,\n    description: generateDescription(\n      state.description,\n      state.amount,\n      state.token,\n      state.supervisor\n    ),\n  };\n\n  if (state.postType === \"Solution\") {\n    body = {\n      ...body,\n      post_type: \"Submission\",\n      submission_version: \"V1\",\n    };\n  } else {\n    // Idea\n    body = {\n      ...body,\n      post_type: \"Idea\",\n      idea_version: \"V1\",\n    };\n  }\n\n  if (!context.accountId) return;\n\n  let txn = [];\n  if (mode == \"Create\") {\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_post\",\n      args: {\n        parent_id: parentId,\n        labels,\n        body: body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  } else if (mode == \"Edit\") {\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"edit_post\",\n      args: {\n        id: postId,\n        labels,\n        body: body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  }\n  if (mode == \"Create\" || mode == \"Edit\") {\n    if (grantNotify === false) {\n      txn.unshift({\n        contractName: \"social.near\",\n        methodName: \"grant_write_permission\",\n        args: {\n          predecessor_id: nearDevGovGigsContractAccountId,\n          keys: [context.accountId + \"/index/notify\"],\n        },\n        deposit: Big(10).pow(23),\n        gas: Big(10).pow(12).mul(30),\n      });\n    }\n    Near.call(txn);\n  }\n};\n\nconst onIdeaClick = () => {\n  State.update({ postType: \"Idea\", seekingFunding: false });\n};\n\nconst onSolutionClick = () => {\n  State.update({ postType: \"Solution\" });\n};\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst checkLabel = (label) => {\n  Near.asyncView(nearDevGovGigsContractAccountId, \"is_allowed_to_use_labels\", {\n    editor: context.accountId,\n    labels: [label],\n  }).then((allowed) => {\n    if (allowed) {\n      State.update({ warning: \"\" });\n    } else {\n      State.update({\n        warning:\n          'The label \"' +\n          label +\n          '\" is protected and can only be added by moderators',\n      });\n      return;\n    }\n  });\n};\n\nconst setLabels = (labels) => {\n  labels = labels.map((o) => {\n    o.name = normalizeLabel(o.name);\n    return o;\n  });\n  if (labels.length < state.labels.length) {\n    let oldLabels = new Set(state.labels.map((label) => label.name));\n    for (let label of labels) {\n      oldLabels.delete(label.name);\n    }\n    let removed = oldLabels.values().next().value;\n    Near.asyncView(\n      nearDevGovGigsContractAccountId,\n      \"is_allowed_to_use_labels\",\n      { editor: context.accountId, labels: [removed] }\n    ).then((allowed) => {\n      if (allowed) {\n        let labelStrings = labels.map(({ name }) => name);\n        State.update({ labels, labelStrings });\n      } else {\n        State.update({\n          warning:\n            'The label \"' +\n            removed +\n            '\" is protected and can only be updated by moderators',\n        });\n        return;\n      }\n    });\n  } else {\n    let labelStrings = labels.map((o) => {\n      return o.name;\n    });\n    State.update({ labels, labelStrings });\n  }\n};\nconst existingLabelStrings =\n  Near.view(nearDevGovGigsContractAccountId, \"get_all_allowed_labels\", {\n    editor: context.accountId,\n  }) ?? [];\nconst existingLabelSet = new Set(existingLabelStrings);\nconst existingLabels = existingLabelStrings.map((s) => {\n  return { name: s };\n});\n\nconst labelEditor = (\n  <div className=\"col-lg-12 mb-2\">\n    <p className=\"fs-6 fw-bold mb-1\">Labels</p>\n    <Typeahead\n      multiple\n      labelKey=\"name\"\n      onInputChange={checkLabel}\n      onChange={setLabels}\n      options={existingLabels}\n      placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n      selected={state.labels}\n      positionFixed\n      allowNew={(results, props) => {\n        return (\n          !existingLabelSet.has(props.text) &&\n          props.selected.filter((selected) => selected.name === props.text)\n            .length == 0 &&\n          Near.view(\n            nearDevGovGigsContractAccountId,\n            \"is_allowed_to_use_labels\",\n            { editor: context.accountId, labels: [props.text] }\n          )\n        );\n      }}\n    />\n  </div>\n);\n\nconst nameDiv = (\n  <div className=\"col-lg-6 mb-2\">\n    <p className=\"fs-6 fw-bold mb-1\">Title</p>\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n);\n\nconst descriptionDiv = (\n  <div className=\"col-lg-12 mb-2\">\n    <p className=\"fs-6 fw-bold mb-1\">Description</p>\n    <textarea\n      value={state.description}\n      type=\"text\"\n      rows={6}\n      className=\"form-control\"\n      onChange={(event) => State.update({ description: event.target.value })}\n    />\n  </div>\n);\n\nconst isFundraisingDiv = (\n  // This is jank with just btns and not radios. But the radios were glitchy af\n  <>\n    <div class=\"mb-2\">\n      <p class=\"fs-6 fw-bold mb-1\">\n        Are you seeking funding for your solution?\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: true })}\n          />\n          Yes\n        </label>\n      </div>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: !state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: false })}\n          />\n          No\n        </label>\n      </div>\n    </div>\n  </>\n);\n\nconst fundraisingDiv = (\n  <div class=\"d-flex flex-column mb-2\">\n    <div className=\"col-lg-6  mb-2\">\n      Currency\n      <select\n        onChange={(event) => State.update({ token: event.target.value })}\n        class=\"form-select\"\n        aria-label=\"Default select example\"\n      >\n        <option selected value=\"NEAR\">\n          NEAR\n        </option>\n        <option value=\"USDC\">USDC</option>\n        <option value=\"USD\">USD</option>\n      </select>\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      Requested amount <span class=\"text-muted fw-normal\">(Numbers Only)</span>\n      <input\n        type=\"number\"\n        value={parseInt(state.amount) > 0 ? state.amount : \"\"}\n        min={0}\n        onChange={(event) =>\n          State.update({\n            amount: Number(\n              event.target.value.toString().replace(/e/g, \"\")\n            ).toString(),\n          })\n        }\n      />\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      <p class=\"mb-1\">\n        Requested sponsor <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <p style={{ fontSize: \"13px\" }} class=\"m-0 text-muted fw-light\">\n        If you are requesting funding from a specific sponsor, please enter\n        their username.\n      </p>\n      <div class=\"input-group flex-nowrap\">\n        <span class=\"input-group-text\" id=\"addon-wrapping\">\n          @\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Enter username\"\n          value={state.supervisor}\n          onChange={(event) => State.update({ supervisor: event.target.value })}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nfunction generateDescription(text, amount, token, supervisor) {\n  const funding = `###### Requested amount: ${amount} ${token}\\n###### Requested sponsor: @${supervisor}\\n`;\n  if (amount > 0 && token && supervisor) return funding + text;\n  return text;\n}\n\nreturn (\n  <div class=\"bg-light d-flex flex-column flex-grow-1\">\n    {widget(\"components.layout.Banner\")}\n    <div class=\"mx-5 mb-5\">\n      <div aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n          <li class=\"breadcrumb-item\">\n            <a\n              style={{\n                color: \"#3252A6\",\n              }}\n              className=\"fw-bold\"\n              href={href(\"Feed\")}\n            >\n              DevHub\n            </a>\n          </li>\n          <li class=\"breadcrumb-item active\" aria-current=\"page\">\n            Create new\n          </li>\n        </ol>\n      </div>\n      <h4>Create a new post</h4>\n      <p>{state.seekingFunding}</p>\n      <div class=\"card border-light\">\n        <div class=\"card-body\">\n          <p class=\"card-title fw-bold fs-6\">What do you want to create?</p>\n          <div class=\"d-flex flex-row gap-2\">\n            <button\n              onClick={onIdeaClick}\n              type=\"button\"\n              class={`btn btn-outline-secondary`}\n              style={\n                state.postType === \"Idea\"\n                  ? {\n                      backgroundColor: \"#0C7283\",\n                      color: \"#f3f3f3\",\n                    }\n                  : {}\n              }\n            >\n              <i class=\"bi bi-lightbulb\"></i>\n              Idea\n            </button>\n            <button\n              onClick={onSolutionClick}\n              type=\"button\"\n              class={`btn btn-outline-secondary`}\n              style={\n                state.postType !== \"Idea\"\n                  ? {\n                      backgroundColor: \"#0C7283\",\n                      color: \"#f3f3f3\",\n                    }\n                  : {}\n              }\n            >\n              <i class=\"bi bi-rocket\"></i>\n              Solution\n            </button>\n          </div>\n          <p class=\"text-muted w-75 my-1\">\n            {state.postType === \"Idea\"\n              ? \"Get feedback from the community about a problem, opportunity, or need.\"\n              : \"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\"}\n          </p>\n          {state.warning && (\n            <div\n              class=\"alert alert-warning alert-dismissible fade show\"\n              role=\"alert\"\n            >\n              {state.warning}\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"alert\"\n                aria-label=\"Close\"\n                onClick={() => State.update({ warning: \"\" })}\n              ></button>\n            </div>\n          )}\n          <div className=\"row\">\n            {nameDiv}\n            {descriptionDiv}\n            {labelEditor}\n            {state.postType === \"Solution\" && isFundraisingDiv}\n            {state.seekingFunding && fundraisingDiv}\n          </div>\n          <button\n            style={{\n              width: \"7rem\",\n              backgroundColor: \"#0C7283\",\n              color: \"#f3f3f3\",\n            }}\n            className=\"btn btn-light mb-2 p-3\"\n            onClick={onSubmit}\n          >\n            Submit\n          </button>\n        </div>\n        <div class=\"bg-light d-flex flex-row p-1 border-bottom\"></div>\n        <div class=\"card-body\">\n          <p class=\"text-muted m-0\">Preview</p>\n          <div>\n            {widget(\"components.posts.Post\", {\n              isPreview: true,\n              id: 0, // irrelevant\n              post: {\n                author_id: state.author_id,\n                likes: [],\n                snapshot: {\n                  editor_id: state.editor_id,\n                  labels: state.labelStrings,\n                  post_type: state.postType,\n                  name: state.name,\n                  description: generateDescription(\n                    state.description,\n                    state.amount,\n                    state.token,\n                    state.supervisor\n                  ),\n                  github_link: state.githubLink,\n                },\n              },\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.near/widget/gigs-board.pages.Create", "__row_index": 2}