{"tx_hash": "2aVX86fLDb33JtfPT8weZQ9rSwGNb5h2todSHg1XE4eu", "action_id_social": "83ZT7avBk76e7PXD3bULQDiD7QVAGpR7q2p5VqXCXPUZ-0-widget", "block_id": 87990747, "block_timestamp": "2023-03-24 05:09:04.663", "signer_id": "syi216.near", "widget_name": "GNS-Unstake", "source_code": "// FETCH LIDO ABI\n\nconst lidoContract = \"0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\";\n\n//Contrato de gains bridge\nconst gbContract = \"0xDF774A4F3EA5095535f5B8f5b9149caF90FF75Bd\";\nconst gnsLZContract = \"0x3c2269811836af69497E5F486A85D7316753cf62\";\nconst gnsToken = \"0xE5417Af564e4bFDA1c483642db72007871397896\";\nconst gnsStaking = \"0xFb06a737f549Eb2512Eb6082A808fc7F16C0819D\";\n\nconst mainnetLidoContract = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nconst gorliLidoContract = \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\";\nconst tokenDecimals = 18;\nconst contract = \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\";\n\nconst lidoAbi = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/QmawuBDkx1w56AFpZ2hiph1gaVrnq3gyAMRnSH2c9S54TY\"\n);\n\nconst gnsLZEndAbi = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/Qmd3xkYoDxS7ATdvoDzTgF1ojLog7kTqoTeWBhJQfUZ4F9\"\n);\n\nconst gnsTokenAbi = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/QmRNckfDbxxjHBhHqMWewKg2dxfUXpoCumxS6YGRW4uAhq\"\n);\n\nconst gnsStakingAbi = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/QmXj2sEUz2RNubsnnAt5hpBBeHtRzhVMZvJ8vVG5WwTcND\"\n);\n\nconsole.log(lidoAbi);\n\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const contractGNSStaking = new ethers.Contract(\n    gnsStaking,\n    gnsStakingAbi.body,\n    Ethers.provider().getSigner()\n  );\n  contractGNSStaking\n    .users(Ethers.provider().getSigner().getAddress())\n    .then((res) => {\n      console.log(res[0]);\n      return Big(res[0]).div(Big(10).pow(18)).toFixed(2);\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    console.log(\"contrato: \", state.tokenTo);\n    return console.log(\"Amount is missing\");\n  }\n\n  const contractGNSStaking = new ethers.Contract(\n    gnsStaking,\n    gnsStakingAbi.body,\n    Ethers.provider().getSigner()\n  );\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  contractGNSStaking\n    .unstakeTokens(amount, { gasLimit: 3e6 })\n    .then((transactionHash) => {\n      console.log(\"transactionHash is \" + transactionHash);\n    });\n};\n\nconst claimRewards = (strEther, _referral) => {\n  const contractGNSStaking = new ethers.Contract(\n    gnsStaking,\n    gnsStakingAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  console.log(\"contract\", contractGNSStaking);\n  contractGNSStaking.harvest().then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\nconst approveGNS = (strEther, _referral) => {\n  const contractGNSStaking = new ethers.Contract(\n    gnsStaking,\n    gnsStakingAbi.body,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"balance unfixed: \", state.balanceUnfixed);\n  contractGNSTOK\n    .approve(gnsStaking, state.balanceUnfixed, {\n      value: state.balanceUnfixed,\n      gasLimit: 3e4,\n    })\n    .then((th) => {\n      console.log(\"transaction Hash: \", th);\n    });\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  const contractGNSStaking = new ethers.Contract(\n    gnsStaking,\n    gnsStakingAbi.body,\n    Ethers.provider().getSigner()\n  );\n  contractGNSStaking\n    .users(Ethers.provider().getSigner().getAddress())\n    .then((res) => {\n      console.log(res[0]);\n      State.update({\n        balance: Big(res[0]).div(Big(10).pow(18)).toFixed(2),\n      });\n    });\n  contractGNSStaking\n    .pendingRewardDai(Ethers.provider().getSigner().getAddress())\n    .then((res) => {\n      console.log(\"Reward Dai: \", res);\n      State.update({\n        daiBalance: Big(res).div(Big(10).pow(18)).toFixed(10),\n      });\n    });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/Qmdpe64Mm46fvWNVaCroSGa2JKgauUUUE5251Cx9nTKNrs\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Manage stake GNS</div>\n      <div class=\"SubHeader\">Manage stake GNS token on Polygon </div>\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to unstake</span>\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;GNS\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>\n                      <b>Account:</b> {getSender()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\">\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Available rewards to claim</span>\n              </div>\n            </div>\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.daiBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;DAI\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        {!!state.sender ? (\n          <div>\n            <button\n              class=\"LidoStakeFormSubmitContainer mb-4\"\n              onClick={() => claimRewards()}\n            >\n              <span>Claim rewards</span>\n            </button>\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <img\n              src=\"https://research.binance.com/static/images/projects/gains-network/logo.png\"\n              width=\"24\"\n              height=\"24\"\n            />\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                //strEther: (parseFloat(state.balance) - 0.05).toFixed(2),\n                strEther: parseFloat(state.balance).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <div>\n            <button\n              class=\"LidoStakeFormSubmitContainer\"\n              onClick={() => submitEthers(state.strEther, state.sender)}\n            >\n              <span>Unstake</span>\n            </button>\n          </div>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/syi216.near/widget/GNS-Unstake", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.dai": NaN, "metadata.tags.ethdenver2023": NaN, "metadata.tags.gns": NaN, "metadata.tags.polygon": NaN, "metadata.tags.unstake": NaN, "metadata.tags.widget": NaN}