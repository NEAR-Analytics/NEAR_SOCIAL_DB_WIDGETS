{"tx_hash": "Acf2QYGYQK6catopdtPsgVjerv6dNYi1DqH1UbxK3vMc", "action_id_social": "GHHLPDid3V38Lhr9XgokoaNKabbuiLsmM5zSiYhCSkCV-0-widget", "block_id": 80952340, "block_timestamp": "2022-12-18 20:21:31.808", "signer_id": "zavodil.near", "widget_name": "social-avatar-editor", "source_code": "let appName = \"avtr\";\nlet ownerId = \"zavodil.near\";\nlet userId = context.accountId;\nlet contractId = \"avtr.near\";\n\nconst MIN_DEPOSIT = \"200000000000000000000000\";\n\nif (!userId) {\n  return \"Please login to generate a Social Avatar\";\n}\n\nconst RandomAvatar = (paths) => {\n  let palette_colors = [\n    \"svgBackground\",\n    \"background\",\n    \"clothingColor\",\n    \"clothingGraphicsColor\",\n    \"heather\",\n    \"accessoriesColor\",\n    \"hatColor\",\n  ];\n  let hair_colors = [\"hairColor\", \"facialHairColor\"];\n  let skin_colors = [\"skin\"];\n  let components = [\n    \"clothing\",\n    \"skin\",\n    \"top\",\n    \"accessories\",\n    \"clothingGraphic\",\n    \"eyes\",\n    \"eyebrows\",\n    \"mouth\",\n    \"facialHair\",\n  ];\n\n  let result = {};\n\n  components.forEach((component) => {\n    result[component] = Object.keys(paths.components[component])[\n      randomInteger(Object.keys(paths.components[component]).length)\n    ];\n  });\n\n  palette_colors.forEach((color) => {\n    result[color] = Object.keys(paths.colors_categories.palette)[\n      randomInteger(Object.keys(paths.colors_categories.palette).length)\n    ];\n  });\n  hair_colors.forEach((color) => {\n    result[color] = Object.keys(paths.colors_categories.hair)[\n      randomInteger(Object.keys(paths.colors_categories.hair).length)\n    ];\n  });\n  skin_colors.forEach((color) => {\n    result[color] = Object.keys(paths.colors_categories.skin)[\n      randomInteger(Object.keys(paths.colors_categories.skin).length)\n    ];\n  });\n\n  return result;\n  //State.update({ options: result });\n};\n\nfunction randomInteger(max) {\n  return Math.floor(Math.random() * max);\n}\n\nconst defaultState = {\n  options: {},\n  avatarLoaded: false,\n  paths: null,\n};\n\ninitState(defaultState);\n\nif (!state.paths) {\n  const paths = Social.get(`*/${appName}/**`, \"final\");\n\n  if (paths) {\n    State.update({\n      paths,\n      options: RandomAvatar(paths[ownerId][appName]),\n    });\n  }\n\n  return \"Loading\";\n}\n\nconst whiteList = Object.keys(state.paths[ownerId][appName][\"whitelist\"]);\n\nlet paths = state.paths[ownerId][appName];\n\nwhiteList.forEach((accountId) => {\n  Object.keys(state.paths[accountId][appName].components ?? {}).forEach(\n    (type) => {\n      Object.entries(state.paths[accountId][appName].components[type]).forEach(\n        (item) => {\n          if (item[1].price > 0) {\n            item[1].account_id = accountId;\n          }\n          paths.components[type][item[0]] = item[1];\n        }\n      );\n    }\n  );\n});\n\nconst colors = paths.colors;\nconst colorsCategories = paths.colors_categories;\nconst components = paths.components;\nlet getPrice = (options) => {\n  let categories = [\n    \"clothing\",\n    \"accessories\",\n    \"top\",\n    \"clothingGraphic\",\n    \"eyes\",\n    \"eyebrows\",\n    \"mouth\",\n    \"facialHair\",\n  ];\n\n  return categories.reduce(\n    (sum, category) =>\n      new Big(sum)\n        .plus(components[category][options[category]].price ?? 0)\n        .toString(),\n    \"0\"\n  );\n};\n\nconst YoctoToNear = (amountYocto) =>\n  new Big(amountYocto).div(new Big(10).pow(24)).toString();\n\nlet depositYocto = getPrice(state.options);\nlet depositNear = YoctoToNear(depositYocto);\n\nlet itemsMenu = (collection, name) => {\n  //console.log(\"itemsMenu\", name, collection);\n  let items = Object.keys(collection).map((item) => (\n    <option value={item} selected={state.options[name] == item}>\n      {collection[item].name.charAt(0).toUpperCase() +\n        collection[item].name.slice(1)}\n      {(collection[item].price ?? 0) > 0\n        ? ` [${YoctoToNear(collection[item].price)} NEAR]`\n        : \"\"}\n    </option>\n  ));\n  return (\n    <select\n      class=\"form-select\"\n      onChange={(e) => {\n        state.options[name] = e.target.value;\n        State.update({ options: state.options });\n      }}\n    >\n      {items}\n    </select>\n  );\n};\n\nlet colorsMenu = (collection, name) => {\n  //console.log(\"colorsMenu\", name, collection);\n  let items = Object.keys(collection).map((item) => {\n    let color = colors[item];\n    return (\n      <option value={item} selected={state.options[name] == item}>\n        {color.name.charAt(0).toUpperCase() + color.name.slice(1)}\n      </option>\n    );\n  });\n  return (\n    <select\n      class=\"form-select\"\n      onChange={(e) => {\n        state.options[name] = e.target.value;\n        State.update({ options: state.options });\n      }}\n    >\n      {items}\n    </select>\n  );\n};\n\nlet Mint = () => {\n  const gas = 300000000000000;\n  const deposit = new Big(depositYocto).plus(MIN_DEPOSIT).toFixed(0);\n\n  let data = [];\n  Object.entries(state.options).forEach((item) => {\n    data.push([\n      components[item[0]][item[1]].account_id ?? ownerId,\n      item[0],\n      item[1],\n    ]);\n  });\n\n  Near.call(\n    contractId,\n    \"nft_mint\",\n    {\n      receiver_id: userId,\n      data,\n    },\n    gas,\n    deposit\n  );\n};\n\nconst AvatarDiv = styled.div`\n @media (max-width: 576px) {  \n  min-width: 345px;\n  min-height: 345px;\n  margin-bottom: 1rem;\n}\n`;\n\nreturn (\n  <>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-s-12 text-center\" style={style}>\n          <AvatarDiv>\n            <Widget\n              src={`${ownerId}/widget/social-avatar-image`}\n              props={{ paths, options: state.options }}\n            />\n          </AvatarDiv>\n        </div>\n\n        <div class=\"col-md-6 col-s-12\">\n          <div class=\"text-center\">\n            <h4>Set your Near.Social Avatar</h4>\n          </div>\n\n          <div class=\"container-fluid\">\n            <div class=\"row mt\">\n              <div class=\"col\">\n                <div>Eyes</div>\n                {itemsMenu(components.eyes, \"eyes\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Eyebrows</div>\n                {itemsMenu(components.eyebrows, \"eyebrows\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Mouth</div>\n                {itemsMenu(components.mouth, \"mouth\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Top</div>\n                {itemsMenu(components.top, \"top\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Top color</div>\n                {colorsMenu(colorsCategories.palette, \"hatColor\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Hair color</div>\n                {colorsMenu(colorsCategories.hair, \"hairColor\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Skin color</div>\n                {colorsMenu(colorsCategories.skin, \"skin\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Accessories</div>\n                {itemsMenu(components.accessories, \"accessories\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Accessories color</div>\n                {colorsMenu(colorsCategories.palette, \"accessoriesColor\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Facial Hair</div>\n                {itemsMenu(components.facialHair, \"facialHair\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Facial Hair color</div>\n                {colorsMenu(colorsCategories.hair, \"facialHairColor\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <OverlayTrigger\n                placement=\"left\"\n                overlay={\n                  <Tooltip>\n                    Choose \"Graphic Shirt\" for extra graphic options\n                  </Tooltip>\n                }\n              >\n                <div class=\"col\">\n                  <div>Clothing</div>\n                  {itemsMenu(components.clothing, \"clothing\")}\n                </div>\n              </OverlayTrigger>\n\n              <div class=\"col\">\n                <div>Clothing color</div>\n                {colorsMenu(colorsCategories.palette, \"clothingColor\")}\n              </div>\n            </div>\n\n            {state.options.clothing === \"graphicShirt\" && (\n              <div class=\"row mt-2\">\n                <div class=\"col\">\n                  <div>Clothing Graphic</div>\n                  {itemsMenu(components.clothingGraphic, \"clothingGraphic\")}\n                </div>\n\n                <div class=\"col\">\n                  <div>Graphic color</div>\n                  {colorsMenu(\n                    colorsCategories.palette,\n                    \"clothingGraphicsColor\"\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Cirle color</div>\n                {colorsMenu(colorsCategories.palette, \"background\")}\n              </div>\n              <div class=\"col\">\n                <div>Background color</div>\n                {colorsMenu(colorsCategories.palette, \"svgBackground\")}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"container mb-4\">\n      <div class=\"row mt-3\">\n        <div class=\"col text-center\">\n          <div>\n            <button\n              class=\"btn btn-outline-primary\"\n              onClick={() =>\n                State.update({\n                  options: RandomAvatar(state.paths[ownerId][appName]),\n                })\n              }\n            >\n              Random\n            </button>\n            <button onClick={Mint}>Mint an NFT</button>\n          </div>\n          {depositNear > 0 && (\n            <div class=\"pt-2\">\n              Components cost: {depositNear} NEAR. NFT storage: 0.2 NEAR\n            </div>\n          )}\n          {depositNear == \"0\" && (\n            <div class=\"pt-2\">\n              You will be asked to attach 0.2 NEAR for NFT storage\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n    <div class=\"border border-3 p-3 mb-4\">\n      <Widget src={`${ownerId}/widget/owned-social-avatars`} />\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/social-avatar-editor", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.app": NaN}