{"tx_hash": "8XyF8u2QzRzPjjia5CcJ74KTmFArhsfc37FokH6fN71n", "action_id_social": "Dbf64GvEQdPV3Sh3B16zA7qKYUQ95VLMTXkQgj66p5R7-0-widget", "block_id": 80894352, "block_timestamp": "2022-12-18 01:49:09.982", "signer_id": "zavodil.near", "widget_name": "social-avatar-editor", "source_code": "let appName = \"avtr\";\nlet ownerId = \"zavodil.near\";\nlet userId = context.accountId;\nlet contractId = \"avtr.near\";\n\nconst MIN_DEPOSIT = \"200000000000000000000000\";\n\nif (!userId) {\n  return \"Please login to generate a Social Avatar\";\n}\n\nconst defaultState = {\n  svgBackground: \"white\",\n  background: \"black\",\n  clothing: \"graphicShirt\",\n  clothingColor: \"black\",\n  hairColor: \"blonde\",\n  skin: \"pale\",\n  top: \"dreads01\",\n  accessories: \"round\",\n  clothingGraphic: \"skrullOutline\",\n  clothingGraphicsColor: \"red\",\n  eyes: \"default\",\n  eyebrows: \"defaultNatural\",\n  mouth: \"default\",\n  facialHair: \"moustacheMagnum\",\n  facialHairColor: \"auburn\",\n  hatColor: \"heather\",\n  accessoriesColor: \"black\",\n  avatarLoaded: false,\n  paths: null,\n};\n\ninitState(defaultState);\n\nif (!state.paths) {\n  const paths = Social.get(`*/${appName}/**`, \"final\");\n\n  if (paths) {\n    State.update({ paths });\n  }\n\n  return \"Loading\";\n}\n\nconst whiteList = Object.keys(state.paths[ownerId][appName][\"whitelist\"]);\n\nlet paths = state.paths[ownerId][appName];\n\nwhiteList.forEach((accountId) => {\n  Object.keys(state.paths[accountId][appName].components ?? {}).forEach(\n    (type) => {\n      Object.entries(state.paths[accountId][appName].components[type]).forEach(\n        (item) => {\n          if (item[1].price > 0) {\n            item[1].account_id = accountId;\n          }\n          paths.components[type][item[0]] = item[1];\n        }\n      );\n    }\n  );\n});\n\nconst colors = paths.colors;\nconst colorsCategories = paths.colors_categories;\nconst components = paths.components;\n\n/*\nif (userId && !state.avatarLoaded) {\n  const avatar = Social.get(`${userId}/${appName}/avatar/*`, \"final\");\n  if (avatar) {\n    console.log(\"My avatar\", avatar);\n\n    initState({ ...defaultState, ...avatar, ...{ avatarLoaded: true } });\n  }\n}*/\n\nlet options = {\n  background: state.background,\n  clothing: state.clothing,\n  clothingColor: state.clothingColor,\n  hairColor: state.hairColor,\n  skin: state.skin,\n  top: state.top,\n  accessories: state.accessories,\n  clothingGraphic: state.clothingGraphic,\n  clothingGraphicsColor: state.clothingGraphicsColor,\n  eyes: state.eyes,\n  eyebrows: state.eyebrows,\n  mouth: state.mouth,\n  facialHair: state.facialHair,\n  facialHairColor: state.facialHairColor,\n  hatColor: state.hatColor,\n  accessoriesColor: state.accessoriesColor,\n  svgBackground: state.svgBackground,\n};\n\nlet getPrice = (options) => {\n  let categories = [\n    \"clothing\",\n    \"accessories\",\n    \"top\",\n    \"clothingGraphic\",\n    \"eyes\",\n    \"eyebrows\",\n    \"mouth\",\n    \"facialHair\",\n  ];\n\n  return categories.reduce(\n    (sum, category) =>\n      new Big(sum)\n        .plus(components[category][options[category]].price ?? 0)\n        .toString(),\n    \"0\"\n  );\n};\n\nconst YoctoToNear = (amountYocto) =>\n  new Big(amountYocto).div(new Big(10).pow(24)).toString();\n\nlet depositYocto = getPrice(options);\nlet depositNear = YoctoToNear(depositYocto);\n\nlet itemsMenu = (collection, name) => {\n  //console.log(\"itemsMenu\", name, collection);\n  let items = Object.keys(collection).map((item) => (\n    <option value={item} selected={state[name] == item}>\n      {collection[item].name.charAt(0).toUpperCase() +\n        collection[item].name.slice(1)}\n      {(collection[item].price ?? 0) > 0\n        ? ` [${YoctoToNear(collection[item].price)} NEAR]`\n        : \"\"}\n    </option>\n  ));\n  return (\n    <select\n      class=\"form-select\"\n      onChange={(e) => State.update({ [name]: e.target.value })}\n    >\n      {items}\n    </select>\n  );\n};\n\nlet colorsMenu = (collection, name) => {\n  //console.log(\"colorsMenu\", name, collection);\n  let items = Object.keys(collection).map((item) => {\n    let color = colors[item];\n    return (\n      <option value={item} selected={state[name] == item}>\n        {color.name.charAt(0).toUpperCase() + color.name.slice(1)}\n      </option>\n    );\n  });\n  return (\n    <select\n      class=\"form-select\"\n      onChange={(e) => State.update({ [name]: e.target.value })}\n    >\n      {items}\n    </select>\n  );\n};\n\nlet Mint = () => {\n  const gas = 300000000000000;\n  const deposit = new Big(depositYocto).plus(MIN_DEPOSIT).toFixed(0); //10000000000000000000000;\n\n  let data = [];\n  Object.entries(options).forEach((item) => {\n    data.push([\n      components[item[0]][item[1]].account_id ?? ownerId,\n      item[0],\n      item[1],\n    ]);\n  });\n\n  Near.call(\n    contractId,\n    \"nft_mint\",\n    {\n      receiver_id: userId,\n      data,\n    },\n    gas,\n    deposit\n  );\n};\n\nreturn (\n  <>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-s-12 text-center\" style={style}>\n          <Widget\n            src={`${ownerId}/widget/social-avatar-image`}\n            props={{ paths, options }}\n          />\n        </div>\n\n        <div class=\"col-md-6 col-s-12\">\n          <div class=\"text-center\">\n            <h4>Set your Near.Social Avatar</h4>\n          </div>\n\n          <div class=\"container-fluid\">\n            <div class=\"row mt\">\n              <div class=\"col\">\n                <div>Eyes</div>\n                {itemsMenu(components.eyes, \"eyes\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Eyebrows</div>\n                {itemsMenu(components.eyebrows, \"eyebrows\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Mouth</div>\n                {itemsMenu(components.mouth, \"mouth\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Top</div>\n                {itemsMenu(components.top, \"top\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Top color</div>\n                {colorsMenu(colorsCategories.palette, \"hatColor\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Hair color</div>\n                {colorsMenu(colorsCategories.hair, \"hairColor\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Skin color</div>\n                {colorsMenu(colorsCategories.skin, \"skin\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Accessories</div>\n                {itemsMenu(components.accessories, \"accessories\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Accessories color</div>\n                {colorsMenu(colorsCategories.palette, \"accessoriesColor\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Facial Hair</div>\n                {itemsMenu(components.facialHair, \"facialHair\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Facial Hair color</div>\n                {colorsMenu(colorsCategories.hair, \"facialHairColor\")}\n              </div>\n            </div>\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Clothing</div>\n                {itemsMenu(components.clothing, \"clothing\")}\n              </div>\n\n              <div class=\"col\">\n                <div>Clothing color</div>\n                {colorsMenu(colorsCategories.palette, \"clothingColor\")}\n              </div>\n            </div>\n\n            {state.clothing === \"graphicShirt\" && (\n              <div class=\"row mt-2\">\n                <div class=\"col\">\n                  <div>Clothing Graphic</div>\n                  {itemsMenu(components.clothingGraphic, \"clothingGraphic\")}\n                </div>\n\n                <div class=\"col\">\n                  <div>Clothing Graphic color</div>\n                  {colorsMenu(\n                    colorsCategories.palette,\n                    \"clothingGraphicsColor\"\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div class=\"row mt-2\">\n              <div class=\"col\">\n                <div>Cirle color</div>\n                {colorsMenu(colorsCategories.palette, \"background\")}\n              </div>\n              <div class=\"col\">\n                <div>Background color</div>\n                {colorsMenu(colorsCategories.palette, \"svgBackground\")}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"container mb-4\">\n      <div class=\"row mt-3\">\n        <div class=\"col text-center\">\n          <div>\n            <button onClick={Mint}>Mint an NFT</button>\n          </div>\n          {depositNear > 0 && (\n            <div class=\"pt-2\">Total cost: {depositNear} NEAR</div>\n          )}\n        </div>\n      </div>\n    </div>\n    <div class=\"border border-3 p-3 mb-4\">\n      <Widget src={`${ownerId}/widget/owned-social-avatars`} />\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/social-avatar-editor", "metadata.image.ipfs_cid": "bafkreia5tmw7tsrr24fjvieamqfy2sbb5p7xsrynjfhkhfxngh6tfzqlji", "metadata.name": "Social Avatars", "metadata.tags.app": ""}