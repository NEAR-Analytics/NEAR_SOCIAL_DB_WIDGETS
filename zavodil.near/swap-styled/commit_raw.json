{"tx_hash": "216WqozM4n2FFVodTozs8GnWtXgiqC5qgdvv26JyJB9Q", "action_id_social": "7CKGahSYKR2T7m8UZXzqW5QzRztrEvm1GubJmsRVqCTd-0-widget", "block_id": 94777139, "block_timestamp": "2023-06-22T15:45:20.216Z", "signer_id": "zavodil.near", "widget_name": "swap-styled", "source_code": "const NETWORKS = [\n  { name: \"NEAR\", chainId: undefined },\n  {\n    name: \"ETH\",\n    chainId: 1,\n    icon: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n  {\n    name: \"ZKSYNC\",\n    chainId: 324,\n    icon: \"https://lite.zksync.io/images/logo-no-letters.svg\",\n  },\n  {\n    name: \"ZKEVM\",\n    chainId: 1101,\n    icon: \"https://assets-global.website-files.com/6364e65656ab107e465325d2/642235057dbc06788f6c45c1_polygon-zkevm-logo.png\",\n  },\n  {\n    name: \"AURORA\",\n    chainId: 1313161554,\n    icon: \"https://assets.coingecko.com/coins/images/20582/small/aurora.jpeg\",\n  },\n  {\n    name: \"POLYGON\",\n    chainId: 137,\n    icon: \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\",\n  },\n];\n\nconst NETWORK_NEAR = \"NEAR\";\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_ZKEVM = \"ZKEVM\";\nconst NETWORK_AURORA = \"AURORA\";\nconst NETWORK_POLYGON = \"POLYGON\";\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ selectedNetwork: chainId });\n    });\n}\n\nState.init({\n  isNetworkSelectOpen: false,\n  inputAssetModalHidden: true,\n  outputAssetModalHidden: true,\n  inputAssetAmount: 1,\n  outputAssetAmount: 0,\n  slippagetolerance: \"0.5\",\n  reloadPools: false,\n  estimate: {},\n  loadRes: (value) => {\n    console.log(\"loadRes\", value);\n    if (value.estimate === \"NaN\") value.estimate = 0;\n    State.update({\n      estimate: value,\n      outputAssetAmount: value === null ? \"\" : value.estimate,\n    });\n  },\n});\n\nconst refReferralId = props.refReferralId ?? \"ukraine\";\nconst forceNetwork = props.forceNetwork;\n\nconst getEVMAccountId = () => {\n  if (ethers !== undefined) {\n    return Ethers.send(\"eth_requestAccounts\", [])[0] ?? \"\";\n  }\n  return \"\";\n};\n\nif (state.sender === undefined) {\n  return State.update({\n    sender: getEVMAccountId(),\n  });\n}\n\nconst onDexDataLoad = (data) => {\n  console.log(\"onDexDataLoad\", data);\n  State.update({\n    ...data,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    sender: getEVMAccountId(),\n  });\n};\n\nconst themes = {\n  light:\n    \"https://pluminite.mypinata.cloud/ipfs/QmfD6YngV7RzWse1EZdpy8HjyjS6Rp2BQVb5NzFjH7BxXL\",\n  dark: \"https://pluminite.mypinata.cloud/ipfs/QmVLdPM2v8R5qxhshCbKSTNAwnxtVm8FD6bQznqiirAkMT\",\n};\n\n// LOAD STYLE\n\nconst css = fetch(themes[props.theme ?? \"dark\"] ?? themes[\"dark\"]).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n    .container-button {\n      position: relative;\n      font-family: 'Inter';\n      font-style: normal;\n      font-weight: 600;\n      font-size: 10px;\n      line-height: 12px;\n      cursor: pointer;\n    }\n`,\n  });\n}\n\nconst Theme = state.theme;\n\n// USER FUNCTIONS\n\nconst currentAccountId =\n  getEVMAccountId() !== \"\" ? getEVMAccountId() : context.accountId;\n\nconst rearrangeAssets = () => {\n  State.update({\n    inputAssetTokenId: state.outputAssetTokenId,\n    outputAssetTokenId: state.inputAssetTokenId,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    inputAssetAmount: state.outputAssetAmount,\n    outputAssetAmount: state.inputAssetAmount,\n    approvalNeeded: undefined,\n  });\n};\n\n// REUSABLE UI ELEMEETS\n\nconst assetContainer = (\n  isInputAsset,\n  assetData,\n  amountName,\n  assetNameOnClick\n) => {\n  if (!assetData) return;\n  const useSpacer = !!isInputAsset;\n\n  const assetContainerClass = useSpacer\n    ? \"asset-container-top\"\n    : \"asset-container-bottom\";\n  return (\n    <>\n      <div class={`${assetContainerClass} asset-container`}>\n        <div class=\"swap-currency-input\">\n          <div class=\"swap-currency-input-block\">\n            <div class=\"swap-currency-input-top\">\n              <input\n                class=\"input-asset-amount\"\n                nputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                pattern=\"^[0-9]*[.,]?[0-9]*$\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state[amountName]}\n              />\n              <button class=\"input-asset-token\" onClick={assetNameOnClick}>\n                <span class=\"input-asset-token-menu\">\n                  <div class=\"input-asset-token-name\">\n                    <div class=\"input-asset-token-icon\">\n                      <img\n                        alt={`${assetData.metadata.name} logo`}\n                        src={assetData.metadata.icon}\n                        class=\"input-asset-token-icon-img\"\n                      />\n                    </div>\n                    <span class=\"input-asset-token-ticker\">\n                      {assetData.metadata.symbol}\n                    </span>\n                  </div>\n                  <svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\">\n                    <path\n                      d=\"M4.99998 1L2.99999 3L1 1\"\n                      stroke=\"white\"\n                      stroke-width=\"1.21738\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    ></path>\n                  </svg>\n                </span>\n              </button>\n            </div>\n            <div class=\"input-asset-details-container\">\n              <div class=\"input-asset-details-row\">\n                <div class=\"input-asset-details-price-container\">\n                  <div class=\"input-asset-details-price\">\n                    <div>${assetData.price}</div>\n                  </div>\n                </div>\n                <div class=\"input-asset-details-balance-container\">\n                  <div class=\"input-asset-details-balance-text\">\n                    Balance: {assetData.balance_hr}\n                  </div>\n                  {isInputAsset &&\n                    Number(state.inputAssetAmount) !==\n                      Number(assetData.balance_hr_full) && (\n                      <button\n                        class=\"input-asset-details-balance-button\"\n                        onClick={() =>\n                          State.update({\n                            [amountName]: assetData.balance_hr_full ?? 0,\n                          })\n                        }\n                      >\n                        Max\n                      </button>\n                    )}\n                </div>\n              </div>\n            </div>\n            {false && <div class=\"swap-currency-input-bottom\"></div>}\n          </div>\n        </div>\n      </div>\n      {useSpacer ? spacerContainer : <></>}\n    </>\n  );\n};\n\nconst spacerContainer = (\n  <div class=\"spacer-container\">\n    <div class=\"spacer-block\" onClick={rearrangeAssets}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"#2d2f30\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <polyline points=\"19 12 12 19 5 12\"></polyline>\n      </svg>\n    </div>\n  </div>\n);\n\n// SWAP METHODS\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst getRefTokenObject = (tokenId, assetData) => {\n  return {\n    id: tokenId,\n    decimals: assetData.metadata.decimals,\n    symbol: assetData.metadata.symbol,\n  };\n};\n\nconst tokenInApprovaleNeededCheck = () => {\n  if (state.approvalNeeded === undefined) {\n    if (\n      getEVMAccountId() &&\n      state.erc20Abi !== undefined &&\n      state.routerContract !== undefined &&\n      [\n        NETWORK_ETH,\n        NETWORK_ZKSYNC,\n        NETWORK_ZKEVM,\n        NETWORK_AURORA,\n        NETWORK_POLYGON,\n      ].includes(state.network)\n    ) {\n      const ifaceErc20 = new ethers.utils.Interface(state.erc20Abi);\n\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\n        \"allowance\",\n        [getEVMAccountId(), state.routerContract]\n      );\n\n      return Ethers.provider()\n        .call({\n          to: state.inputAssetTokenId,\n          data: encodedTokenAllowancesData,\n        })\n        .then((encodedTokenAllowanceHex) => {\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\n            \"allowance\",\n            encodedTokenAllowanceHex\n          );\n\n          if (tokenAllowance) {\n            State.update({\n              approvalNeeded: new Big(tokenAllowance).toFixed() == \"0\",\n            });\n          }\n        });\n    } else {\n      State.update({ approvalNeeded: false });\n    }\n  }\n};\n\nif (\n  [\n    NETWORK_ZKSYNC,\n    NETWORK_ZKEVM,\n    NETWORK_ETH,\n    NETWORK_AURORA,\n    NETWORK_POLYGON,\n  ].includes(state.network)\n) {\n  tokenInApprovaleNeededCheck();\n}\n\nconst canSwap =\n  state.network &&\n  Number(state.inputAsset.balance_hr_full) >= Number(state.inputAssetAmount) &&\n  Number(state.inputAssetAmount ?? 0) > 0;\n\nconst onCallTxComple = (tx) => {\n  console.log(\"transactionHash\", tx);\n  State.update({\n    outputAsset: undefined,\n  });\n};\n\nconst switchNetwork = (chainId) => {\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nconst ContainerNetwork = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: 8px;\n\n  .label {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 10px;\n    color: #fff;\n  }\n`;\n\nconst NetworkSelectorButton = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 4px 8px 4px 4px;\n  gap: 4px;\n\n  height: 24px;\n  outline: none;\n  border: none;\n  position: relative;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n`;\n\nconst NetworkList = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 12px;\n  width: 145px;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    border-radius: 12px;\n  }\n\n  li {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 4px 8px 4px 4px;\n    gap: 4px;\n    flex: 1;\n    width: 100%;\n    color: #fff;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n`;\n\nconst caretSvg = (\n  <svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\">\n    <path\n      d=\"M4.99998 1L2.99999 3L1 1\"\n      stroke=\"white\"\n      stroke-width=\"1.21738\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n\nconst { isNetworkSelectOpen } = state;\n\nconst networkList = NETWORKS.map((network) => network.chainId); //  [1, 1101];\n\nconst openNetworkList = () => {\n  State.update({ isNetworkSelectOpen: true, isTokenDialogOpen: false });\n};\n\nconst changeNetwork = (network) => {\n  State.update({ isNetworkSelectOpen: false, selectedNetwork: network });\n};\n\nconst networks = {};\nNETWORKS.filter((network) => !!network.chainId).map(\n  (network) =>\n    (networks[network.chainId] = { name: network.name, icon: network.icon })\n);\n\nconst getFromNetworkLabel = () => {\n  return (\n    <>\n      <img\n        style={{ width: \"16px\" }}\n        src={networks[state.selectedNetwork].icon}\n      />\n      <span>\n        {networks[state.selectedNetwork].name} {state.dexName}\n      </span>\n    </>\n  );\n};\n\nconst networksDropDown = Object.keys(networks).map((chainId) => (\n  <li onClick={() => switchNetwork(Number(chainId))}>\n    <img style={{ width: \"16px\" }} src={networks[chainId].icon} />\n    <span>{networks[chainId].name}</span>\n  </li>\n));\n\n// OUTPUT\n\nif (forceNetwork && state.network && forceNetwork !== state.network) {\n  return (\n    <Theme>\n      <div class=\"swap-main-container pt-5\">\n        To proceed, kindly switch to {forceNetwork}.\n        {!state.sender && (\n          <div class=\"swap-button-container\">\n            <Web3Connect\n              className=\"swap-button-enabled swap-button-text p-2\"\n              connectLabel=\"Connect with Web3\"\n            />\n          </div>\n        )}\n      </div>\n    </Theme>\n  );\n}\n\nreturn (\n  <Theme>\n    <Widget\n      src=\"zavodil.near/widget/DexData\"\n      props={{\n        onLoad: onDexDataLoad,\n        NETWORK_NEAR,\n        NETWORK_ETH,\n        NETWORK_ZKSYNC,\n        NETWORK_ZKEVM,\n        NETWORK_AURORA,\n        NETWORK_POLYGON,\n      }}\n    />\n\n    {state.network && state.inputAsset && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal\"\n        props={{\n          hidden: state.inputAssetModalHidden ?? true,\n          network: state.network,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          selectedAssets: [state.inputAssetTokenId],\n          onClick: (tokenId) => {\n            State.update({\n              inputAssetModalHidden: true,\n              inputAssetTokenId: tokenId,\n              inputAsset: null,\n              approvalNeeded: undefined,\n            });\n          },\n          onClose: () => State.update({ inputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {state.network && state.outputAsset && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal\"\n        props={{\n          hidden: state.outputAssetModalHidden ?? true,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          network: state.network,\n          selectedAssets: [state.outputAssetTokenId],\n          onClick: (tokenId) => {\n            State.update({\n              outputAssetModalHidden: true,\n              outputAssetTokenId: tokenId,\n              outputAsset: null,\n            });\n          },\n          onClose: () => State.update({ outputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {!state.inputAsset && state.network && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData\"\n        props={{\n          tokenId: state.inputAssetTokenId,\n          coinGeckoTokenId: state?.coinGeckoTokenIds?.[state.inputAssetTokenId],\n          network: state.network,\n          NETWORK_NEAR,\n          NETWORK_ETH,\n          NETWORK_ZKSYNC,\n          NETWORK_ZKEVM,\n          NETWORK_AURORA,\n          NETWORK_POLYGON,\n          onLoad: (inputAsset) => {\n            console.log(\"TokenData onLoad inputAsset\", inputAsset);\n            inputAsset.metadata.symbol =\n              inputAsset.metadata.symbol.toUpperCase();\n            State.update({ inputAsset });\n          },\n        }}\n      />\n    )}\n    {!state.outputAsset && state.network && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData\"\n        props={{\n          tokenId: state.outputAssetTokenId,\n          coinGeckoTokenId:\n            state?.coinGeckoTokenIds?.[state.outputAssetTokenId],\n          network: state.network,\n          NETWORK_NEAR,\n          NETWORK_ETH,\n          NETWORK_ZKSYNC,\n          NETWORK_ZKEVM,\n          NETWORK_AURORA,\n          NETWORK_POLYGON,\n          onLoad: (outputAsset) => {\n            console.log(\"TokenData onLoad outputAsset\", outputAsset);\n            outputAsset.metadata.symbol =\n              outputAsset.metadata.symbol.toUpperCase();\n            State.update({ outputAsset });\n          },\n        }}\n      />\n    )}\n\n    {state.network === NETWORK_NEAR &&\n      state.inputAsset &&\n      state.outputAsset && (\n        <Widget\n          src=\"weige.near/widget/ref-swap-getEstimate\"\n          props={{\n            loadRes: state.loadRes,\n            tokenIn: getRefTokenObject(\n              state.inputAssetTokenId,\n              state.inputAsset\n            ),\n            tokenOut: getRefTokenObject(\n              state.outputAssetTokenId,\n              state.outputAsset\n            ),\n            amountIn: state.inputAssetAmount ?? 0,\n            reloadPools: state.reloadPools,\n            setReloadPools: (value) =>\n              State.update({\n                reloadPools: value,\n              }),\n          }}\n        />\n      )}\n\n    {state.network === NETWORK_ZKEVM &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/quickswap-v3-getEstimate\"\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n\n    {state.network === NETWORK_ETH &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/uni-v3-getEstimate\"\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n\n    {state.network === NETWORK_POLYGON &&\n      state.sender &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/balancer-queryBatchSwap\"\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              inputAsset: state.inputAsset,\n              outputAsset: state.outputAsset,\n              sender: state.sender,\n              quoterContractId: state.routerContract,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n\n    {[NETWORK_ZKSYNC, NETWORK_AURORA].includes(state.network) &&\n      state.inputAsset &&\n      state.outputAsset &&\n      state.inputAssetAmount &&\n      state.outputAsset.price &&\n      state.inputAsset.price &&\n      state.loadRes({\n        estimate: (\n          (parseFloat(state.inputAssetAmount) *\n            parseFloat(state.inputAsset.price)) /\n          parseFloat(state.outputAsset.price)\n        ).toFixed(18),\n      })}\n\n    <div class=\"swap-root\">\n      <div class=\"swap-main-container\">\n        <div class=\"swap-main-column\">\n          <div class=\"swap-page\">\n            {false && state.network && state.dexName && (\n              <span class=\"swap-header\">\n                {state.dexName} ({state.network})\n              </span>\n            )}\n            {/* DD*/}\n            {state.network && state.dexName && (\n              <ContainerNetwork>\n                <div class=\"container-button\">\n                  <NetworkSelectorButton onClick={openNetworkList}>\n                    {getFromNetworkLabel()}\n                    {caretSvg}\n                  </NetworkSelectorButton>\n                  {isNetworkSelectOpen && (\n                    <NetworkList>\n                      <ul>{networksDropDown}</ul>\n                    </NetworkList>\n                  )}\n                </div>\n              </ContainerNetwork>\n            )}\n            {/*DD*/}\n\n            <div class=\"top-container\">\n              {assetContainer(\n                true,\n                state.inputAsset,\n                \"inputAssetAmount\",\n                () => {\n                  State.update({ inputAssetModalHidden: false });\n                }\n              )}\n            </div>\n            <div class=\"bottom-container\">\n              <div>\n                {assetContainer(\n                  fasle,\n                  state.outputAsset,\n                  \"outputAssetAmount\",\n                  () => {\n                    State.update({ outputAssetModalHidden: false });\n                  }\n                )}\n                {!!state.outputAssetAmount &&\n                  state.inputAssetTokenId !== state.outputAssetTokenId && (\n                    <div class=\"swap-price-container\">\n                      <div class=\"swap-price-block\">\n                        <div class=\"swap-price-grid\">\n                          <div class=\"swap-price-row\">\n                            <div class=\"swap-price-details-container\">\n                              <span>\n                                <div class=\"swap-price-details-icon\">\n                                  <div>\n                                    <svg\n                                      xmlns=\"http://www.w3.org/2000/svg\"\n                                      width=\"12\"\n                                      height=\"12\"\n                                      viewBox=\"0 0 12 12\"\n                                      fill=\"none\"\n                                      stroke=\"#98A1C0\"\n                                      stroke-width=\"1\"\n                                      stroke-linecap=\"round\"\n                                      stroke-linejoin=\"round\"\n                                      class=\"swap-price-details-svg\"\n                                    >\n                                      <circle cx=\"6\" cy=\"6\" r=\"5\"></circle>\n                                      <line x1=\"6\" y1=\"8\" x2=\"6\" y2=\"6\"></line>\n                                      <line x1=\"6\" y1=\"4\" x2=\"6\" y2=\"4\"></line>\n                                    </svg>\n                                  </div>\n                                </div>\n                              </span>\n                              <div class=\"swap-price-details-text\">\n                                <button class=\"swap-price-details-text-button\">\n                                  <div class=\"swap-price-details-rate\">\n                                    {Number(state.inputAssetAmount) === 0 ||\n                                    Number(state.outputAssetAmount) === 0\n                                      ? \" \"\n                                      : `1 ${\n                                          state.inputAsset.metadata.symbol\n                                        } \u2248 ${new Big(\n                                          state.outputAssetAmount ?? 0\n                                        )\n                                          .div(state.inputAssetAmount ?? 1)\n                                          .toFixed(4, 0)}\n                                        ${state.outputAsset.metadata.symbol}`}\n                                  </div>\n                                  <div\n                                    class=\"swap-price-details-price\"\n                                    style={{ fontSize: \"8px\" }}\n                                  >\n                                    {Number(state.inputAssetAmount) === 0 ||\n                                    Number(state?.outputAsset?.price) === 0\n                                      ? \"\"\n                                      : `($${new Big(\n                                          state.outputAssetAmount ?? 0\n                                        )\n                                          .div(state.inputAssetAmount ?? 1)\n                                          .times(state?.outputAsset?.price ?? 1)\n                                          .toFixed(4)})`}\n                                  </div>\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n              </div>\n              <div class=\"swap-button-container\">\n                {state.approvalNeeded === true && (\n                  <button\n                    class={\"swap-button-enabled\"}\n                    onClick={() => {\n                      if (\n                        [NETWORK_ETH, NETWORK_POLYGON].includes(state.network)\n                      ) {\n                        state.callTokenApproval(state, () => {\n                          onCallTxComple();\n                          tokenInApprovaleNeededCheck();\n                        });\n                      } else {\n                        state.callTokenApproval(\n                          state,\n                          () => {\n                            onCallTxComple();\n                            tokenInApprovaleNeededCheck();\n                          },\n                          \"120\",\n                          100000\n                        );\n                      }\n                    }}\n                  >\n                    <div class=\"swap-button-text\">\n                      Approve {state.inputAsset.metadata.symbol}\n                    </div>\n                  </button>\n                )}\n                {state.approvalNeeded !== true && (\n                  <button\n                    class={canSwap ? \"swap-button-enabled\" : \"swap-button\"}\n                    onClick={() => {\n                      if (canSwap) {\n                        if (state.network === NETWORK_NEAR) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_ZKSYNC) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (\n                          state.network === NETWORK_ZKEVM &&\n                          state.estimate.path\n                        ) {\n                          console.log(\n                            \" state.estimate.path\",\n                            state.estimate.path\n                          );\n                          state.callTx(\n                            state,\n                            onCallTxComple,\n                            \"7.5\",\n                            300000,\n                            \"0\",\n                            state.estimate.path\n                          );\n                        } else if (state.network === NETWORK_ETH) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_AURORA) {\n                          state.callTx(state, onCallTxComple, \"0.1\", 700000);\n                        } else if (state.network === NETWORK_POLYGON) {\n                          state.callTx(state, onCallTxComple);\n                        }\n                      }\n                    }}\n                  >\n                    <div class=\"swap-button-text\">Swap</div>\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"pt-3 text-secondary opacity-50 text-center\">\n          <p>\n            Supported networks:{\" \"}\n            <ul>\n              {NETWORKS.map((network, index) => {\n                return network.chainId ? (\n                  <>\n                    <li\n                      className=\"wrexlink\"\n                      title=\"Click to switch\"\n                      onClick={() => switchNetwork(network.chainId)}\n                    >\n                      &#8227; {network.name}\n                    </li>\n                  </>\n                ) : (\n                  <li style={{ display: \"inline\" }}>&#8227; {network.name}</li>\n                );\n              })}\n            </ul>\n          </p>\n          {currentAccountId && <p>Current account: {currentAccountId}</p>}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/swap-styled", "__row_index": 2}