{"tx_hash": "3bQue6JzwzACEd1YFWN6NLhhFHEAmDGb2Kk4Cb9hwrZK", "action_id_social": "GWMBDLCatMZU3qbPM44fqJGy8nrR1AV3zNR36PEvB8Nd-0-widget", "block_id": 90384854, "block_timestamp": "2023-04-25 08:38:01.096", "signer_id": "zavodil.near", "widget_name": "NearX", "source_code": "// FORKED https://near.social/#/linearprotocol.near/widget/LiNEAR\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst NEAR_DECIMALS = 24;\nconst BIG_ROUND_DOWN = 0;\nconst CONTRACT_ID = \"v2-nearx.stader-labs.near\";\nconst validatorRefId = props.refId ?? \"zavodil.poolv1.near\";\nconst utmReferral = props.utmReferral ?? \"Zavodil\";\nconst tokenName = \"NearX\";\n\nfunction getNearBalance(accountId) {\n  const account = fetch(\"https://rpc.mainnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  });\n  const { amount, storage_usage } = account.body.result;\n\n  const COMMON_MIN_BALANCE = 0.05;\n  if (!amount) return \"-\";\n  const availableBalance = Big(amount || 0).minus(\n    Big(storage_usage).mul(Big(10).pow(19))\n  );\n  const balance = availableBalance\n    .div(Big(10).pow(NEAR_DECIMALS))\n    .minus(COMMON_MIN_BALANCE);\n  return balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN);\n}\n\nState.init({\n  inputValue: \"\",\n  inputError: \"\",\n  nearBalance: getNearBalance(accountId),\n});\nconst nearBalance =\n  !state.nearBalance || state.nearBalance === \"-\"\n    ? getNearBalance(accountId)\n    : state.nearBalance;\n\nif (state.api === undefined) {\n  const result = fetch(\n    \"https://us-central1-staderdao.cloudfunctions.net/nearApr\"\n  );\n  if (!result.ok) {\n    return \"Loading\";\n  }\n  State.update({ apy: result.body.baseStakingApy });\n}\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nif (state.tokenPrice === undefined) {\n  const tokenPrice = Big(Near.view(CONTRACT_ID, \"get_nearx_price\", `{}`) ?? \"0\")\n    .div(Big(10).pow(24))\n    .toFixed();\n  console.log(\"tokenPrice\", tokenPrice);\n  State.update({ tokenPrice });\n}\n\nconst youWillReceive =\n  state.tokenPrice === undefined\n    ? \"0\"\n    : (Big(state.tokenPrice).lte(0)\n        ? Big(0)\n        : Big(isValid(state.inputValue) ? state.inputValue : 0).div(\n            Big(state.tokenPrice)\n          )\n      ).toFixed(5, BIG_ROUND_DOWN);\n\nconst Title = styled.h1`\n      font-size: 40px;\n      font-weight: bold;\n  `;\n\nconst Main = styled.div`\n      color: white;\n      width: 100%;\n      height: 80vh;\n      background: #09071f;\n      padding: 20px;\n  \n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column\n  `;\n\nconst Description = styled.div`\n      font-size: 14px;\n      color: #999999;\n      margin-top: 5px;\n  `;\n\nconst StakeFormWrapper = styled.div`\n      width: 100%;\n      max-width: 500px;\n      padding: 8px 20px;\n      background: #0f0f31;\n      border-radius: 10px;\n  `;\n\nconst disabledStakeButton =\n  !isValid(state.inputValue) || Big(state.inputValue).eq(0) || state.inputError;\nconst StakeButton = styled.button`\n      border: none;\n      color: white;\n      width: 100%;\n      border-radius: 10px;\n      font-size: 20px;\n      font-weight: bold;\n      overflow: hidden;\n      padding: 8px 0;\n  \n      background-size: 100%;\n      background-image: linear-gradient(180deg, #5561ff 0%, #3643fc 100%, #3643fc 100%);\n      position: relative;\n      z-index: 0;\n      &:disabled {\n          background: #1C2056;\n          color: #3D47D6;\n      }\n      &:before {\n          background-image: linear-gradient(180deg, #4954f2 0%, #2029a7 100%);\n          content: \"\";\n          display: block;\n          height: 100%;\n          position: absolute;\n          top: 0;\n          left: 0;\n          opacity: 0;\n          width: 100%;\n          z-index: -100;\n          transition: opacity 0.6s;\n      }\n      &:hover:before {\n          opacity: ${disabledStakeButton ? \"0\" : \"1\"};\n      }\n  `;\n\nconst InputWrapper = styled.div`\n      width: 100%;\n      border-radius: 10px;\n      background: #0d0d2b;\n      padding: 20px;\n  `;\n\nconst HorizentalLine = styled.hr`\n      height: 1px;\n      border: none;\n      background: white;\n      opacity: 0.1;\n      margin-top: 16px;\n      margin-bottom: 8px;\n  `;\n\nconst BalanceContainer = styled.div`\n      color: #c1c1c1;\n      font-size: 14px;\n      display: flex;\n      justify-content: space-between;\n      .error {\n          color: #ec6868;\n      }\n  `;\n\nconst APYContainer = styled.div`\n      font-size: 20px;\n      margin: 12px 0;\n      span {\n          margin-left: 12px;\n          font-weight: bold;\n      }\n  `;\n\nconst NEARInputContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst NEARTexture = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  margin-left: 10px;\n`;\n\nconst LogoWithText = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst MaxTexture = styled.div`\n  font-size: 24px;\n  color: #4451FD;\n  cursor: pointer;\n`;\n\nconst FooterLink = styled.a`\n    color: #4451FD;\n    text-decoration: underline;\n    transition: all 0.2s ease-in-out;\n    margin-top: 12px;\n    text-underline-offset: 3px;\n`;\n\nconst YouWillReceive = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    font-size: 14px;\n    margin-top: 16px;\n`;\n\nreturn (\n  <Main>\n    <a\n      href={`https://www.staderlabs.com/near/lt/near/?tab=Stake&utm_referral=${utmReferral}`}\n      target=\"_blank\"\n    >\n      <img\n        style={{\n          height: \"30px\",\n          width: \"auto\",\n          position: \"absolute\",\n          left: \"32px\",\n          top: \"44px\",\n          color: \"#FFF\",\n        }}\n        src=\"https://gist.githubusercontent.com/zavodil/a4d671cc9c3536f10ac3ddffd7bf4337/raw/33735c2b5376a77371aace9fe45ae9ce32b28ea9/icon.svg\"\n        alt=\"Brand Logo\"\n        height={20}\n        width={\"auto\"}\n      />\n    </a>\n    <Title>Stake Your NEAR</Title>\n    <Description>\n      Stake Near and use {tokenName} in DeFi while earning staking rewards\n    </Description>\n    <APYContainer>\n      APY <span>{`${state.apy}%` ?? \"-\"}</span>\n    </APYContainer>\n    <StakeFormWrapper>\n      <InputWrapper>\n        <NEARInputContainer>\n          <LogoWithText>\n            <img\n              src={`https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly`}\n              width={26}\n              height={26}\n              alt=\"NEAR Icon\"\n            />\n            <NEARTexture>NEAR</NEARTexture>\n          </LogoWithText>\n          <input\n            style={{\n              \"text-align\": \"right\",\n              width: \"100%\",\n              background: \"transparent\",\n              border: \"0\",\n              \"font-size\": \"16px\",\n              \"font-weight\": \"bold\",\n              color: state.inputError ? \"#ec6868\" : \"white\",\n              outline: \"none\",\n              \"box-shadow\": \"none\",\n              \"margin-right\": \"16px\",\n\n              \"-webkit-appearance\": \"none\",\n              \"-moz-appearance\": \"textfield\",\n            }}\n            placeholder=\"NEAR amount to stake\"\n            value={state.inputValue}\n            onChange={(e) => {\n              // Has user signed in?\n              if (!isSignedIn) {\n                State.update({\n                  inputError: \"Sign in please\",\n                });\n                return;\n              }\n              const targetValue = e.target.value;\n              if (targetValue !== \"\" && !targetValue.match(/^\\d*(\\.\\d*)?$/)) {\n                return;\n              }\n              let stakeAmount = targetValue.replace(/^0+/, \"0\"); // remove prefix 0\n              // limit 24 decimals\n              const most24DecimalsPattern = /^-?\\d+(\\.\\d{0,24})?/;\n              let values = stakeAmount.match(most24DecimalsPattern);\n              if (values) {\n                stakeAmount = values[0];\n              }\n              if (\n                nearBalance &&\n                (isNaN(Number(stakeAmount)) ||\n                  stakeAmount === \"\" ||\n                  Big(stakeAmount).lt(1) ||\n                  Big(stakeAmount).gt(Big(nearBalance)))\n              ) {\n                if (\n                  isNaN(Number(stakeAmount)) ||\n                  stakeAmount === \"\" ||\n                  Big(stakeAmount).lt(1)\n                ) {\n                  State.update({\n                    inputValue: stakeAmount,\n                    inputError: \"Stake at least 1 NEAR\",\n                  });\n                } else {\n                  State.update({\n                    inputValue: stakeAmount,\n                    inputError: `Max is ${nearBalance} NEAR`,\n                  });\n                }\n                return;\n              }\n              State.update({\n                inputValue: stakeAmount,\n                inputError: \"\",\n              });\n            }}\n          />\n          <MaxTexture\n            onClick={() => {\n              if (\n                isNaN(Number(nearBalance)) ||\n                nearBalance === \"\" ||\n                Big(nearBalance).lt(1)\n              ) {\n                State.update({\n                  inputValue: nearBalance,\n                  inputError: \"Stake at least 1 NEAR\",\n                });\n                return;\n              } else {\n                State.update({\n                  inputValue: nearBalance,\n                  inputError: \"\",\n                });\n              }\n            }}\n          >\n            MAX\n          </MaxTexture>\n        </NEARInputContainer>\n        <HorizentalLine />\n        <BalanceContainer>\n          <p>Balance: {nearBalance} NEAR</p>\n          <p className=\"error\">{state.inputError}</p>\n        </BalanceContainer>\n      </InputWrapper>\n      <StakeButton\n        disabled={disabledStakeButton}\n        onClick={async () => {\n          const stakeAmount = state.inputValue;\n          if (\n            nearBalance &&\n            (isNaN(Number(stakeAmount)) ||\n              stakeAmount === \"\" ||\n              Big(stakeAmount).lt(1) ||\n              Big(stakeAmount).gt(Big(nearBalance)))\n          ) {\n            if (\n              isNaN(Number(stakeAmount)) ||\n              stakeAmount === \"\" ||\n              Big(stakeAmount).lt(1)\n            ) {\n              State.update({ inputError: \"Stake at least 1 NEAR\" });\n            } else if (Big(stakeAmount).gt(Big(nearBalance))) {\n              State.update({\n                inputError: `Max is ${nearBalance} NEAR`,\n              });\n            } else setInputError(\"\");\n            return;\n          }\n          Near.call(\n            CONTRACT_ID,\n            \"deposit_and_stake\",\n            { validator: validatorRefId },\n            undefined,\n            Big(state.inputValue).mul(Big(10).pow(NEAR_DECIMALS)).toFixed(0)\n          );\n          // check and update balance\n          const interval = setInterval(() => {\n            const balance = getNearBalance(accountId);\n            if (balance !== nearBalance) {\n              clearInterval(interval);\n              State.update({\n                inputValue: \"\",\n                inputError: \"\",\n                nearBalance: balance,\n              });\n            }\n          }, 500);\n        }}\n      >\n        Stake\n      </StakeButton>\n      <YouWillReceive>\n        <p>You will receive </p>\n        <p>\n          {youWillReceive} {tokenName}\n        </p>\n      </YouWillReceive>\n    </StakeFormWrapper>\n    <FooterLink\n      href={`https://www.staderlabs.com/near/lt/near/?tab=Unstake&utm_referral=${utmReferral}`}\n      target=\"_blank\"\n    >\n      Unstake {tokenName}\n    </FooterLink>\n  </Main>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/NearX", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.lsd": NaN, "metadata.tags.nearx": NaN, "metadata.tags.stader": NaN, "metadata.tags.staking": NaN}