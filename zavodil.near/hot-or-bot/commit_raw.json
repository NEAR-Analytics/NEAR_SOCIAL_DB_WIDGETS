{"tx_hash": "2BptKPvQ9qi84qh59iviDAWBsBrAHyBaRvedFqwzW72r", "action_id_social": "4rYUYKibW1LWxuwSbhBVgq2oiu9dX12t3QGtKEa49mqY-0-widget", "block_id": 80151032, "block_timestamp": "2022-12-08 00:57:49.523", "signer_id": "zavodil.near", "widget_name": "hot-or-bot", "source_code": "// hot-or-bot\nconst accountId = context.accountId;\nconst appName = \"HotOrBot\";\nconst contractId = \"hot-or-bot.near\";\nconst last_turn_index = -1;\nconst max_turns = 4;\n\ninitState({ column1: \"\" });\n\nif (!accountId) {\n  return \"Please login to play hot-or-bot\";\n}\n\nif (context.loading) {\n  return \"Loading...\";\n}\n\nconst history_data = Social.keys(`${accountId}/${appName}/*`);\n\nlet history = history_data[accountId][appName] ?? [];\n\nconsole.log(history, contractId);\n\nObject.entries(history).forEach((turn) => {\n  last_turn_index = Math.max(last_turn_index, Number(turn[0]));\n});\nconst turn_index = last_turn_index + 1;\nconsole.log(history);\nconsole.log(turn_index);\n\nconst onCheckResultClick = () => {\n  const gas = 80000000000000;\n  const deposit = 10000000000000000000000;\n  Near.call(contractId, \"nft_mint\", { receiver_id: accountId }, gas, deposit);\n};\n\nif (turn_index >= max_turns) {\n  const score = Near.view(contractId, \"get_score\", {\n    account_id: accountId,\n  });\n\n  console.log(score);\n\n  return (\n    <>\n      <h2>Game Over!</h2>\n      {score == null && (\n        <div className=\"pt-4\">\n          <button onClick={onCheckResultClick}>Check results</button>\n          <p className=\"pt-3\">\n            You will be asked to deposit 0.01 NEAR to cover the NFT storage.{\" \"}\n            <br />\n            This amount will be automatically returned to your account if you do\n            not win.\n          </p>\n        </div>\n      )}\n      {score != null && (\n        <div className=\"pt-4\">\n          {score == max_turns && (\n            <h4>Congratulatons! You got maximum score and won NFT</h4>\n          )}\n          {score != max_turns && <h4>Unfortunately you didn't win</h4>}\n          <div>Your score: {score}</div>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst turn = Near.view(contractId, \"get_turn\", {\n  account_id: accountId,\n  turn: turn_index,\n});\n\nif (!turn) {\n  return \"Loading\";\n}\n\nif (turn.length !== 2) {\n  return \"Error\";\n}\n\nconsole.log(turn);\n\nlet images = [\n  <img src={`https://pluminite.mypinata.cloud/ipfs/${turn[0]}`} />,\n  <img src={`https://pluminite.mypinata.cloud/ipfs/${turn[1]}`} />,\n];\n\nlet bot_index = state.column1 == \"bot\" ? 0 : 1;\n\nlet data = {\n  [appName]: {\n    [turn_index]: {\n      bot: turn[bot_index],\n    },\n  },\n};\n\nreturn (\n  <>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"text-center\">{images[0]}</div>\n        </div>\n        <div className=\"col\">\n          <div className=\"text-center\">{images[1]}</div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <div className=\"form-switch pt-3\">\n            <input\n              type=\"radio\"\n              className=\"btn-check\"\n              name=\"options-1\"\n              id=\"hot-1\"\n              autocomplete=\"off\"\n              checked={state.column1 == \"hot\"}\n              onClick={() => {\n                State.update({ column1: \"hot\" });\n              }}\n            />\n            <label class=\"btn btn-outline-success\" for=\"hot-1\">\n              Hot\n            </label>\n\n            <input\n              type=\"radio\"\n              class=\"btn-check\"\n              name=\"options-outlined\"\n              id=\"bot-1\"\n              autocomplete=\"off\"\n              checked={state.column1 == \"bot\"}\n              onClick={() => {\n                State.update({ column1: \"bot\" });\n              }}\n            />\n            <label class=\"btn btn-outline-danger\" for=\"bot-1\">\n              Bot\n            </label>\n          </div>\n        </div>\n\n        <div className=\"col text-center\">\n          <div className=\"form-switch pt-3\">\n            <input\n              type=\"radio\"\n              className=\"btn-check\"\n              name=\"options-2\"\n              id=\"hot-2\"\n              autocomplete=\"off\"\n              checked={state.column1 == \"bot\"}\n              onClick={() => {\n                State.update({ column1: \"bot\" });\n              }}\n            />\n            <label class=\"btn btn-outline-success\" for=\"hot-2\">\n              Hot\n            </label>\n\n            <input\n              type=\"radio\"\n              class=\"btn-check\"\n              name=\"options-outlined\"\n              id=\"bot-2\"\n              autocomplete=\"off\"\n              checked={state.column1 == \"hot\"}\n              onClick={() => {\n                State.update({ column1: \"hot\" });\n              }}\n            />\n            <label class=\"btn btn-outline-danger\" for=\"bot-2\">\n              Bot\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col text-center pt-3\">\n          <CommitButton\n            data={data}\n            disabled={state.column1 == \"\"}\n            onCommit={() => {\n              State.update({ column1: \"\" });\n            }}\n          >\n            Submit\n          </CommitButton>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col text-center pt-5 opacity-25\">\n          <div className=\"container text-center\">\n            <div className=\"row justify-content-md-center\">\n              <div className=\"col col-4\">\n                <div className=\"progress \">\n                  <div\n                    className=\"progress-bar\"\n                    role=\"progressbar\"\n                    aria-label=\"Example with label\"\n                    style={{ width: `${(turn_index / max_turns) * 100}%` }}\n                    aria-valuenow={(turn_index / max_turns) * 100}\n                    aria-valuemin=\"0\"\n                    aria-valuemax=\"100\"\n                  >\n                    {(turn_index / max_turns) * 100}%\n                  </div>\n                </div>\n                <span className=\"badge bg-secondary opacity-50\">\n                  Turn {turn_index}/{max_turns}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col text-center pt-5\">\n          <p>\n            Choose which photo is real (hot) and which is generated by AI (bot).\n          </p>\n          <p>Give 4/4 correct answers to receive an NFT.</p>\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/hot-or-bot", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.game": NaN}