{"tx_hash": null, "action_id_social": "6zLpPXDkytKC873YXPCP7GmgthGAd6dSkgMNMu7oosmv-0-widget", "block_id": 93745154, "block_timestamp": "2023-06-08T15:16:22.200Z", "signer_id": "zavodil.near", "widget_name": "balancer-queryBatchSwap", "source_code": "const {\n  tokenIn,\n  inputAsset,\n  tokenOut,\n  outputAsset,\n  amountIn,\n  sender,\n  loadRes,\n} = props;\n\nconst quoterContractId = props.quoterContractId;\nconst quoterABI =\n  props.quoterABI ??\n  \"https://raw.githubusercontent.com/gerrrg/balancer-tutorials/master/abis/Vault.json\";\n\nconst quoterContractJson = fetch(quoterABI);\nif (!quoterContractJson.ok) {\n  return \"Loading\";\n}\n\nconst abi = JSON.parse(quoterContractJson.body);\n\n// prepare data\n\nconst USDC = \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\";\nconst WETH = \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\";\nconst WBTC = \"0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6\";\nconst WMATIC = \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\";\nconst USDT = \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\";\nconst DAI = \"0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\";\n\n// [asset1, asset2, asset3...], pool1\nconst pools = [\n  [\n    [WMATIC, WETH, USDC],\n    \"0x0297e37f1873d2dab4487aa67cd56b58e2f27875000100000000000000000002\",\n  ],\n  [\n    [WETH, USDC, WBTC],\n    \"0x03cd191f589d12b0582a99808cf19851e468e6b500010000000000000000000a\",\n  ],\n  [\n    [USDC, DAI, USDT],\n    \"0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012\",\n  ],\n  [\n    [WETH, USDC, DAI, WBTC, WMATIC],\n    \"0x945f337307ea76fdaa2590d083423850f64e247f000100000000000000000b98\",\n  ],\n  [\n    [USDT, WMATIC],\n    \"0xab7b5e989641afc86daf1bc2cd0ab21285c23f36000100000000000000000a80\",\n  ],\n];\n\nconst finalPool = pools\n  .filter(\n    (poolData) =>\n      poolData[0].includes(tokenIn) && poolData[0].includes(tokenOut)\n  )\n  .map((poolData) => poolData[1]);\n\nif (!finalPool.length) {\n  return console.log(\"Pool not found\");\n}\n\nconst assets = [tokenIn, tokenOut];\n\nconst funds = [sender, false, sender, false];\n\nconst swap_steps = [\n  {\n    poolId: finalPool[1],\n    assetIn: tokenIn,\n    assetOut: tokenOut,\n    amount: amountIn,\n  },\n];\n\nconst token_data = {};\ntoken_data[tokenIn] = {\n  symbol: inputAsset.metadata.symbol,\n  decimals: inputAsset.metadata.decimals,\n  limit: \"0\",\n};\ntoken_data[tokenOut] = {\n  symbol: outputAsset.metadata.symbol,\n  decimals: outputAsset.metadata.decimals,\n  limit: \"0\",\n};\n\nvar token_addresses = Object.keys(token_data);\nconst token_indices = {};\nfor (var i = 0; i < token_addresses.length; i++) {\n  token_indices[token_addresses[i]] = i;\n}\n\nconst swap_steps_struct = [];\nfor (const step of swap_steps) {\n  const swap_step_struct = [\n    step[\"poolId\"],\n    token_indices[step[\"assetIn\"]],\n    token_indices[step[\"assetOut\"]],\n    step[\"amount\"],\n    \"0x\",\n  ];\n  swap_steps_struct.push(swap_step_struct);\n}\n\nconst swap_kind = 0;\n\nconst iface = new ethers.utils.Interface(abi);\nconst encodedData = iface.encodeFunctionData(\"queryBatchSwap\", [\n  swap_kind,\n  swap_steps_struct,\n  assets,\n  funds,\n]);\n\nEthers.provider()\n  .call({\n    to: quoterContractId,\n    data: encodedData,\n  })\n  .then((data) => {\n    const decodedData = iface.decodeFunctionResult(\"queryBatchSwap\", data);\n\n    const estimate1 = Big(decodedData[0][1].toString())\n      .div(Big(10).pow(outputAsset.metadata.decimals))\n      .toFixed(18);\n\n    const estimate0 = Big(decodedData[0][0].toString())\n      .div(Big(10).pow(outputAsset.metadata.decimals))\n      .toFixed(18);\n\n    let estimate = 0;\n    if (typeof estimate0 == \"string\" && estimate0[0] == \"-\") {\n      estimate = estimate0.substring(1);\n    } else if (typeof estimate1 == \"string\" && estimate1[0] == \"-\") {\n      estimate = estimate1.substring(1);\n    }\n\n    State.update({\n      res: {\n        estimate,\n        tokenIn,\n        tokenOut,\n        pool: finalPool[0],\n      },\n    });\n  });\n\nif (state.res !== undefined) {\n  if (props.debug) {\n    console.log(\"res\", state.res);\n    return <pre>{JSON.stringify(state.res)}</pre>;\n  }\n\n  if (typeof loadRes === \"function\") {\n    loadRes(state.res);\n  }\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/balancer-queryBatchSwap", "__row_index": 1}