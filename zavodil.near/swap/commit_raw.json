{"tx_hash": "43X5fv5xAXNHAbgheuTc1aNivHyq3VD9LJK2DgvVcDiN", "action_id_social": "2q3qHNdBU6Troki1MHTBM7PMnA8EE6YMNA9Fm8f3Asqb-0-widget", "block_id": 89972172, "block_timestamp": "2023-04-19 22:20:19.831", "signer_id": "zavodil.near", "widget_name": "swap", "source_code": "const NETWORK_NEAR = \"NEAR\";\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_TODO = \"TODO\";\n\nState.init({\n  initialized: false,\n  inputAssetModalHidden: true,\n  outputAssetModalHidden: true,\n  inputAssetTokenId: \"NEAR\",\n  outputAssetTokenId:\n    \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n  inputAssetAmount: 1,\n  outputAssetAmount: 0,\n  //network: NETWORK_NEAR,\n  assets: [\n    \"NEAR\",\n    \"token.v2.ref-finance.near\",\n    \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n    \"token.burrow.near\",\n  ],\n  slippagetolerance: \"0.5\",\n  reloadPools: false,\n  estimate: {},\n  loadRes: (value) => {\n    State.update({\n      estimate: value,\n      outputAssetAmount: value === null ? \"\" : value.estimate,\n    });\n  },\n});\n\nconst refReferralId = props.refReferralId ?? \"zavodil.near\";\n\nif (!state.initialized) {\n  if (ethers !== undefined) {\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        console.log(\"chainId\", chainIdData.chainId);\n        if (chainIdData.chainId === 324) {\n          State.update({\n            assets: [\n              \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\", // USDC\n              \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\", // WETH\n              \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\", // BNB\n            ],\n            coinGeckoTokenIds: {\n              \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\":\n                \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n              \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\":\n                \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n              \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\":\n                \"0x418d75f65a02b3d53b2418fb8e1fe493759c7605\",\n            },\n            inputAssetTokenId: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n            outputAssetTokenId: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n            inputAsset: undefined,\n            outputAsset: undefined,\n            network: NETWORK_ZKSYNC,\n          });\n        } else {\n          State.update({\n            assets: [\n              \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n              \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", // DAI\n              \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n              \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\",\n              \"0xf7B098298f7C69Fc14610bf71d5e02c60792894C\",\n            ],\n            inputAssetTokenId: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n            outputAssetTokenId: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n            inputAsset: undefined,\n            outputAsset: undefined,\n            network: NETWORK_ETH,\n          });\n        }\n\n        State.update({ initialized: true });\n      });\n  } else {\n    State.update({ network: NETWORK_NEAR });\n  }\n} else {\n  State.update({ initialized: true });\n}\n\nconst css = fetch(\n  \"https://gist.githubusercontent.com/zavodil/5786d09502b0fbd042a920d804259130/raw/8dfc1154f6a9ebc5274463f60521385cc3728a19/swap.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n`,\n  });\n}\n\nconst Theme = state.theme;\n\nconst assetContainer = (\n  isInputAsset,\n  assetData,\n  amountName,\n  assetNameOnClick\n) => {\n  if (!assetData) return;\n  const useSpacer = !!isInputAsset;\n\n  const assetContainerClass = useSpacer\n    ? \"asset-container-top\"\n    : \"asset-container-bottom\";\n  return (\n    <>\n      <div class={`${assetContainerClass} asset-container`}>\n        <div class=\"swap-currency-input\">\n          <div class=\"swap-currency-input-block\">\n            <div class=\"swap-currency-input-top\">\n              <input\n                class=\"input-asset-amount\"\n                nputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                pattern=\"^[0-9]*[.,]?[0-9]*$\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state[amountName]}\n              />\n              <button class=\"input-asset-token\" onClick={assetNameOnClick}>\n                <span class=\"input-asset-token-menu\">\n                  <div class=\"input-asset-token-name\">\n                    <div class=\"input-asset-token-icon\">\n                      <img\n                        alt={`${assetData.metadata.name} logo`}\n                        src={assetData.metadata.icon}\n                        class=\"input-asset-token-icon-img\"\n                      />\n                    </div>\n                    <span class=\"input-asset-token-ticker\">\n                      {assetData.metadata.symbol}\n                    </span>\n                  </div>\n                  <svg\n                    width=\"12\"\n                    height=\"7\"\n                    viewBox=\"0 0 12 7\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"input-asset-token-expand\"\n                  >\n                    <path\n                      d=\"M0.97168 1L6.20532 6L11.439 1\"\n                      stroke=\"#AEAEAE\"\n                    ></path>\n                  </svg>\n                </span>\n              </button>\n            </div>\n            <div class=\"input-asset-details-container\">\n              <div class=\"input-asset-details-row\">\n                <div class=\"input-asset-details-price-container\">\n                  <div class=\"input-asset-details-price\">\n                    <div>${assetData.price}</div>\n                  </div>\n                </div>\n                <div class=\"input-asset-details-balance-container\">\n                  <div class=\"input-asset-details-balance-text\">\n                    Balance: {assetData.balance_hr}\n                  </div>\n                  {isInputAsset &&\n                    Number(state.inputAssetAmount) !==\n                      Number(assetData.balance_hr_full) && (\n                      <button\n                        class=\"input-asset-details-balance-button\"\n                        onClick={() =>\n                          State.update({\n                            [amountName]: assetData.balance_hr_full ?? 0,\n                          })\n                        }\n                      >\n                        Max\n                      </button>\n                    )}\n                </div>\n              </div>\n            </div>\n            {false && <div class=\"swap-currency-input-bottom\"></div>}\n          </div>\n        </div>\n      </div>\n      {useSpacer ? spacerContainer : <></>}\n    </>\n  );\n};\n\nconst rearrangeAssets = () => {\n  State.update({\n    inputAssetTokenId: state.outputAssetTokenId,\n    outputAssetTokenId: state.inputAssetTokenId,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    inputAssetAmount: state.outputAssetAmount,\n    outputAssetAmount: state.inputAssetAmount,\n  });\n};\n\nconst spacerContainer = (\n  <div class=\"spacer-container\">\n    <div class=\"spacer-block\" onClick={rearrangeAssets}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"#0D111C\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <polyline points=\"19 12 12 19 5 12\"></polyline>\n      </svg>\n    </div>\n  </div>\n);\n\nconst getRefTokenObject = (tokenId, assetData) => {\n  return {\n    id: tokenId,\n    decimals: assetData.metadata.decimals,\n    symbol: assetData.metadata.symbol,\n  };\n};\n\nif (state.network === NETWORK_ZKSYNC) {\n  if (state.routerAbi == undefined) {\n    const routerAbi = fetch(\n      \"https://gist.githubusercontent.com/0xnakato/80ca6221ef258b7b27bf309c8a3eeff2/raw/50b1b27d5a5741a37667d35e62b7f9bccd0c5847/SyncSwapRouter.json\"\n    );\n    if (!routerAbi.ok) {\n      return \"Loading\";\n    }\n    State.update({ routerAbi: routerAbi.body });\n  }\n\n  if (state.factoryABI == undefined) {\n    const factoryABI = fetch(\n      \"https://gist.githubusercontent.com/0xnakato/13e8393c09ea842912f5f2e5995e9770/raw/7d4edfa0a29de02f7b84d4fb79f1e6125ed0e7cc/SyncSwapClassicPoolFactory.json\"\n    );\n    if (!factoryABI.ok) {\n      return \"Loading\";\n    }\n    State.update({ factoryABI: factoryABI.body });\n  }\n}\n\nconst callTxZkSync = () => {\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  if (sender) {\n    const routerContract = \"0x2da10A1e27bF85cEdD8FFb1AbBe97e53391C0295\";\n\n    const classicPoolFactoryContractId =\n      \"0xf2DAd89f2788a8CD54625C60b55cD3d2D0ACa7Cb\";\n    const ifaceFactory = new ethers.utils.Interface(state.factoryABI);\n\n    const tokenIn = state.inputAssetTokenId;\n    const tokenOut = state.outputAssetTokenId;\n\n    const poolEncodedData = ifaceFactory.encodeFunctionData(\"getPool\", [\n      tokenIn,\n      tokenOut,\n    ]);\n\n    return Ethers.provider()\n      .call({\n        to: classicPoolFactoryContractId,\n        data: poolEncodedData,\n      })\n      .then((data) => {\n        const poolData = ifaceFactory.decodeFunctionResult(\"getPool\", data);\n        const poolId = poolData[0];\n\n        const withdrawMode = 1;\n\n        const swapData = ethers.utils.defaultAbiCoder.encode(\n          [\"address\", \"address\", \"uint8\"],\n          [tokenIn, sender, withdrawMode] // tokenIn, to, withdraw mode\n        );\n\n        const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n        const steps = [\n          {\n            pool: poolId,\n            data: swapData,\n            callback: ZERO_ADDRESS,\n            callbackData: \"0x\",\n          },\n        ];\n\n        const value = expandToken(\n          state.inputAssetAmount,\n          state.inputAsset.metadata.decimals\n        ).toFixed();\n\n        console.log(\n          \"Swapping\",\n          state.inputAssetTokenId,\n          value,\n          state.inputAsset\n        );\n\n        const paths = [\n          {\n            steps: steps,\n            tokenIn: tokenIn,\n            amountIn: value,\n          },\n        ];\n\n        const deadline = new Big(Math.floor(Date.now() / 1000)).add(\n          new Big(1800)\n        );\n\n        const swapContract = new ethers.Contract(\n          routerContract,\n          state.routerAbi,\n          Ethers.provider().getSigner()\n        );\n\n        swapContract\n          .swap(paths, 1, deadline.toFixed(), {\n            value,\n            gasPrice: ethers.utils.parseUnits(\"0.26\", \"gwei\"),\n            gasLimit: 20000000,\n          })\n          .then((transactionHash) => {\n            console.log(\"transactionHash\", transactionHash);\n            state.update({\n              outputAsset: undefined,\n            });\n          });\n      });\n  }\n};\n\nconst callTxRef = () => {\n  const tx = [];\n\n  const nearDeposit = {\n    contractName: \"wrap.near\",\n    methodName: \"near_deposit\",\n    deposit: expandToken(state.inputAssetAmount, 24).toFixed(),\n    gas: expandToken(50, 12),\n  };\n  const nearWithdraw = {\n    contractName: \"wrap.near\",\n    methodName: \"near_withdraw\",\n    deposit: new Big(\"1\").toFixed(),\n    args: {\n      amount: expandToken(state.inputAssetAmount, 24).toFixed(),\n    },\n  };\n\n  if (state.estimate.pool === \"wrap\") {\n    if (state.tokenIn.id === \"NEAR\") {\n      tx.push(nearDeposit);\n    } else {\n      tx.push(nearWithdraw);\n    }\n\n    return Near.call(tx);\n  }\n\n  if (register === null) {\n    tx.push({\n      contractName:\n        state.outputAssetTokenId === \"NEAR\"\n          ? \"wrap.near\"\n          : state.outputAssetTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.1, 24).toFixed(),\n      gas: expandToken(50, 12),\n      args: {\n        registration_only: true,\n        account_id: accountId,\n      },\n    });\n  }\n\n  if (state.inputAssetTokenId === \"NEAR\") {\n    tx.push(nearDeposit);\n  }\n\n  const minAmountOut = expandToken(\n    new Big(state.outputAssetAmount)\n      .mul(1 - Number(state.slippagetolerance) / 100)\n      .toFixed(state.outputAsset.metadata.decimals, 0),\n    state.outputAsset.metadata.decimals\n  ).toFixed();\n\n  tx.push({\n    methodName: \"ft_transfer_call\",\n    contractName:\n      state.inputAssetTokenId === \"NEAR\"\n        ? \"wrap.near\"\n        : state.inputAssetTokenId,\n    gas: expandToken(180, 12),\n    deposit: new Big(\"1\").toFixed(),\n    args: {\n      receiver_id: \"v2.ref-finance.near\",\n      amount: expandToken(\n        state.inputAssetAmount,\n        state.inputAsset.metadata.decimals\n      ).toFixed(0, 0),\n      msg: JSON.stringify({\n        referral_id: refReferralId,\n        actions: [\n          {\n            pool_id: Number(state.estimate.pool.id),\n            token_in:\n              state.inputAssetTokenId === \"NEAR\"\n                ? \"wrap.near\"\n                : state.inputAssetTokenId,\n            token_out:\n              state.outputAssetTokenId === \"NEAR\"\n                ? \"wrap.near\"\n                : state.outputAssetTokenId,\n            amount_in: expandToken(\n              state.inputAssetAmount,\n              state.inputAsset.metadata.decimals\n            ).toFixed(0, 0),\n            min_amount_out: minAmountOut,\n          },\n        ],\n      }),\n    },\n  });\n\n  if (state.outputAssetTokenId === \"NEAR\") {\n    tx.push({\n      contractName: \"wrap.near\",\n      methodName: \"near_withdraw\",\n      deposit: new Big(\"1\").toFixed(),\n      args: {\n        amount: minAmountOut,\n      },\n    });\n  }\n\n  Near.call(tx);\n};\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst canSwap =\n  state.network &&\n  Number(state.inputAsset.balance_hr_full) >= Number(state.inputAssetAmount) &&\n  Number(state.inputAssetAmount || 0) > 0;\n\nreturn (\n  <Theme>\n    {state.network && state.inputAsset && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal\"\n        props={{\n          hidden: state.inputAssetModalHidden ?? true,\n          network: state.network,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          selectedAssets: [state.inputAssetTokenId],\n          onClick: (tokenId) => {\n            State.update({\n              inputAssetModalHidden: true,\n              inputAssetTokenId: tokenId,\n              inputAsset: null,\n            });\n          },\n          onClose: () => State.update({ inputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {state.network && state.outputAsset && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal\"\n        props={{\n          hidden: state.outputAssetModalHidden ?? true,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          network: state.network,\n          selectedAssets: [state.outputAssetTokenId],\n          onClick: (tokenId) => {\n            State.update({\n              outputAssetModalHidden: true,\n              outputAssetTokenId: tokenId,\n              outputAsset: null,\n            });\n          },\n          onClose: () => State.update({ outputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {!state.inputAsset && state.network && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData\"\n        props={{\n          tokenId: state.inputAssetTokenId,\n          coinGeckoTokenId: state?.coinGeckoTokenIds?.[state.inputAssetTokenId],\n          network: state.network,\n          onLoad: (inputAsset) => {\n            inputAsset.metadata.symbol =\n              inputAsset.metadata.symbol.toUpperCase();\n            State.update({ inputAsset });\n          },\n        }}\n      />\n    )}\n    {!state.outputAsset && state.network && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData\"\n        props={{\n          tokenId: state.outputAssetTokenId,\n          coinGeckoTokenId:\n            state?.coinGeckoTokenIds?.[state.outputAssetTokenId],\n          network: state.network,\n          onLoad: (outputAsset) => {\n            outputAsset.metadata.symbol =\n              outputAsset.metadata.symbol.toUpperCase();\n            State.update({ outputAsset });\n          },\n        }}\n      />\n    )}\n\n    {state.network === NETWORK_NEAR &&\n      state.inputAsset &&\n      state.outputAsset && (\n        <Widget\n          src=\"weige.near/widget/ref-swap-getEstimate\"\n          props={{\n            loadRes: state.loadRes,\n            tokenIn: getRefTokenObject(\n              state.inputAssetTokenId,\n              state.inputAsset\n            ),\n            tokenOut: getRefTokenObject(\n              state.outputAssetTokenId,\n              state.outputAsset\n            ),\n            amountIn: state.inputAssetAmount ?? 0,\n            reloadPools: state.reloadPools,\n            setReloadPools: (value) =>\n              State.update({\n                reloadPools: value,\n              }),\n          }}\n        />\n      )}\n\n    {state.network === NETWORK_ETH && state.inputAsset && state.outputAsset && (\n      <>\n        <Widget\n          src=\"zavodil.near/widget/uni-v3-getEstimate\"\n          props={{\n            loadRes: state.loadRes,\n            tokenIn: state.inputAssetTokenId,\n            tokenOut: state.outputAssetTokenId,\n            tokenOutDecimals: state.outputAsset.metadata.decimals,\n            amountIn: expandToken(\n              state.inputAssetAmount,\n              state.inputAsset.metadata.decimals\n            ).toFixed(0),\n            reloadPools: state.reloadPools,\n            setReloadPools: (value) =>\n              State.update({\n                reloadPools: value,\n              }),\n          }}\n        />\n      </>\n    )}\n\n    {state.network === NETWORK_TODO &&\n      state.inputAsset &&\n      state.outputAsset && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/uni-v3-getEstimate\"\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n\n    <div class=\"swap-root\">\n      <div class=\"swap-main-container\">\n        <div class=\"swap-main-column\">\n          <div class=\"swap-page\">\n            <div class=\"top-container\">\n              {assetContainer(\n                true,\n                state.inputAsset,\n                \"inputAssetAmount\",\n                () => {\n                  State.update({ inputAssetModalHidden: false });\n                }\n              )}\n            </div>\n            <div class=\"bottom-container\">\n              <div>\n                {assetContainer(\n                  fasle,\n                  state.outputAsset,\n                  \"outputAssetAmount\",\n                  () => {\n                    State.update({ outputAssetModalHidden: false });\n                  }\n                )}\n                {!!state.outputAssetAmount && (\n                  <div class=\"swap-price-container\">\n                    <div class=\"swap-price-block\">\n                      <div class=\"swap-price-grid\">\n                        <div class=\"swap-price-row\">\n                          <div class=\"swap-price-details-container\">\n                            <span>\n                              <div class=\"swap-price-details-icon\">\n                                <div>\n                                  <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    width=\"24\"\n                                    height=\"24\"\n                                    viewBox=\"0 0 24 24\"\n                                    fill=\"none\"\n                                    stroke=\"#98A1C0\"\n                                    stroke-width=\"2\"\n                                    stroke-linecap=\"round\"\n                                    stroke-linejoin=\"round\"\n                                    class=\"swap-price-details-svg\"\n                                  >\n                                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                                    <line\n                                      x1=\"12\"\n                                      y1=\"16\"\n                                      x2=\"12\"\n                                      y2=\"12\"\n                                    ></line>\n                                    <line\n                                      x1=\"12\"\n                                      y1=\"8\"\n                                      x2=\"12.01\"\n                                      y2=\"8\"\n                                    ></line>\n                                  </svg>\n                                </div>\n                              </div>\n                            </span>\n                            <div class=\"swap-price-details-text\">\n                              <button class=\"swap-price-details-text-button\">\n                                <div class=\"swap-price-details-rate\">\n                                  {Number(state.inputAssetAmount) === 0\n                                    ? \" \"\n                                    : `1 ${\n                                        state.inputAsset.metadata.symbol\n                                      } \u2248 ${new Big(\n                                        state.outputAssetAmount ?? 0\n                                      )\n                                        .div(state.inputAssetAmount ?? 1)\n                                        .toFixed(4, 0)}\n                                        ${state.outputAsset.metadata.symbol}`}\n                                </div>\n                                <div class=\"swap-price-details-price\">\n                                  {Number(state.inputAssetAmount) === 0 ||\n                                  Number(state?.outputAsset?.price) === 0\n                                    ? \"\"\n                                    : `($${new Big(state.outputAssetAmount ?? 0)\n                                        .div(state.inputAssetAmount ?? 1)\n                                        .times(state?.outputAsset?.price ?? 1)\n                                        .toFixed(4)})`}\n                                </div>\n                              </button>\n                            </div>\n                          </div>\n                          <div class=\"swap-gas-details-container\">\n                            <div class=\"swap-gas-rate-container\">\n                              <div>\n                                <div class=\"swap-gas-rate-wrapper\">\n                                  {state.network === NETWORK_TODO && (\n                                    <div class=\"swap-gas-rate-block\">\n                                      <svg\n                                        width=\"16\"\n                                        height=\"16\"\n                                        viewBox=\"0 0 16 16\"\n                                        fill=\"none\"\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        class=\"swap-gas-rate-svg\"\n                                      >\n                                        <path\n                                          d=\"M10.0047 9.26921H10.2714C11.0078 9.26921 11.6047 9.86617 11.6047 10.6025V12.1359C11.6047 12.7987 12.142 13.3359 12.8047 13.3359C13.4675 13.3359 14.0047 12.7995 14.0047 12.1367V5.22059C14.0047 4.86697 13.7758 4.56227 13.5258 4.31223L10.6714 1.33594M4.00472 2.00254H8.00472C8.7411 2.00254 9.33805 2.59949 9.33805 3.33587V14.0015H2.67139V3.33587C2.67139 2.59949 3.26834 2.00254 4.00472 2.00254ZM14.0047 5.33587C14.0047 6.07225 13.4078 6.66921 12.6714 6.66921C11.935 6.66921 11.3381 6.07225 11.3381 5.33587C11.3381 4.59949 11.935 4.00254 12.6714 4.00254C13.4078 4.00254 14.0047 4.59949 14.0047 5.33587Z\"\n                                          stroke=\"white\"\n                                        ></path>\n                                        <line\n                                          x1=\"4\"\n                                          y1=\"9.99414\"\n                                          x2=\"8\"\n                                          y2=\"9.99414\"\n                                          stroke=\"white\"\n                                        ></line>\n                                        <line\n                                          x1=\"4\"\n                                          y1=\"11.9941\"\n                                          x2=\"8\"\n                                          y2=\"11.9941\"\n                                          stroke=\"white\"\n                                        ></line>\n                                        <path\n                                          d=\"M4 8.16113H8\"\n                                          stroke=\"white\"\n                                        ></path>\n                                      </svg>\n                                      $5.45\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            <div class=\"swap-gas-rate-spacer\" r=\"svg\"></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div class=\"swap-button-container\">\n                <button\n                  class={canSwap ? \"swap-button-enabled\" : \"swap-button\"}\n                  onClick={() => {\n                    if (canSwap) {\n                      if (state.network === NETWORK_NEAR) {\n                        callTxRef();\n                      } else if (state.network === NETWORK_ZKSYNC) {\n                        callTxZkSync();\n                      }\n                    }\n                  }}\n                >\n                  <div class=\"swap-button-text\">Swap</div>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/swap"}