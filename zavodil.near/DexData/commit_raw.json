{"tx_hash": "CQwzu77hkbd7WM7yVsRCAKgc51NPPyHxQ9hSxEUQW76J", "action_id_social": "FQk6guaUbUTHxQnUvfdwdLvgEdm3huHQgVk8qegAK18j-0-widget", "block_id": 90102038, "block_timestamp": "2023-04-21 15:09:07.595", "signer_id": "zavodil.near", "widget_name": "DexData", "source_code": "let onLoad = props.onLoad;\nconst debug = props.debug;\n\nconst NETWORK_NEAR = \"NEAR\";\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\n\nState.init({ loadComplete: false });\n\nif (debug) {\n  onLoad = (data) => {\n    if (data) {\n      console.log(\"onLoad triggered\", data);\n      if (typeof props.onLoad === \"function\") {\n        props.onLoad(data);\n      }\n\n      State.update({ debugOutput: <div>Data: [{JSON.stringify(data)}]</div> });\n    }\n  };\n}\n\nif (state.loadComplete) {\n  return state.debugOutput ?? <div />;\n}\n\nif (typeof onLoad !== \"function\") return \"Error\";\n\n// SUBMIT TX EVENTS\n\nconst callTxSyncSwap = (input, onComplete, gweiPrice) => {\n  if (input.sender && input.routerContract !== undefined) {\n    const classicPoolFactoryContractId =\n      \"0xf2DAd89f2788a8CD54625C60b55cD3d2D0ACa7Cb\";\n    const ifaceFactory = new ethers.utils.Interface(input.factoryAbi);\n\n    const tokenIn = input.inputAssetTokenId;\n    const tokenOut = input.outputAssetTokenId;\n\n    const poolEncodedData = ifaceFactory.encodeFunctionData(\"getPool\", [\n      tokenIn,\n      tokenOut,\n    ]);\n\n    return Ethers.provider()\n      .call({\n        to: classicPoolFactoryContractId,\n        data: poolEncodedData,\n      })\n      .then((data) => {\n        const poolData = ifaceFactory.decodeFunctionResult(\"getPool\", data);\n        const poolId = poolData[0];\n\n        const withdrawMode = 1;\n\n        const swapData = ethers.utils.defaultAbiCoder.encode(\n          [\"address\", \"address\", \"uint8\"],\n          [tokenIn, input.sender, withdrawMode] // tokenIn, to, withdraw mode\n        );\n\n        const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n        const steps = [\n          {\n            pool: poolId,\n            data: swapData,\n            callback: ZERO_ADDRESS,\n            callbackData: \"0x\",\n          },\n        ];\n\n        const value = expandToken(\n          input.inputAssetAmount,\n          input.inputAsset.metadata.decimals\n        ).toFixed();\n\n        console.log(\n          \"Swapping\",\n          input.inputAssetTokenId,\n          value,\n          input.inputAsset\n        );\n\n        const paths = [\n          {\n            steps: steps,\n            tokenIn: tokenIn,\n            amountIn: value,\n          },\n        ];\n\n        const deadline = new Big(Math.floor(Date.now() / 1000)).add(\n          new Big(1800)\n        );\n\n        const swapContract = new ethers.Contract(\n          input.routerContract,\n          input.routerAbi,\n          Ethers.provider().getSigner()\n        );\n\n        swapContract\n          .swap(paths, 1, deadline.toFixed(), {\n            value,\n            gasPrice: ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\"),\n            gasLimit: 20000000,\n          })\n          .then((transactionHash) => {\n            onComplete(transactionHash);\n          });\n      });\n  }\n};\n\nconst callTxUni = (input, onComplete, gasPrice) => {\n  if (input.sender && input.routerContract !== undefined && input.routerAbi) {\n    const value = expandToken(\n      input.inputAssetAmount,\n      input.inputAsset.metadata.decimals\n    ).toFixed();\n\n    const swapContract = new ethers.Contract(\n      input.routerContract,\n      input.routerAbi,\n      Ethers.provider().getSigner()\n    );\n\n    swapContract\n      .swapExactTokensForTokens(\n        value,\n        \"0\",\n        [input.inputAssetTokenId, input.outputAssetTokenId],\n        input.sender,\n        {\n          gasPrice: ethers.utils.parseUnits(gasPrice ?? \"0.50\", \"gwei\"),\n          gasLimit: 20000000,\n        }\n      )\n      .then((transactionHash) => {\n        onComplete(transactionHash);\n      });\n  }\n};\n\nconst callTokenApproval = (input, onComplete, gweiPrice) => {\n  if (\n    input.sender &&\n    input.erc20Abi &&\n    input.inputAssetAmount &&\n    input.routerContract\n  ) {\n    const value = expandToken(\n      input.inputAssetAmount,\n      input.inputAsset.metadata.decimals\n    ).toFixed();\n\n    const approveContract = new ethers.Contract(\n      input.inputAssetTokenId,\n      input.erc20Abi,\n      Ethers.provider().getSigner()\n    );\n\n    approveContract\n      .approve(input.routerContract, value, {\n        gasPrice: ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\"),\n        gasLimit: 20000000,\n      })\n      .then((transactionHash) => {\n        onComplete(transactionHash);\n      });\n  }\n};\n\nconst callTxRef = (input, onComplete, expandToken) => {\n  const tx = [];\n\n  const nearDeposit = {\n    contractName: \"wrap.near\",\n    methodName: \"near_deposit\",\n    deposit: expandToken(input.inputAssetAmount, 24).toFixed(),\n    gas: expandToken(50, 12),\n  };\n  const nearWithdraw = {\n    contractName: \"wrap.near\",\n    methodName: \"near_withdraw\",\n    deposit: new Big(\"1\").toFixed(),\n    args: {\n      amount: expandToken(input.inputAssetAmount, 24).toFixed(),\n    },\n  };\n\n  if (input.estimate.pool === \"wrap\") {\n    if (input.tokenIn.id === \"NEAR\") {\n      tx.push(nearDeposit);\n    } else {\n      tx.push(nearWithdraw);\n    }\n\n    return Near.call(tx).then(() => onComplete());\n  }\n\n  if (register === null) {\n    tx.push({\n      contractName:\n        input.outputAssetTokenId === \"NEAR\"\n          ? \"wrap.near\"\n          : input.outputAssetTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.1, 24).toFixed(),\n      gas: expandToken(50, 12),\n      args: {\n        registration_only: true,\n        account_id: accountId,\n      },\n    });\n  }\n\n  if (input.inputAssetTokenId === \"NEAR\") {\n    tx.push(nearDeposit);\n  }\n\n  const minAmountOut = expandToken(\n    new Big(input.outputAssetAmount)\n      .mul(1 - Number(input.slippagetolerance) / 100)\n      .toFixed(input.outputAsset.metadata.decimals, 0),\n    input.outputAsset.metadata.decimals\n  ).toFixed();\n\n  tx.push({\n    methodName: \"ft_transfer_call\",\n    contractName:\n      input.inputAssetTokenId === \"NEAR\"\n        ? \"wrap.near\"\n        : input.inputAssetTokenId,\n    gas: expandToken(180, 12),\n    deposit: new Big(\"1\").toFixed(),\n    args: {\n      receiver_id: \"v2.ref-finance.near\",\n      amount: expandToken(\n        input.inputAssetAmount,\n        input.inputAsset.metadata.decimals\n      ).toFixed(0, 0),\n      msg: JSON.stringify({\n        referral_id: refReferralId,\n        actions: [\n          {\n            pool_id: Number(input.estimate.pool.id),\n            token_in:\n              input.inputAssetTokenId === \"NEAR\"\n                ? \"wrap.near\"\n                : input.inputAssetTokenId,\n            token_out:\n              input.outputAssetTokenId === \"NEAR\"\n                ? \"wrap.near\"\n                : input.outputAssetTokenId,\n            amount_in: expandToken(\n              input.inputAssetAmount,\n              input.inputAsset.metadata.decimals\n            ).toFixed(0, 0),\n            min_amount_out: minAmountOut,\n          },\n        ],\n      }),\n    },\n  });\n\n  if (input.outputAssetTokenId === \"NEAR\") {\n    tx.push({\n      contractName: \"wrap.near\",\n      methodName: \"near_withdraw\",\n      deposit: new Big(\"1\").toFixed(),\n      args: {\n        amount: minAmountOut,\n      },\n    });\n  }\n\n  Near.call(tx).then(() => onComplete());\n};\n\n// FINAL RESULTS\n\nconst NearData = {\n  network: NETWORK_NEAR,\n  inputAssetTokenId: \"NEAR\",\n  outputAssetTokenId:\n    \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n  dexName: \"Ref Finance\",\n  assets: [\n    \"NEAR\",\n    \"token.v2.ref-finance.near\",\n    \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n    \"token.burrow.near\",\n  ],\n  callTx: callTxRef,\n};\n\nif (ethers !== undefined && Ethers.send(\"eth_requestAccounts\", [])[0]) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      console.log(\"chainId\", chainIdData.chainId);\n      if (chainIdData.chainId === 324) {\n        // ZKSYNC\n\n        if (state.routerAbi == undefined) {\n          const routerAbi = fetch(\n            \"https://gist.githubusercontent.com/0xnakato/80ca6221ef258b7b27bf309c8a3eeff2/raw/50b1b27d5a5741a37667d35e62b7f9bccd0c5847/SyncSwapRouter.json\"\n          );\n          if (!routerAbi.ok) {\n            return \"Loading\";\n          }\n          State.update({ routerAbi: routerAbi.body });\n        }\n\n        if (state.factoryAbi == undefined) {\n          const factoryAbi = fetch(\n            \"https://gist.githubusercontent.com/0xnakato/13e8393c09ea842912f5f2e5995e9770/raw/7d4edfa0a29de02f7b84d4fb79f1e6125ed0e7cc/SyncSwapClassicPoolFactory.json\"\n          );\n          if (!factoryAbi.ok) {\n            return \"Loading\";\n          }\n          State.update({ factoryAbi: factoryAbi.body });\n        }\n\n        if (state.erc20Abi == undefined) {\n          const erc20Abi = fetch(\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n          );\n          if (!erc20Abi.ok) {\n            return \"Loading\";\n          }\n          State.update({ erc20Abi: erc20Abi.body });\n        }\n\n        if (!state.routerAbi || !state.factoryAbi || !state.erc20Abi)\n          return \"Loading ABIs\";\n\n        onLoad({\n          network: NETWORK_ZKSYNC,\n          assets: [\n            \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\", // USDC\n            \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\", // WETH\n            \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\", // BNB\n          ],\n          coinGeckoTokenIds: {\n            \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\":\n              \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\":\n              \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n            \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\":\n              \"0x418d75f65a02b3d53b2418fb8e1fe493759c7605\",\n          },\n          inputAssetTokenId: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n          outputAssetTokenId: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n          routerContract: \"0x2da10A1e27bF85cEdD8FFb1AbBe97e53391C0295\",\n          dexName: \"SyncSwap\",\n          routerAbi: state.routerAbi,\n          factoryABI: state.factoryABI,\n          erc20Abi: state.erc20Abi,\n          callTx: callTxSyncSwap,\n          callTokenApproval,\n        });\n        State.update({ loadComplete: true });\n      } else if (chainIdData.chainId === 1) {\n        // ETH\n\n        if (state.erc20Abi == undefined) {\n          const erc20Abi = fetch(\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n          );\n          if (!erc20Abi.ok) {\n            return \"Loading\";\n          }\n          State.update({ erc20Abi: erc20Abi.body });\n        }\n\n        if (state.routerAbi == undefined) {\n          const routerAbi = fetch(\n            \"https://gist.githubusercontent.com/zavodil/108a3719d4ac4b53131b09872ff81b83/raw/82561cf48afcc72861fa8fa8283b33c04da316d7/SwapRouter02.json\"\n          );\n          if (!routerAbi.ok) {\n            return \"Loading\";\n          }\n\n          State.update({ routerAbi: routerAbi.body });\n        }\n\n        if (!state.routerAbi || !state.erc20Abi) return \"Loading ABIs\";\n\n        onLoad({\n          network: NETWORK_ETH,\n          assets: [\n            \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n            \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", // DAI\n            \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n            \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\",\n            \"0xf7B098298f7C69Fc14610bf71d5e02c60792894C\",\n          ],\n          inputAssetTokenId: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n          outputAssetTokenId: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          routerContract: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n          dexName: \"UniSwap\",\n          erc20Abi: state.erc20Abi,\n          routerAbi: state.routerAbi,\n          callTx: callTxUni,\n          callTokenApproval,\n        });\n        State.update({ loadComplete: true });\n      } else {\n        // not supported evm chain\n        onLoad(NearData);\n        State.update({ loadComplete: true });\n      }\n    });\n} else {\n  // ethers not supported on this gateway\n  onLoad(NearData);\n  State.update({ loadComplete: true });\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/DexData"}