{"tx_hash": "6EoBqsVgGgVRL9sqLzUPg6Wg5xipEDgRAVFKBRjpnenX", "action_id_social": "2UrXeovaWAuJsgtBz59593kkorau8ffPAhaS3WRFP2TR-0-widget", "block_id": 90420335, "block_timestamp": "2023-04-25 19:45:49.128", "signer_id": "zavodil.near", "widget_name": "DexData", "source_code": "const { NETWORK_NEAR, NETWORK_ETH, NETWORK_ZKSYNC, debug } = props;\r\nlet onLoad = props.onLoad;\r\nconst forceReload = props.forceReload ?? false;\r\n\r\nState.init({ loadComplete: false });\r\n\r\nif (state.loadComplete && !forceReload) {\r\n  return state.debugOutput ?? <div />;\r\n}\r\n\r\nif (debug) {\r\n  onLoad = (data) => {\r\n    if (data) {\r\n      console.log(\"onLoad triggered\", data);\r\n      if (typeof props.onLoad === \"function\") {\r\n        props.onLoad(data);\r\n      }\r\n\r\n      State.update({ debugOutput: <div>Data: [{JSON.stringify(data)}]</div> });\r\n    }\r\n  };\r\n}\r\n\r\nif (typeof onLoad !== \"function\") return \"Error\";\r\n\r\n// SUBMIT TX EVENTS\r\n\r\nconst expandToken = (value, decimals) => {\r\n  return new Big(value).mul(new Big(10).pow(decimals));\r\n};\r\n\r\nconst callTxSyncSwap = (input, onComplete, gweiPrice) => {\r\n  if (\r\n    input.sender &&\r\n    input.routerContract !== undefined &&\r\n    input.inputAssetAmount &&\r\n    input.inputAsset.metadata?.decimals\r\n  ) {\r\n    const classicPoolFactoryContractId =\r\n      \"0xf2DAd89f2788a8CD54625C60b55cD3d2D0ACa7Cb\";\r\n    const ifaceFactory = new ethers.utils.Interface(input.factoryAbi);\r\n\r\n    const tokenIn = input.inputAssetTokenId;\r\n    const tokenOut = input.outputAssetTokenId;\r\n\r\n    const poolEncodedData = ifaceFactory.encodeFunctionData(\"getPool\", [\r\n      tokenIn,\r\n      tokenOut,\r\n    ]);\r\n\r\n    return Ethers.provider()\r\n      .call({\r\n        to: classicPoolFactoryContractId,\r\n        data: poolEncodedData,\r\n      })\r\n      .then((data) => {\r\n        const poolData = ifaceFactory.decodeFunctionResult(\"getPool\", data);\r\n        const poolId = poolData[0];\r\n\r\n        const withdrawMode = 1;\r\n\r\n        const swapData = ethers.utils.defaultAbiCoder.encode(\r\n          [\"address\", \"address\", \"uint8\"],\r\n          [tokenIn, input.sender, withdrawMode] // tokenIn, to, withdraw mode\r\n        );\r\n\r\n        const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\n        const steps = [\r\n          {\r\n            pool: poolId,\r\n            data: swapData,\r\n            callback: ZERO_ADDRESS,\r\n            callbackData: \"0x\",\r\n          },\r\n        ];\r\n\r\n        const value = expandToken(\r\n          input.inputAssetAmount,\r\n          input.inputAsset.metadata.decimals\r\n        ).toFixed();\r\n\r\n        console.log(\r\n          \"Swapping\",\r\n          input.inputAssetTokenId,\r\n          value,\r\n          input.inputAsset\r\n        );\r\n\r\n        const paths = [\r\n          {\r\n            steps: steps,\r\n            tokenIn: tokenIn,\r\n            amountIn: value,\r\n          },\r\n        ];\r\n\r\n        const deadline = new Big(Math.floor(Date.now() / 1000)).add(\r\n          new Big(1800)\r\n        );\r\n\r\n        const swapContract = new ethers.Contract(\r\n          input.routerContract,\r\n          input.routerAbi,\r\n          Ethers.provider().getSigner()\r\n        );\r\n\r\n        swapContract\r\n          .swap(paths, 1, deadline.toFixed(), {\r\n            value,\r\n            gasPrice: ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\"),\r\n            gasLimit: 20000000,\r\n          })\r\n          .then((transactionHash) => {\r\n            onComplete(transactionHash);\r\n          });\r\n      });\r\n  }\r\n};\r\n\r\nconst callTxUni = (input, onComplete, gasPrice) => {\r\n  console.log(\"callTxUni\", input, onComplete);\r\n  if (\r\n    input.sender &&\r\n    input.routerContract !== undefined &&\r\n    input.routerAbi &&\r\n    input.inputAssetAmount &&\r\n    input.inputAsset.metadata.decimals\r\n  ) {\r\n    const value = expandToken(\r\n      input.inputAssetAmount,\r\n      input.inputAsset.metadata.decimals\r\n    ).toFixed();\r\n\r\n    const swapContract = new ethers.Contract(\r\n      input.routerContract,\r\n      input.routerAbi,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    swapContract\r\n      .swapExactTokensForTokens(\r\n        value,\r\n        \"0\",\r\n        [input.inputAssetTokenId, input.outputAssetTokenId],\r\n        input.sender,\r\n        {\r\n          gasPrice: ethers.utils.parseUnits(gasPrice ?? \"0.50\", \"gwei\"),\r\n          gasLimit: 20000000,\r\n        }\r\n      )\r\n      .then((transactionHash) => {\r\n        onComplete(transactionHash);\r\n      });\r\n  }\r\n};\r\n\r\nconst callTokenApprovalEVM = (input, onComplete, gweiPrice) => {\r\n  if (\r\n    input.sender &&\r\n    input.erc20Abi &&\r\n    input.inputAssetAmount &&\r\n    input.inputAsset.metadata.decimals &&\r\n    input.routerContract\r\n  ) {\r\n    const value = expandToken(\r\n      input.inputAssetAmount,\r\n      input.inputAsset.metadata.decimals\r\n    ).toFixed();\r\n\r\n    const approveContract = new ethers.Contract(\r\n      input.inputAssetTokenId,\r\n      input.erc20Abi,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    approveContract\r\n      .approve(input.routerContract, value, {\r\n        gasPrice: ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\"),\r\n        gasLimit: 20000000,\r\n      })\r\n      .then((transactionHash) => {\r\n        onComplete(transactionHash);\r\n      });\r\n  }\r\n};\r\n\r\nconst callTxRef = (input, onComplete) => {\r\n  const tx = [];\r\n\r\n  const nearDeposit = {\r\n    contractName: \"wrap.near\",\r\n    methodName: \"near_deposit\",\r\n    deposit: expandToken(input.inputAssetAmount, 24).toFixed(),\r\n    gas: expandToken(50, 12),\r\n  };\r\n  const nearWithdraw = {\r\n    contractName: \"wrap.near\",\r\n    methodName: \"near_withdraw\",\r\n    deposit: new Big(\"1\").toFixed(),\r\n    args: {\r\n      amount: expandToken(input.inputAssetAmount, 24).toFixed(),\r\n    },\r\n  };\r\n\r\n  if (input.estimate.pool === \"wrap\") {\r\n    if (input.tokenIn.id === \"NEAR\") {\r\n      tx.push(nearDeposit);\r\n    } else {\r\n      tx.push(nearWithdraw);\r\n    }\r\n\r\n    return Near.call(tx).then(() => onComplete());\r\n  }\r\n\r\n  if (register === null) {\r\n    tx.push({\r\n      contractName:\r\n        input.outputAssetTokenId === \"NEAR\"\r\n          ? \"wrap.near\"\r\n          : input.outputAssetTokenId,\r\n      methodName: \"storage_deposit\",\r\n      deposit: expandToken(0.1, 24).toFixed(),\r\n      gas: expandToken(50, 12),\r\n      args: {\r\n        registration_only: true,\r\n        account_id: accountId,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (input.inputAssetTokenId === \"NEAR\") {\r\n    tx.push(nearDeposit);\r\n  }\r\n\r\n  const minAmountOut = expandToken(\r\n    new Big(input.outputAssetAmount)\r\n      .mul(1 - Number(input.slippagetolerance) / 100)\r\n      .toFixed(input.outputAsset.metadata.decimals, 0),\r\n    input.outputAsset.metadata.decimals\r\n  ).toFixed();\r\n\r\n  tx.push({\r\n    methodName: \"ft_transfer_call\",\r\n    contractName:\r\n      input.inputAssetTokenId === \"NEAR\"\r\n        ? \"wrap.near\"\r\n        : input.inputAssetTokenId,\r\n    gas: expandToken(180, 12),\r\n    deposit: new Big(\"1\").toFixed(),\r\n    args: {\r\n      receiver_id: \"v2.ref-finance.near\",\r\n      amount: expandToken(\r\n        input.inputAssetAmount,\r\n        input.inputAsset.metadata.decimals\r\n      ).toFixed(0, 0),\r\n      msg: JSON.stringify({\r\n        referral_id: refReferralId,\r\n        actions: [\r\n          {\r\n            pool_id: Number(input.estimate.pool.id),\r\n            token_in:\r\n              input.inputAssetTokenId === \"NEAR\"\r\n                ? \"wrap.near\"\r\n                : input.inputAssetTokenId,\r\n            token_out:\r\n              input.outputAssetTokenId === \"NEAR\"\r\n                ? \"wrap.near\"\r\n                : input.outputAssetTokenId,\r\n            amount_in: expandToken(\r\n              input.inputAssetAmount,\r\n              input.inputAsset.metadata.decimals\r\n            ).toFixed(0, 0),\r\n            min_amount_out: minAmountOut,\r\n          },\r\n        ],\r\n      }),\r\n    },\r\n  });\r\n\r\n  if (input.outputAssetTokenId === \"NEAR\") {\r\n    tx.push({\r\n      contractName: \"wrap.near\",\r\n      methodName: \"near_withdraw\",\r\n      deposit: new Big(\"1\").toFixed(),\r\n      args: {\r\n        amount: minAmountOut,\r\n      },\r\n    });\r\n  }\r\n\r\n  Near.call(tx).then(() => onComplete());\r\n};\r\n\r\n// FINAL RESULTS\r\n\r\nconst NearData = {\r\n  network: NETWORK_NEAR,\r\n  inputAssetTokenId: \"NEAR\",\r\n  outputAssetTokenId:\r\n    \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\r\n  dexName: \"Ref Finance\",\r\n  assets: [\r\n    \"NEAR\",\r\n    \"token.v2.ref-finance.near\",\r\n    \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\r\n    \"token.burrow.near\",\r\n  ],\r\n  callTx: callTxRef,\r\n};\r\n\r\nif (ethers !== undefined && Ethers.send(\"eth_requestAccounts\", [])[0]) {\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((chainIdData) => {\r\n      console.log(\"chainId\", chainIdData.chainId);\r\n      if (chainIdData.chainId === 324) {\r\n        // ZKSYNC\r\n\r\n        if (state.routerAbi == undefined) {\r\n          const routerAbi = fetch(\r\n            \"https://gist.githubusercontent.com/0xnakato/80ca6221ef258b7b27bf309c8a3eeff2/raw/50b1b27d5a5741a37667d35e62b7f9bccd0c5847/SyncSwapRouter.json\"\r\n          );\r\n          if (!routerAbi.ok) {\r\n            return \"Loading\";\r\n          }\r\n          State.update({ routerAbi: routerAbi.body });\r\n        }\r\n\r\n        if (state.factoryAbi == undefined) {\r\n          const factoryAbi = fetch(\r\n            \"https://gist.githubusercontent.com/0xnakato/13e8393c09ea842912f5f2e5995e9770/raw/7d4edfa0a29de02f7b84d4fb79f1e6125ed0e7cc/SyncSwapClassicPoolFactory.json\"\r\n          );\r\n          if (!factoryAbi.ok) {\r\n            return \"Loading\";\r\n          }\r\n          State.update({ factoryAbi: factoryAbi.body });\r\n        }\r\n\r\n        if (state.erc20Abi == undefined) {\r\n          const erc20Abi = fetch(\r\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n          );\r\n          if (!erc20Abi.ok) {\r\n            return \"Loading\";\r\n          }\r\n          State.update({ erc20Abi: erc20Abi.body });\r\n        }\r\n\r\n        if (!state.routerAbi || !state.factoryAbi || !state.erc20Abi)\r\n          return \"Loading ABIs\";\r\n\r\n        onLoad({\r\n          network: NETWORK_ZKSYNC,\r\n          assets: [\r\n            \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\", // USDC\r\n            \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\", // WETH\r\n            \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\", // BNB\r\n          ],\r\n          coinGeckoTokenIds: {\r\n            \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\":\r\n              \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\r\n            \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\":\r\n              \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\r\n            \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\":\r\n              \"0x418d75f65a02b3d53b2418fb8e1fe493759c7605\",\r\n          },\r\n          inputAssetTokenId: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\r\n          outputAssetTokenId: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\r\n          routerContract: \"0x2da10A1e27bF85cEdD8FFb1AbBe97e53391C0295\",\r\n          dexName: \"SyncSwap\",\r\n          routerAbi: state.routerAbi,\r\n          factoryAbi: state.factoryAbi,\r\n          erc20Abi: state.erc20Abi,\r\n          callTx: callTxSyncSwap,\r\n          callTokenApproval: callTokenApprovalEVM,\r\n        });\r\n        State.update({ loadComplete: true });\r\n      } else if (chainIdData.chainId === 1) {\r\n        // ETH\r\n\r\n        if (state.erc20Abi == undefined) {\r\n          const erc20Abi = fetch(\r\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n          );\r\n          if (!erc20Abi.ok) {\r\n            return \"Loading\";\r\n          }\r\n          State.update({ erc20Abi: erc20Abi.body });\r\n        }\r\n\r\n        if (state.routerAbi == undefined) {\r\n          const routerAbi = fetch(\r\n            \"https://gist.githubusercontent.com/zavodil/108a3719d4ac4b53131b09872ff81b83/raw/82561cf48afcc72861fa8fa8283b33c04da316d7/SwapRouter02.json\"\r\n          );\r\n          if (!routerAbi.ok) {\r\n            return \"Loading\";\r\n          }\r\n\r\n          State.update({ routerAbi: routerAbi.body });\r\n        }\r\n\r\n        if (!state.routerAbi || !state.erc20Abi) return \"Loading ABIs\";\r\n\r\n        onLoad({\r\n          network: NETWORK_ETH,\r\n          assets: [\r\n            \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\r\n            \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", // DAI\r\n            \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\r\n            \"0xf7B098298f7C69Fc14610bf71d5e02c60792894C\",\r\n          ],\r\n          inputAssetTokenId: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\r\n          outputAssetTokenId: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n          routerContract: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\r\n          dexName: \"UniSwap\",\r\n          erc20Abi: state.erc20Abi,\r\n          routerAbi: state.routerAbi,\r\n          callTx: callTxUni,\r\n          callTokenApproval: callTokenApprovalEVM,\r\n        });\r\n        State.update({ loadComplete: true });\r\n      } else {\r\n        // not supported evm chain\r\n        onLoad(NearData);\r\n        State.update({ loadComplete: true });\r\n      }\r\n    });\r\n} else {\r\n  // ethers not supported on this gateway\r\n  onLoad(NearData);\r\n  State.update({ loadComplete: true });\r\n}\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/DexData"}