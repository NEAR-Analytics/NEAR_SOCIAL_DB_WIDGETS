{"tx_hash": "DtfHgzgidUXuPJ87V6JHRdKdKGPCj5sThX5dJ5UdFFqK", "action_id_social": "Dczgv53F4jPPUM6EdBcAAUdUGjzsxJormokhyhk8E1Y2-0-widget", "block_id": 93950474, "block_timestamp": "2023-06-11T08:05:44.240Z", "signer_id": "sipars.near", "widget_name": "App", "source_code": "const Heading = styled.h1`\n  margin-top: 30px;\n  text-align: center;\n  color: #8f73ff;\n`\nconst SubHeading = styled.h2`\n  color: #e3e6ec;\n  margin-top: 20px;\n  text-align: center;\n  font-size: 18px;\n`\nconst LoginContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  height: 80vh;\n  background-color: #1c1f2a;\n`\n\nconst ButtonContainer = styled.div`\n  margin-top: 120px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid #e3e6ec;\n  border-radius: 10px;\n`\n\nconst Footer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 20px;\n`\n\nconst HorizontalLine = styled.hr`\n  width: 100%;\n  border: none;\n  border-top: 1px solid #e3e6ec;\n  margin-bottom: 10px;\n`\n\nconst FooterText = styled.p`\n  font-size: 14px;\n  color: #e3e6ec;\n`\n\nState.init({\n  currentAccountId: '',\n})\n\nconst getEVMAccountId = () => {\n  if (ethers !== undefined) {\n    return Ethers.send('eth_requestAccounts', [])[0] ?? ''\n  }\n  return ''\n}\n\nconst fetchCred = (application) => {\n  return asyncFetch('http://46.101.224.69:3001/api/issue', {\n    body: JSON.stringify({\n      did: application.address,\n      name: application.fullName,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    mode: 'no-cors',\n  })\n}\n\n// Update on Action from AdminPage\nconst updatePendingApplications = (action, application) => {\n  const pendingApplications = Storage.privateGet('pendingApplications')\n  const updatedApplications = pendingApplications.filter(\n    (item) => item.address !== application.address,\n  )\n  Storage.privateSet('pendingApplications', updatedApplications)\n  if (action === 'accept') {\n    const updatedAccepted = Storage.privateGet('acceptedApplications') || []\n    updatedAccepted.push(application)\n    Storage.privateSet('acceptedApplications', updatedAccepted)\n    fetchCred(application).then((res) => {\n      console.log('Resulting Credential: ', res)\n      Storage.privateSet(application.address, res)\n    })\n  } else if (action === 'reject') {\n    const updatedRejected = Storage.privateGet('rejectedApplications') || []\n    updatedRejected.push(application)\n    Storage.privateSet('rejectedApplications', updatedRejected)\n    Storage.privateSet(application.address, 'rejected')\n  }\n  console.log('updatedApplications: ', updatedApplications)\n}\n\n// Add a new pending application\nconst addPendingApplication = (application) => {\n  console.log('inside pending add')\n  const pendingApplications = Storage.privateGet('pendingApplications') || []\n  pendingApplications.push(application)\n  Storage.privateSet('pendingApplications', pendingApplications)\n  Storage.privateSet(application.address, 'pending')\n}\n\nconsole.log('pending storage: ', Storage.privateGet('pendingApplications'))\nconsole.log('accepted storage: ', Storage.privateGet('acceptedApplications'))\nconsole.log('rejected storage: ', Storage.privateGet('rejectedApplications'))\n\nlet userComponentToRender = null\n\nif (state.currentAccountId.length === 0)\n  state.currentAccountId = getEVMAccountId()\n\nif (state.currentAccountId.length > 0) {\n  // Storage.privateSet(\"pendingApplications\", undefined);\n  // Storage.privateSet(\"acceptedApplications\", undefined);\n  // Storage.privateSet(\"rejectedApplications\", undefined);\n  // Storage.privateSet(\"0x890bb55136b71898357716b2eb13c6ecfeda04e5\", undefined);\n  // Storage.privateSet(\"0xaA8cAf7E17086678876740b6c8087eb632a7578D\", undefined);\n  console.log('sss: ', state.currentAccountId, isAdmin)\n  const status = Storage.privateGet(state.currentAccountId)\n  if (typeof status === 'undefined') {\n    userComponentToRender = (\n      <Widget\n        src=\"sipars.testnet/widget/InputForm\"\n        props={{ state, addPendingApplication }}\n      />\n    )\n  } else if (status === 'rejected' || status === 'pending') {\n    userComponentToRender = (\n      <Widget src=\"sipars.testnet/widget/AfterSubmission\" props={{ status }} />\n    )\n  } else {\n    const cred = Storage.privateGet(state.currentAccountId)\n    userComponentToRender = (\n      <Widget src=\"sipars.testnet/widget/Certification\" props={{ cred }} />\n    )\n  }\n}\nconst isAdmin = true\nconsole.log('currentAccountId: ', state.currentAccountId, isAdmin)\nreturn (\n  <>\n    {state.currentAccountId.length > 0 ? (\n      isAdmin ? (\n        <Widget\n          src=\"sipars.testnet/widget/PendingApplicationsTable\"\n          props={{\n            pendingApplications:\n              Storage.privateGet('pendingApplications') || [],\n            updatePendingApplications,\n          }}\n        />\n      ) : (\n        userComponentToRender\n      )\n    ) : (\n      <LoginContainer>\n        <Heading>Welcome to the Login Page</Heading>\n        <SubHeading>\n          Start here with creation of an immutable and verifiable certificate\n        </SubHeading>\n        <Heading3>Please login with your fancy wallet</Heading3>\n        <ButtonContainer>\n          <Web3Connect\n            className=\"swap-button-enabled swap-button-text p-2\"\n            connectLabel=\"Connect with wallet\"\n          />\n        </ButtonContainer>\n        <Footer>\n          <HorizontalLine />\n          <FooterText>With Love from TBC &#x2665;</FooterText>\n        </Footer>\n      </LoginContainer>\n    )}\n  </>\n)\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sipars.near/widget/App", "__row_index": 4}