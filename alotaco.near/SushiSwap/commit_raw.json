{"tx_hash": "2G3VttFYYPY7GE2nAbpze8oFPnf7GnyvpV9gfPfA2Xfe", "action_id_social": "4wMARw5ScuRXJxAbD2oArVjKbienMSqGitcK1BFjE2ko-0-widget", "block_id": 87337353, "block_timestamp": "2023-03-15 08:23:27.303", "signer_id": "alotaco.near", "widget_name": "SushiSwap", "source_code": "// FETCH LIDO ABI\n\nconst lidoContract = \"0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\";\n\nconst mainnetLidoContract = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nconst gorliLidoContract = \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\";\nconst tokenDecimals = 18;\n//const sushiTokenContract = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\n\n//const network = \"gorli\"; // \"gorli\" // \"rinkeby\" // \"mainnet\"\n\nconst network = \"mainnet\";\nswitch (network) {\n  case \"gorli\":\n    lidoContract = gorliLidoContract;\n    break;\n  case \"mainnet\":\n    lidoContract = mainnetLidoContract;\n    break;\n  case \"ropsten\":\n    lidoContract = mainnetLidoContract;\n    break;\n  default:\n    lidoContract = mainnetLidoContract;\n    break;\n}\n\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/cloudmex/sushiswap-bos/main/abi-sushi.json\"\n);\n\nconsole.log(lidoAbi);\n\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// FETCH LIDO STAKING APR\n\n/*if (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}*/\n\n// HELPER FUNCTIONS\n\n/*const getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};*/\n\nconst getAmountOut = (amountIn, address) => {\n  const encodedData = iface.encodeFunctionData(\"getAmountsOut\", [\n    amountIn,\n    address,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"getAmountsOut\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\nconst submitEthers = (strEther, _referral) => {\n  const ETHaddress = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\n  const SUSHIaddress = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  const contract = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n  console.log(contract);\n\n  let amountIn = ethers.utils.parseUnits(strEther, decimals[ETHaddress]);\n  console.log(\"Amount In\", amountIn);\n\n  const amountOutString = (parseFloat(strEther) - 0.05).toString();\n  //const amountOutString = parseFloat(strEther).toString();\n  console.log(amountOutString);\n\n  let amountOut = ethers.utils.parseUnits(\n    amountOutString,\n    decimals[SUSHIaddress]\n  );\n  console.log(\"Amount Out\", amountOut);\n\n  const tokenFromBig = ethers.utils.parseUnits(\n    state.balance,\n    decimals[ETHaddress]\n  );\n  /*\n  if (amountIn.gt(tokenFromBig)) {\n    State.update({\n      log: `You don't have enough!`,\n    });\n    resetLog(2000);\n    return;\n  }\n*/\n  console.log(\n    amountIn,\n    amountOut,\n    [ETHaddress, SUSHIaddress],\n    Ethers.provider().getSigner().getAddress(),\n    Date.now() + 60 * 1000\n  );\n\n  let routes = [ETHaddress, SUSHIaddress];\n  routes = [\n    {\n      from: state.tokenFrom,\n      to: state.tokenTo,\n      stable: true,\n    },\n  ];\n\n  contract\n    .swapExactTokensForTokens(\n      amountIn,\n      amountOut,\n      [ETHaddress, SUSHIaddress],\n      Ethers.provider().getSigner().getAddress(),\n      Date.now() + 60 * 1000\n    )\n    .then((tx) => {\n      State.update({\n        log: \"The TX hash is: \" + tx.hash,\n        explorerLink: \"https://tuber.build/tx/\" + tx.hash,\n      });\n    })\n    .catch(handleTxError);\n};\n/*\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"11111\", erc20);\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  //uint amountOutMin, address[] calldata path, address to, uint deadline\n  //const ETHaddress = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\n  //const SUSHIaddress = \"0x6b3595068778dd592e39a122f4f5a5cf09c90fe2\";\n\n  let ARR = [\n    \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n  ];\n  let amountOut = getAmountOut(amount, ARR);\n  console.log(\"Amount Out\", amountOut);\n  console.log(\"amount\", amount);\n  console.log(\"ARR\", ARR);\n  console.log(\n    \"Ethers.provider().getSigner()\",\n    Ethers.provider().getSigner().getAddress()\n  );\n  console.log(\"block.timestamp + 60 1678849571\");\n  let finalamountout = ethers.utils\n    .parseUnits(amountOut, tokenDecimals)\n    .toHexString();\n\n  erc20\n    .swapExactETHForTokens(\n      finalamountout,\n      ARR,\n      //Ethers.provider().getSigner(),\n      Ethers.provider().getSigner().getAddress(),\n      Date.now() + 180\n    )\n    .then((transactionHash) => {\n      console.log(\"transactionHash is \" + transactionHash);\n    });\n};\n*/\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\n/*\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}*/\n\n// FETCH TX COST\n\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Swap $ETH &lt;&gt; $USDT</div>\n      <div class=\"SubHeader\">Swap ETH and receive SUSHI</div>\n\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to swap</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\n              ></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                //strEther: (parseFloat(state.balance) - 0.05).toFixed(2),\n                strEther: parseFloat(state.balance).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitEthers(state.strEther, state.sender)}\n          >\n            <span>Swap</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <div class=\"LidoFooterContainer\">\n          {state.sender && (\n            <div class=\"LidoFooterRaw\">\n              <div class=\"LidoFooterRawLeft\">You will receive</div>\n              <div class=\"LidoFooterRawRight\">${state.strEther ?? 0} USDT</div>\n            </div>\n          )}\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Exchange rate</div>\n            <div class=\"LidoFooterRawRight\">1 ETH = 1500 USDT</div>\n          </div>\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Transaction cost</div>\n            <div class=\"LidoFooterRawRight\">{state.txCost}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/alotaco.near/widget/SushiSwap", "metadata.tags.ethdenver2023": NaN}