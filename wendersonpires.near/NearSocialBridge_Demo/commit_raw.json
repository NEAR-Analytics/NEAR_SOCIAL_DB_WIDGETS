{"tx_hash": "HJGfYCZPCToYhKFDB1jTFXhc6FEpaFt5YtT3Cy2PAvYP", "action_id_social": "3Dqs6s5ePD5n6RQBLuvrvNW4EisS33WdtnvY78nGeZYE-0-widget", "block_id": 88215076, "block_timestamp": "2023-03-27 07:38:19.396", "signer_id": "wendersonpires.near", "widget_name": "NearSocialBridge_Demo", "source_code": "// This is a DEV env Widget\nif (!context.accountId || context.accountId !== \"wendersonpires.near\")\n  return null;\n\n/**\n * External App URL (must)\n */\nconst externalAppUrl = \"https://near-test-app.web.app/\";\n// const externalAppUrl = \"https://0af717709fb2.ngrok.app\";\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\n/**\n * Initial Payload (optional) - Do not use async data here, it may fail to be ready before sending this initial payload.\n * If you want to get some data, make a \"request\"\n */\nconst initialPayload = {};\n\n// Migration\n// Storage.privateSet(\"app:rooms-list\", [\n//   \"near-social-community\",\n//   \"bos\",\n//   \"satori\",\n//   \"dragon-ball-z\",\n//   \"sala-teste-1\",\n// ]);\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"get-room-data\":\n      getRoomDataHandler(request, response, Utils);\n      break;\n    case \"send-message\":\n      sendMessageHandler(request, response);\n      break;\n    case \"register-new-room\":\n      registerNewRoomHandler(request, response, Utils);\n      break;\n    case \"get-rooms-list\":\n      getRoomsListHandler(request, response, Utils);\n      break;\n  }\n};\n\nconst getRoomDataHandler = (request, response, Utils) => {\n  const { payload } = request;\n  Utils.promisify(\n    () =>\n      Social.index(payload.roomId, \"data\", {\n        subscribe: true,\n        limit: 100,\n        order: \"desc\",\n      }),\n    (roomData) => {\n      const roomExists = roomData && roomData.length > 0;\n      if (!roomExists) {\n        response(request).send({ error: \"room not found\" });\n        return;\n      }\n      response(request).send({ messages: roomData });\n    },\n    (err) => {\n      response(request).send({ error: \"internal error\" });\n    }\n  );\n};\n\nconst sendMessageHandler = (request, response) => {\n  const { payload } = request;\n  if (payload.roomId && payload.message) {\n    // Store message\n    Social.set(\n      {\n        index: {\n          [payload.roomId]: JSON.stringify(\n            {\n              key: \"data\",\n              value: payload.message,\n            },\n            undefined,\n            0\n          ),\n        },\n      },\n      {\n        force: true,\n        onCommit: () => {\n          response(request).send();\n        },\n        onCancel: () => {\n          response(request).send({ error: \"the action was canceled\" });\n        },\n      }\n    );\n    return;\n  }\n\n  // Error\n  response(request).send({\n    error: \"you must provide the roomId and a message prop\",\n  });\n};\n\nconst registerNewRoomHandler = (request, response, Utils) => {\n  const { roomId } = request.payload;\n  if (!roomId) {\n    response(request).send({ error: \"you must provide the roomId prop\" });\n    return;\n  }\n\n  Utils.promisify(\n    () => Storage.privateGet(\"app:rooms-list\"),\n    (rooms) => {\n      if (rooms.includes(roomId)) {\n        response(request).send({ roomsList: rooms });\n        return;\n      }\n\n      // Update the rooms list\n      const updatedRoomsList = [...rooms, roomId];\n      Storage.privateSet(\"app:rooms-list\", updatedRoomsList);\n      response(request).send({ roomsList: updatedRoomsList });\n    }\n  );\n};\n\nconst getRoomsListHandler = (request, response, Utils) => {\n  console.log(\"CHEGOU AQUI 2\");\n  Utils.promisify(\n    () => Storage.privateGet(\"app:rooms-list\"),\n    (rooms) => {\n      // Send the rooms list\n      setTimeout(() => {\n        console.log(rooms);\n        response(request).send({ roomsList: rooms });\n      }, 1000);\n    }\n  );\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeWithExternalApp_Test\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/wendersonpires.near/widget/NearSocialBridge_Demo"}