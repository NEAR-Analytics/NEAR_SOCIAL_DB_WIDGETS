{"tx_hash": "FKDxbzj5U5VEU3NNRa8zJ7x9E8uxC9ouxZh9hZodvAGH", "action_id_social": "C13hQ5USD9WBhB2BiB9PMi22jMs2GQ8Tg3cjJBgNVPFc-0-widget", "block_id": 87962611, "block_timestamp": "2023-03-23 19:30:54.799", "signer_id": "wendersonpires.near", "widget_name": "NearSocialBridge_Demo", "source_code": "/**\n * External App URL (must)\n */\nconst externalAppUrl = \"https://ce00f45c553c.ngrok.app\";\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\n/**\n * Initial Payload (optional) - Do not use async data here, it may fail to be ready before sending this initial payload.\n * If you want to get some data, make a \"request\"\n */\nconst initialPayload = {\n  mamilos: \"polemicos\",\n};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request\n * @param {(request) => {send: () => void}} response\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} Utils\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"get-room-data\":\n      getRoomDataHandler(request, response, Utils);\n      break;\n  }\n};\n\nconst getRoomDataHandler = (request, response, Utils) => {\n  const { payload } = request;\n  Utils.promisify(\n    () =>\n      Social.index(payload.roomId, \"data\", {\n        subscribe: true,\n        limit: 100,\n        order: \"desc\",\n      }),\n    (roomData) => {\n      const roomExists = roomData && roomData.length > 0;\n      if (!roomExists) {\n        response(request).send({ error: \"room not found\" });\n        return;\n      }\n      response(request).send({ messages: roomData });\n    },\n    (err) => {\n      console.log(\"B\");\n      response(request).send({ error: \"internal error\" });\n    }\n  );\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n      utilsProvider,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/wendersonpires.near/widget/NearSocialBridge_Demo"}