{"tx_hash": "5ixwi51qP9ePLSTZSS7Hyzi8P4VLmEAdGEty9ddJSDyX", "action_id_social": "D2SngBBoGh57mqwBLYRkXzpXQwWCASRUY8SoHhNvYzqK-0-widget", "block_id": 87948213, "block_timestamp": "2023-03-23 14:31:23.725", "signer_id": "wendersonpires.near", "widget_name": "NearSocialBridgeCore", "source_code": "/**\n * Near Social Bridge - Core\n *\n * This is part of a library that allows you to inject an external React App in a Widget created inside\n * Near Social as well as send and receive data from it.\n *\n * Basically, The View works as a Backend source.\n *\n * Visit https://github.com/wpdas/near-social-bridge to get to know how to use it\n */\n\n// (i) Discovery API uses cached data structure\nconst Utils = {\n  /**\n   * Send message\n   */\n  sendMessage: (message) => {\n    State.update({\n      currentMessage: message,\n    });\n  },\n  /**\n   * Call resolve or reject for a given caller\n   * E.g:\n   * Utils.promisify(() => getCachedObject(), (res) => console.log(res), (err) => console.log(err))\n   */\n  promisify: (caller, resolve, reject) => {\n    const timer = 1000;\n    const timeout = timer * 10;\n    let timeoutCheck = 0;\n\n    const find = () => {\n      const response = caller();\n      if (response) {\n        resolve(response);\n      } else {\n        if (timeoutCheck < timeout) {\n          // try again\n          setTimeout(find, 1000);\n          timeoutCheck += timer;\n        } else {\n          reject(null);\n        }\n      }\n    };\n\n    // Fist attempt\n    find();\n  },\n};\n\n// External App Url\n// const externalAppUrl = \"https://near-test-app.firebaseapp.com/\";\nconst externalAppUrl = \"https://ce00f45c553c.ngrok.app\";\n\n// User Info\nconst accountId = context.accountId;\nconst userInfo = { accountId };\n\n// Initial Path\nconst initialPath = props.path;\n\n// Initial iframe height\nconst initialIframeHeight = 500;\n\n// Initial State\nState.init({\n  iframeHeight: initialIframeHeight,\n  sessionStorageClone: {},\n  // (i) DON'T send async data, it's going to randonly fail\n  // If you need to get new info, use \"request\" for that\n  currentMessage: {\n    type: \"connect\",\n    payload: {\n      userInfo,\n      initialPath,\n      // NEW TODO - add other new propertie to send as initial Payload\n      // Let then now that async data may fail\n    },\n    created_at: Date.now(),\n  },\n});\n\n// Answer Factory\nconst buildAnswer = (requestType, payload) => {\n  return {\n    from: \"core\",\n    type: \"answer\",\n    requestType,\n    payload,\n    created_at: Date.now(),\n  };\n};\n\n// Message handler\nconst onMessageHandler = (message) => {\n  requestsHandler(message);\n};\n\n// CORE - REQUEST HANDLERS BELOW\nconst requestsHandler = (message) => {\n  switch (message.type) {\n    case \"nsb:navigation:sync-content-height\":\n      setIframeHeight(message.type, message.payload);\n      break;\n    case \"nsb:session-storage:hydrate-viewer\":\n      sessionStorageHydrateViewer(message.type, message.payload);\n      break;\n    case \"nsb:session-storage:hydrate-app\":\n      sessionStorageHydrateApp(message.type, message.payload);\n      break;\n    case \"nsb:auth:get-user-info\":\n      getUserInfo(message.type, message.payload);\n      break;\n  }\n};\n\n// [DON'T REMOVE]: Set thew new iFrame height based on the new screen/route\nconst setIframeHeight = (requestType, payload) => {\n  State.update({ iframeHeight: payload.height + 20 });\n};\n\n// [DON'T REMOVE]: Hydrate View session data with data provided by the External App\nconst sessionStorageHydrateViewer = (requestType, payload) => {\n  if (payload) {\n    State.update({ sessionStorageClone: payload });\n  }\n\n  const responseBody = buildAnswer(requestType, payload);\n  Utils.sendMessage(responseBody);\n};\n\n// [DON'T REMOVE]: Hydrate External App with data provided by the View\nconst sessionStorageHydrateApp = (requestType, payload) => {\n  const responseBody = buildAnswer(requestType, state.sessionStorageClone);\n  Utils.sendMessage(responseBody);\n};\n\n// [DON'T REMOVE]: Get user info\nconst getUserInfo = (requestType, payload) => {\n  Utils.promisify(\n    () => Social.getr(`${accountId}/profile`), // profile info\n    (res) => {\n      const responseBody = buildAnswer(requestType, {\n        accountId,\n        profileInfo: res,\n      });\n      Utils.sendMessage(responseBody);\n    },\n    (err) => {\n      console.error(\"error fetching profile data\", err);\n    }\n  );\n};\n// CORE - REQUEST HANDLERS ABOVE\n\nreturn (\n  <div>\n    <iframe\n      className=\"w-100\"\n      style={{ height: `${state.iframeHeight}px` }}\n      src={externalAppUrl}\n      message={state.currentMessage}\n      onMessage={onMessageHandler}\n    />\n  </div>\n);\n", "metadata": NaN, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/wendersonpires.near/widget/NearSocialBridgeCore", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.bridge": NaN, "metadata.tags.library": NaN, "metadata.tags.react": NaN, "metadata.tags.social": NaN, "branch.draft.": NaN, "branch.draft.metadata": NaN}