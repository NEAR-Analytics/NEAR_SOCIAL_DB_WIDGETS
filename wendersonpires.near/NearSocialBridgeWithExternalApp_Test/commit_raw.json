{"tx_hash": "6Q8RTisgrGJfg6E1koTU8kz9Umt74XMsP9QtAU9vWURi", "action_id_social": "FjNu4KTkMNAzKn7QiUke7Vetg4ZFbqTREH5QGnLbgbC2-0-widget", "block_id": 88209989, "block_timestamp": "2023-03-27 06:03:09.807", "signer_id": "wendersonpires.near", "widget_name": "NearSocialBridgeWithExternalApp_Test", "source_code": "// Crucial checks\nif (!props.externalAppUrl) {\n  return (\n    <p style={{ fontWeight: 600, color: \"#AB2E28\", fontFamily: \"Courier new\" }}>\n      Error: \"externalAppUrl\" prop must be provided\n    </p>\n  );\n}\n\n/**\n * Load React, React Dom and the Core Bridge library\n *\n * It's recommended to use VSCode to edit this code.\n * Save this code in the core.js file as well.\n */\nconst code = `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<div id=\"bridge-root\"></div>\n<script src=\"https://unpkg.com/near-social-bridge@1.0.0-beta8/widget/core.min.js\" crossorigin></script>\n`;\n\n// (i) Discovery API uses cached data structure.\nconst Utils = {\n  /**\n   * Send message\n   */\n  sendMessage: (message) => {\n    State.update({\n      currentMessage: message,\n    });\n  },\n  /**\n   * Call resolve or reject for a given caller\n   * E.g:\n   * Utils.promisify(() => getCachedObject(), (res) => console.log(res), (err) => console.log(err))\n   */\n  promisify: (caller, resolve, reject) => {\n    const timer = 1000;\n    const timeout = timer * 10;\n    let timeoutCheck = 0;\n\n    const find = () => {\n      const response = caller();\n      if (response) {\n        resolve(response);\n      } else {\n        if (timeoutCheck < timeout) {\n          // try again\n          setTimeout(find, 1000);\n          timeoutCheck += timer;\n        } else {\n          reject(null);\n        }\n      }\n    };\n\n    // Fist attempt\n    find();\n  },\n};\n\n// External App Url\nconst externalAppUrl = props.externalAppUrl;\n\n// User Info\nconst accountId = context.accountId;\nconst userInfo = { accountId };\n\n// Initial Path\nconst initialPath = props.path;\n\n// Initial iframe height\nconst initialIframeHeight = props.initialViewHeight || 500;\n\n// Initial Payload (optional)\nconst initialPayload = props.initialPayload || {};\n\n// Initial State\nState.init({\n  iframeHeight: initialIframeHeight,\n  lastMsgSentAt: new Date(),\n  // (i) DON'T send async data, it's going to randonly fail\n  // If you need to get new info, use \"request\" for that\n  currentMessage: {\n    type: \"connect-view\",\n    externalAppUrl,\n    userInfo,\n    initialPath,\n    initialPayload,\n    initialIframeHeight,\n  },\n});\n\n// Answer Factory\nconst buildAnswer = (requestType, payload) => {\n  return {\n    from: \"view\",\n    type: \"answer\",\n    requestType,\n    payload,\n    created_at: Date.now(),\n  };\n};\n\n/**\n * Widget response factory - closure\n *\n * E.g:\n * const response = responseFactory.build()\n * response({type: 'request-type'}).send({myPayloadHere: 123})\n */\nconst responseFactory = {\n  build: () => {\n    return (request) => {\n      return {\n        send: (payload) => {\n          const responseBody = buildAnswer(request.type, payload);\n          Utils.sendMessage(responseBody);\n        },\n      };\n    };\n  },\n};\n\nconst onMessageHandler = (message) => {\n  // Handles core calls\n  if (message.type.includes(\"nsb:\")) {\n    handlerCoreRequests(message);\n    return;\n  }\n\n  // Handles Widget request calls:\n  // - request: payload sent by External App\n  // - response: method to send the answer back to the External App\n  // - utils: Utils features like: promisify, ...\n  const request = {\n    type: message.type,\n    payload: message.payload,\n  };\n  const utils = {\n    promisify: Utils.promisify,\n  };\n  props.requestHandler(request, responseFactory.build(), utils);\n};\n\n// REQUEST HANDLERS BELOW\n// Todos os tipos \"nsb\" passam pelo core.js primeiro\nconst handlerCoreRequests = (message) => {\n  switch (message.type) {\n    case \"nsb:navigation:sync-content-height\":\n      setIframeHeight(message.type, message.payload);\n      break;\n    // NEW\n    case \"nsb:auth:get-user-info\":\n      getUserInfo(message.type, message.payload);\n      break;\n    // NEW\n  }\n};\n\n// [DON'T REMOVE]: Set thew new iFrame height based on the new screen/route\nconst setIframeHeight = (requestType, payload) => {\n  State.update({ iframeHeight: payload.height + 20 });\n};\n\n// NEW\n// [DON'T REMOVE]\n// Get user info\nconst getUserInfo = (requestType, payload) => {\n  // check if user is signed in\n  if (!accountId) {\n    const responseBody = buildAnswer(requestType, {\n      error: \"user is not signed in\",\n    });\n    Utils.sendMessage(responseBody);\n    return;\n  }\n\n  Utils.promisify(\n    () => Social.getr(`${accountId}/profile`), // profile info\n    (res) => {\n      const responseBody = buildAnswer(requestType, {\n        accountId,\n        profileInfo: res,\n      });\n      Utils.sendMessage(responseBody);\n    },\n    (err) => {\n      console.log(\"error fetching profile data\", err);\n    }\n  );\n};\n// NEW\n// REQUEST HANDLERS ABOVE\n\nreturn (\n  <div>\n    <iframe\n      className=\"w-100\"\n      style={{ height: `${state.iframeHeight}px` }}\n      srcDoc={code}\n      message={state.currentMessage}\n      onMessage={onMessageHandler}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/wendersonpires.near/widget/NearSocialBridgeWithExternalApp_Test"}