{"tx_hash": "Brpa8jZXqs9xVG9zYnaJrenPU3hBteyFdzJ87jRDYYUo", "action_id_social": "Croxkd8GTZttfoWxMrfXv6tP9D2Vrr2xRbYSQzHwcJQ1-0-widget", "block_id": 87464089, "block_timestamp": "2023-03-17 02:24:28.761", "signer_id": "wendersonpires.near", "widget_name": "NearSocialBridgeWithExternalApp_Test", "source_code": "// SETUP: [Navigation] Get URL params\nconst urlParams = props.r;\n\nlet sessionStorageClone = {};\n\n// SETUP:  message sender (it will re-send the message to the iframe source)\nconst sendMessage = (message) => {\n  State.update({\n    currentMessage: message,\n  });\n};\n\n// SETUP: Answer Factory\nconst buildAnswer = (requestType, payload) => {\n  return {\n    type: \"answer\",\n    requestType,\n    payload,\n  };\n};\n\n// SETUP: Set initial state\nState.init({\n  // SETUP:  message sender (it will re-send the message to the iframe source)\n  currentMessage: {},\n  connectMessageSent: false,\n  env: \"development\", // Possible values: 'development' | 'production'\n  // SETUP: [Session Storage] It'll always have the same data provided inside the external app\n  sessionStorageClone: {},\n  // SETUP: [Bridge Service]: status. This is used to avoid issues during the development process\n  // when the app reloads after user changes any file\n  bridgeServiceStatus: \"pending\", // Possible values: 'pending' | 'connected'\n});\n\n// SETUP: Connect Payload data sent once the connection is established\nconst accountId = props.accountId ?? context.accountId ?? \"*\";\nconst profileInfo = props.profile ?? Social.getr(`${accountId}/profile`);\nconst createConnectionPayload = () => ({\n  type: \"connect\",\n  created_at: Date.now(),\n  payload: {\n    // must have data\n    urlParams,\n    bridgeServiceStatus: state.bridgeServiceStatus,\n    // additional data below (optional)\n    accountId,\n    ipfsCidAvatar: profileInfo.image?.ipfs_cid,\n  },\n});\nconst welcomePayload = createConnectionPayload();\n\n// Wait a bit to send the \"connect\" payload only after all the scripts are loaded\nsetTimeout(() => {\n  State.update({ connectMessageSent: true });\n  if (!state.connectMessageSent) {\n    sendMessage(welcomePayload);\n\n    // If in Development mode, check the connection every 2 seconds.\n    // This is because the external app can be reloaded when the developer\n    // makes changes to it and the connection is lost\n    if (state.env === \"development\") {\n      setInterval(() => {\n        sendMessage(createConnectionPayload());\n      }, 2000);\n    }\n  }\n}, 0);\n\n// SETUP: On message handler. On get message handler (from the External App)\nconst onMessageHandler = (message) => {\n  console.log(\"Viewer onMessageHandler:\", message);\n  switch (message.type) {\n    case \"nsb:session-storage:hydrate-viewer\":\n      sessionStorageHydrateViewer(message.type, message.payload);\n      break;\n    case \"nsb:session-storage:hydrate-app\":\n      sessionStorageHydrateApp(message.type, message.payload);\n      break;\n    case \"nsb:bridge-service:update-status\":\n      updateBridgeServiceStatus(message.type, message.payload);\n      break;\n    case \"nsb:bridge-service:get-status\":\n      sendBridgeServiceStatusToExternalApp(message.type, message.payload);\n      break;\n    // Custom handlers below\n    case \"get-updated-user-info\":\n      sendUpdatedUserInfo(message.type, message.payload);\n      break;\n  }\n};\n\nconst sessionStorageHydrateViewer = (requestType, payload) => {\n  if (payload) {\n    State.update({ sessionStorageClone: payload });\n  }\n\n  const responseBody = buildAnswer(requestType);\n  sendMessage(responseBody);\n};\n\nconst sessionStorageHydrateApp = (requestType, payload) => {\n  const responseBody = buildAnswer(requestType, state.sessionStorageClone);\n  sendMessage(responseBody);\n};\n\nconst updateBridgeServiceStatus = (requestType, payload) => {\n  if (payload) {\n    State.update({ bridgeServiceStatus: payload });\n  }\n\n  const responseBody = buildAnswer(requestType);\n  sendMessage(responseBody);\n};\n\nconst sendBridgeServiceStatusToExternalApp = (requestType, payload) => {\n  const responseBody = buildAnswer(requestType, state.bridgeServiceStatus);\n  sendMessage(responseBody);\n};\n\n// SETUP: Custom Handlers Below\n\n// Request: get updated user info\nconst sendUpdatedUserInfo = (requestType, payload) => {\n  const updatedUserInfo = buildAnswer(requestType, {\n    accountId,\n    profileInfo,\n  });\n  sendMessage(updatedUserInfo);\n};\n\nreturn (\n  <iframe\n    id=\"main-iframe\"\n    className=\"w-100\"\n    style={{ height: \"800px\" }}\n    // Load external app\n    src=\"https://6fa4294326de.ngrok.app/\"\n    // Data the Near Social View is going to send to the External App\n    message={state.currentMessage}\n    // When the external app send a message back to the NS View\n    onMessage={onMessageHandler}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/wendersonpires.near/widget/NearSocialBridgeWithExternalApp_Test"}