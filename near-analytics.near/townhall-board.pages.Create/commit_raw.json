{"tx_hash": null, "action_id_social": "CBiEBfNbirMfvi5foGVrVfgpfWAjgYVBzhEPAUtqZdo1-0-widget", "block_id": 93757595, "block_timestamp": "2023-06-08T19:18:54.632Z", "signer_id": "near-analytics.near", "widget_name": "townhall-board.pages.Create", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearNFDevsContractAccountId =\n  props.nearNFDevsContractAccountId ||\n  (context.widgetSrc ?? \"near-analytics.near\").split(\"/\", 1)[0];\n\nconst nearNFDevsWidgetsAccountId =\n  props.nearNFDevsWidgetsAccountId ||\n  (context.widgetSrc ?? \"near-analytics.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearNFDevsContractAccountId: props.nearNFDevsContractAccountId,\n    nearNFDevsWidgetsAccountId: props.nearNFDevsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearNFDevsWidgetsAccountId}/widget/townhall-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearNFDevsContractAccountId) {\n    linkProps.nearNFDevsContractAccountId = props.nearNFDevsContractAccountId;\n  }\n\n  if (props.nearNFDevsWidgetsAccountId) {\n    linkProps.nearNFDevsWidgetsAccountId = props.nearNFDevsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearNFDevsWidgetsAccountId}/widget/townhall-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst parentId = props.parentId ?? null;\nconst postId = props.postId ?? null;\nconst mode = props.mode ?? \"Create\";\n\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\nconst labelStrings = (props.labels ? props.labels.split(\",\") : []).concat(\n  referralLabels\n);\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\ninitState({\n  seekingFunding: false,\n  //\n  author_id: context.accountId,\n  // Should be a list of objects with field \"name\".\n  labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings,\n  postType: \"Idea\",\n  name: props.name ?? \"\",\n  description: props.description ?? \"\",\n  amount: props.amount ?? \"\",\n  token: props.token ?? \"NEAR\",\n  supervisor: props.supervisor ?? \"neardevgov.near\",\n  githubLink: props.githubLink ?? \"\",\n  warning: \"\",\n});\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearNFDevsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst onSubmit = () => {\n  let labels = state.labelStrings;\n\n  let body = {\n    name: state.name,\n    description: generateDescription(\n      state.description,\n      state.amount,\n      state.token,\n      state.supervisor\n    ),\n  };\n\n  if (state.postType === \"Solution\") {\n    body = {\n      ...body,\n      post_type: \"Submission\",\n      submission_version: \"V1\",\n    };\n  } else {\n    // Idea\n    body = {\n      ...body,\n      post_type: \"Idea\",\n      idea_version: \"V1\",\n    };\n  }\n\n  if (!context.accountId) return;\n\n  let txn = [];\n  if (mode == \"Create\") {\n    txn.push({\n      contractName: nearNFDevsContractAccountId,\n      methodName: \"add_post\",\n      args: {\n        parent_id: parentId,\n        labels,\n        body: body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  } else if (mode == \"Edit\") {\n    txn.push({\n      contractName: nearNFDevsContractAccountId,\n      methodName: \"edit_post\",\n      args: {\n        id: postId,\n        labels,\n        body: body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  }\n  if (mode == \"Create\" || mode == \"Edit\") {\n    if (grantNotify === false) {\n      txn.unshift({\n        contractName: \"social.near\",\n        methodName: \"grant_write_permission\",\n        args: {\n          predecessor_id: nearNFDevsContractAccountId,\n          keys: [context.accountId + \"/index/notify\"],\n        },\n        deposit: Big(10).pow(23),\n        gas: Big(10).pow(12).mul(30),\n      });\n    }\n    Near.call(txn);\n  }\n};\n\nconst onIdeaClick = () => {\n  State.update({ postType: \"Idea\", seekingFunding: false });\n};\n\nconst onSolutionClick = () => {\n  State.update({ postType: \"Solution\" });\n};\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst checkLabel = (label) => {\n  Near.asyncView(nearNFDevsContractAccountId, \"is_allowed_to_use_labels\", {\n    editor: context.accountId,\n    labels: [label],\n  }).then((allowed) => {\n    if (allowed) {\n      State.update({ warning: \"\" });\n    } else {\n      State.update({\n        warning:\n          'The label \"' +\n          label +\n          '\" is protected and can only be added by moderators',\n      });\n      return;\n    }\n  });\n};\n\nconst setLabels = (labels) => {\n  labels = labels.map((o) => {\n    o.name = normalizeLabel(o.name);\n    return o;\n  });\n  if (labels.length < state.labels.length) {\n    let oldLabels = new Set(state.labels.map((label) => label.name));\n    for (let label of labels) {\n      oldLabels.delete(label.name);\n    }\n    let removed = oldLabels.values().next().value;\n    Near.asyncView(nearNFDevsContractAccountId, \"is_allowed_to_use_labels\", {\n      editor: context.accountId,\n      labels: [removed],\n    }).then((allowed) => {\n      if (allowed) {\n        let labelStrings = labels.map(({ name }) => name);\n        State.update({ labels, labelStrings });\n      } else {\n        State.update({\n          warning:\n            'The label \"' +\n            removed +\n            '\" is protected and can only be updated by moderators',\n        });\n        return;\n      }\n    });\n  } else {\n    let labelStrings = labels.map((o) => {\n      return o.name;\n    });\n    State.update({ labels, labelStrings });\n  }\n};\nconst existingLabelStrings =\n  Near.view(nearNFDevsContractAccountId, \"get_all_allowed_labels\", {\n    editor: context.accountId,\n  }) ?? [];\nconst existingLabelSet = new Set(existingLabelStrings);\nconst existingLabels = existingLabelStrings.map((s) => {\n  return { name: s };\n});\n\nconst labelEditor = (\n  <div className=\"col-lg-12 mb-2\">\n    <p className=\"fs-6 fw-bold mb-1\">Labels</p>\n    <Typeahead\n      multiple\n      labelKey=\"name\"\n      onInputChange={checkLabel}\n      onChange={setLabels}\n      options={existingLabels}\n      placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n      selected={state.labels}\n      positionFixed\n      allowNew={(results, props) => {\n        return (\n          !existingLabelSet.has(props.text) &&\n          props.selected.filter((selected) => selected.name === props.text)\n            .length == 0 &&\n          Near.view(nearNFDevsContractAccountId, \"is_allowed_to_use_labels\", {\n            editor: context.accountId,\n            labels: [props.text],\n          })\n        );\n      }}\n    />\n  </div>\n);\n\nconst nameDiv = (\n  <div className=\"col-lg-6 mb-2\">\n    <p className=\"fs-6 fw-bold mb-1\">Title</p>\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n);\n\nconst descriptionDiv = (\n  <div className=\"col-lg-12 mb-2\">\n    <p className=\"fs-6 fw-bold mb-1\">Description</p>\n    <textarea\n      value={state.description}\n      type=\"text\"\n      rows={6}\n      className=\"form-control\"\n      onChange={(event) => State.update({ description: event.target.value })}\n    />\n  </div>\n);\n\nconst isFundraisingDiv = (\n  // This is jank with just btns and not radios. But the radios were glitchy af\n  <>\n    <div class=\"mb-2\">\n      <p class=\"fs-6 fw-bold mb-1\">\n        Are you seeking funding for your solution?\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: true })}\n          />\n          Yes\n        </label>\n      </div>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: !state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: false })}\n          />\n          No\n        </label>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/near-analytics.near/widget/townhall-board.pages.Create", "__row_index": 1}