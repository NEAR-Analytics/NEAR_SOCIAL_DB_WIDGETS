{"tx_hash": "6ctqGN9JL85WZ8djKePt5DvDz9gJHu5Y37hC4uQSXrPv", "action_id_social": "FtDaEPjmMm1R9BEXvtUkd3Dny1K75crHP2MmnXkFSPy6-0-widget", "block_id": 92907216, "block_timestamp": "2023-05-28T13:29:56.242Z", "signer_id": "mintlu.near", "widget_name": "all-my-drops", "source_code": null, "metadata": null, "branch": {"draft": {"": "const user = context.accountId;\n\nif (!user) {\n  return \"Please Sign In!\";\n}\n\nState.init({\n  numDrops,\n  dropIds: [],\n  dropTypes: [],\n});\n\nconst keypom_contract = \"v2.keypom.testnet\";\n\nlet num_drops = Near.view(keypom_contract, \"get_drop_supply_for_owner\", {\n  account_id: user,\n});\n\nlet my_drops = Near.view(keypom_contract, \"get_drops_for_owner\", {\n  account_id: user,\n  limit: num_drops,\n});\n\nlet drop_ids = [];\nlet drop_types = [];\n\nlet str = \"filler\";\n\nfor (var i = 0; i < my_drops.length; i++) {\n  drop_ids.push(my_drops[i].drop_id);\n  if (my_drops[i].hasOwnProperty(\"simple\")) {\n    drop_types.push(\"Simple Drop\");\n  } else if (my_drops[i].hasOwnProperty(\"nft\")) {\n    drop_types.push(\"Non-Fungible Token Drop\");\n  } else if (my_drops[i].hasOwnProperty(\"ft\")) {\n    drop_types.push(\"Fungible Token Drop\");\n  } else if (my_drops[i].hasOwnProperty(\"fc\")) {\n    drop_types.push(\"Function Call Drop\");\n  } else {\n    drop_types.push(\"Unknown\");\n  }\n}\n\n// // Map over the array and create an array of strings with the desired elements\n// const renderedElements = drop.map(\n//   (element, index) => `Element ${index + 1}: ${element}`\n// );\n\n// // Join the array of strings into a single string\n// const renderedOutput = renderedElements.join(\"\\n\");\n\nState.update({\n  //   numDrops: my_drops.length,\n  dropIds: drop_ids,\n  dropTypes: drop_types,\n});\n\n// const uglyIdDispley = (\n//   <>\n//     <div class=\"border border-black p-3\">\n//       <label>Drop IDs</label>\n//     </div>\n//   </>\n// );\n//   <h3 class=\"text-center\">Your Drop IDs:</h3>\n//   <p>\n//     {\" \"}\n//     {state.dropIds.map((el, index) => {\n//       <p key={index}>{el}</p>;\n//     })}{\" \"}\n//   </p>\n//   <h3 class=\"text-center\">Types of Drops:</h3>\n//   <p>\n//     {\" \"}\n//     {state.dropTypes.map((el, index) => {\n//       <p key={index}>{el}</p>;\n//     })}{\" \"}\n//   </p>\n// Render\n\nreturn (\n  <>\n    <div class=\"container border border-info p-3\">\n      <h3 class=\"text-center\">Number of Drops:</h3>\n      <p class=\"text-center\"> {my_drops.length} </p>\n      <h3 class=\"text-center\">Your Drop's IDs:</h3>\n      <p class=\"text-center\">\n        {state.dropIds.map((id) => (\n          <div key={id}> {id} </div>\n        ))}\n      </p>\n      <h3 class=\"text-center\">Your Drop Types:</h3>\n      <p class=\"text-center\">\n        {state.dropTypes.map((type) => (\n          <div key={type}> {type} </div>\n        ))}\n      </p>\n    </div>\n  </>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/mintlu.near/widget/all-my-drops", "__row_index": 1}