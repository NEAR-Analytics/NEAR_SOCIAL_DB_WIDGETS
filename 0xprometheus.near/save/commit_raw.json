{"tx_hash": "Bj3JhCvrUf1X1TSY7XPK9P3Qj9QorJ1bGY7puaG2sb3H", "action_id_social": "Ddj1Dc2wZhQgpdt9k3E51EJaUnBDd7qaZcBJ7AeDJ3c9-0-widget", "block_id": 94140761, "block_timestamp": "2023-06-13T22:36:14.381Z", "signer_id": "0xprometheus.near", "widget_name": "save", "source_code": "\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  console.log(\"accounts:\", accounts, state.sender);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    Ethers.provider()\r\n      .getNetwork()\r\n      .then((data) => {\r\n        State.update({\r\n          selectedChain: data.chainId,\r\n        });\r\n      });\r\n  }\r\n\r\n  console.log(\"in between\", state.sender);\r\n\r\n  State.update({\r\n    selectedChain: \"0\",\r\n  });\r\n}\r\n     src={chains\r\n                                .filter(\r\n                                  (chain) =>\r\n                                    chain.id === state.selectedChain.toString()\r\n                                )\r\n                                .map((c) => c.url)}\r\n                              alt={chains\r\n                                .filter(\r\n                                  (chain) =>\r\n                                    chain.id === state.selectedChain.toString()\r\n                                )\r\n                                .map((c) => c.name)}\r\n                            />\r\n                          ) : (\r\n                            \"Select an option\"\r\n                          )}\r\n                          <span>\ud83d\udd3b</span>\r\n                        </div>\r\n                        <div\r\n                          className={`select-replica__options ${\r\n                            state.selectIsOpen ? \"open\" : \"\"\r\n                          }`}\r\n                        >\r\n                          {chains.map((chain) => (\r\n                            <div\r\n                              key={chain.id}\r\n                              className={`select-replica__option ${\r\n                                selectedOption === chain.name ? \"selected\" : \"\"\r\n                              }`}\r\n                              onClick={() => handleChainChange(chain.id)}\r\n                            >\r\n                              <img src={chain.url} alt={chain.name} />\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </SelectReplicaContainer>\r\n                    {state.link && (\r\n                      <a href={`${state.link}`} target=\"_blank\">\r\n                        View Transaction\r\n                      </a>\r\n                    )}\r\n                  </SelectGroup>\r\n                ) : accountId ? (\r\n                  <SelectGroup>\r\n                    <label htmlFor=\"chainSelect\">Select Chain</label>\r\n                    {/*<SelectTag\r\n                    className=\"form-select\"\r\n                    value={state.selectedChain}\r\n                    onChange={handleChainChange}\r\n                  >\r\n                    <option disabled selected>\r\n                      Select a Chain\r\n                    </option>\r\n                    {chains.map((chain) => (\r\n                      <ChainIcon key={chain.id} value={chain.id}>\r\n                        <span>{chain.name}</span>\r\n                      </ChainIcon>\r\n                    ))}\r\n                  </SelectTag>*/}\r\n                    <SelectReplicaContainer onClick={handleOutsideClick}>\r\n                      <div\r\n                        className={`select-replica__select ${\r\n                          state.selectIsOpen ? \"open\" : \"\"\r\n                        }`}\r\n                        onClick={handleSelectClick}\r\n                      >\r\n                        <div className=\"select-replica__selected\">\r\n                          {chains.filter(\r\n                            (chain) =>\r\n                              chain.id === state.selectedChain.toString()\r\n                          ) ? (\r\n                            <img\r\n                              src={chains\r\n                                .filter(\r\n                                  (chain) =>\r\n                                    chain.id === state.selectedChain.toString()\r\n                                )\r\n                                .map((c) => c.url)}\r\n                              alt={chains\r\n                                .filter(\r\n                                  (chain) =>\r\n                                    chain.id === state.selectedChain.toString()\r\n                                )\r\n                                .map((c) => c.name)}\r\n                            />\r\n                          ) : (\r\n                            \"Select an option\"\r\n                          )}\r\n                          <span>\ud83d\udd3b</span>\r\n                        </div>\r\n                        <div\r\n                          className={`select-replica__options ${\r\n                            state.selectIsOpen ? \"open\" : \"\"\r\n                          }`}\r\n                        >\r\n                          {chains.map((chain) => (\r\n                            <div\r\n                              key={chain.id}\r\n                              className={`select-replica__option ${\r\n                                selectedOption === chain.name ? \"selected\" : \"\"\r\n                              }`}\r\n                              onClick={() => handleChainChange(chain.id)}\r\n                            >\r\n                              <img src={chain.url} alt={chain.name} />\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </SelectReplicaContainer>\r\n                    <div>\r\n                      <Web3Connect\r\n                        className=\"btn mt-3\"\r\n                        connectLabel=\"Connect with Ethereum Wallet\"\r\n                      />\r\n                    </div>\r\n                  </SelectGroup>\r\n                ) : (\r\n                  <Web3Connect\r\n                    className=\"btn mt-3\"\r\n                    connectLabel=\"Connect with Wallet\"\r\n                  />\r\n                )}\r\n              </Card>\r\n            )}\r\n          </ImageUploadCard>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <Card className=\"d-flex flex-column align-items-center w-100\">\r\n            <div>\r\n              <IpfsImageUpload\r\n                image={state.image}\r\n                className=\"btn btn-outline-primary border-0 rounded-3\"\r\n              />\r\n            </div>\r\n            <ImageCard>\r\n              <img\r\n                src={`https://ipfs.io/ipfs/` + state.image.cid}\r\n                alt=\"uploaded image\"\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                className=\"rounded-3\"\r\n              />\r\n            </ImageCard>\r\n          </Card>\r\n          <div>\r\n            <Card>\r\n              {state.sender && Ethers.provider() ? (\r\n                <SelectGroup className=\"form-group\">\r\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\r\n                  {/*<select\r\n                    className=\"form-select\"\r\n                    value={state.selectedChain}\r\n                    onChange={handleChainChange}\r\n                  >\r\n                    {chains.map((chain) => (\r\n                      <ChainIcon key={chain.id} value={chain.id}>\r\n                        {chain.name}\r\n                      </ChainIcon>\r\n                    ))}\r\n                  </select>*/}\r\n                  <SelectReplicaContainer onClick={handleOutsideClick}>\r\n                    <div\r\n                      className={`select-replica__select ${\r\n                        state.selectIsOpen ? \"open\" : \"\"\r\n                      }`}\r\n                      onClick={handleSelectClick}\r\n                    >\r\n                      <div className=\"select-replica__selected\">\r\n                        {chains.filter(\r\n                          (chain) => chain.id === state.selectedChain.toString()\r\n                        ) ? (\r\n                          <img\r\n                            src={chains\r\n                              .filter(\r\n                                (chain) =>\r\n                                  chain.id === state.selectedChain.toString()\r\n                              )\r\n                              .map((c) => c.url)}\r\n                            alt={chains\r\n                              .filter(\r\n                                (chain) =>\r\n                                  chain.id === state.selectedChain.toString()\r\n                              )\r\n                              .map((c) => c.name)}\r\n                          />\r\n                        ) : (\r\n                          \"Select an option\"\r\n                        )}\r\n                        <span>\ud83d\udd3b</span>\r\n                      </div>\r\n                      <div\r\n                        className={`select-replica__options ${\r\n                          state.selectIsOpen ? \"open\" : \"\"\r\n                        }`}\r\n                      >\r\n                        {chains.map((chain) => (\r\n                          <div\r\n                            key={chain.id}\r\n                            className={`select-replica__option ${\r\n                              selectedOption === chain.name ? \"selected\" : \"\"\r\n                            }`}\r\n                            onClick={() => handleChainChange(chain.id)}\r\n                          >\r\n                            <img src={chain.url} alt={chain.name} />\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </SelectReplicaContainer>\r\n                  {state.link && (\r\n                    <a href={`${state.link}`} target=\"_blank\">\r\n                      View Transaction\r\n                    </a>\r\n                  )}\r\n                </SelectGroup>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xprometheus.near/widget/save", "__row_index": 0}