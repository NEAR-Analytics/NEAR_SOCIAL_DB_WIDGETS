{"tx_hash": "M3SvSa181d3j3Pu4rd3RqwTPGAvr1NryoWwQNC6buev", "action_id_social": "Bmy6cCEWF2n2TQkdDq9tp347yMZEg1R4arqozvnu67h8-0-widget", "block_id": 94885235, "block_timestamp": "2023-06-24T01:36:27.616Z", "signer_id": "mattb.near", "widget_name": "LensProfile", "source_code": "const LENS_API_URL = props.testnet\n  ? \"https://api-mumbai.lens.dev\"\n  : \"https://api.lens.dev\";\n\nconst ALLOWED_NETWORKS = {\n  testnet: {\n    id: 80001,\n    hex: \"0x13881\",\n  },\n  mainnet: {\n    id: 137,\n    hex: \"0x89\",\n  },\n};\n\nconst DEFAULT_PROFILE = props.testnet ? \"lensprotocol.test\" : \"lensprotocol\";\n\nState.init({\n  isConnected: false,\n  followed: false,\n  profile: null,\n  sdk: null,\n});\n\nconst Box = styled.div`\n  position:relative;\n  max-width:400px;\n  box-sizing:border-box;\n  background-color:#181818;\n  overflow:hidden;\n  border-radius:15px;\n  margin:0 auto;\n  color:#fff;\n  text-align:center;\n`;\n\nconst BoxCover = styled.div`\n  z-index:3;\n  position:relative;\n  min-height:150px;\n  background-color:#fafafa;\n  background-size:cover;\n  background-position:center;\n`;\n\nconst BoxProfilePicture = styled.div`\n  position:absolute;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  width:100%;\n  bottom:0;\n  left:0;\n  right:0;\n  margin:auto;\n  width:150px;\n  height:150px;\n  max-width:150px;\n  max-height:150px;\n  border-radius:100%;\n  overflow:hidden;\n  background-color: #181818;\n  padding: 7px;\n  box-sizing:border-box;\n  transform:translateY(50%);\n  transition: all .2s;\n`;\n\nconst ProfilePicture = styled.div`\n  position:absolute;\n  width:90%;\n  height:90%;\n  border-radius:100%;\n  background-position:center;\n  background-size:cover;\n  background-color:#fafafa;\n`;\n\nconst BoxContent = styled.div`\n  padding:5rem 1.5rem 1.5rem;\n  box-sizing:border-box;\n`;\n\nconst Overlay = styled.div`\n  position:absolute;\n  z-index:4;\n  top:0;\n  left:0;\n  width:100%;\n  height:100%;\n  background-color:rgba(0,0,0,.9);\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  backdrop-filter: blur(3px);\n\n  button {\n    background-color:#843FE9;\n    color:#fff;\n    font-weight:bold;\n    border:0;\n\n    &:hover, &:active {\n      background-color:#7D3CDC!important;\n    }\n  }\n`;\n\nconst BoxStats = styled.div`\n  display:flex;\n  justify-content:space-evenly;\n\n  h4 {\n    font-size:1rem;\n    width:100%;\n    text-align:center;\n  }\n`;\n\nconst FollowButton = styled.button`\n    margin-top:1rem;\n    border:0;\n    border-radius:5px;\n    padding: .3rem;\n    width:100%;\n    max-width:100px;\n    font-size:.9rem;\n    font-weight:bold;\n    color:#fff;\n    background-color:#7D3CDC;\n`;\n\n// Loading styles\nconst BoxLoading = styled.div`\n  position:relative;\n  max-width:400px;\n  width:100%;\n  box-sizing:border-box;\n  background-color:rgba(0,0,0,.05);\n  overflow:hidden;\n  border-radius:15px;\n  margin:0 auto;\n  color:#fff;\n  text-align:center;\n`;\n\nconst BoxCoverLoading = styled.div`\n  z-index:3;\n  position:relative;\n  min-height:150px;\n  width:100%;\n  background-color:rgba(0,0,0,.05);\n  background-size:cover;\n  background-position:center;\n`;\n\nconst BoxProfilePictureLoading = styled.div`\n  position:absolute;\n  width:100%;\n  bottom:0;\n  left:0;\n  right:0;\n  margin:auto;\n  width:100%;\n  height:150px;\n  max-width:150px;\n  max-height:150px;\n  border-radius:100%;\n  overflow:hidden;\n  background-color: #fff;\n  padding: 7px;\n  box-sizing:border-box;\n  transform:translateY(50%);\n  transition: all .2s;\n\n  img {\n    border-radius:100%;\n  }\n`;\n\nconst BoxContentLoading = styled.div`\n  padding:6rem 1.5rem 1.5rem;\n  box-sizing:border-box;\n\n  p {\n    color:transparent;\n    background-color:rgba(0,0,0,.05);\n    border-radius:5px;\n  }\n\n  h1 {\n    color:transparent;\n    background-color:rgba(0,0,0,.05);\n    border-radius:5px;\n  }\n\n`;\n\nconst BoxStatsLoading = styled.div`\n  display:flex;\n  justify-content:space-evenly;\n\n  p {\n    color:transparent;\n    background-color:rgba(0,0,0,.05);\n    border-radius:5px;\n  }\n\n  h4 {\n    color:transparent;\n    background-color:rgba(0,0,0,.05);\n    border-radius:5px;\n  }\n`;\n\n// Get if user follows a profile or not\nfunction isFollowedByMe() {\n  state.sdk.isFollowedByMe(state.profile.id).then((payload) => {\n    console.log(state.sdk.authenticated);\n    let followedStatus =\n      payload.status == 200 && payload.body.data.profile.isFollowedByMe;\n    State.update({ followed: followedStatus });\n  });\n}\n\n// Get profile information by Lens handle\nfunction getProfileByHandle(handle) {\n  state.sdk.getProfileByHandle(handle).then((payload) => {\n    if (payload.body.data.profile) {\n      if (payload.body.data.profile.ownedBy.toLowerCase() != state.account) {\n        State.update({ profile: payload.body.data.profile });\n      }\n    } else {\n      getProfileByHandle(DEFAULT_PROFILE);\n    }\n  });\n}\n\n// Get profile information by Ethereum address\nfunction getProfileByEthereumAddress(ethereumAddress) {\n  state.sdk.getProfileByEthereumAddress(ethereumAddress).then((payload) => {\n    let items = payload.body.data.profiles.items;\n\n    if (items.length > 0) {\n      getProfileByHandle(items[0].handle);\n    } else {\n      getProfileByHandle(DEFAULT_PROFILE);\n    }\n  });\n}\n\n// Get profile information depending on the available props\nfunction getProfile() {\n  return props.handle\n    ? getProfileByHandle(props.handle)\n    : getProfileByEthereumAddress(props.ethereumAddress);\n}\n\nif (!!state.sdk && !state.profile) {\n  getProfile();\n}\n\n// Authenticates user in Lens API\nfunction authenticateLens() {\n  state.sdk.authenticateLens(\n    state.account,\n    () => Ethers.provider().getSigner(),\n    isFollowedByMe\n  );\n}\n\n// Follows a profile\nfunction followProfile() {\n  state.sdk.followProfile(state.profile.id).then((payload) => {\n    State.update({ followed: true });\n  });\n}\n\nfunction unfollowProfile() {\n  state.sdk.unfollowProfile(state.profile.id).then((payload) => {\n    State.update({ followed: !(payload.status == 200) });\n  });\n}\n\nif (\n  props.requireLogin &&\n  !!state.profile &&\n  state.isConnected &&\n  !state.sdk.authenticated\n) {\n  authenticateLens();\n}\n\n// Toggles between following or unfollowing a profile\nfunction toggleFollowedProfile() {\n  if (!!state.followed && state.followed) {\n    unfollowProfile();\n  } else {\n    followProfile();\n  }\n}\n\n// Init\nif (state.account === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ account: accounts[0] });\n    let provider = Ethers.provider();\n\n    if (!!provider) {\n      provider.getNetwork().then((network) => {\n        if (network.chainId != getAllowedNetwork().id) {\n          State.update({ isConnected: false });\n          switchNetwork();\n        } else {\n          State.update({ isConnected: true });\n        }\n      });\n    }\n  }\n}\n\nfunction switchNetwork() {\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: getAllowedNetwork().hex },\n    ]).then((data) => {\n      State.update({ isConnected: true });\n    });\n  } catch (err) {}\n}\n\nfunction getAllowedNetwork() {\n  return props.testnet\n    ? ALLOWED_NETWORKS.testnet.id\n    : ALLOWED_NETWORKS.mainnet.id;\n}\n\n// Displays an overlay if login is required\nfunction getConnectionOverlay() {\n  if (!!state.isConnected && (!props.requireLogin || !!state.account)) return;\n\n  return (\n    <>\n      <Overlay>\n        <Web3Connect connectLabel=\"Connect wallet\"></Web3Connect>\n      </Overlay>\n    </>\n  );\n}\n\n// Displays follow button if the user is required to log in\nfunction getFollowButton() {\n  if (!props.requireLogin) return;\n\n  return (\n    <FollowButton onClick={toggleFollowedProfile}>\n      {state.followed ? \"Unfollow\" : \"Follow\"}\n    </FollowButton>\n  );\n}\n\nfunction getProfileSkeleton() {\n  return (\n    <BoxLoading>\n      <BoxCoverLoading>\n        <BoxProfilePictureLoading></BoxProfilePictureLoading>\n      </BoxCoverLoading>\n      <BoxContentLoading>\n        <h1>Lens Protocol</h1>\n        <p>@lensprotocol</p>\n        <p>The social layer of web3</p>\n        <br />\n        <BoxStatsLoading>\n          <h4>Followers</h4>\n          <h4>Comments</h4>\n          <h4>Posts</h4>\n        </BoxStatsLoading>\n      </BoxContentLoading>\n    </BoxLoading>\n  );\n}\n\n// Displays cover image if the user has set one\nfunction renderProfile() {\n  const coverStyles = {\n    \"background-image\":\n      \"url(\" +\n      (!!state.profile.coverPicture\n        ? state.profile.coverPicture.original.url.replace(\n            \"ipfs://\",\n            \"https://ipfs.io/ipfs/\"\n          )\n        : \"\") +\n      \")\",\n  };\n\n  const profilePicStyles = {\n    \"background-image\":\n      \"url(\" +\n      (!!state.profile.picture\n        ? state.profile.picture.original.url.replace(\n            \"ipfs://\",\n            \"https://ipfs.io/ipfs/\"\n          )\n        : \"\") +\n      \")\",\n  };\n\n  return !state.profile ? (\n    getProfileSkeleton()\n  ) : (\n    <>\n      <Box>\n        {getConnectionOverlay()}\n        <BoxCover style={coverStyles}>\n          <BoxProfilePicture>\n            <ProfilePicture style={profilePicStyles} />\n          </BoxProfilePicture>\n        </BoxCover>\n        <BoxContent>\n          <h1>{state.profile.name}</h1>\n          <p>@{state.profile.handle}</p>\n          <p>{state.profile.bio}</p>\n          <br />\n          <BoxStats>\n            <h4>\n              Followers\n              <br />\n              {state.profile.stats.totalFollowers}\n            </h4>\n            <h4>\n              Comments\n              <br />\n              {state.profile.stats.totalComments}\n            </h4>\n            <h4>\n              Posts\n              <br />\n              {state.profile.stats.totalPosts}\n            </h4>\n          </BoxStats>\n          {!!state.account &&\n          !!state.profile &&\n          state.account.toLowerCase() != state.profile.ownedBy.toLowerCase()\n            ? getFollowButton()\n            : \"\"}\n        </BoxContent>\n      </Box>\n    </>\n  );\n}\n\nreturn (\n  <div>\n    <Widget\n      src=\"mattb.near/widget/LensSDK\"\n      props={{\n        onLoad: (sdk) => State.update({ sdk: sdk }),\n        onRefresh: (sdk) => State.update({ sdk: sdk }),\n        loaded: !!state.sdk,\n        testnet: props.testnet ?? false,\n      }}\n    />\n    {!state.sdk ? \"Loading...\" : renderProfile()}\n  </div>\n);\n", "metadata": {"description": "**LensProfile** is a widget that allows you to load a Lens profile information in a easy way.\n\n**Props**\n\n**ethereumAddress -** Loads a Lens profile based on ethereum address\n\n**handle -** Loads a Lens profile by handle\n\n**testnet -** Enables testnet connection\n\n**requireLogin -** You can connect your wallet inside the component and follow / unfollow the profile", "image": {"ipfs_cid": "bafkreigj7fckrxx4fjgzu2ntgtvbnnest3phljot2vroshnq7kki7xqyoe"}, "name": "LensProfile", "tags": {"lens": "", "profile": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/LensProfile", "__row_index": 0}