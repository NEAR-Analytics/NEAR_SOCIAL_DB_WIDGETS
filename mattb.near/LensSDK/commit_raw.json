{"tx_hash": "AYUrJMAhVhtavCC9wrHh5qKQSPuxCbeM3wt8CjEsQBWS", "action_id_social": "5rHWk2XBG8G6rpUEw1i1Pw89HnaYorhjzmSPnpFyU9fa-0-widget", "block_id": 94879988, "block_timestamp": "2023-06-23T23:59:32.598Z", "signer_id": "mattb.near", "widget_name": "LensSDK", "source_code": "const { onLoad, onRefresh, loaded, testnet } = props;\n\nconst LENS_API_URL = testnet\n  ? \"https://api-mumbai.lens.dev\"\n  : \"https://api.lens.dev\";\n\nlet LensSDK = {\n  jwt: {\n    accessToken: \"\",\n    refreshToken: \"\",\n  },\n  authenticated: false,\n  request: (query, variables, headers, method) => {\n    return asyncFetch(LENS_API_URL, {\n      method: method ?? \"POST\",\n      headers: headers ?? {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables ?? {},\n      }),\n    });\n  },\n  getChallenge: (address) => {\n    return LensSDK.request(\n      `\n        query Challenge ($address: EthereumAddress!) {\n            challenge(request: { address: $address}) {\n            text\n            }\n        }\n       `,\n      {\n        address: address,\n      }\n    );\n  },\n  authenticateSignature: (address, signature) => {\n    return LensSDK.request(\n      `\n        mutation Authenticate ($address: EthereumAddress!, $signature: Signature!) {\n            authenticate(request: {\n            address: $address,\n            signature: $signature\n            }) {\n            accessToken\n            refreshToken\n            }\n        }\n      `,\n      {\n        address: address,\n        signature: signature,\n      }\n    );\n  },\n  authenticateLens: (address, signer, onSuccess) => {\n    LensSDK.getChallenge(address).then((payload) => {\n      let challenge = payload.body.data.challenge.text;\n      const response = signer().signMessage(challenge);\n\n      response.then((signature) => {\n        LensSDK.authenticateSignature(address, signature).then((payload) => {\n          if (\n            payload.status === 200 &&\n            !!payload.body.data.authenticate.accessToken\n          ) {\n            LensSDK.jwt.accessToken =\n              payload.body.data.authenticate.accessToken;\n            LensSDK.jwt.refreshToken =\n              payload.body.data.authenticate.refreshToken;\n            LensSDK.authenticated = true;\n\n            if (onSuccess) {\n              onSuccess();\n            }\n\n            if (onRefresh) {\n              onRefresh(LensSDK);\n            }\n          }\n        });\n      });\n    });\n  },\n  isFollowedByMe: (profileId) => {\n    return LensSDK.request(\n      `\n                query Profile {\n                    profile(request: { profileId: \"` +\n        profileId +\n        `\" }) {\n                        isFollowedByMe\n                    }\n                }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getProfileByHandle: (handle) => {\n    return LensSDK.request(\n      `\n        query Profile ($handle: Handle!) {\n          profile(request: { handle: $handle }) {\n            id\n            name\n            bio\n            attributes {\n              displayType\n              traitType\n              key\n              value\n            }\n            followNftAddress\n            metadata\n            isDefault\n            picture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            handle\n            coverPicture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            ownedBy\n            stats {\n              totalFollowers\n              totalFollowing\n              totalPosts\n              totalComments\n              totalMirrors\n              totalPublications\n              totalCollects\n            }\n          }\n    }\n  `,\n      {\n        handle: handle,\n      }\n    );\n  },\n  getProfileByEthereumAddress: (ethereumAddress) => {\n    return LensSDK.request(\n      `\n        query Profiles ($address: [EthereumAddress!]) {\n        profiles(request: { ownedBy: $address}) {\n          items {\n            handle\n          }\n        }\n    }\n    `,\n      {\n        address: [ethereumAddress],\n      }\n    );\n  },\n  followProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation ProxyAction {\n            proxyAction(request: {\n                follow: {\n                    freeFollow: {\n                        profileId: \"` +\n        profileId +\n        `\"\n                    }\n                }\n            })\n        }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  unfollowProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation Unfollow {\n  createUnfollowTypedData(request: { profile: \"` +\n        profileId +\n        `\" }) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n        __typename\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n          __typename\n        }\n        __typename\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n};\n\nif (!!onLoad && !loaded) {\n  onLoad(LensSDK);\n}\n", "metadata": {"description": "**Lens SDK** is a widget that provides a simple API to interact with Lens Protocol including testnet. Each request returns a promise.\n\n**authenticateLens -** Authenticates a wallet in Lens. Requires to be connected to Polygon network or Mumbai.\n\n**getProfileByHandle -** Get Lens profile information by handle. Does not require to be authenticated.\n\n**getProfileByEthereumAddress -** Get Lens profile information by Ethereum address. Does not require to be authenticated.\n\n**followProfile / unfollowProfile -** Follow / Unfollow a Lens profile by profileId. Requires to be authenticated.\n\n**isFollowedByMe -** Get if authenticated user follows a specific profileId. Requires to be authenticated.\n\n**Implementation example**\n\n``\n<Widget\n      src=\"mattb.near/widget/LensSDK\"\n      props={{\n        onLoad: (sdk) => State.update({ sdk: sdk }),\n        onRefresh: (sdk) => State.update({ sdk: sdk }),\n        loaded: !!state.sdk,\n        testnet: props.testnet ?? false,\n      }}\n    />``", "image": {"ipfs_cid": "bafkreiarvr5n3gdmjkh3eckw5iedxtljfizzzncl67s3lpgcadf554i7ye"}, "name": "LensSDK", "tags": {"graph": "", "lens": "", "sdk": "", "social": "", "web3": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/LensSDK", "__row_index": 0}