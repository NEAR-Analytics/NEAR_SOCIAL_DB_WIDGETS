{"tx_hash": "7gNjC3o7bLGGMbpJN14kKzuspfD3kgUZHfKGgsQa79C4", "action_id_social": "5jvqTpKyBUYSmHFWxSWwMSFPJ4SsQ1UiKYMn8tChj1v-0-widget", "block_id": 94940780, "block_timestamp": "2023-06-24T18:54:22.869Z", "signer_id": "mattb.near", "widget_name": "GenaDrop.GenaDropSDK", "source_code": "let { onLoad, onRefresh } = props;\n\nconst OWNER_ID = \"minorityprogrammers.near\"; // attribution\n\nconst AURORA_CONTRACT = \"0xe53bC42B6b25a1d548B73636777a0599Fd27fE5c\";\nconst AURORA_SOUL_CONTRACT = \"0xe1D36964Eb49E38BB3f7410401BC95F0E9f1F6D3\";\nconst POLYGON_CONTRACT = \"0x436AEceaEeC57b38a17Ebe71154832fB0fAFF878\";\nconst POLYGON_SOUL_CONTRACT = \"0xd91cC6DE129D13F4384FB0bC07a1a99D4F858e72\";\nconst CELO_CONTRACT = \"0xC291846A587cf00a7CC4AF0bc4EEdbC9c3340C36\";\nconst CELO_SOUL_CONTRACT = \"0xd91cC6DE129D13F4384FB0bC07a1a99D4F858e72\";\nconst AVAX_CONTRACT = \"0x43dBdfcAADD0Ea7aD037e8d35FDD7c353B5B435b\";\nconst AVAX_SOUL_CONTRACT = \"0xd91cC6DE129D13F4384FB0bC07a1a99D4F858e72\";\nconst ARBITRUM_CONTRACT = \"0x959a2945185Ec975561Ac0d0b23F03Ed1b267925\";\nconst ARBITRUM_SOUL_CONTRACT = \"0x959a2945185Ec975561Ac0d0b23F03Ed1b267925\";\nconst NEAR_CONTRACT = \"nft.genadrop.near\";\nconst MINT_SINGLE = [\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\n  \"function safeMint(address to, string memory uri) public {}\",\n];\n\nconst CONTRACT_ADDRESSES = {\n  137: [\n    POLYGON_CONTRACT,\n    \"Polygon\",\n    \"https://polygonscan.com/tx/\",\n    POLYGON_SOUL_CONTRACT,\n  ],\n  1313161554: [\n    AURORA_CONTRACT,\n    \"Aurora\",\n    \"https://explorer.aurora.dev/tx/\",\n    AURORA_SOUL_CONTRACT,\n  ],\n  42220: [\n    CELO_CONTRACT,\n    \"Celo\",\n    \"https://explorer.celo.org/mainnet/tx/\",\n    CELO_SOUL_CONTRACT,\n  ],\n  43114: [\n    AVAX_CONTRACT,\n    \"Avalanche\",\n    \"https://snowtrace.io/tx/\",\n    AVAX_SOUL_CONTRACT,\n  ],\n  42161: [ARBITRUM_CONTRACT, \"Arbitrum\", \"https://arbiscan.io/tx/\"],\n  0: [NEAR_CONTRACT, \"Near\"],\n};\n\nconst CHAINS = [\n  {\n    id: \"137\",\n    name: \"Polygon\",\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\n  },\n  {\n    id: \"42220\",\n    name: \"Celo\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\n  },\n  {\n    id: \"43114\",\n    name: \"Avax\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifhu5fytsjcmjluarfnu6kcdhaqz4rgdrbbzf6dlsmggqb7oi3w4e\",\n  },\n  {\n    id: \"42161\",\n    name: \"Arbitrum\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\n\nconst NEAR_SOCIAL_IPFS_URL = \"https://ipfs.near.social\";\nconst NEAR_SOCIAL_ADD_ENDPOINT = `${NEAR_SOCIAL_IPFS_URL}/add`;\nconst GENADROP_NEAR_CONTRACT = \"genadrop-contract.nftgen.near\";\nconst NEAR_NETWORK_CHAIN_ID = \"0\";\n\nlet accountId = context.accountId;\n\nlet GenaDropSDK = {\n  network: null,\n  isSoulBound: false,\n  lastMintLink: \"\",\n  mint: (recipient, title, description, imageCid, props) => {\n    switch (GenaDropSDK.network) {\n      case NEAR_NETWORK_CHAIN_ID:\n        GenaDropSDK.mintOnNear(recipient, title, description, imageCid, props);\n        break;\n      default:\n        GenaDropSDK.defaultMint(recipient, title, description, imageCid, props);\n    }\n  },\n  defaultMint: (recipient, title, description, imageCid, props) => {\n    const CA = GenaDropSDK.isSoulBound\n      ? contractAddresses[GenaDropSDK.network][3]\n      : contractAddresses[GenaDropSDK.network][0];\n\n    console.log(\"CONTRACT ADD\", CA);\n\n    const contract = new ethers.Contract(\n      CA,\n      mintSingle,\n      Ethers.provider().getSigner()\n    );\n\n    GenaDropSDK.uploadToIPFS(title, description, imageCid, props).then(\n      (res) => {\n        const cid = res.body.cid;\n        const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n\n        const recipient =\n          recipient || Ethers.send(\"eth_requestAccounts\", [])[0];\n\n        GenaDropSDK.isSoulBound\n          ? contract\n              .safeMint(recipient, `ipfs://${cid}`)\n              .then((transactionHash) => transactionHash.wait())\n              .then((ricit) => {\n                GenaDropSDK.lastMintLink = `${\n                  contractAddresses[GenaDropSDK.network][2] +\n                  ricit.transactionHash\n                }`;\n\n                GenaDropSDK.refresh();\n              })\n          : contract\n              .mint(recipient, Id, 1, `ipfs://${cid}`, \"0x\")\n              .then((transactionHash) => transactionHash.wait())\n              .then((ricit) => {\n                GenaDropSDK.lastMintLink = `${\n                  contractAddresses[GenaDropSDK.network][2] +\n                  ricit.transactionHash\n                }`;\n                GenaDropSDK.refresh();\n              });\n      }\n    );\n  },\n  mintOnNear: (recipient, title, description, imageCid, props) => {\n    GenaDropSDK.uploadToIPFS(title, description, imageCid, props).then(\n      (res) => {\n        const CID = res.body.cid;\n\n        GenaDropSDK.callContract(\"nft_mint\", {\n          token_id: `${Date.now()}`,\n          metadata: {\n            title: title,\n            description: description,\n            media: `https://ipfs.io/ipfs/${imageCid}`,\n            reference: `ipfs://${CID}`,\n          },\n          receiver_id: recipient || accountId,\n        });\n      }\n    );\n  },\n  uploadToIPFS: (title, description, imageCid, props) => {\n    const metadata = {\n      name: title,\n      description: description,\n      properties: props || [],\n      image: `ipfs://${imageCid}`,\n    };\n\n    return asyncFetch(NEAR_SOCIAL_ADD_ENDPOINT, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    });\n  },\n  callContract: (method, args, gas, deposit) => {\n    Near.call([\n      {\n        contractName: GENADROP_NEAR_CONTRACT,\n        methodName: method,\n        args: args || {},\n        gas: gas || 200000000000000,\n        deposit: deposit || 10000000000000000000000,\n      },\n    ]);\n  },\n  refresh: () => {\n    if (onRefresh) {\n      onRefresh(GenaDropSDK);\n    }\n  },\n};\n\nif (onLoad) {\n  onLoad(GenaDropSDK);\n}\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/mattb.near/widget/GenaDrop.GenaDropSDK", "__row_index": 8}