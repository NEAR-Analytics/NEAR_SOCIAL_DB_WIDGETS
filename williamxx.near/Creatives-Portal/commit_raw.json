{"tx_hash": "8NADpvbTTvBGW4nkrxB21JgptLYQvnJ4fF3n9kxnsVFC", "action_id_social": "2t4MqEZDDFtPGPjfXSirZUtUN8cyykw6byvrTSzXxb1h-0-widget", "block_id": 89544809, "block_timestamp": "2023-04-14 06:27:45.392", "signer_id": "williamxx.near", "widget_name": "Creatives-Portal", "source_code": "/*\r\n\r\nINSTRUCTIONS\r\n\r\nWe're using a tag property to filter widgets on the page.\r\n\r\n--> Change the default tag from \"guide\" to anything!\r\n\r\n`Render Preview` to check if any widgets have your tag.\r\n\r\nHere are some you can use: #dev, #page, #app\r\n\r\n*/\r\n\r\nconst tag = props.tag ?? \"app\";\r\n\r\n/*\r\n\r\nReview the following code if you are interested in tag filtering.\r\n\r\n- maps over widget data to create an array of keys,\r\n(consisting of accountId, widgetName, and blockHeight)\r\n- calls processData function to sort widgets by blockHeight\r\n- maps over sorted widget data to create a list of items to render\r\n- renderTag / renderItem functions are used for each tag / widget\r\n\r\nNo need to make any changes here.\r\n\r\n*/\r\n\r\nlet keys = `${accountId ?? \"*\"}/widget/*`;\r\n\r\nif (tag) {\r\n  const taggedWidgets = Social.keys(\r\n    `${accountId ?? \"*\"}/widget/*/metadata/tags/${tag}`,\r\n    \"final\"\r\n  );\r\n\r\n  if (taggedWidgets === null) {\r\n    return \"Loading tags\";\r\n  }\r\n\r\n  keys = Object.entries(taggedWidgets)\r\n    .map((kv) => Object.keys(kv[1].widget).map((w) => `${kv[0]}/widget/${w}`))\r\n    .flat();\r\n\r\n  if (!keys.length) {\r\n    return `No widgets found with tag #${tag}`;\r\n  }\r\n}\r\n\r\nconst data = Social.keys(keys, \"final\", {\r\n  return_type: \"BlockHeight\",\r\n});\r\n\r\nif (data === null) {\r\n  return \"Loading...\";\r\n}\r\n\r\nconst processData = (data) => {\r\n  const accounts = Object.entries(data);\r\n\r\n  const allItems = accounts\r\n    .map((account) => {\r\n      const accountId = account[0];\r\n      return Object.entries(account[1].widget).map((kv) => ({\r\n        accountId,\r\n        widgetName: kv[0],\r\n        blockHeight: kv[1],\r\n      }));\r\n    })\r\n    .flat();\r\n\r\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\r\n  return allItems;\r\n};\r\n\r\nconst renderTag = (tag, tagBadge) => (\r\n  <a href={makeLink(accountId, tag)}>{tagBadge}</a>\r\n);\r\n\r\nconst renderItem = (a) => {\r\n  return (\r\n    <a\r\n      href={`#/${a.accountId}/widget/${a.widgetName}`}\r\n      className=\"text-decoration-none\"\r\n      key={JSON.stringify(a)}\r\n    >\r\n      <Widget\r\n        src=\"mob.near/widget/WidgetImage\"\r\n        props={{\r\n          tooltip: true,\r\n          accountId: a.accountId,\r\n          widgetName: a.widgetName,\r\n        }}\r\n      />\r\n    </a>\r\n  );\r\n};\r\n\r\nif (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\r\n  State.update({\r\n    data,\r\n    allItems: processData(data),\r\n  });\r\n}\r\n\r\n/*\r\n\r\nHere are a few styled components for you.\r\n\r\nThese allow using CSS in your JavaScript!\r\n\r\nLearn more: https://styled-components.com\r\n\r\n*/\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 48px;\r\n  padding-bottom: 48px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n  font-weight: 600;\r\n  font-size: 32px;\r\n  line-height: 39px;\r\n  color: #11181c;\r\n  margin: 0;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  margin: 0;\r\n  line-height: 1.5rem;\r\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")} !important;\r\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\r\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\r\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"\")};\r\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"\")};\r\n  white-space: ${(p) => (p.ellipsis ? \"nowrap\" : \"\")};\r\n  overflow-wrap: anywhere;\r\n\r\n  b {\r\n    font-weight: 600;\r\n    color: #11181c;\r\n  }\r\n\r\n  &[href] {\r\n    display: inline-flex;\r\n    gap: 0.25rem;\r\n\r\n    &:hover,\r\n    &:focus {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Button = styled.a`\r\n  display: block;\r\n  width: 100%;\r\n  padding: 8px;\r\n  height: 32px;\r\n  background: #FBFCFD;\r\n  border: 1px solid #D7DBDF;\r\n  border-radius: 50px;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #11181C !important;\r\n  margin: 0;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: #ECEDEE;\r\n    text-decoration: none;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst Items = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 18px;\r\n`;\r\n\r\nconst Item = styled.div``;\r\n\r\n/*\r\n\r\nLast, but certainly not least, is returning the display.\r\n\r\nFeel free to make any edits you like!\r\n\r\nbOS CHALLENGE INSTRUCTIONS\r\n\r\n1. Update <Text> with the <b>#tag</b> you input above.\r\n\r\n2. Edit `Guide.Header` to feature your own content.\r\n\r\n3. Curate pages by updating the widget src paths in <Items>.\r\n\r\n    --> Let us know your favorite widgets!\r\n\r\nDon't forget to save!\r\n\r\n*/\r\n\r\nreturn (\r\n  <Wrapper>\r\n    <Header>\r\n      <Widget src=\"onboarder.near/widget/NFT-Transfer\" />\r\n      <h3>All Tutorials</h3>\r\n      <Text>\r\n        These widgets are tagged with: <b>#{tag}</b>\r\n      </Text>\r\n      <div className=\"d-flex flex-wrap gap-1 my-3\">\r\n        {state.allItems\r\n          .slice(0, props.limit ? parseInt(props.limit) : 999)\r\n          .map(renderItem)}\r\n      </div>\r\n    </Header>\r\n\r\n    <Items>\r\n      <Item>\r\n        <Widget\r\n          src=\"adminalpha.near/widget/ComponentCard\"\r\n          props={{ src: \"hack.near/widget/Customization\" }}\r\n        />\r\n      </Item>\r\n      <Item>\r\n        <Widget\r\n          src=\"adminalpha.near/widget/ComponentCard\"\r\n          props={{ src: \"hack.near/widget/SocialPosts\" }}\r\n        />\r\n      </Item>\r\n      <Item>\r\n        <Widget\r\n          src=\"adminalpha.near/widget/ComponentCard\"\r\n          props={{ src: \"evrything-docs.near/widget/StartHere\" }}\r\n        />\r\n      </Item>\r\n    </Items>\r\n  </Wrapper>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/williamxx.near/widget/Creatives-Portal"}