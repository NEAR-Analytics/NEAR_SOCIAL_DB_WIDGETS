{"tx_hash": "GkZbVAbvB5bc1bxEqZwg6sR8Pxv3kUkNfCw6G5nm8yqt", "action_id_social": "66S5JK7tLfWDf4hnhEwGdPd7xEA6CLShv2dLdtsyscx6-0-widget", "block_id": 93651536, "block_timestamp": "2023-06-07T09:19:46.160Z", "signer_id": "williamxx.near", "widget_name": "Every.Thing.View-fork", "source_code": null, "metadata": null, "branch": {"draft": {"": "const path = props.path;\nconst blockHeight = props.blockHeight || \"final\";\n\n// Replace all in the VM? Thing keyword?\nlet parts = [];\ntry {\n  parts = path.split(\"/\");\n} catch (e) {\n  // TODO : Better error handling?\n  console.log(`path not valid.`);\n  return <></>;\n}\n\n// GET THE TYPE BASED ON THE PATH //\n// TODO: replace with Type.get(path) //\nlet type;\nif (parts.length === 1) {\n  type = \"account\";\n} else if (parts[1] === \"thing\") {\n  const thing = Social.get(path, blockHeight);\n  thing = JSON.parse(thing || \"null\");\n  type = thing.type || null;\n} else {\n  type = parts[1];\n}\n\nif (type === null) {\n  console.log(`type not found: ${type}`);\n  return <></>;\n}\n\n// GET THE CREATOR ID //\n// ROOT ID? //\nconst creatorId = parts[0];\n\nconst Container = styled.div`\n  border: 1px solid #ccc;\n  height: fit-content;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  border-bottom: 1px solid #ccc;\n`;\n\nconst IconBox = styled.div`\n  font-family: \"Times New Roman\";\n  font-size: 2em;\n  line-height: 1.25;\n  font-weight: 400;\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  padding: 1px;\n  min-height: 10px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  margin-bottom: 5px;\n`;\n\nconst Key = styled.span`\n  font-weight: bold;\n  margin-right: 5px;\n`;\n\nconst Value = styled.span`\n  color: #888;\n`;\n\nconst Item = styled.div`\n  padding: 0;\n  .btn {\n    width: 100%;\n    border: 0;\n    text-align: left;\n    &:hover,\n    &:focus {\n      background-color: #ecedee;\n      text-decoration: none;\n      outline: none;\n    }\n\n    i {\n      color: #7e868c;\n    }\n\n    span {\n      font-weight: 500;\n    }\n  }\n`;\n\nfunction renderContent() {\n  if (state.showHistory) {\n    return (\n      <Widget\n        src=\"efiz.near/widget/Every.Thing.History\"\n        props={{ path, blockHeight }}\n      />\n    );\n  }\n  if (state.showRaw) {\n    let thing;\n    if (type === \"settings\") {\n      // Need to normalize to accountId/settings/**\n      // Or fix the path that is given to the settings component.\n      // Every thing takes a path and a blockHeight\n      parts.pop();\n      parts.push(\"**\");\n      path = parts.join(\"/\");\n      thing = Social.get(path, blockHeight);\n    } else {\n      thing = JSON.parse(Social.get(path, blockHeight));\n    }\n    if (state.showEdit) {\n      function handleSubmit(val) {\n        const parts = path.split(\"/\");\n        parts.shift(); // Remove the first element\n        const newData = {\n          [parts[0]]: {\n            [parts[1]]: val.replace(/\\n/g, \"\"),\n          },\n        };\n        if (context.accountId === creatorId) {\n          Social.set(newData, {\n            force: true,\n          });\n        }\n      }\n      return (\n        <Widget\n          src=\"efiz.near/widget/Every.Raw.Edit\"\n          props={{ value: thing, handleSubmit: handleSubmit }}\n        />\n      );\n    } else {\n      return (\n        <>\n          <p>{path}</p>\n          <Widget\n            src=\"efiz.near/widget/Every.Raw.View\"\n            props={{ value: thing }}\n          />\n        </>\n      );\n    }\n  } else {\n    if (type.split(\"/\").length > 1) {\n      const thingType = type;\n      const type = JSON.parse(Social.get(thingType, blockHeight) || \"null\");\n      if (type === null) {\n        console.log(\n          `edge case: thing ${path} had an invalid type: ${thingType}`\n        );\n      }\n      let widgetSrc;\n      if (state.showEdit) {\n        // Can I merge state with accessor\n        widgetSrc = type?.widgets?.edit;\n      } else {\n        widgetSrc = type?.widgets?.view; // Or settings\n      }\n      const thing = Social.get(path, blockHeight);\n      thing = JSON.parse(thing || \"null\"); // I already fetched thing when I got type\n      // what if thing data comes from somewhere else? auditable backend according to type, api keys are stored browser side or proxy\n      return (\n        <Widget\n          src={widgetSrc}\n          props={{ data: thing.data, blockHeight, ...props }}\n        />\n      );\n      // HERE IS THE TYPE RENDER\n      // We have an idea... it should render as the default idea view\n      // But first should check if user has a custom in settings\n      // What if the creator of the idea wants to display it in their own way?\n      // What if we want to force a specific way for it to be displayed?\n    } else {\n      switch (type) {\n        case \"widget\":\n          return <Widget src={path} />;\n        case \"account\":\n          return <p>account</p>;\n        case \"settings\":\n          return (\n            <Widget\n              src=\"efiz.near/widget/Every.Setting\"\n              props={{ path, blockHeight }}\n            />\n          );\n        case \"type\":\n          return <Widget src=\"efiz.near/widget/Every.Type\" />;\n        case \"profile\":\n          return <Widget src={\"efiz.near/widget/Every.Profile\"} />;\n        case \"graph\":\n          return <p>graph</p>;\n        case \"post\":\n          return <Widget src={\"efiz.near/widget/Every.Post\"} />;\n        case \"thing\":\n          console.log(`edge case: ${path} had \"thing\" type`);\n          return <></>;\n        default:\n          // TODO: this doesn't work in current vm\n          return null;\n      }\n    }\n  }\n}\n\n// DROPDOWN //\n// where can I put this? I'd like a better editor\n// this is a separate plugin\n// put in settings acording to the type\nfunction toggleEdit() {\n  if (state.showEdit) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showEdit: false })}\n      >\n        <i className=\"bi bi-arrow-counterclockwise me-1\" />\n        <span>Cancel Edit</span>\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showEdit: true, showRaw: true })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Edit</span>\n      </button>\n    );\n  }\n}\n// These are two very similiar functions\nfunction toggleRaw() {\n  if (state.showRaw) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showRaw: false })}\n      >\n        <i className=\"bi bi-arrow-up-left-circle me-1\" />\n        <span>Show Thing</span>\n      </button>\n    );\n  } else {\n    return (\n      <button className={`btn`} onClick={() => State.update({ showRaw: true })}>\n        <i className=\"bi bi-filetype-raw me-1\" />\n        <span>Raw</span>\n      </button>\n    );\n  }\n}\nfunction toggleHistory() {\n  if (state.showHistory) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showHistory: false })}\n      >\n        <i className=\"bi bi-clock me-1\" />\n        <span>Hide History</span>\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showHistory: true })}\n      >\n        <i className=\"bi bi-clock-history me-1\" />\n        <span>Show History</span>\n      </button>\n    );\n  }\n}\n\nfunction nearPad() {\n  if (type === \"widget\") {\n    return (\n      <a\n        className={`btn`}\n        href={`https://nearpad.dev/editor/${path}`}\n        target=\"_blank\"\n      >\n        <i className=\" me-1\">\n          <svg\n            focusable=\"false\"\n            aria-hidden=\"true\"\n            viewBox=\"2 2 18 18\"\n            width=\"16px\"\n            height=\"16px\"\n          >\n            <path d=\"M12.16 3h-.32L9.21 8.25h5.58zm4.3 5.25h5.16l-2.07-4.14C19.21 3.43 18.52 3 17.76 3h-3.93l2.63 5.25zm4.92 1.5h-8.63V20.1zM11.25 20.1V9.75H2.62zM7.54 8.25 10.16 3H6.24c-.76 0-1.45.43-1.79 1.11L2.38 8.25h5.16z\"></path>\n          </svg>\n        </i>\n        <span>Open NEARpad</span>\n      </a>\n    );\n  }\n}\n// This should be a prop\nconst renderIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"black\"\n      width=\"24px\"\n      height=\"24px\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"8\" />\n    </svg>\n  );\n};\n\nfunction toggleView(path, blockHeight) {}\n\n// We need it to be able to change state.\n// I need a widget referenced in state\nconst plugins = [];\nconst typeParts = type.split(\"/\");\nif (typeParts.length > 1 || type === \"widget\") {\n  plugins = Social.get(\n    `${context.accountId}/settings/every/${type}/plugins`\n  ) || [toggleEdit(), toggleRaw(), toggleHistory(), nearPad()];\n}\n\nreturn (\n  <Container id={path}>\n    <Header>\n      <ButtonRow>\n        <Widget\n          src=\"efiz.near/widget/Common.Dropdown\"\n          props={{\n            renderIcon: renderIcon,\n            elements: plugins,\n          }}\n        />\n      </ButtonRow>\n    </Header>\n    <Content>{renderContent()}</Content>\n  </Container>\n);\n\n// I think that there is a standard install\n// You start with some default settings\n// Type = \"every.near/type/plugin\"\n// plugins apply to types...\n// pluginType =\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/williamxx.near/widget/Every.Thing.View-fork", "__row_index": 1}