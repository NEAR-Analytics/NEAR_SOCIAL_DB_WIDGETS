{"tx_hash": "BV5fQYAyWqfBCAxMr7xFJMqNToHR4pvjRP6xo1vz9fhg", "action_id_social": "9GK4fWN9aCzXaLFmPs5EqtDTY9ux6xMCsuMxCH64fYMS-0-widget", "block_id": 87378808, "block_timestamp": "2023-03-15 21:44:32.334", "signer_id": "9c461db4ac11b66ed1167ff969042ac278eaf2d571712585424be00171a63884", "widget_name": "NFT-Collection-Holder-Snapshot", "source_code": "const accountId = props.accountId || context.accountId;\ninitState({\n  slug: \"asac.near\",\n  nftData: [],\n  holdersData: [],\n  currentPage: 0,\n  rowsPerPage: 10,\n  downloadLink,\n});\n\nconst prepareHoldersData = () => {\n  const holders = {};\n\n  state.nftData.forEach((token) => {\n    const owner = token.nft_state.owner;\n    const staked_owner = token.nft_state.staked_owner;\n\n    if (owner) {\n      if (!holders[owner]) {\n        holders[owner] = { count: 0, staked: 0, tokens: [], stakedTokens: [] };\n      }\n      if (!staked_owner || owner !== staked_owner) {\n        holders[owner].count += 1;\n        holders[owner].tokens.push(token.token_id);\n      }\n    }\n\n    if (staked_owner && owner !== staked_owner) {\n      if (!holders[staked_owner]) {\n        holders[staked_owner] = {\n          count: 0,\n          staked: 0,\n          tokens: [],\n          stakedTokens: [],\n        };\n      }\n      holders[staked_owner].staked += 1;\n      holders[staked_owner].stakedTokens.push(token.token_id);\n    }\n  });\n\n  const holdersData = Object.entries(holders)\n    .map(([owner, data]) => ({ owner, ...data }))\n    .sort((a, b) => b.count + b.staked - (a.count + a.staked));\n\n  State.update({ holdersData });\n};\n\nconst fetchData = () => {\n  State.update({ nftData: [] });\n  console.log(\"fetchData()\");\n  const { slug } = state;\n  console.log(slug);\n\n  let data = fetch(\"https://byz-multi-chain-01.hasura.app/v1/graphql\", {\n    method: \"POST\",\n    headers: {\n      \"x-api-key\": \"ChRbeKE.c94220449dbb45973a67a614b1f590be\",\n      \"Content-Type\": \"application/json\",\n      \"Hasura-Client-Name\": \"near-social\",\n    },\n    body: JSON.stringify({\n      query: `\n      query MyQuery {\n  near {\n    collection(where: {slug: {_eq: \"${state.slug}\"}}) {\n      slug\n      nft_metas (order_by: {token_id: asc}) {\n        token_id\n        nft_state {\n          owner\n          staked_owner\n        }\n      }\n    }\n  }\n}\n`,\n    }),\n  });\n  if (data) {\n    const nftData = data.body.data.near.collection[0].nft_metas;\n    console.log(\"here ---->>>>\", nftData);\n    State.update({ nftData });\n    prepareHoldersData();\n  }\n};\n\nconst exportToCSV = () => {\n  const headers = [\n    \"Holder\",\n    \"Number of Tokens\",\n    \"Number of Staked Tokens\",\n    \"Tokens Held\",\n    \"Tokens Staked\",\n  ];\n  const rows = state.holdersData.map((holder) => [\n    holder.owner,\n    holder.count,\n    holder.staked,\n    holder.tokens\n      .filter((tokenId) => !holder.stakedTokens.includes(tokenId))\n      .join(\", \"),\n    holder.stakedTokens.join(\", \"),\n  ]);\n  const csvContent = [headers, ...rows].map((e) => e.join(\",\")).join(\"\\n\");\n\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8\" });\n  console.log(\"blob --->>>\", blob);\n  const url = URL.createObjectURL(blob);\n  console.log(\"url --->>>\", url);\n  State.update({ downloadLink: url });\n};\n\nconst updateSlug = (e) => {\n  State.update({ slug: e.target.value });\n};\n\nconst handlePageChange = (newPage) => {\n  State.update({ currentPage: newPage });\n};\n\nif (indexer != null) {\n  console.log(indexer.body);\n}\n\nif (!state.nftData) {\n  return \"Loading\";\n}\n\nconst size = \"10em\";\n\nreturn state.nftData !== null ? (\n  <>\n    <a href=\"https://indexer.xyz/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img\n        src=\"https://indexer.xyz/indexer-logo-black.svg\"\n        alt=\"Indexer.xyz logo\"\n        style={{ height: \"1.5em\", verticalAlign: \"middle\" }}\n      />\n    </a>\n    <br />\n    <br />\n    <h1>NFT Collection Holder Snapshot</h1>\n    <p>\n      Easily fetch, display, and export NFT holder data from any collection on\n      the NEAR blockchain. Quickly obtain a snapshot of NFT holders, browse\n      through paginated results, and download the data as a CSV file with just a\n      few clicks. <br /> <br />\n      This app is built by Indexer.xyz\n      <br />\n    </p>\n    <label htmlFor=\"slugInput\">Collection Contract Key:</label>\n    <input\n      type=\"text\"\n      id=\"slugInput\"\n      value={state.slug}\n      onChange={updateSlug}\n    />\n    <button onClick={fetchData}>Fetch NFT data</button>\n    {state.holdersData.length > 0 && (\n      <button onClick={exportToCSV}>Generate CSV download link</button>\n    )}\n    {state.downloadLink && (\n      <a href={state.downloadLink} download=\"token_snapshots.csv\">\n        Download CSV\n      </a>\n    )}\n    <div className=\"d-flex gap-4 flex-wrap\">\n      <table\n        style={{\n          borderCollapse: \"collapse\",\n          width: \"100%\",\n          fontFamily: \"Arial, sans-serif\",\n          fontSize: \"14px\",\n        }}\n      >\n        <thead>\n          <tr>\n            <th>Wallet</th>\n            <th>Number of Tokens</th>\n            <th>Number of Staked Tokens</th>\n            <th>Tokens Held</th>\n            <th>Tokens Staked</th>\n          </tr>\n        </thead>\n        <tbody>\n          {state.holdersData\n            .slice(\n              state.currentPage * state.rowsPerPage,\n              (state.currentPage + 1) * state.rowsPerPage\n            )\n            .map((holder) => (\n              <tr>\n                <td style={{ padding: \"10px\" }}>\n                  <a\n                    href={`https://www.tradeport.xyz/near/profile/${holder.owner}?tab=collected`}\n                    target=\"_blank\"\n                    rel=\"noopener\"\n                  >\n                    {holder.owner.length > 30\n                      ? holder.owner.slice(0, 30) + \"...\"\n                      : holder.owner}\n                  </a>\n                </td>\n                <td style={{ padding: \"10px\" }}>{holder.count}</td>\n                <td style={{ padding: \"10px\" }}>{holder.staked}</td>\n                <td style={{ padding: \"10px\" }}>\n                  <div\n                    style={{\n                      maxHeight: \"100px\",\n                      overflowY: \"scroll\",\n                      width: \"300px\",\n                      border: \"1px solid #ccc\",\n                      padding: \"5px\",\n                    }}\n                  >\n                    {holder.tokens\n                      .filter(\n                        (tokenId) => !holder.stakedTokens.includes(tokenId)\n                      )\n                      .map((tokenId, index, filteredTokens) => (\n                        <div key={tokenId} style={{ display: \"inline\" }}>\n                          <a\n                            href={`https://www.tradeport.xyz/near/collection/${state.slug}/${tokenId}`}\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                          >\n                            {tokenId}\n                          </a>\n                          {index < filteredTokens.length - 1 && \", \"}\n                        </div>\n                      ))}\n                  </div>\n                </td>\n                <td style={{ padding: \"10px\" }}>\n                  <div\n                    style={{\n                      maxHeight: \"100px\",\n                      overflowY: \"scroll\",\n                      width: \"300px\",\n                      border: \"1px solid #ccc\",\n                      padding: \"5px\",\n                    }}\n                  >\n                    {holder.stakedTokens &&\n                      holder.stakedTokens.map((tokenId, index) => (\n                        <div key={tokenId} style={{ display: \"inline\" }}>\n                          <a\n                            href={`https://www.tradeport.xyz/near/collection/${state.slug}/${tokenId}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            {tokenId}\n                          </a>\n                          {index < holder.stakedTokens.length - 1 && \", \"}\n                        </div>\n                      ))}\n                  </div>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n      <div style={{ marginTop: \"10px\" }}>\n        <button\n          disabled={state.currentPage === 0}\n          onClick={() => handlePageChange(state.currentPage - 1)}\n        >\n          Previous\n        </button>\n        <span style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n          Page {state.currentPage + 1} of{\" \"}\n          {Math.ceil(state.nftData.length / state.rowsPerPage)}\n        </span>\n        <button\n          disabled={\n            state.currentPage + 1 ===\n            Math.ceil(state.nftData.length / state.rowsPerPage)\n          }\n          onClick={() => handlePageChange(state.currentPage + 1)}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  </>\n) : (\n  <p>loading...</p>\n);\n", "metadata": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/9c461db4ac11b66ed1167ff969042ac278eaf2d571712585424be00171a63884/widget/NFT-Collection-Holder-Snapshot", "branch.draft.": NaN, "branch.draft": NaN, "branch": NaN, "metadata.tags.app": NaN, "metadata.description": NaN, "metadata.name": NaN, "metadata.image.ipfs_cid": NaN}