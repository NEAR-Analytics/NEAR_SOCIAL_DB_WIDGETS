{"tx_hash": "8VowyXcHup2WgLFqo4ahLDT2dtS9tGLSSHHQWABcoJsh", "action_id_social": "65URiyKamgAsRD1LzZmmUc5CqRCXQbzgL7pxZ2oSrLDq-0-widget", "block_id": 92609617, "block_timestamp": "2023-05-24T15:21:21.494Z", "signer_id": "eugenewolf507.near", "widget_name": "WikiOnSocialDB_OneArticle", "source_code": "const addressForArticles = \"wikiTest2Article\";\nconst addressForComments = \"wikiTest2Comment\";\nconst authorForWidget = \"eugenewolf507.near\";\nconst accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\n\nconst lastEditor = props.lastEditor;\nconst blockHeight =\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\nconst subscribe = !!props.subscribe;\nconst raw = !!props.raw;\n\nconst notifyAccountId = accountId;\n\nState.init({ showReply: false });\n\nconst article = JSON.parse(\n  Social.get(`${lastEditor}/wikiTest2Article/main`, blockHeight)\n);\nState.update({ article });\n\n// ======= CHECK WHO CAN EDIT ARTICLE\nconst authorsWhiteList = [\"507.near\", \"wolf.near\"];\nconst doesUserCanEditArticle = () => {\n  const isAccountIdInWhiteList = authorsWhiteList.some(\n    (val) => val === accountId\n  );\n  const isAccountIdEqualsAuthor = accountId === state.article.author;\n  return isAccountIdInWhiteList || isAccountIdEqualsAuthor ? true : false;\n};\n\n// ======= GET DATA TO ATACH COMMENTS TO THE ARTICLE =======\n// we attach all comments to the first initial article (which version = 0)\nconst articlesIndex = Social.index(addressForArticles, \"main\", {\n  order: \"asc\",\n  accountId: state.article.author,\n});\n\nconst resultArticles =\n  articlesIndex &&\n  articlesIndex.reduce((acc, { accountId, blockHeight }) => {\n    const postData = Social.get(\n      `${accountId}/${addressForArticles}/main`,\n      blockHeight\n    );\n    const postDataWithBlockHeight = { ...JSON.parse(postData), blockHeight };\n    return [...acc, postDataWithBlockHeight];\n  }, []);\n\nconst firstArticle =\n  resultArticles &&\n  resultArticles.find(\n    (article) => article.articleId === state.article.articleId\n  );\n\nconst firstArticleBlockHeight = firstArticle.blockHeight;\n\n// ======= Item for comment =======\nconst item = {\n  type: \"social\",\n  path: `${state.article.author}/${addressForArticles}/main`,\n  blockHeight: firstArticleBlockHeight,\n};\n\nconst saveArticle = () => {\n  // console.log(\"state.article.tags\", state.article.tags);\n  // console.log(state);\n  const newArticleData = {\n    ...state.article,\n    body: state.note,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    version: Number(state.article.version) + 1,\n    tags: state.tags ? Object.keys(state.tags) : [],\n  };\n\n  const composeArticleData = () => {\n    const data = {\n      [addressForArticles]: {\n        main: JSON.stringify(newArticleData),\n      },\n      index: {\n        [addressForArticles]: JSON.stringify({\n          key: \"main\",\n          value: {\n            type: \"md\",\n          },\n        }),\n      },\n    };\n    return data;\n  };\n  const newData = composeArticleData();\n  Social.set(newData, { force: true });\n};\n\n//======= Create initialTagsObject for TagsEditor widget =======\n// const initialTestArray = [\"learner\", \"crypto\", \"social\"];\nconst getTagObjectfromArray = (tagArray) => {\n  return tagArray.reduce((acc, value) => ({ ...acc, [value]: \"\" }), {});\n};\n// console.log(getTagObjectfromArray(initialTestArray));\n\nconst areTheTextAndTagsTheSame = () => {\n  const isThereNoTextInBody = !state.note;\n  const doesTextUnchanged = article.body === state.note;\n  const doesTagsUnchanged = state.tags\n    ? Object.keys(state.tags).join().toLowerCase() ===\n      state.article.tags.join().toLowerCase()\n    : true;\n  return isThereNoTextInBody || (doesTextUnchanged && doesTagsUnchanged);\n};\n\nreturn (\n  <>\n    <Widget\n      src={`${authorForWidget}/widget/WikiOnSocialDB_MainNavigation`}\n      props={{ currentNavPill: \"articles\" }}\n    />\n    <div>\n      <h1>Article: {state.article.articleId}</h1>\n      {/* === BUTTON - EDIT ARTICLE === */}\n      {doesUserCanEditArticle() && (\n        <button\n          onClick={() => {\n            State.update({\n              ...state,\n              editArticle: true,\n              note: state.article.body,\n            });\n          }}\n        >\n          Edit Article\n        </button>\n      )}\n      {/* === BUTTON - SAVE ARTICLE === */}\n      {state.editArticle && (\n        <>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              if (areTheTextAndTagsTheSame()) return;\n              saveArticle();\n            }}\n          >\n            Save Article{\" \"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              State.update({\n                ...state,\n                editArticle: false,\n                note: undefined,\n              });\n            }}\n          >\n            Cancel{\" \"}\n          </button>\n        </>\n      )}\n\n      {/* === BUTTON - VIEW HISTORY === */}\n      <span className=\"ps-4\">\n        <button\n          onClick={() => {\n            State.update({\n              ...state,\n              viewHistory: !state.viewHistory,\n            });\n          }}\n        >\n          View History\n        </button>\n      </span>\n      {/* === EDIT ARTICLE === */}\n      {state.editArticle && (\n        <>\n          <div className=\"d-flex gap-2\" style={{ minHeight: \"300px\" }}>\n            <div className=\"w-50\">\n              <Widget\n                src=\"mob.near/widget/MarkdownEditorIframe\"\n                props={{\n                  initialText: state.article.body,\n                  onChange: (note) => State.update({ note }),\n                }}\n              />\n            </div>\n            <div className=\"w-50\">\n              <Widget\n                src=\"mob.near/widget/TagsEditor\"\n                props={{\n                  initialTagsObject: getTagObjectfromArray(state.article.tags),\n                  placeholder: \"Input tags\",\n                  setTagsObject: (tags) => {\n                    state.tags = tags;\n                    State.update();\n                  },\n                }}\n              />\n              <Widget\n                src=\"mob.near/widget/SocialMarkdown\"\n                props={{ text: state.note }}\n              />\n            </div>\n          </div>\n        </>\n      )}\n      {/* MARKDOWN and TAGS list when user doesn't edit article  */}\n      {!state.editArticle && (\n        <>\n          <div className=\"pt-2\">\n            <Widget\n              src={`${authorForWidget}/widget/WikiOnSocialDB_TagList`}\n              props={{ tags: state.article.tags }}\n            />\n          </div>\n          <Markdown text={state.note || state.article.body} />\n        </>\n      )}\n      {/* === VIEW HISTORY === */}\n      {state.viewHistory && (\n        <div className=\"mt-3 ps-5\">\n          <Widget\n            src={`${authorForWidget}/widget/WikiOnSocialDB_History.History`}\n            props={{\n              articleId: state.article.articleId,\n              resultArticles,\n            }}\n          />\n        </div>\n      )}\n      {/* === CREATE COMMENT BUTTON === */}\n      {blockHeight !== \"now\" && (\n        <div className=\"mt-1 d-flex justify-content-between\">\n          <Widget\n            src=\"mob.near/widget/CommentButton\"\n            props={{\n              onClick: () => State.update({ showReply: !state.showReply }),\n            }}\n          />\n        </div>\n      )}\n      {/* === COMPOSE COMMENT === */}\n      <div className=\"mt-3 ps-5\">\n        {state.showReply && (\n          <div className=\"mb-2\">\n            <Widget\n              src={`${authorForWidget}/widget/WikiOnSocialDB_Comment.Compose`}\n              props={{\n                notifyAccountId,\n                item,\n                onComment: () => State.update({ showReply: false }),\n              }}\n            />\n          </div>\n        )}\n        {/* === SHOW COMMENT === */}\n        <Widget\n          src={`${authorForWidget}/widget/WikiOnSocialDB_Comment.Feed`}\n          props={{\n            item,\n            highlightComment: props.highlightComment,\n            limit: props.commentsLimit,\n            subscribe,\n            raw,\n          }}\n        />\n      </div>\n      {/* === FOOTER === */}\n      <Widget\n        src={`${authorForWidget}/widget/WikiOnSocialDB_OneArticle.Footer`}\n        props={{\n          author: state.article.author,\n          lastEditor: state.article.lastEditor,\n          timeLastEdit: state.article.timeLastEdit,\n          version: state.article.version,\n        }}\n      />\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/eugenewolf507.near/widget/WikiOnSocialDB_OneArticle", "__row_index": 52}