{"tx_hash": "HL3FMKZG1QvRR3VbkhPsyZqQrHJoLwVjSrre4kCvVSsz", "action_id_social": "6ewGJTbwcZyg1JNxCP3gXFAabWyLvPWXSR8y9Nf57uLm-0-widget", "block_id": 85652308, "block_timestamp": "2023-02-20 15:29:16.789", "signer_id": "eugenewolf507.near", "widget_name": "WikiOnSocialDB_OneArticle", "source_code": "const addressForArticles = \"wikiTest2Article\";\nconst authorForWidget = \"eugenewolf507.near\";\nconst accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\nconst { articleId, blockHeight, lastEditor } = props;\nState.init({});\n\nconst article = JSON.parse(\n  Social.get(`${lastEditor}/wikiTest2Article/main`, blockHeight)\n);\nconsole.log(articleId, blockHeight, lastEditor);\nconsole.log(article);\nState.update({ article });\n\nconst getDate = (timestamp) => {\n  const date = new Date(Number(timestamp));\n  return date.toDateString();\n};\n\nconst saveArticle = (args) => {\n  const newArticleData = {\n    ...state.article,\n    body: state.note,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    version: Number(state.article.version) + 1,\n  };\n\n  const composeData = () => {\n    const data = {\n      [addressForArticles]: {\n        main: JSON.stringify(newArticleData),\n      },\n      index: {\n        [addressForArticles]: JSON.stringify({\n          key: \"main\",\n          value: {\n            type: \"md\",\n          },\n        }),\n      },\n    };\n    return data;\n  };\n  const newData = composeData();\n  Social.set(newData, { force: true });\n};\n\nreturn (\n  <>\n    <Widget\n      src={`${authorForWidget}/widget/WikiOnSocialDB_MainNavigation`}\n      props={{ currentNavPill: \"articles\" }}\n    />\n    <div>\n      <h4>Article: {state.article.articleId}</h4>\n      <button\n        onClick={() => {\n          State.update({\n            ...state,\n            editArticle: true,\n            note: state.article.body,\n          });\n        }}\n      >\n        Edit Article\n      </button>\n      {/* === EDIT ARTICLE === */}\n      {state.editArticle && (\n        <>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              if (!state.note || article.body === state.note) return;\n\n              const args = {\n                article_id: state?.articleId,\n                body: state.note,\n                navigation_id: null,\n              };\n\n              saveArticle(args);\n            }}\n          >\n            Save Article{\" \"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              State.update({\n                ...state,\n                editArticle: false,\n                note: undefined,\n              });\n            }}\n          >\n            Cancel{\" \"}\n          </button>\n          <div className=\"d-flex gap-2\" style={{ minHeight: \"300px\" }}>\n            <div className=\"w-50\">\n              <Widget\n                src=\"mob.near/widget/MarkdownEditorIframe\"\n                props={{\n                  initialText: state.article.body,\n                  onChange: (note) => State.update({ note }),\n                }}\n              />\n            </div>\n            <div className=\"w-50\">\n              <Widget\n                src=\"mob.near/widget/SocialMarkdown\"\n                props={{ text: state.note }}\n              />\n            </div>\n          </div>\n        </>\n      )}\n      {!state.editArticle && (\n        <Markdown text={state.note || state.article.body} />\n      )}\n      {/* === LIKE + CREATE COMMENT BUTTON === */}\n      {blockHeight !== \"now\" && (\n        <div className=\"mt-1 d-flex justify-content-between\">\n          {/* TODO add like widget */}\n          <Widget\n            src=\"mob.near/widget/CommentButton\"\n            props={{\n              onClick: () =>\n                !state.showReply && State.update({ showReply: true }),\n            }}\n          />\n        </div>\n      )}\n      {/* === COMMENT COMPOSE COMMENT FEED === */}\n      <div className=\"mt-3 ps-5\">\n        {state.showReply && (\n          <div className=\"mb-2\">\n            <Widget\n              src={`${authorForWidget}/widget/WikiOnSocialDB_Comment.Compose`}\n              props={{\n                notifyAccountId,\n                item,\n                onComment: () => State.update({ showReply: false }),\n              }}\n            />\n          </div>\n        )}\n        <Widget\n          src={`${authorForWidget}/widget/WikiOnSocialDB_Comment.Feed`}\n          props={{\n            item,\n            highlightComment: props.highlightComment,\n            limit: props.commentsLimit,\n            subscribe,\n            raw,\n          }}\n        />\n      </div>\n      {/* === FOOTER === */}\n      <div className=\"mt-5 alert alert-secondary\">\n        <div>\n          Created by{\" \"}\n          <a\n            href={`https://near.social/#/mob.near/widget/ProfilePage?accountId=${state.article.author}`}\n            target=\"_blank\"\n            style={{ textDecoration: \"underline\" }}\n          >\n            {state.article.author}\n          </a>\n          {/* \n          TODO: add lastEditor to edit and create widgets\n          <br />\n          Last edit by{\" \"}\n          <a\n            href={`https://near.social/#/mob.near/widget/ProfilePage?accountId=${state.article.lastEditor}`}\n            style={{ textDecoration: \"underline\" }}\n          >\n            {state.article.lastEditor}\n          </a>*/}\n          <br />\n          Edited on {getDate(state.article.timeLastEdit)}\n          <br />\n          Edit versions: {state.article.version}\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/eugenewolf507.near/widget/WikiOnSocialDB_OneArticle"}