{"tx_hash": "98J6aRZzUMBenKuMVumMQo8KNEf5yS6y6dfS6viJKYcf", "action_id_social": "9NbvqQSc1Y2zMGjFiHFbp27a5QoJ4U2fcguUbQDXh6iA-1-widget", "block_id": 86989648, "block_timestamp": "2023-03-10 16:01:11.057", "signer_id": "roshaan.near", "widget_name": "queryapi__IndexerFunctionEditor-fork", "source_code": "let initialText = \"\";\nconst indexerName = props.indexerName;\nconst registry_contract_id =\n  props.registry_contract_id || \"registry.queryapi.near\";\nlet accountId = props.accountId || context.accountId;\nlet base = props.base ?? \"query-api-editor\";\nconst labelStrings = props.labels ?? [];\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\nState.init({\n  // Should be a list of objects with field \"name\".\n  labels: labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings: labelStrings,\n  name: \"\",\n  description: \"\",\n});\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst setLabels = (labels) => {\n  labels = labels.map((o) => {\n    o.name = normalizeLabel(o.name);\n    return o;\n  });\n  let labelStrings = labels.map((o) => {\n    return o.name;\n  });\n  State.update({ labels, labelStrings });\n};\nconst existingLabelStrings =\n  Near.view(nearDevGovGigsContractAccountId, \"get_all_labels\") ?? [];\nconst existingLabels = existingLabelStrings.map((s) => {\n  return { name: s };\n});\nif (!accountId) {\n  return \"Please sign in to use this widget.\";\n}\n\nlet updateIndexerCode = (data) => {\n  const gas = 200000000000000;\n  Near.call(\n    registry_contract_id,\n    \"register_indexer_function\",\n    {\n      function_name: data.indexerName || indexerName,\n      code: data.code,\n      schema: data.schema,\n      metadata: {\n        name: state.name,\n        labels: state.labelStrings,\n        description: state.description,\n      },\n    },\n    gas\n  );\n};\n\nconst reducer = (message) => {\n  switch (message.action) {\n    case \"register_function\":\n      updateIndexerCode(message.value);\n      break;\n\n    case \"initial_load\":\n      State.update({ code: message.value });\n      break;\n\n    case \"default\":\n      console.log(\"default case\");\n  }\n};\nconst code = `  <script>\n   let iframe = null;\n\n  function createIframe(base, accountId, indexerName) {\n    iframe = document.createElement('iframe');\n    iframe.src = 'https://query-api-react.vercel.app';\n    // iframe.src = 'http://localhost:3000';\n\n    if (base) {\n      console.log(\"added base\")\n      iframe.src += base;\n    }\n    if (accountId != undefined && indexerName != undefined) {\n      iframe.src += \"?accountId=${accountId}&indexerName=${indexerName}\"\n      \n      } else if (accountId != undefined ){\n      iframe.src += \"?accountId=${accountId}\"\n      }\n       iframe.style.height = '750px';\n      iframe.style.border = \"none\"\n      iframe.style.overflow = \"hidden\"\n      iframe.name = \"react-app\"\n    iframe.id = \"react-app-iframe\"\n    iframe.style.width = '100%';\n    document.body.appendChild(iframe);\n  }\n\n  window.addEventListener('message', function (event) {\n      if (event.data.action === \"register_function\") {\n        console.log(\"registering\")\n        window.top.postMessage(event.data, \"*\");\n      }\n    if (event.data.action === 'createIframe') {\n      // Check if the iframe element already exists\n      if (iframe) {\n        // The iframe already exists, do nothing\n        return;\n      }\n      createIframe(event.data.value.base, event.data.value.accountId, event.data.value.indexerName);\n    }\n  });\n    </script>\n`;\nconst labelEditor = (\n  <div className=\"col-lg-12  mb-2\">\n    Labels:\n    <Typeahead\n      multiple\n      labelKey=\"name\"\n      onChange={setLabels}\n      options={existingLabels}\n      placeholder=\"DeFi, NearSocial, Protocol\"\n      selected={state.labels}\n      positionFixed\n      allowNew\n    />\n  </div>\n);\n\nconst nameDiv = (\n  <div className=\"col-lg-6  mb-2\">\n    Name:\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n);\n\nconst descriptionDiv = (\n  <div className=\"col-lg-12  mb-2\">\n    Description:\n    <br />\n    <textarea\n      value={state.description}\n      type=\"text\"\n      rows={2}\n      className=\"form-control\"\n      onChange={(event) => State.update({ description: event.target.value })}\n    />\n  </div>\n);\nconst mode = \"Indexer Metadata\";\nreturn (\n  <div>\n    <div className=\"card\">\n      <div className=\"card-header\">{mode}</div>\n      <div class=\"card-body\">\n        <div className=\"row\">\n          {labelEditor}\n          {nameDiv}\n          {descriptionDiv}\n        </div>\n\n        <a className=\"btn btn-outline-primary mb-2\" onClick={onClick}>\n          Submit\n        </a>\n      </div>\n    </div>\n    <iframe\n      name=\"widget-iframe\"\n      className=\"w-100\"\n      style={{ height: \"750px\", width: \"100%\" }}\n      srcDoc={code}\n      message={{\n        action: \"createIframe\",\n        value: {\n          indexerName: indexerName,\n          accountId: accountId,\n          base,\n        },\n        from: \"widget\",\n      }}\n      onMessage={(message) => reducer(message)}\n    />\n  </div>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/queryapi__IndexerFunctionEditor-fork", "branch.draft": NaN}