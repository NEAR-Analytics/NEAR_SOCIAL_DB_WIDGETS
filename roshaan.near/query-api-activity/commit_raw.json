{"tx_hash": "5hgJiwYVFT1Kt7rmAwp9nXNawj1midmLZ6KLCc8DxyfX", "action_id_social": "8kAPSqaVevf1PwqzUmN6cFTTWeZDuBDcLft1njnRLbZK-0-widget", "block_id": 88373966, "block_timestamp": "2023-03-29 15:08:59.487", "signer_id": "roshaan.near", "widget_name": "query-api-activity", "source_code": "const LIMIT = 10;\n\nState.init({\n  posts: [],\n  postsCount: 0,\n  postsPage: 0,\n});\n\nconst Subheading = styled.h2`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 10px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n`;\n\nconst postsQuery = `\n  query IndexerQuery($offset: Int) {\n  roshaan_near_alphaindexer_posts(order_by: {block_height: desc}, offset: $offset, limit: ${LIMIT}) {\n    account_id\n    block_height\n    block_timestamp\n    content\n    receipt_id\n    comments(order_by: {block_height: asc}) {\n      account_id\n      block_height\n      block_timestamp\n      content\n    }\n    post_likes {\n      account_id\n    }\n  }\n  roshaan_near_alphaindexer_posts_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n`;\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(\n    \"https://query-api-hasura-vcqilefdcq-uc.a.run.app/v1/graphql\",\n    {\n      method: \"POST\",\n      headers: { \"x-hasura-role\": \"roshaan_near\" },\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    }\n  );\n}\n\nfetchGraphQL(postsQuery, \"IndexerQuery\", {\n  offset: state.postsPage * LIMIT,\n}).then((result) => {\n  console.log(result);\n  if (result.status === 200) {\n    if (result.body.data) {\n      const posts = result.body.data.roshaan_near_alphaindexer_posts;\n      console.log(posts);\n      const postsCount =\n        result.body.data.roshaan_near_alphaindexer_posts_aggregate.aggregate\n          .count;\n      if (posts.length > 0) {\n        State.update({\n          posts,\n          postsCount,\n        });\n      }\n    }\n  }\n});\n\nconst Post = styled.div`\n  border-bottom: 1px solid #ECEEF0;\n  padding: 24px 0 12px;\n\n  @media (max-width: 1200px) {\n    padding: 12px 0 0;\n  }\n`;\nconst renderComment = (a) => {\n  return (\n    <div key={JSON.stringify(a)}>\n      <Widget\n        src=\"roshaan.near/widget/Comments.Comment\"\n        props={{\n          accountId: a.account_id,\n          blockHeight: a.block_height,\n          content: a.content,\n        }}\n      />\n    </div>\n  );\n};\n\nconst renderItem = (item, i) => {\n  const renderedComments = item.comments.map(renderComment);\n  return (\n    <Post className=\"post\" key={item.block_height + \"_\" + item.account_id}>\n      <Widget\n        src=\"roshaan.near/widget/Posts.Post\"\n        props={{\n          accountId: item.account_id,\n          blockHeight: item.block_height,\n          content: item.content,\n          comments: renderedComments,\n        }}\n      />\n    </Post>\n  );\n};\n\nconst onPostsPageChange = (page) => {\n  console.log(page, \"page selected\");\n  page = page - 1;\n  if (page === state.postsPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n\n  try {\n    fetchGraphQL(postsQuery, \"IndexerQuery\", {\n      offset: state.postsPage * LIMIT,\n    }).then((result) => {\n      if (result.status === 200) {\n        let data = result.body.data;\n        if (data) {\n          const posts = data.roshaan_near_alphaindexer_posts;\n          const postsCount =\n            data.roshaan_near_alphaindexer_posts_aggregate.aggregate.count;\n          if (posts.length > 0) {\n            State.update({\n              posts: posts,\n              postsCount: postsCount,\n            });\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.log(\"error:\", e);\n  }\n  State.update({ postsPage: page, currentPage: page });\n};\n\nconst renderedItems = state.posts.map(renderItem);\nreturn (\n  <div>\n    {state.posts.length > 0 ? (\n      <>\n        {renderedItems}\n        <Widget\n          src=\"roshaan.near/widget/Paginate-fork\"\n          props={{\n            siblingCount: 1,\n            totalCount: state.postsCount,\n            pageSize: LIMIT,\n            onPageChange: onPostsPageChange,\n            currentPage: state.postsPage,\n          }}\n        />\n      </>\n    ) : (\n      <Subheading> No data to show... </Subheading>\n    )}\n  </div>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/query-api-activity", "branch.draft.": NaN, "branch.draft.metadata": NaN}