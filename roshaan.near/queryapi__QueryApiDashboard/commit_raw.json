{"tx_hash": "2HRuDSXVLMcXH4RPdYE29rWYTbS5uBGaPifQ4qGTYMvv", "action_id_social": "4g2SzqL8H3uM7g4fuBbtScX5AZeHWHWAPZLT9nb5DQBY-0-widget", "block_id": 88475537, "block_timestamp": "2023-03-31 02:08:55.451", "signer_id": "roshaan.near", "widget_name": "queryapi__QueryApiDashboard", "source_code": "const accountId = context.accountId;\r\nconst [selected_accountId, selected_indexerName] = props.selectedIndexerPath\r\n  ? props.selectedIndexerPath.split(\"/\")\r\n  : [undefined, undefined];\r\n\r\nconst activeTab = props.view ?? \"public-indexers\";\r\nconst limit = 7;\r\nlet totalIndexers = 0;\r\nconst registry_contract_id =\r\n  props.registry_contract_id || \"registry.queryapi.near\";\r\n\r\nState.init({\r\n  activeTab: activeTab,\r\n  my_indexers: [],\r\n  all_indexers: [],\r\n  selected_indexer: undefined,\r\n  selected_account: undefined,\r\n});\r\n\r\nNear.asyncView(registry_contract_id, \"list_indexer_functions\").then((data) => {\r\n  let indexer_paths = Object.keys(data);\r\n  let indexers = indexer_paths.map((indexer_path) => {\r\n    return {\r\n      accountId: indexer_path.split(\"/\")[0],\r\n      indexerName: indexer_path.split(\"/\").splice(1).join(\"/\"),\r\n    };\r\n  });\r\n\r\n  let my_indexers = indexers.filter(\r\n    (indexer) => indexer.accountId === accountId\r\n  );\r\n\r\n  State.update({\r\n    my_indexers: my_indexers,\r\n    all_indexers: indexers,\r\n    totalIndexers: indexer_paths.length,\r\n  });\r\n});\r\n\r\nconst Subheading = styled.h2`\r\n  display: block;\r\n  margin: 0;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\r\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\r\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\r\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\r\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\r\n  white-space: nowrap;\r\n  outline: none;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: calc(var(--body-top-padding) * -1);\r\n`;\r\n\r\nconst NavBarLogo = styled.a`\r\n    padding-top: 0.3125rem;\r\n    padding-bottom: 0.3125rem;\r\n    margin-right: 1rem;\r\n    font-size: 1.25rem;\r\n    text-decoration: none;\r\n    white-space: nowrap;\r\n`;\r\nconst Main = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 284px minmax(0, 1fr);\r\n  grid-gap: 16px;\r\n  padding-bottom: 24px;\r\n\r\n  @media (max-width: 1200px) {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Section = styled.div`\r\n  padding-left: 10px;\r\n  padding-top: 24px;\r\n  border-left: ${(p) => (p.primary ? \"1px solid #ECEEF0\" : \"none\")};\r\n  border-right: ${(p) => (p.primary ? \"1px solid #ECEEF0\" : \"none\")};\r\n\r\n  @media (max-width: 1200px) {\r\n    padding-top: 0px;\r\n    border-left: none;\r\n    border-right: none;\r\n    display: ${(p) => (p.active ? \"block\" : \"none\")};\r\n    margin: ${(p) => (p.negativeMargin ? \"0 -12px\" : \"0\")};\r\n  }\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: none;\r\n  height: 48px;\r\n  background: #f8f9fa;\r\n  border-top: 1px solid #eceef0;\r\n  border-bottom: 1px solid #eceef0;\r\n  margin-bottom: ${(p) => (p.noMargin ? \"0\" : p.halfMargin ? \"24px\" : \"24px\")};\r\n\r\n  @media (max-width: 1200px) {\r\n    display: flex;\r\n    margin-left: -12px;\r\n    margin-right: -12px;\r\n\r\n    button {\r\n      flex: 1;\r\n    }\r\n  }\r\n`;\r\nconst Content = styled.div`\r\n  background-color: #f7f7f7;\r\n  padding: 2em;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: palevioletred;\r\n`;\r\n\r\nconst TabsButton = styled.button`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  padding: 0 12px;\r\n  position: relative;\r\n  color: ${(p) => (p.selected ? \"#11181C\" : \"#687076\")};\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    color: #11181c;\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    display: ${(p) => (p.selected ? \"block\" : \"none\")};\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 3px;\r\n    background: #0091ff;\r\n  }\r\n`;\r\nconst H2 = styled.h2`\r\n  font-size: 19px;\r\n  line-height: 22px;\r\n  color: #11181c;\r\n  margin: 0 0 24px;\r\n`;\r\nconst Card = styled.div`\r\n  border-radius: 12px;\r\n  background: #fff;\r\n  border: ${(div) => (div.selected ? \"1px solid black\" : \"1px solid #eceef0\")};\r\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\r\n    0px 1px 2px rgba(16, 24, 40, 0.06);\r\n`;\r\n\r\nconst CardBody = styled.div`\r\n  padding: 16px;\r\n  display: flex;\r\n  gap: 16px;\r\n  align-items: center;\r\n\r\n  > * {\r\n    min-width: 0;\r\n  }\r\n`;\r\n\r\nconst CardFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n  padding: 16px;\r\n  border-top: 1px solid #eceef0;\r\n`;\r\n\r\nconst TextLink = styled.a`\r\n  display: block;\r\n  margin: 0;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\r\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\r\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\r\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\r\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\r\n  white-space: nowrap;\r\n  outline: none;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst Thumbnail = styled.a`\r\n  display: block;\r\n  width: 48px;\r\n  height: 48px;\r\n  flex-shrink: 0;\r\n  border: 1px solid #eceef0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  outline: none;\r\n  transition: border-color 200ms;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    border-color: #d0d5dd;\r\n  }\r\n\r\n  img {\r\n    object-fit: cover;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n  margin: 0 0 16px;\r\n`;\r\n\r\nconst sharedButtonStyles = `\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 16px;\r\n  margin-bottom: 12px;\r\n  height: 32px;\r\n  border-radius: 6px;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    text-decoration: none;\r\n    outline: none;\r\n  }\r\n\r\n  i {\r\n    color: #7E868C;\r\n  }\r\n\r\n  .bi-16 {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  ${sharedButtonStyles}\r\n  color: ${(p) => (p.primary ? \"#fff\" : \"#11181C\")} !important;\r\n  background: ${(p) => (p.primary ? \"#0091FF\" : \"#FBFCFD\")};\r\n  border: ${(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: ${(p) => (p.primary ? \"#0484e5\" : \"#ECEDEE\")};\r\n  }\r\n`;\r\n\r\nconst ButtonLink = styled.a`\r\n  ${sharedButtonStyles}\r\n  color: ${(p) => {\r\n    if (p.primary) return \"#fff\";\r\n    else if (p.danger) return \"#fff\";\r\n    else return \"#11181C\";\r\n  }} !important;\r\n  background: ${(p) => {\r\n    if (p.primary) return \"#0091FF\";\r\n    else if (p.danger) return \"#dc3545\";\r\n    else return \"#FBFCFD\";\r\n  }};\r\n  border: ${(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: ${(p) => {\r\n      if (p.primary) return \"#0484e5\";\r\n      else if (p.danger) return \"#b22b38\";\r\n      else return \"#ECEDEE\";\r\n    }}\r\n`;\r\n\r\nconst indexerView = (accountId, indexerName, idx, view) => {\r\n  const isSelected =\r\n    (selected_accountId === undefined &&\r\n      selected_indexerName === undefined &&\r\n      idx === 0) ||\r\n    (selected_accountId === accountId && selected_indexerName === indexerName);\r\n\r\n  const editUrl = `https://alpha.near.org/#/roshaan.near/widget/queryapi__QueryApiDashboard?selectedIndexerPath=${accountId}/${indexerName}&view=editor-window`;\r\n  const statusUrl = `https://alpha.near.org/#/roshaan.near/widget/queryapi__QueryApiDashboard?selectedIndexerPath=${accountId}/${indexerName}&view=indexer-status`;\r\n  let removeIndexer = (name) => {\r\n    const gas = 200000000000000;\r\n    Near.call(\r\n      registry_contract_id,\r\n      \"remove_indexer_function\",\r\n      {\r\n        function_name: name,\r\n      },\r\n      gas\r\n    );\r\n  };\r\n  return (\r\n    <Card selected={isSelected}>\r\n      <CardBody>\r\n        <Thumbnail>\r\n          <Widget\r\n            src=\"mob.near/widget/Image\"\r\n            props={{\r\n              image: metadata.image,\r\n              fallbackUrl:\r\n                \"https://upload.wikimedia.org/wikipedia/commons/8/86/Database-icon.svg\",\r\n              alt: \"Near QueryApi indexer\",\r\n            }}\r\n          />\r\n        </Thumbnail>\r\n\r\n        <div>\r\n          <TextLink as=\"a\" bold ellipsis>\r\n            {indexerName}\r\n          </TextLink>\r\n          <TextLink as=\"a\" ellipsis>\r\n            @{accountId}\r\n          </TextLink>\r\n        </div>\r\n      </CardBody>\r\n\r\n      <CardFooter className=\"flex justify-center items-center\">\r\n        <ButtonLink\r\n          href={statusUrl}\r\n          onClick={() =>\r\n            State.update({\r\n              activeTab: \"indexer-status\",\r\n            })\r\n          }\r\n        >\r\n          View Status\r\n        </ButtonLink>\r\n        <ButtonLink\r\n          primary\r\n          href={editUrl}\r\n          onClick={() =>\r\n            State.update({\r\n              activeTab: \"editor-window\",\r\n            })\r\n          }\r\n        >\r\n          Edit Indexer\r\n        </ButtonLink>\r\n        {view === \"user\" && (\r\n          <ButtonLink danger onClick={() => removeIndexer(indexerName)}>\r\n            Delete Indexer\r\n          </ButtonLink>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst renderIndexers = (indexers, view) => {\r\n  return (\r\n    <>\r\n      {indexers.map((indexer, i) => (\r\n        <CardWrapper key={i}>\r\n          {indexerView(indexer.accountId, indexer.indexerName, i, view)}\r\n        </CardWrapper>\r\n      ))}\r\n      {indexers.length === 0 && (\r\n        <Subheading> You have no indexers to show...</Subheading>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <Wrapper negativeMargin={state.activeTab === \"indexers\"}>\r\n    <Tabs\r\n      halfMargin={state.activeTab === \"indexers\"}\r\n      noMargin={state.activeTab === \"indexers\"}\r\n    >\r\n      <TabsButton\r\n        type=\"button\"\r\n        onClick={() => State.update({ activeTab: \"indexers\" })}\r\n        selected={state.activeTab === \"indexers\"}\r\n      >\r\n        Indexers\r\n      </TabsButton>\r\n\r\n      <TabsButton\r\n        type=\"button\"\r\n        onClick={() => State.update({ activeTab: \"editor-window\" })}\r\n        selected={state.activeTab === \"editor-window\"}\r\n      >\r\n        Indexer Editor\r\n      </TabsButton>\r\n\r\n      <TabsButton\r\n        type=\"button\"\r\n        onClick={() => State.update({ activeTab: \"indexer-status\" })}\r\n        selected={state.activeTab === \"indexer-status\"}\r\n      >\r\n        Indexer Status\r\n      </TabsButton>\r\n    </Tabs>\r\n\r\n    <Main>\r\n      <Section active={state.activeTab === \"indexers\"}>\r\n        <NavBarLogo\r\n          href=\"https://alpha.near.org/#/roshaan.near/widget/queryapi__QueryApiDashboard\"\r\n          title=\"QueryApi\"\r\n          onClick={() => {\r\n            State.update({\r\n              activeTab: \"public-indexers\",\r\n            });\r\n          }}\r\n        >\r\n          <Widget\r\n            src=\"mob.near/widget/Image\"\r\n            props={{\r\n              className: \"d-inline-block align-text-top me-2\",\r\n              image: metadata.image,\r\n              style: { height: \"24px\" },\r\n              fallbackUrl:\r\n                \"https://upload.wikimedia.org/wikipedia/commons/8/86/Database-icon.svg\",\r\n              alt: \"the queryapi logo\",\r\n            }}\r\n          />\r\n          QueryApi\r\n        </NavBarLogo>\r\n\r\n        <div>\r\n          <ButtonLink\r\n            href=\"/#/roshaan.near/widget/queryapi__QueryApiDashboard/?view=create-new-indexer\"\r\n            style={{ \"margin-top\": \"10px\" }}\r\n            onClick={() =>\r\n              State.update({\r\n                activeTab: \"create-new-indexer\",\r\n                selected_indexer: \"\",\r\n              })\r\n            }\r\n          >\r\n            Create New Indexer\r\n          </ButtonLink>\r\n          {state.my_indexers.length > 0 && (\r\n            <H2>\r\n              {accountId}'s Indexers\r\n              <span>({state.my_indexers.length})</span>\r\n            </H2>\r\n          )}\r\n          {renderIndexers(state.my_indexers, \"user\")}\r\n        </div>\r\n      </Section>\r\n\r\n      <Section\r\n        negativeMargin\r\n        primary\r\n        active={state.activeTab === \"editor-window\"}\r\n      >\r\n        {state.activeTab === \"indexer-status\" && (\r\n          <div>\r\n            {state.indexers.length > 0 &&\r\n              (state.selected_indexer != \"\" ? (\r\n                <H2>{state.selected_indexer}</H2>\r\n              ) : (\r\n                <H2>{state.indexers[0].indexerName}</H2>\r\n              ))}\r\n            {indexerView(\r\n              selected_accountId ?? state.indexers[0].accountId,\r\n              selected_indexerName ?? state.indexers[0].indexerName\r\n            )}\r\n            <Widget\r\n              src={\"roshaan.near/widget/queryapi__IndexerStatus\"}\r\n              props={{\r\n                indexer_name:\r\n                  selected_indexerName ?? state.indexers[0].indexerName,\r\n                accountId: selected_accountId ?? state.indexers[0].accountId,\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n        {state.activeTab === \"editor-window\" && (\r\n          <div>\r\n            {state.indexers.length > 0 &&\r\n              (state.selected_indexer != undefined ? (\r\n                <H2>{state.selected_indexer}</H2>\r\n              ) : (\r\n                <H2>{`${state.indexers[0].accountId}/${state.indexers[0].indexerName}`}</H2>\r\n              ))}\r\n            {indexerView(\r\n              selected_accountId ?? state.indexers[0].accountId,\r\n              selected_indexerName ?? state.indexers[0].indexerName\r\n            )}\r\n            <Widget\r\n              src={\"roshaan.near/widget/queryapi__IndexerFunctionEditor\"}\r\n              props={{\r\n                indexerName:\r\n                  selected_indexerName ?? state.indexers[0].indexerName,\r\n                accountId: selected_accountId ?? state.indexers[0].accountId,\r\n                base: \"query-api-editor\",\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n        {state.activeTab === \"create-new-indexer\" && (\r\n          <div>\r\n            {state.indexers.length > 0 &&\r\n              (state.selected_indexer != undefined ? (\r\n                <H2>{state.selected_indexer}</H2>\r\n              ) : (\r\n                <H2>{`${state.indexers[0].accountId}/${state.indexers[0].indexerName}`}</H2>\r\n              ))}\r\n            <Widget\r\n              src={\"roshaan.near/widget/queryapi__IndexerFunctionEditor\"}\r\n              props={{\r\n                indexerName:\r\n                  selected_indexerName ?? state.indexers[0].indexerName,\r\n                accountId: selected_accountId ?? state.indexers[0].accountId,\r\n                base: \"create-new-indexer\",\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n        {state.activeTab === \"public-indexers\" && (\r\n          <div>\r\n            {state.all_indexers && (\r\n              <div>{renderIndexers(state.all_indexers, \"public\")}</div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Section>\r\n    </Main>\r\n  </Wrapper>\r\n);\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/queryapi__QueryApiDashboard", "metadata.image.url": NaN, "metadata.tags.app": NaN, "metadata.tags.data-platform": NaN, "metadata.tags.indexers": NaN, "metadata.image.ipfs_cid": NaN}