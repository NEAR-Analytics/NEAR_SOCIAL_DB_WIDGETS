{"tx_hash": "3mdmRq75RgqzSb5TtoWbGg9NauykskUxTrJidhKseJGF", "action_id_social": "Cha4bc5PrcShobWkZvkapsEsV2Becx7aXRRvLrULPXEz-0-widget", "block_id": 80711546, "block_timestamp": "2022-12-15 14:48:03.107", "signer_id": "roshaan.near", "widget_name": "PeopleYouMayKnow", "source_code": "const accounts = Social.keys(`*/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst all_account_tags = Social.getr(`*/profile/tags`, \"final\");\nconst userId = context.accountId;\nconst ownerId = context.ownerId;\nconst showFollowerStats = props.showFollowerStats ?? true;\n\nif (!userId) {\n  return \"Please sign in with NEAR wallet to follow other accounts\";\n}\nif (accounts === null) {\n  return \"Loading\";\n}\n\nconst followingData = Social.keys(`${userId}/graph/follow/*`, \"final\");\nif (followingData === null || tagsData === null) {\n  return \"Loading\";\n}\nconst following = followingData[userId][\"graph\"][\"follow\"] ?? {};\n\nfunction getFollowersPerAccount() {\n  let res = {};\n  Object.keys(accounts).forEach((accountId) => {\n    Object.keys(accounts[accountId].graph.follow).forEach(\n      (followingAccountId) => {\n        res[followingAccountId] = (res[followingAccountId] ?? 0) + 1;\n      }\n    );\n  });\n  return res;\n}\n\nconst followingsAll = getFollowersPerAccount();\nState.init({\n  following,\n  multiSelectMode: false,\n});\n\nlet followingsPerAccount = Object.keys(accounts).reduce(\n  (res, id) => ({\n    ...res,\n    [id]: Object.keys(accounts[id].graph.follow).filter((x) => x !== userId),\n  }),\n  {}\n);\n\nlet tagsPerAccount = Object.keys(all_account_tags).reduce(\n  (res, id) => ({\n    ...res,\n    [id]: Object.keys(all_account_tags[id].profile.tags).filter((x) => x),\n  }),\n  {}\n);\n\nconst myFriends = followingsPerAccount[userId];\nconst myTags = tagsPerAccount[userId];\n\nconst friendsInCommon = (accountId) => {\n  return myFriends.filter((a) => followingsPerAccount[accountId].includes(a));\n};\n\nconst tagsInCommon = (accountId) => {\n  return myTags.filter(\n    (a) =>\n      tagsPerAccount[accountId].length > 0 &&\n      tagsPerAccount[accountId].includes(a)\n  );\n};\n\nfunction getRecommendationsFor(_accountId) {\n  const recommendations = Object.keys(accounts)\n    .filter(\n      (accountId) => !myFriends.includes(accountId) && accountId !== userId\n    )\n    .map((accountId) => ({\n      accountId,\n      commonFollows: friendsInCommon(accountId).length,\n      commonTags: tagsInCommon(accountId).length,\n    }))\n    .map(({ accountId, commonFollows, commonTags }) => ({\n      accountId,\n      commonFollows,\n      commonTags,\n      score: commonFollows * (followingsAll[accountId] || 1),\n    }))\n    .sort((f, s) => s.score - f.score)\n    .slice(0, 20);\n  return recommendations;\n}\n\nlet handleChange = (accountId) => {\n  let following = state.following;\n  following[accountId] = !following[accountId];\n  State.update({ following });\n};\n\nlet followDevChange = () => {\n  handleChange(ownerId);\n  State.update({ followDev: !state.followDev });\n};\n\nfunction getCommitData() {\n  let dataGraph = [];\n  let dataNotify = [];\n  let dataFollow = {};\n\n  Object.keys(state.following).map((accountId) => {\n    if (accountId !== userId) {\n      let follow = !!state.following[accountId];\n      dataFollow[accountId] = follow ? \"\" : null;\n    }\n  });\n\n  Object.keys(state.following).map((accountId) => {\n    if (following[accountId] != state.following[accountId]) {\n      let follow = !!state.following[accountId];\n      dataGraph.push({\n        key: \"follow\",\n        value: {\n          type: follow ? \"follow\" : \"unfollow\",\n          accountId,\n        },\n      });\n\n      dataNotify.push({\n        key: accountId,\n        value: {\n          type: follow ? \"follow\" : \"unfollow\",\n        },\n      });\n    }\n  });\n\n  const data = {\n    graph: {\n      follow: dataFollow,\n    },\n    index: {\n      graph: JSON.stringify(dataGraph),\n      notify: JSON.stringify(dataNotify),\n    },\n  };\n  return data;\n}\n\nconst rec = getRecommendationsFor(userId);\n\nconst followingsRows = rec.map(\n  ({ accountId, commonFollows, commonTags, score }) => (\n    <li\n      className={`list-group-item ${\n        state.following[accountId] ? \"list-group-item-success\" : \"\"\n      }`}\n    >\n      <div className=\"form-check\">\n        {state.multiSelectMode && (\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            value={accountId}\n            disabled={accountId == userId}\n            id={`follow-${accountId}`}\n            name={`follow-${accountId}`}\n            onChange={() => handleChange(accountId)}\n            checked={state.following[accountId] ?? false}\n          />\n        )}\n\n        <label className=\"form-check-label\" for={`follow-${accountId}`}>\n          <div className=\"flex justify-between\">\n            <Widget\n              src=\"roshaan.near/widget/ProfileLine\"\n              props={{\n                accountId,\n                showTags: props.showTags,\n                showFollowerStats: true,\n                showFollowButton: state.multiSelectMode === false,\n              }}\n            />\n          </div>\n          <OverlayTrigger\n            placement=\"auto\"\n            overlay={\n              <Tooltip>\n                <span> You both follow </span>\n                <br />\n                <br />\n                {friendsInCommon(accountId).map((friendsInCommon) => {\n                  return (\n                    <li className={`list-group-item`}>{friendsInCommon}</li>\n                  );\n                })}\n              </Tooltip>\n            }\n          >\n            <span\n              className=\"badge rounded-pill bg-primary\"\n              title={`${commonFollows} followers in common`}\n            >\n              {commonFollows} friends in common\n            </span>\n          </OverlayTrigger>\n          {commonTags > 0 && (\n            <OverlayTrigger\n              placement=\"auto\"\n              overlay={\n                <Tooltip>\n                  {tagsInCommon(accountId).map((tag) => {\n                    return <li className={`list-group-item`}>{tag}</li>;\n                  })}\n                </Tooltip>\n              }\n            >\n              <span\n                className=\"badge rounded-pill bg-primary\"\n                title={`${commonTags} tags in common`}\n              >\n                {commonTags} common tags\n              </span>\n            </OverlayTrigger>\n          )}\n          <br />\n        </label>\n      </div>\n    </li>\n  )\n);\n\nconst commitButton = (\n  <CommitButton\n    disabled={context.loading}\n    className={`btn ${context.loading ? \"btn-outline-dark\" : \"btn-primary\"}`}\n    data={getCommitData()}\n  >\n    {context.loading ? \"Loading\" : \"Follow Selected\"}\n  </CommitButton>\n);\n\nconst switchMode = () => {\n  State.update({ multiSelectMode: !state.multiSelectMode });\n};\n\nconst switchModeButton = (\n  <button\n    onClick={switchMode}\n    className={`btn ${context.loading ? \"btn-outline-dark\" : \"btn-primary\"}`}\n  >\n    {state.multiSelectMode\n      ? \"Switch to regular mode\"\n      : \"Switch to multiselect mode\"}\n  </button>\n);\n\nreturn (\n  <>\n    <h1>People You May Know</h1>\n    <p>\n      Based on your current connections, you might also want to follow the\n      following accounts.\n    </p>\n    <div className=\"mb-3\">{switchModeButton}</div>\n    {state.multiSelectMode && <div className=\"mb-3\">{commitButton}</div>}\n    <ul className=\"list-group\">{followingsRows}</ul>\n    <div className=\"mt-2 mb-3\">{commitButton}</div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/PeopleYouMayKnow", "metadata.description": NaN, "metadata.name": NaN, "metadata.tags.inline": NaN, "metadata.tags.profile": NaN, "metadata.tags.social": NaN}