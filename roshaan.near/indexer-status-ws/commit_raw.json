{"tx_hash": "3TrX3Mjd6rrA4ZzwxqLHq7jyyBAyr5ucsWhWqtpqyZCo", "action_id_social": "8cBzNCiDH4LCFsa4JqMJrFmri4ees3YMw93ifsaNbAR5-0-widget", "block_id": 93152832, "block_timestamp": "2023-05-31T18:58:16.432Z", "signer_id": "roshaan.near", "widget_name": "indexer-status-ws", "source_code": "//props indexer_name\nconst indexer_name = props.indexer_name || \"feed-indexer\";\n\nconst GRAPHQL_ENDPOINT =\n  props.GRAPHQL_ENDPOINT || \"queryapi-hasura-graphql-24ktefolwq-ew.a.run.app\";\n\nconst LIMIT = 20;\nconst accountId = props.accountId || \"roshaan.near\" || context.accountId;\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181c;\n  margin: 0 0 24px;\n`;\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: black;\n`;\nconst SmallTitle = styled.h3`\n  color: black;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 15px;\n  text-transform: uppercase;\n\n  @media (max-width: 770px) {\n    margin-bottom: 16px;\n  }\n`;\nconst TableElement = styled.td`\n  word-wrap: break-word;\n  font-family: \"Roboto Mono\", monospace;\n  font-size: 11px;\n  background-color: rgb(255, 255, 255);\n  color: rgb(32, 33, 36);\n`;\nconst Subheading = styled.h2`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 10px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n`;\nconst Card = styled.div`\n  border-radius: 12px;\n  background: #fff;\n  border: ${(div) => (div.selected ? \"1px solid black\" : \"1px solid #eceef0\")};\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n    0px 1px 2px rgba(16, 24, 40, 0.06);\n`;\n\nconst CardBody = styled.div`\n  padding: 16px;\n  display: flex;\n  gap: 16px;\n  align-items: center;\n  flex-direction: column;\n  > * {\n    min-width: 0;\n  }\n`;\n\nconst CardFooter = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  gap: 16px;\n  padding: 16px;\n  border-top: 1px solid #eceef0;\n`;\n\nconst TextLink = styled.a`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n\n  &:focus,\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nif (!indexer_name) return \"missing indexer_name\";\n\nState.init({\n  logs: [],\n  state: [],\n  indexer_res: [],\n  indexer_resCount: 0,\n  logsCount: 0,\n  stateCount: 0,\n  indexer_resPage: 0,\n  logsPage: 0,\n  statePage: 0,\n  startWebSocketLogs: null,\n  startWebSocketStatus: null,\n  initialFetch: false,\n});\n\nconst logsDocSubscription = `\n  subscription QueryLogs {\n    indexer_log_entries(order_by: {timestamp: desc}, limit: ${LIMIT}, where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      block_height\n      message\n      timestamp\n    }\n  }\n`;\n\nconst statusDocSubscription = `\n  subscription IndexerState {\n    indexer_state(where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      status\n      function_name\n      current_block_height\n    }\n  }\n`;\n\nconst subscriptionLogs = {\n  type: \"start\",\n  id: \"logs\", // You can use any unique identifier\n  payload: {\n    operationName: \"QueryLogs\",\n    query: logsDocSubscription,\n    variables: {},\n  },\n};\n\nconst subscriptionStatus = {\n  type: \"start\",\n  id: \"state\", // You can use any unique identifier\n  payload: {\n    operationName: \"IndexerState\",\n    query: statusDocSubscription,\n    variables: {},\n  },\n};\n\nfunction startWebSocketStatus(processStatus) {\n  let ws = State.get().ws_status;\n\n  if (ws) {\n    ws.close();\n    return;\n  }\n\n  ws = new WebSocket(`wss://${GRAPHQL_ENDPOINT}/v1/graphql`, \"graphql-ws\");\n\n  ws.onopen = () => {\n    console.log(`Connection to WS has been established`);\n    ws.send(\n      JSON.stringify({\n        type: \"connection_init\",\n        payload: {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Hasura-Client-Name\": \"hasura-console\",\n          },\n          lazy: true,\n        }, // You can send any necessary authorization tokens here\n      })\n    );\n\n    setTimeout(() => ws.send(JSON.stringify(subscriptionStatus)), 50);\n  };\n\n  ws.onclose = () => {\n    State.update({ ws_status: null });\n    console.log(`WS Connection has been closed`);\n    // State.get().startWebSocket(processLogs);\n  };\n\n  ws.onmessage = (e) => {\n    const data = JSON.parse(e.data);\n    console.log(\"received data\", data);\n    if (data.type === \"data\" && data.id === \"state\") {\n      processStatus(data.payload.data);\n    }\n  };\n\n  ws.onerror = (err) => {\n    State.update({ ws_status: null });\n    console.log(\"WebSocket error\", err);\n  };\n\n  State.update({ ws_status: ws });\n}\n\nfunction startWebSocketLogs(processLogs) {\n  let ws = State.get().ws_logs;\n\n  if (ws) {\n    ws.close();\n    return;\n  }\n\n  ws = new WebSocket(`wss://${GRAPHQL_ENDPOINT}/v1/graphql`, \"graphql-ws\");\n\n  ws.onopen = () => {\n    console.log(\"starting web socket logs\");\n    console.log(`Connection to WS has been established`);\n    ws.send(\n      JSON.stringify({\n        type: \"connection_init\",\n        payload: {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Hasura-Client-Name\": \"hasura-console\",\n          },\n          lazy: true,\n        }, // You can send any necessary authorization tokens here\n      })\n    );\n\n    setTimeout(() => ws.send(JSON.stringify(subscriptionLogs)), 50);\n  };\n\n  ws.onclose = () => {\n    State.update({ ws_logs: null });\n    console.log(`WS Connection has been closed`);\n    // State.get().startWebSocket(processLogs);\n  };\n\n  ws.onmessage = (e) => {\n    const data = JSON.parse(e.data);\n    console.log(\"received data\", data);\n    if (data.type === \"data\" && data.id === \"logs\") {\n      processLogs(data.payload.data);\n    }\n  };\n\n  ws.onerror = (err) => {\n    State.update({ ws_logs: null });\n    console.log(\"WebSocket error\", err);\n  };\n\n  State.update({ ws_logs: ws });\n}\nfunction processLog(log) {\n  return {\n    ...log,\n  };\n}\n\nfunction processLogs(incoming_data) {\n  let incoming_logs = incoming_data.indexer_log_entries.flatMap(processLog);\n  const newLogs = [\n    ...incoming_logs.filter((log) => {\n      return (\n        state.logs.length == 0 || log.block_height > state.logs[0].block_height\n      );\n    }),\n  ];\n  State.update((state) => {\n    const prevlogs = state.logs || [];\n    state.logs = [...newLogs];\n    return state;\n  });\n}\n\nfunction processStatus(incoming_data) {\n  let incoming_state = incoming_data.indexer_state;\n  State.update({\n    state: incoming_state,\n  });\n}\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(`https://${GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst createGraphQLLink = () => {\n  const queryLink = `https://cloud.hasura.io/public/graphiql?endpoint=${GRAPHQL_ENDPOINT}/v1/graphql&query=query+IndexerQuery+%7B%0A++indexer_state%28where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%29+%7B%0A++++function_name%0A++++current_block_height%0A++%7D%0A++indexer_log_entries%28%0A++++where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%0A++++order_by%3A+%7Bblock_height%3A+desc%2C+timestamp%3A+desc%7D%0A++%29+%7B%0A++++function_name%0A++++id%0A++++message%0A++++timestamp%0A++%7D%0A%7D%0A`;\n  return queryLink.replaceAll(\n    \"function_placeholder\",\n    `${accountId}/${indexer_name}`\n  );\n};\n\nconst accountName = accountId.replaceAll(\".\", \"_\");\nconst sanitizedFunctionName = indexer_name;\nconst fullFunctionName = accountName + \"_\" + sanitizedFunctionName;\nconst logsDoc = `\n  query QueryLogs($offset: Int) {\n    indexer_log_entries(order_by: {block_height: desc}, limit: ${LIMIT}, offset: $offset, where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      block_height\n      message\n      timestamp\n    }\n    indexer_log_entries_aggregate(where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n    aggregate {\n      count\n    }\n  }\n  }\n`;\n\nconst indexerStateDoc = `\n  query IndexerState($offset: Int) {\n    indexer_state(limit: ${LIMIT}, offset: $offset, where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      status\n      function_name\n      current_block_height\n    }\n    indexer_state_aggregate(where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n    aggregate {\n      count\n    }\n    }\n  }\n`;\n\nif (!state.initialFetch) {\n  fetchGraphQL(logsDoc, \"QueryLogs\", {\n    offset: state.logsPage * LIMIT,\n  }).then((result) => {\n    if (result.status === 200) {\n      State.update({\n        logs: result.body.data[`indexer_log_entries`],\n        logsCount:\n          result.body.data[`indexer_log_entries_aggregate`].aggregate.count,\n      });\n      State.update({ initialFetch: true });\n    }\n  });\n  //   fetchGraphQL(indexerStateDoc, \"IndexerState\", {\n  //     offset: 0,\n  //   }).then((result) => {\n  //     if (result.status === 200) {\n  //       if (result.body.data.indexer_state.length == 1) {\n  //         State.update({\n  //           state: result.body.data.indexer_state,\n  //           stateCount: result.body.data.indexer_state_aggregate.aggregate.count,\n  //         });\n  //       }\n  //     }\n  //   });\n}\n\nif (state.ws_status === undefined) {\n  // let ws = State.get().ws_logs;\n  State.update({\n    startWebSocketStatus: startWebSocketStatus,\n  });\n  state.startWebSocketStatus(processStatus);\n}\n\nif (state.logsPage === 0) {\n  // Start subscription for logs if on first page\n  if (state.ws_logs === undefined && state.logsPage === 0) {\n    // let ws = State.get().ws_logs;\n    State.update({\n      startWebSocketLogs: startWebSocketLogs,\n    });\n    state.startWebSocketLogs(processLogs);\n  }\n} else {\n  if (state.ws_logs) {\n    state.ws_logs.close();\n  }\n  State.update({ ws_logs: undefined });\n}\n\nconst onLogsPageChange = (page) => {\n  page = page - 1;\n\n  //   else {\n  //       state.startWebSocket(processLogs);\n  //\n  //     State.update({startWebSocket: startWebSocket})\n  // }\n  if (page === state.logsPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n  try {\n    fetchGraphQL(logsDoc, \"QueryLogs\", { offset: page * LIMIT }).then(\n      (result) => {\n        if (result.status === 200) {\n          State.update({\n            logs: result.body.data.indexer_log_entries,\n            logsCount:\n              result.body.data.indexer_log_entries_aggregate.aggregate.count,\n          });\n        }\n      }\n    );\n  } catch (e) {\n    console.log(\"error:\", e);\n  }\n  State.update({ logsPage: page, currentPage: page });\n};\n\nconst onIndexerResPageChange = (page) => {\n  page = page - 1;\n  if (page === state.indexer_resPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n\n  try {\n    fetchGraphQL(IndexerStorageDoc, \"IndexerStorage\", {\n      offset: page * LIMIT,\n    }).then((result) => {\n      if (result.status === 200) {\n        State.update({\n          indexer_res: result.body.data.indexer_storage,\n          indexer_resCount:\n            result.body.data.indexer_storage_aggregate.aggregate.count,\n        });\n      }\n    });\n  } catch (e) {\n    console.log(\"error:\", e);\n  }\n  State.update({ indexer_resPage: page, currentPage: page });\n};\n\nreturn (\n  <>\n    <Card>\n      <Title className=\"p-3\">\n        Indexer Status\n        <TextLink href={createGraphQLLink()} target=\"_blank\">\n          GraphQL Playground\n          <i className=\"bi bi-box-arrow-up-right\"></i>\n        </TextLink>\n      </Title>\n\n      <CardBody>\n        <SmallTitle>Indexer State </SmallTitle>\n        {state.state.length > 0 ? (\n          <div class=\"table-responsive mt-3\">\n            <table\n              class=\"table-striped table\"\n              style={{\n                padding: \"30px\",\n                \"table-layout\": \"fixed\",\n              }}\n            >\n              <thead>\n                <tr>\n                  <th>Function Name</th>\n                  <th>Current Block Height</th>\n                  <th>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {state.state.map((x) => (\n                  <tr>\n                    <TableElement>{x.function_name}</TableElement>\n                    <TableElement>{x.current_block_height}</TableElement>\n                    <TableElement>{x.status}</TableElement>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n        <SmallTitle> Indexer Logs</SmallTitle>\n        {state.logs.length > 0 ? (\n          <div>\n            <div class=\"table-responsive mt-3\">\n              <table\n                class=\"table-striped table\"\n                style={{\n                  padding: \"30px\",\n                  \"table-layout\": \"fixed\",\n                }}\n              >\n                <thead>\n                  <tr>\n                    <th style={{ width: \"20%\" }}>Block Height</th>\n                    <th style={{ width: \"20%\" }}>Timestamp</th>\n                    <th style={{ width: \"80%\" }}>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {state.logs.map((x) => (\n                    <tr>\n                      <TableElement>{x.block_height}</TableElement>\n                      <TableElement>{x.timestamp}</TableElement>\n                      <TableElement>{x.message}</TableElement>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <Widget\n              src=\"roshaan.near/widget/Paginate-fork\"\n              props={{\n                siblingCount: 1,\n                totalCount: state.logsCount,\n                pageSize: LIMIT,\n                onPageChange: onLogsPageChange,\n                currentPage: state.logsPage,\n              }}\n            />\n          </div>\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n      </CardBody>\n      <CardFooter></CardFooter>\n    </Card>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/indexer-status-ws", "__row_index": 2}