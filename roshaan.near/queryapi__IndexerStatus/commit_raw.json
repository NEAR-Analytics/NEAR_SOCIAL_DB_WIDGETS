{"tx_hash": "333EMcbm18BTfMo352SmzthyzPhTA16RY3Uh7exqSwGS", "action_id_social": "BZXzHXX4ZC4MS5FrnVAkpc2eCHSnogLpZwNn2A1oFQJW-0-widget", "block_id": 86266310, "block_timestamp": "2023-02-28 21:16:13.656", "signer_id": "roshaan.near", "widget_name": "queryapi__IndexerStatus", "source_code": "//props indexer_name\nconst indexer_name = props.indexer_name;\nconst accountId = props.accountId || context.accountId;\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181c;\n  margin: 0 0 24px;\n`;\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: black;\n`;\nconst SmallTitle = styled.h3`\n  color: black;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 15px;\n  text-transform: uppercase;\n\n  @media (max-width: 770px) {\n    margin-bottom: 16px;\n  }\n`;\nconst Subheading = styled.h2`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 10px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n`;\nconst Card = styled.div`\n  border-radius: 12px;\n  background: #fff;\n  border: ${(div) => (div.selected ? \"1px solid black\" : \"1px solid #eceef0\")};\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n    0px 1px 2px rgba(16, 24, 40, 0.06);\n`;\n\nconst CardBody = styled.div`\n  padding: 16px;\n  display: flex;\n  gap: 16px;\n  align-items: center;\n  flex-direction: column;\n  > * {\n    min-width: 0;\n  }\n`;\n\nconst CardFooter = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  gap: 16px;\n  padding: 16px;\n  border-top: 1px solid #eceef0;\n`;\n\nconst TextLink = styled.a`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n\n  &:focus,\n  &:hover {\n    text-decoration: underline;\n  }\n`;\nif (!indexer_name) return \"missing indexer_name\";\nconst state_table = \"| Function Name | Current Block Height |\\n| --- | --- |\\n\";\n\nconst logs_table =\n  \"| Function Name | Id | Message | Timestamp |\\n| --- | --- | --- | --- |\\n\";\nconst indexer_values_table =\n  \"| Function Name | Key Name | Value |\\n| --- | --- | --- |\\n\";\n\nState.init({ logs: [], state: [], indexer_res: [] });\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(\n    \"https://query-api-hasura-vcqilefdcq-uc.a.run.app/v1/graphql\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    }\n  );\n}\n\nconst createGraphQLLink = () => {\n  const queryLink =\n    \"https://cloud.hasura.io/public/graphiql?endpoint=https%3A%2F%2Fquery-api-hasura-vcqilefdcq-uc.a.run.app%2Fv1%2Fgraphql&query=query+IndexerQuery+%7B%0A++indexer_state%28where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%29+%7B%0A++++function_name%0A++++current_block_height%0A++%7D%0A++indexer_storage%28where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%29+%7B%0A++++function_name%0A++++key_name%0A++++value%0A++%7D%0A++log_entries%28where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%29+%7B%0A++++function_name%0A++++id%0A++++message%0A++++timestamp%0A++%7D%0A%7D%0A\";\n\n  return queryLink.replaceAll(\"function_placeholder\", indexer_name);\n};\n\nconst operationsDoc = `\n  query MyQuery {\n    indexer_storage(where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      function_name\n      key_name\n      value\n    }\n  }\n`;\n\nfetchGraphQL(operationsDoc, \"MyQuery\", {}).then((result) => {\n  console.log(result, \"result\");\n  if (result.status === 200) {\n    State.update({\n      indexer_res: result.body.data.indexer_storage,\n    });\n  }\n});\n\nfunction query() {\n  let response = asyncFetch(\n    \"https://query-api-hasura-vcqilefdcq-uc.a.run.app/v1/graphql\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n  query IndexerStatus {\n  indexer_state(\n    where: {function_name: {_eq: \"${indexer_name}\"}}\n    order_by: {current_block_height: desc}\n  ) {\n    current_block_height\n  }\n  log_entries(\n    where: {function_name: {_eq: ${indexer_name}}}\n    order_by: {timestamp: desc}\n  ) {\n    id\n    message\n    timestamp\n  }\n}\n    `,\n      }),\n    }\n  );\n  console.log(response);\n  if (!response) return;\n  let state = response.body.data.indexer_state;\n  let logs = response.body.data.log_entries;\n  State.update({ state, logs });\n}\n\nconst create_table = () => {\n  state.indexer_res.forEach((row) => {\n    indexer_values_table += `| ${row.function_name} | ${row.key_name} | ${row.value} |\\n`;\n  });\n};\ncreate_table();\nreturn (\n  <>\n    <Card>\n      <Title className=\"p-3\">\n        Indexer Status\n        <TextLink href={createGraphQLLink()} target=\"_blank\">\n          GraphQL Playground\n          <i className=\"bi bi-box-arrow-up-right\"></i>\n        </TextLink>\n      </Title>\n\n      <CardBody>\n        <SmallTitle>Indexed Values</SmallTitle>\n\n        {state.indexer_res.length > 0 ? (\n          <Markdown text={indexer_values_table} />\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n\n        <SmallTitle>Indexer State</SmallTitle>\n\n        {state.state.length > 0 ? (\n          <Markdown text={state_table} />\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n        <SmallTitle> Indexer Logs</SmallTitle>\n        {state.logs.length > 0 ? (\n          <Markdown text={logs_table} />\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n      </CardBody>\n      <CardFooter></CardFooter>\n    </Card>\n  </>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/queryapi__IndexerStatus", "branch.draft.": NaN, "branch.draft.metadata": NaN}