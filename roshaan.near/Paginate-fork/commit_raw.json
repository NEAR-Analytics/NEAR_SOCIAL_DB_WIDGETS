{"tx_hash": "3Nd5ai1f2XdmVUWMgRbVMmAZbPjDbxbZ4W8vKUYUEotX", "action_id_social": "49pwJzMmAa7RCj64tx7bwX3RfWMrE6iPzPhMPgXHaaFJ-0-widget", "block_id": 86995108, "block_timestamp": "2023-03-10 17:49:07.760", "signer_id": "roshaan.near", "widget_name": "Paginate-fork", "source_code": "// Pagination built off of https://www.freecodecamp.org/news/build-a-custom-pagination-component-in-react/\n\nconst RANGE_ITEM = \"...\";\nconst currentPage = props.currentPage ?? 1;\nconst siblingCount = props.siblingCount ?? 1;\nconst totalCount = props.totalCount;\nconst pageSize = props.pageSize;\nconst totalPageCount = props.totalPageCount ?? Math.ceil(totalCount / pageSize);\nconst onPageChange =\n  props.onPageChange ??\n  ((pageNumber) => {\n    console.log(`Clicked ${pageNumber}`);\n  });\n\n// Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\nconst totalPageNumbers = siblingCount + 5;\n\nconst PaginationContainer =\n  props.paginationContainer ??\n  styled.ul`\n    display: flex;\n    list-style-type: none;\n`;\n\nconst PaginationItem =\n  props.paginationItem ??\n  styled.li`\n    padding: 0 12px;\n    height: 32px;\n    text-align: center;\n    margin: auto 4px;\n    color: rgba(0, 0, 0, 0.87);\n    display: flex;\n    box-sizing: border-box;\n    align-items: center;\n    letter-spacing: 0.01071em;\n    border-radius: 16px;\n    line-height: 1.43;\n    font-size: 13px;\n    min-width: 32px;\n\n    &.dots:hover {\n        background-color: transparent;\n        cursor: default;\n    }\n    &:hover {\n        background-color: rgba(0, 0, 0, 0.04);\n        cursor: pointer;\n    }\n\n    &.selected {\n        background-color: rgba(0, 0, 0, 0.08);\n    }\n\n    .arrow {\n        &::before {\n        position: relative;\n        /* top: 3pt; Uncomment this to lower the icons as requested in comments*/\n        content: '';\n        /* By using an em scale, the arrows will size with the font */\n        display: inline-block;\n        width: 0.4em;\n        height: 0.4em;\n        border-right: 0.12em solid rgba(0, 0, 0, 0.87);\n        border-top: 0.12em solid rgba(0, 0, 0, 0.87);\n        }\n\n        &.left {\n        transform: rotate(-135deg) translate(-50%);\n        }\n\n        &.right {\n        transform: rotate(45deg);\n        }\n    }\n\n    &.disabled {\n        pointer-events: none;\n\n        .arrow::before {\n        border-right: 0.12em solid rgba(0, 0, 0, 0.43);\n        border-top: 0.12em solid rgba(0, 0, 0, 0.43);\n        }\n\n        &:hover {\n        background-color: transparent;\n        cursor: default;\n        }\n    }\n`;\n\n// Create an array of certain length and set the elements within it from\n// start value to end value.\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({ length }, (_, idx) => idx + start);\n};\n\nconst viewRange = (currentPage) => {\n  console.log(\"current page\", currentPage);\n  if (totalPageNumbers >= totalPageCount) {\n    return range(1, totalPageCount);\n  }\n\n  // Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\n  const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n  const rightSiblingIndex = Math.min(\n    currentPage + siblingCount,\n    totalPageCount\n  );\n\n  // We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\n  const shouldShowLeftDots = leftSiblingIndex > 2;\n  const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n  const firstPageIndex = 1;\n  const lastPageIndex = totalPageCount;\n\n  // Case 2: No left dots to show, but rights dots to be shown\n  if (!shouldShowLeftDots && shouldShowRightDots) {\n    let leftItemCount = 3 + 2 * siblingCount;\n    let leftRange = range(1, leftItemCount);\n\n    return [...leftRange, RANGE_ITEM, totalPageCount];\n  }\n  console.log(\"done calculating\");\n  console.log(state.pageRanges, \"page ranges\");\n  // Case 3: No right dots to show, but left dots to be shown\n  if (shouldShowLeftDots && !shouldShowRightDots) {\n    let rightItemCount = 3 + 2 * siblingCount;\n    let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n    return [firstPageIndex, RANGE_ITEM, ...rightRange];\n  }\n\n  // Case 4: Both left and right dots to be shown\n  if (shouldShowLeftDots && shouldShowRightDots) {\n    let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n    return [\n      firstPageIndex,\n      RANGE_ITEM,\n      ...middleRange,\n      RANGE_ITEM,\n      lastPageIndex,\n    ];\n  }\n};\n\nconst onClickPage = (pageNumber) => {\n  if (pageNumber == RANGE_ITEM) {\n    return;\n  }\n  console.log(\"updating range\", pageNumber);\n  const pageRanges = viewRange(pageNumber);\n  console.log(\"after calcuating\", pageRanges);\n  State.update({\n    pageRanges,\n  });\n\n  return onPageChange(pageNumber);\n};\n\nState.init({\n  pageRanges: viewRange(props.currentPage ?? 0),\n  currentPage: props.currentPage,\n});\n\nreturn (\n  <PaginationContainer>\n    {state.pageRanges &&\n      state.pageRanges.map((pageNumber) => (\n        <PaginationItem onClick={() => onClickPage(pageNumber)}>\n          {pageNumber !== RANGE_ITEM ? pageNumber : <>&#8230;</>}\n        </PaginationItem>\n      ))}\n  </PaginationContainer>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/Paginate-fork", "branch.draft": NaN}