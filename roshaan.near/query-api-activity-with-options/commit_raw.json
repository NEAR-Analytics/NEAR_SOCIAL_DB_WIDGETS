{"tx_hash": "7cLvmLeKgV7RCV1PCZC5eb9HVst1ieitKZ21yxFzeC2R", "action_id_social": "8mkKAzjzHQRby2e6Qxkc2uyVkpgoap5yMWHCC6MYP3d4-0-widget", "block_id": 88476050, "block_timestamp": "2023-03-31 02:19:59.871", "signer_id": "roshaan.near", "widget_name": "query-api-activity-with-options", "source_code": "const LIMIT = 10;\r\nconst option = props.postsOrderOption ?? \"blockHeight\";\r\n\r\nState.init({\r\n  posts: [],\r\n  postsCount: 0,\r\n  postsPage: 0,\r\n});\r\n\r\nconst Subheading = styled.h2`\r\n  display: block;\r\n  margin: 0;\r\n  font-size: 14px;\r\n  line-height: 10px;\r\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\r\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\r\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\r\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\r\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\r\n  white-space: nowrap;\r\n  outline: none;\r\n`;\r\nconst postsQuery = `\r\n  query IndexerQuery($offset: Int) {\r\n  roshaan_near_feed_indexer_posts(order_by: [${\r\n    option === \"recentComments\"\r\n      ? `{last_comment_timestamp: desc_nulls_last},`\r\n      : \"\"\r\n  } { block_height: desc }], offset: $offset, limit: ${LIMIT}) {\r\n    account_id\r\n    block_height\r\n    block_timestamp\r\n    content\r\n    receipt_id\r\n    accounts_liked\r\n    last_comment_timestamp\r\n    comments(order_by: {block_height: asc}) {\r\n      account_id\r\n      block_height\r\n      block_timestamp\r\n      content\r\n    }\r\n  }\r\n  roshaan_near_feed_indexer_posts_aggregate {\r\n    aggregate {\r\n      count\r\n    }\r\n  }\r\n}\r\n`;\r\nconsole.log(postsQuery);\r\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\r\n  return asyncFetch(\r\n    \"https://query-api-hasura-vcqilefdcq-uc.a.run.app/v1/graphql\",\r\n    {\r\n      method: \"POST\",\r\n      headers: { \"x-hasura-role\": \"roshaan_near\" },\r\n      body: JSON.stringify({\r\n        query: operationsDoc,\r\n        variables: variables,\r\n        operationName: operationName,\r\n      }),\r\n    }\r\n  );\r\n}\r\n\r\nfetchGraphQL(postsQuery, \"IndexerQuery\", {\r\n  offset: state.postsPage * LIMIT,\r\n}).then((result) => {\r\n  if (result.status === 200) {\r\n    if (result.body.data) {\r\n      const posts = result.body.data.roshaan_near_feed_indexer_posts;\r\n      const postsCount =\r\n        result.body.data.roshaan_near_feed_indexer_posts_aggregate.aggregate\r\n          .count;\r\n      if (posts.length > 0) {\r\n        State.update({\r\n          posts,\r\n          postsCount,\r\n        });\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst Post = styled.div`\r\n  border-bottom: 1px solid #ECEEF0;\r\n  padding: 24px 0 12px;\r\n\r\n  @media (max-width: 1200px) {\r\n    padding: 12px 0 0;\r\n  }\r\n`;\r\n\r\nconst renderItem = (item, i) => {\r\n  return (\r\n    <Post className=\"post\" key={item.block_height + \"_\" + item.account_id}>\r\n      <Widget\r\n        src=\"roshaan.near/widget/Posts.Post\"\r\n        props={{\r\n          accountId: item.account_id,\r\n          blockHeight: item.block_height,\r\n          content: item.content,\r\n          comments: item.comments,\r\n          likes: item.accounts_liked,\r\n        }}\r\n      />\r\n    </Post>\r\n  );\r\n};\r\n\r\nconst onPostsPageChange = (page) => {\r\n  page = page - 1;\r\n  if (page === state.postsPage) {\r\n    console.log(`Selected the same page number as before: ${pageNumber}`);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    fetchGraphQL(postsQuery, \"IndexerQuery\", {\r\n      offset: state.postsPage * LIMIT,\r\n    }).then((result) => {\r\n      if (result.status === 200) {\r\n        let data = result.body.data;\r\n        if (data) {\r\n          const posts = data.roshaan_near_feed_indexer_posts;\r\n          const postsCount =\r\n            data.roshaan_near_feed_indexer_posts_aggregate.aggregate.count;\r\n          if (posts.length > 0) {\r\n            State.update({\r\n              posts: posts,\r\n              postsCount: postsCount,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.log(\"error:\", e);\r\n  }\r\n  State.update({ postsPage: page, currentPage: page });\r\n};\r\n\r\nconst renderedItems = state.posts.map(renderItem);\r\nreturn (\r\n  <div>\r\n    {state.posts.length > 0 ? (\r\n      <>\r\n        {renderedItems}\r\n        <Widget\r\n          src=\"roshaan.near/widget/Paginate-fork\"\r\n          props={{\r\n            siblingCount: 1,\r\n            totalCount: state.postsCount,\r\n            pageSize: LIMIT,\r\n            onPageChange: onPostsPageChange,\r\n            currentPage: state.postsPage,\r\n          }}\r\n        />\r\n      </>\r\n    ) : (\r\n      <Subheading> Loading... </Subheading>\r\n    )}\r\n  </div>\r\n);\r\n", "metadata": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/query-api-activity-with-options", "branch.draft.": NaN, "branch.draft.metadata": NaN, "branch": NaN}