{"tx_hash": "Aw6Ai3jgzFRrGuk7hDUR6UsLMJ2tD54NnxoWXK6uLbNM", "action_id_social": "5uMZzJQvzWS6PvngyRpSiwa4MhVaXTxJ7sqkYUEXktEj-0-widget", "block_id": 89791509, "block_timestamp": "2023-04-17 12:57:05.151", "signer_id": "nearcon.birchmd.near", "widget_name": "GHBounty-draft", "source_code": "// FETCH CSS\r\nconst cssFont = fetch(\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\r\n).body;\r\nconst css = fetch(\r\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\r\n).body;\r\n\r\ninitState({\r\n  bountyContractAddress: \"0x6a5324A3D7BfEb6D2EBeEAA9D73350051d9E3691\",\r\n  activePage: \"Create Bounty\",\r\n  prURL: \"\",\r\n  rewardAsset: \"0x7ACAf6167a39BE1dfFBb542Ac848030dcDF141CF\",\r\n  rewardAmount: \"\",\r\n  lockPeriod: 5000000,\r\n  debuglogs: \"\",\r\n});\r\n\r\nconst erc20Abi = fetch(\r\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n);\r\nif (!erc20Abi.ok) {\r\n  return \"scam\";\r\n}\r\n\r\nconst bountyContractAbi = fetch(\r\n  \"https://gist.githubusercontent.com/birchmd/f52cc8244be64eca036d9156486307d4/raw/6aefe23dbeda1592bd7c9c12119ac8e8faa83564/BountyProgram.abi.json\"\r\n);\r\nif (!bountyContractAbi.ok) {\r\n  return \"scam\";\r\n}\r\n\r\nif (state.sender === undefined) {\r\n  State.update({ sender: Ethers.send(\"eth_requestAccounts\", [])[0] });\r\n}\r\n\r\nconst tokens = {\r\n  \"Select Token\": \"\",\r\n  BYC: \"0x7ACAf6167a39BE1dfFBb542Ac848030dcDF141CF\",\r\n};\r\n\r\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\r\n  <option value={tokens[token]}>{token}</option>\r\n));\r\n\r\nconst setActive = (type) => {\r\n  State.update({ activePage: type });\r\n};\r\n\r\nconst Theme = styled.div`font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif; ${cssFont} ${css}`;\r\n\r\nconst Tab = styled.button`\r\n  padding: 10px 40px;\r\n  cursor: pointer;\r\n  border: 0;\r\n  outline: 0;\r\n  color: white;\r\n  background-color: transparent;\r\n  border-bottom: 2px solid black;\r\n  ${({ active }) =>\r\n    active &&\r\n    `     \r\n    border-bottom: 2px solid white;\r\n  `}\r\n`;\r\nconst types = [\r\n  \"Create Bounty\",\r\n  \"Browse Bounties\",\r\n  \"Apply to Bounty\",\r\n  \"Applications\",\r\n  \"My Bounties\",\r\n  \"Info\",\r\n];\r\nconst ButtonGroup = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst approveSpending = () => {\r\n  const erc20 = new ethers.Contract(\r\n    state.rewardAsset,\r\n    erc20Abi.body,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  let amount = 1000000000;\r\n\r\n  const output = erc20.approve(state.bountyContractAddress, amount);\r\n\r\n  State.update({ debuglogs: JSON.stringify(output) });\r\n};\r\n\r\nconst bountyObject = new ethers.Contract(\r\n  state.bountyContractAddress,\r\n  bountyContractAbi.body,\r\n  Ethers.provider().getSigner()\r\n);\r\n\r\nconst createBounty = () => {\r\n  const output = bountyObject.createBounty(\r\n    state.prURL,\r\n    state.rewardAsset,\r\n    state.rewardAmount,\r\n    state.lockPeriod\r\n  );\r\n};\r\n\r\nconst iface = new ethers.utils.Interface(erc20Abi.body);\r\n\r\nconst getTokenBalance = (sender) => {\r\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [sender]);\r\n\r\n  return Ethers.provider()\r\n    .call({\r\n      to: state.rewardAsset,\r\n      data: encodedData,\r\n    })\r\n    .then((rawBalance) => {\r\n      const receiverBalanceHex = iface.decodeFunctionResult(\r\n        \"balanceOf\",\r\n        rawBalance\r\n      );\r\n\r\n      const value = Big(receiverBalanceHex.toString())\r\n        .div(Big(10).pow(state.tokenDecimals))\r\n        .toFixed(2)\r\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n\r\n      return value;\r\n    });\r\n};\r\n\r\nconst getTokenDecimals = () => {\r\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\r\n\r\n  return Ethers.provider()\r\n    .call({\r\n      to: state.rewardAsset,\r\n      data: encodedData,\r\n    })\r\n    .then((tokenDecimals) => {\r\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\r\n    });\r\n};\r\n\r\nconst setToken = (token) => {\r\n  State.update({ token });\r\n  getTokenDecimals();\r\n};\r\n\r\nsetToken(state.rewardAsset);\r\n\r\ngetTokenBalance(state.sender).then((value) => {\r\n  State.update({ senderBalance: value });\r\n});\r\n\r\nconst ifaceBrowse = new ethers.utils.Interface(bountyContractAbi.body);\r\n\r\nconst hex2BN = (hex) => {\r\n  let input;\r\n  if (hex.startsWith(\"0x\")) {\r\n    input = hex.substring(2);\r\n  } else {\r\n    input = hex;\r\n  }\r\n  return new BN(input, 16);\r\n};\r\n\r\nconst tableBounties = [\r\n  {\r\n    id: 1,\r\n    prURL: \"link URL\",\r\n    rewardAsset: \"BYC\",\r\n    rewardAmount: 2000,\r\n  },\r\n];\r\n\r\nState.update({ tableBounties: tableBounties });\r\n\r\nconst parseBounty = (value) => {\r\n  const xs = JSON.parse(JSON.stringify(value));\r\n  const id = hex2BN(xs[0][\"hex\"]);\r\n  const prURL = xs[1];\r\n  const rewardAsset = xs[2];\r\n  const rewardAmount = hex2BN(xs[3][\"hex\"]);\r\n  const lockPeriod = hex2BN(xs[4][\"hex\"]);\r\n  const owner = xs[5];\r\n  return {\r\n    id,\r\n    prURL,\r\n    rewardAsset,\r\n    rewardAmount,\r\n    lockPeriod,\r\n    owner,\r\n  };\r\n};\r\n\r\nconst listOpenBounties = () => {\r\n  const encodedData = ifaceBrowse.encodeFunctionData(\"listOpenBounties\", []);\r\n\r\n  Ethers.provider()\r\n    .call({\r\n      to: state.bountyContractAddress,\r\n      data: encodedData,\r\n    })\r\n    .then((response) => {\r\n      const bounties = ifaceBrowse\r\n        .decodeFunctionResult(\"listOpenBounties\", response)[0]\r\n        .map(parseBounty);\r\n      State.update({ bounties: JSON.stringify(bounties) });\r\n    });\r\n};\r\n\r\nconst fetchBounties = () => {\r\n  listOpenBounties();\r\n};\r\n\r\nState.update({ payeeAddress: state.sender });\r\n\r\nconst applyToBounty = () => {\r\n  const output = bountyObject.submitApplication(\r\n    state.bountyID,\r\n    state.payeeAddress,\r\n    state.githubHandle,\r\n    state.comments\r\n  );\r\n};\r\n\r\nconst listApplications = () => {\r\n  const id = parseInt(state.bountyID);\r\n  const encodedData = ifaceBrowse.encodeFunctionData(\"listApplications\", [id]);\r\n\r\n  Ethers.provider()\r\n    .call({\r\n      to: state.bountyContractAddress,\r\n      data: encodedData,\r\n    })\r\n    .then((response) => {\r\n      const applications = ifaceBrowse\r\n        .decodeFunctionResult(\"listApplications\", response)[0]\r\n        .map((value) => {\r\n          const xs = JSON.parse(JSON.stringify(value));\r\n          const id = hex2BN(xs[0][\"hex\"]);\r\n          const payee = xs[1];\r\n          const ghUsername = xs[2];\r\n          const comment = xs[3];\r\n          return {\r\n            id,\r\n            payee,\r\n            ghUsername,\r\n            comment,\r\n          };\r\n        });\r\n      State.update({ applications: JSON.stringify(applications) });\r\n    });\r\n};\r\n\r\nconst approveApplication = () => {\r\n  bountyObject.approveApplication(state.applicationID, state.payeeAddress);\r\n};\r\n\r\nconst listActiveBountiesBy = () => {\r\n  const payeeAddress = state.payeeAddress;\r\n  const encodedData = ifaceBrowse.encodeFunctionData(\"listActiveBountiesBy\", [\r\n    payeeAddress,\r\n  ]);\r\n\r\n  Ethers.provider()\r\n    .call({\r\n      to: state.bountyContractAddress,\r\n      data: encodedData,\r\n    })\r\n    .then((response) => {\r\n      const bounties = ifaceBrowse\r\n        .decodeFunctionResult(\"listActiveBountiesBy\", response)[0]\r\n        .map((value) => {\r\n          const xs = JSON.parse(JSON.stringify(value));\r\n          const bounty = parseBounty(xs[0]);\r\n          const payee = xs[1];\r\n          const ghUsername = xs[2];\r\n          const lockHeight = hex2BN(xs[3][\"hex\"]);\r\n          return {\r\n            bounty,\r\n            payee,\r\n            ghUsername,\r\n            lockHeight,\r\n          };\r\n        });\r\n      State.update({ myActiveBounties: JSON.stringify(bounties) });\r\n    });\r\n};\r\n\r\nconst tryClaimBounty = () => {\r\n  bountyObject.tryClaimBounty(state.bountyIdToClaim).then((hash) => {\r\n    console.log(hash);\r\n  });\r\n};\r\n\r\nconst finishClaimBounty = () => {\r\n  bountyObject.finishClaimBounty(state.bountyIdToClaim).then((hash) => {\r\n    console.log(hash);\r\n  });\r\n};\r\n\r\nreturn (\r\n  <>\r\n    <ButtonGroup>\r\n      {types.map((type) => (\r\n        <Tab\r\n          key={type}\r\n          active={state.activePage === type}\r\n          onClick={() => setActive(type)}\r\n        >\r\n          {type}\r\n        </Tab>\r\n      ))}\r\n    </ButtonGroup>\r\n    <div\r\n      style={\r\n        state.activePage == \"Create Bounty\"\r\n          ? { display: \"\" }\r\n          : { display: \"none\" }\r\n      }\r\n    >\r\n      <h1> Create a new bounty </h1>\r\n      <div>\r\n        <div> {state.debuglogs ?? \"the logs will appear here\"} </div>\r\n        <label htmlFor=\"name\">Github PR URL</label>\r\n        <input\r\n          value={state.prURL}\r\n          id=\"prurl\"\r\n          type=\"text\"\r\n          onChange={(e) => State.update({ prURL: e.target.value })}\r\n          placeholder=\"Paste here the URL of your github PR\"\r\n          required\r\n        />\r\n        <div>\r\n          Your balance = {state.senderBalance ?? (!state.sender ? \"0\" : \"...\")}\r\n          &nbsp;BYC{\" \"}\r\n        </div>\r\n        <label htmlFor=\"amount\">Bounty amount:</label>\r\n        <input\r\n          id=\"amount\"\r\n          type=\"number\"\r\n          value={state.rewardAmount}\r\n          onChange={(e) => State.update({ rewardAmount: e.target.value })}\r\n          placeholder=\"0.0\"\r\n          required\r\n        />\r\n        <label for=\"selectToken\">Select token</label>\r\n        <select\r\n          class=\"form-select\"\r\n          id=\"selectToken\"\r\n          onChange={(e) => State.update({ rewardAsset: e.target.value })}\r\n        >\r\n          {tokensMenuItems}\r\n        </select>\r\n        <br />\r\n\r\n        {!!state.sender ? (\r\n          <button\r\n            class=\"LidoStakeFormSubmitContainer\"\r\n            onClick={approveSpending}\r\n          >\r\n            <span>Approve</span>\r\n          </button>\r\n        ) : (\r\n          <Web3Connect\r\n            className=\"LidoStakeFormSubmitContainer\"\r\n            connectLabel=\"Connect with Web3\"\r\n          />\r\n        )}\r\n\r\n        <br />\r\n\r\n        {!!state.sender ? (\r\n          <button class=\"LidoStakeFormSubmitContainer\" onClick={createBounty}>\r\n            <span>Submit</span>\r\n          </button>\r\n        ) : (\r\n          <Web3Connect\r\n            className=\"LidoStakeFormSubmitContainer\"\r\n            connectLabel=\"Connect with Web3\"\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div\r\n      style={\r\n        state.activePage == \"Apply to Bounty\"\r\n          ? { display: \"\" }\r\n          : { display: \"none\" }\r\n      }\r\n    >\r\n      <h1>Apply to an existing Bounty</h1>\r\n\r\n      <label htmlFor=\"bountyID\">Bounty ID</label>\r\n      <input\r\n        value={state.bountyID}\r\n        id=\"bountyID\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ bountyID: e.target.value })}\r\n        placeholder=\"Enter the bountyID\"\r\n        required\r\n      />\r\n      <label htmlFor=\"payeeAddress\">Your address</label>\r\n      <input\r\n        value={state.sender}\r\n        id=\"payeeAddress\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ payeeAddress: e.target.value })}\r\n        placeholder=\"Add the address you will receive the bounty to\"\r\n        required\r\n      />\r\n      <label htmlFor=\"githubHandle\">Your github handle</label>\r\n      <input\r\n        value={state.githubHandle}\r\n        id=\"githubHandle\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ githubHandle: e.target.value })}\r\n        placeholder=\"Enter your github handle\"\r\n        required\r\n      />\r\n      <label htmlFor=\"comments\">Comments</label>\r\n      <input\r\n        value={state.comments}\r\n        id=\"comments\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ comments: e.target.value })}\r\n        placeholder=\"Please add your comments here\"\r\n        required\r\n      />\r\n      <br />\r\n      {!!state.sender ? (\r\n        <button class=\"LidoStakeFormSubmitContainer\" onClick={applyToBounty}>\r\n          <span>Apply</span>\r\n        </button>\r\n      ) : (\r\n        <Web3Connect\r\n          className=\"LidoStakeFormSubmitContainer\"\r\n          connectLabel=\"Connect with Web3\"\r\n        />\r\n      )}\r\n    </div>\r\n\r\n    <div\r\n      class=\"\"\r\n      style={\r\n        state.activePage == \"Browse Bounties\"\r\n          ? { display: \"\" }\r\n          : { display: \"none\" }\r\n      }\r\n    >\r\n      <h1> See all bounties </h1>\r\n\r\n      <button class=\"LidoStakeFormSubmitContainer\" onClick={fetchBounties}>\r\n        <span>List bounties</span>\r\n      </button>\r\n\r\n      <div>{state.bounties ?? \"the list of bounties will appear here\"}</div>\r\n    </div>\r\n    <div\r\n      style={\r\n        state.activePage == \"Applications\"\r\n          ? { display: \"\" }\r\n          : { display: \"none\" }\r\n      }\r\n    >\r\n      <h1>Approve applications</h1>\r\n      <h3>1. Retrieve applications for a bounty</h3>\r\n      <label htmlFor=\"bountyID\">Bounty ID</label>\r\n      <input\r\n        value={state.bountyID}\r\n        id=\"comments\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ bountyID: e.target.value })}\r\n        placeholder=\"Add the bounty ID to retrieve its applications\"\r\n        required\r\n      />\r\n      <br />\r\n      {!!state.sender ? (\r\n        <button class=\"LidoStakeFormSubmitContainer\" onClick={listApplications}>\r\n          <span>Retrieve Applications</span>\r\n        </button>\r\n      ) : (\r\n        <Web3Connect\r\n          className=\"LidoStakeFormSubmitContainer\"\r\n          connectLabel=\"Connect with Web3\"\r\n        />\r\n      )}\r\n      <br />\r\n      <div> {state.applications ?? \"the applications will appear here\"} </div>\r\n\r\n      <br />\r\n      <h3>2. Approve an application</h3>\r\n      <label htmlFor=\"applicationID\">Bounty ID</label>\r\n      <input\r\n        value={state.applicationID}\r\n        id=\"applicationID\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ applicationID: e.target.value })}\r\n        placeholder=\"Enter the bountyID to approve\"\r\n        required\r\n      />\r\n      <label htmlFor=\"payeeAddress\">Payee address</label>\r\n      <input\r\n        id=\"payeeAdress\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ payeeAdress: e.target.value })}\r\n        placeholder=\"Enter the payee address\"\r\n        required\r\n      />\r\n      <br />\r\n      {!!state.sender ? (\r\n        <button\r\n          class=\"LidoStakeFormSubmitContainer\"\r\n          onClick={approveApplication}\r\n        >\r\n          <span>Approve application</span>\r\n        </button>\r\n      ) : (\r\n        <Web3Connect\r\n          className=\"LidoStakeFormSubmitContainer\"\r\n          connectLabel=\"Connect with Web3\"\r\n        />\r\n      )}\r\n    </div>\r\n\r\n    <div\r\n      class=\"\"\r\n      style={\r\n        state.activePage == \"My Bounties\"\r\n          ? { display: \"\" }\r\n          : { display: \"none\" }\r\n      }\r\n    >\r\n      <h1> My bounties </h1>\r\n      <h3>1. See all your approved bounties</h3>\r\n      <label htmlFor=\"payeeAddress\">Payee Address</label>\r\n      <input\r\n        value={state.payeeAddress}\r\n        id=\"payeeAddress\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ payeeAddress: e.target.value })}\r\n        placeholder=\"Enter the address you applied with\"\r\n        required\r\n      />\r\n      <br />\r\n      {!!state.sender ? (\r\n        <button\r\n          class=\"LidoStakeFormSubmitContainer\"\r\n          onClick={listActiveBountiesBy}\r\n        >\r\n          <span>See my bounties</span>\r\n        </button>\r\n      ) : (\r\n        <Web3Connect\r\n          className=\"LidoStakeFormSubmitContainer\"\r\n          connectLabel=\"Connect with Web3\"\r\n        />\r\n      )}\r\n      <div>\r\n        {state.myActiveBounties ?? \"your approved bounties will appear here\"}\r\n      </div>\r\n\r\n      <br />\r\n      <h3>2. Claim your bounty</h3>\r\n      <label htmlFor=\"bountyIdToClaim\">Bounty ID to claim</label>\r\n      <input\r\n        id=\"bountyIdToClaim\"\r\n        type=\"text\"\r\n        onChange={(e) => State.update({ bountyIdToClaim: e.target.value })}\r\n        required\r\n      />\r\n      <br />\r\n      {!!state.sender ? (\r\n        <button class=\"LidoStakeFormSubmitContainer\" onClick={tryClaimBounty}>\r\n          <span>Start claim bounty</span>\r\n        </button>\r\n      ) : (\r\n        <Web3Connect\r\n          className=\"LidoStakeFormSubmitContainer\"\r\n          connectLabel=\"Connect with Web3\"\r\n        />\r\n      )}\r\n      {!!state.sender ? (\r\n        <button\r\n          class=\"LidoStakeFormSubmitContainer\"\r\n          onClick={finishClaimBounty}\r\n        >\r\n          <span>Finish claim bounty</span>\r\n        </button>\r\n      ) : (\r\n        <Web3Connect\r\n          className=\"LidoStakeFormSubmitContainer\"\r\n          connectLabel=\"Connect with Web3\"\r\n        />\r\n      )}\r\n    </div>\r\n\r\n    <div\r\n      style={state.activePage == \"Info\" ? { display: \"\" } : { display: \"none\" }}\r\n    >\r\n      <div>Address = {state.sender ?? \"...\"}</div>\r\n      <div>\r\n        Balance = {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH{\" \"}\r\n      </div>\r\n      <div> {state.debuglogs ?? \"the logs will appear here\"} </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearcon.birchmd.near/widget/GHBounty-draft", "metadata.tags.ethdenver2023": NaN}