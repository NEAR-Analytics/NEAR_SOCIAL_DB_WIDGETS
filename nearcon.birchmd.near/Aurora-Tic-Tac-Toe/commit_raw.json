{"tx_hash": "DhVfcVJ7iWRr34M7r4FR7gjzaMCN7ymrAZN5Pp57wHQV", "action_id_social": "6kT8uHdTamAtmG1cVfa3bKJiHLz717rKByxTH6oxFmLM-0-widget", "block_id": 89948017, "block_timestamp": "2023-04-19 14:40:08.698", "signer_id": "nearcon.birchmd.near", "widget_name": "Aurora-Tic-Tac-Toe", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\r\n\r\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\r\n\r\nconst contractAbi = fetch(\r\n  \"https://gist.githubusercontent.com/birchmd/3db801d6115ceaaafb3d7e8fd94e0dc2/raw/5aa660a746d8f137df2c77142bfba36057dab6ef/TicTacToe.abi.json\"\r\n);\r\nif (!contractAbi.ok) {\r\n  return (\r\n    <>\r\n      <p>Failed to load Tic Tac Toe contract ABI.</p>\r\n      <div>{JSON.stringify(contractAbi)}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst contract_address = \"0xFe1241A79C614841AfC00B50183c30610348896F\";\r\nconst iface = new ethers.utils.Interface(contractAbi.body);\r\n\r\nconst contract = new ethers.Contract(\r\n  contract_address,\r\n  contractAbi.body,\r\n  Ethers.provider().getSigner()\r\n);\r\n\r\ninitState({\r\n  board: {\r\n    isGameOver: false,\r\n    board: [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\r\n  },\r\n  pendingPlayer: \"X\",\r\n  player: \"X\",\r\n  playerNumber: 1,\r\n  expectNewState: true,\r\n  firstQuery: true,\r\n  startingNewGame: false,\r\n});\r\n\r\nconst newGame = () => {\r\n  // Don't allow sending new transactions while waiting\r\n  // for the state to update.\r\n  if (state.expectNewState) {\r\n    return;\r\n  }\r\n\r\n  let player_prefernece;\r\n\r\n  if (state.pendingPlayer == \"X\") {\r\n    State.update({ player: \"X\", playerNumber: 1 });\r\n    player_prefernece = 1;\r\n  } else {\r\n    State.update({ player: \"O\", playerNumber: 17 });\r\n    player_prefernece = 0;\r\n  }\r\n\r\n  contract.newGame(player_prefernece).then((tx) => {\r\n    State.update({ expectNewState: true, startingNewGame: true });\r\n    tx.wait().then((rx) => {\r\n      console.log(rx);\r\n      getGameState();\r\n    });\r\n  });\r\n};\r\n\r\nconst hex2BN = (hex) => {\r\n  let input;\r\n  if (hex.startsWith(\"0x\")) {\r\n    input = hex.substring(2);\r\n  } else {\r\n    input = hex;\r\n  }\r\n  return new BN(input, 16);\r\n};\r\n\r\nconst parseBoardHex = (boardHex) => {\r\n  const boardArray = hex2BN(boardHex).toArray(\"big\", 11);\r\n  const isGameOver = boardArray[0] != 0;\r\n  const board = [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"];\r\n  var x;\r\n  for (let i = 0; i < 9; i++) {\r\n    x = boardArray[i + 2];\r\n    if (x == 1) {\r\n      board[i] = \"X\";\r\n    } else if (x == 17) {\r\n      board[i] = \"O\";\r\n    }\r\n  }\r\n  return { isGameOver, board };\r\n};\r\n\r\nconst getGameState = () => {\r\n  // shot curcuit to avoid constantly hitting the RPC\r\n  if (!state.expectNewState) {\r\n    return;\r\n  }\r\n\r\n  const encodedData = iface.encodeFunctionData(\"getGameState\", [sender]);\r\n\r\n  Ethers.provider()\r\n    .call({\r\n      to: contract_address,\r\n      data: encodedData,\r\n    })\r\n    .then((boardHex) => {\r\n      const result = parseBoardHex(boardHex);\r\n      const expectNewState =\r\n        state.expectNewState &&\r\n        !state.firstQuery &&\r\n        result.isGameOver == state.board.isGameOver &&\r\n        JSON.stringify(result.board) === JSON.stringify(state.board.board);\r\n\r\n      var winner = null;\r\n      if (result.isGameOver) {\r\n        // figure out who won\r\n        const setsOf3 = [\r\n          [0, 1, 2], // rows\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6], // columns\r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8], // diagonals\r\n          [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < setsOf3.length; i++) {\r\n          const idxs = setsOf3[i];\r\n          const is3InARow = idxs.every((j) => {\r\n            return result.board[j] == result.board[idxs[0]];\r\n          });\r\n          if (is3InARow) {\r\n            winner = \"Winner: \" + result.board[idxs[0]];\r\n            break;\r\n          }\r\n        }\r\n        if (!winner) {\r\n          winner = \"Draw\";\r\n        }\r\n      }\r\n\r\n      var total = 0;\r\n      for (let i = 0; i < 9; i++) {\r\n        if (result.board[i] == \"X\") {\r\n          total += 1;\r\n        } else if (result.board[i] == \"O\") {\r\n          total -= 1;\r\n        }\r\n      }\r\n      let player;\r\n      let playerNumber;\r\n      if (total == 0) {\r\n        player = \"X\";\r\n        playerNumber = 1;\r\n      } else {\r\n        player = \"O\";\r\n        playerNumber = 17;\r\n      }\r\n\r\n      if (!state.firstQuery && player !== state.player) {\r\n        player = state.player;\r\n        playerNumber = state.playerNumber;\r\n        expectNewState = true;\r\n      }\r\n      if (result.isGameOver && !state.startingNewGame) {\r\n        expectNewState = false;\r\n      }\r\n\r\n      State.update({\r\n        board: result,\r\n        player,\r\n        playerNumber,\r\n        winner,\r\n        expectNewState,\r\n        firstQuery: false,\r\n      });\r\n    });\r\n};\r\n\r\nconst playerMove = (index) => {\r\n  if (\r\n    !state.expectNewState &&\r\n    !state.board.isGameOver &&\r\n    state.board.board[index] == \".\"\r\n  ) {\r\n    const move =\r\n      \"0x\" +\r\n      (\r\n        new BN(state.playerNumber) * new BN(256).pow(new BN(8 - index))\r\n      ).toString(16);\r\n    contract.takePlayerTurn(move).then((tx) => {\r\n      State.update({ expectNewState: true, startingNewGame: false });\r\n      tx.wait().then((rx) => {\r\n        console.log(rx);\r\n        getGameState();\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nconst BottomCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n`;\r\nconst TopLeftCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-right: 1px solid;\r\n    border-bottom: 1px solid;\r\n`;\r\nconst TopCenterCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-bottom: 1px solid;\r\n`;\r\nconst TopRightCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-left: 1px solid;\r\n    border-bottom: 1px solid;\r\n`;\r\nconst MiddleLeftCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-right: 1px solid;\r\n    border-bottom: 1px solid;\r\n`;\r\nconst MiddleCenterCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-bottom: 1px solid;\r\n`;\r\nconst MiddleRightCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-left: 1px solid;\r\n    border-bottom: 1px solid;\r\n`;\r\nconst BottomLeftCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-right: 1px solid;\r\n`;\r\nconst BottomCenterCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n`;\r\nconst BottomRightCell = styled.td`\r\n    padding: 15px;\r\n    border-collapse: collapse;\r\n    border-left: 1px solid;\r\n`;\r\n\r\nreturn (\r\n  <>\r\n    {getGameState()}\r\n    <table>\r\n      <tr>\r\n        <TopLeftCell onClick={() => playerMove(0)}>\r\n          {state.board.board[0]}\r\n        </TopLeftCell>\r\n        <TopCenterCell onClick={() => playerMove(1)}>\r\n          {state.board.board[1]}\r\n        </TopCenterCell>\r\n        <TopRightCell onClick={() => playerMove(2)}>\r\n          {state.board.board[2]}\r\n        </TopRightCell>\r\n      </tr>\r\n      <tr>\r\n        <MiddleLeftCell onClick={() => playerMove(3)}>\r\n          {state.board.board[3]}\r\n        </MiddleLeftCell>\r\n        <MiddleCenterCell onClick={() => playerMove(4)}>\r\n          {state.board.board[4]}\r\n        </MiddleCenterCell>\r\n        <MiddleRightCell onClick={() => playerMove(5)}>\r\n          {state.board.board[5]}\r\n        </MiddleRightCell>\r\n      </tr>\r\n      <tr>\r\n        <BottomLeftCell onClick={() => playerMove(6)}>\r\n          {state.board.board[6]}\r\n        </BottomLeftCell>\r\n        <BottomCenterCell onClick={() => playerMove(7)}>\r\n          {state.board.board[7]}\r\n        </BottomCenterCell>\r\n        <BottomRightCell onClick={() => playerMove(8)}>\r\n          {state.board.board[8]}\r\n        </BottomRightCell>\r\n      </tr>\r\n    </table>\r\n    <br></br>\r\n    {state.board.isGameOver && <div>{state.winner}</div>}\r\n    {state.expectNewState ? (\r\n      <div>\r\n        <p>Waiting for new data from RPC...</p>\r\n      </div>\r\n    ) : (\r\n      <div />\r\n    )}\r\n    <br></br>\r\n    <label for=\"selectPlayer\">Play as:</label>\r\n    <select\r\n      id=\"selectPlayer\"\r\n      onChange={(e) => State.update({ pendingPlayer: e.target.value })}\r\n    >\r\n      <option value=\"X\">X</option>\r\n      <option value=\"O\">O</option>\r\n    </select>\r\n    <div class=\"mb-3\">\r\n      <button onClick={newGame}>New Game</button>\r\n    </div>\r\n  </>\r\n);\r\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearcon.birchmd.near/widget/Aurora-Tic-Tac-Toe", "metadata.tags.ethdenver2023": ""}