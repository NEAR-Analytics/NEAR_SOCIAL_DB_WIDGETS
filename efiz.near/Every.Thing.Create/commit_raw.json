{"tx_hash": "CqAsvUV7yZUJtLJDFXdTYXH6eYvpPzYYJhJ4eCNsXZHa", "action_id_social": "27HaXVXaauGyRwUgcvSfnmjc1ZTGwq4SXhUVDLw4tCJC-0-widget", "block_id": 93149968, "block_timestamp": "2023-05-31T18:03:47.686Z", "signer_id": "efiz.near", "widget_name": "Every.Thing.Create", "source_code": "const type = props.type || \"\";\nconst postThing = props.postThing;\nconst availableTypes = JSON.parse(props.availableTypes) || [\n  \"efiz.near/type/paragraph\",\n  \"efiz.near/type/Image\",\n  \"efiz.near/type/document\",\n  \"efiz.near/type/feed\",\n  \"efiz.near/type/idea\",\n  \"md\",\n];\n\nState.init({\n  selectedType: type,\n  expanded: false,\n});\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\n\nconst composeData = () => {\n  // generate a random id\n  const thingId = state.thingId || Math.random();\n  const data = {\n    thing: {\n      ...state.extra,\n      [thingId]: JSON.stringify({\n        data: state.thing,\n        type: state.selectedType,\n      }),\n    },\n    index: {\n      thing: JSON.stringify({\n        key: thingId,\n        value: {\n          type: state.selectedType,\n        },\n      }),\n    },\n  };\n\n  // TODO: What other types can we extract mentions from?\n  // How can this be better associated with the type?\n  if (state.selectedType === \"md\") {\n    const notifications = extractTagNotifications(state.thing.text, {\n      type: \"social\",\n      path: `${context.accountId}/thing/${thingId}`,\n    });\n\n    if (notifications.length) {\n      data.index.notify = JSON.stringify(\n        notifications.length > 1 ? notifications : notifications[0]\n      );\n    }\n  }\n\n  if (postThing) {\n    data = postThing(data);\n  }\n  return data;\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\n// const Row = styled.div`\n//   display: flex;\n//   gap: 10px;\n// `;\n\n// const Select = styled.select`\n//   padding: 5px;\n//   width: 100%;\n// `;\n\n// const Input = styled.input`\n// `;\n\nconst SwitchButton = styled.button`\n  padding: 5px 10px;\n  background-color: ${({ active }) => (active ? \"#5fba7d\" : \"#ccc\")};\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100px;\n`;\n\nconst TextContainer = styled.div`\n    margin-left: 4px;\n`;\n\nconst FormContainer = styled.div`\n  margin: 20px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  max-width: 200px;\n  margin-bottom: 10px;\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  height: 30px;\n`;\n\nconst Text = styled.p`\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nconst handleTypeChange = (e) => {\n  State.update({ selectedType: e.target.value });\n};\n\nif (state.selectedType !== \"\") {\n  if (state.selectedType !== \"md\") {\n    type = JSON.parse(Social.get(state.selectedType, \"final\") || null);\n    if (type === null) {\n      return <></>;\n    }\n  } else {\n    type = \"md\";\n  }\n}\n\nconst handleThingData = (value, extra) => {\n  State.update({ thing: value, extra });\n};\n\nfunction RenderTypeCreate() {\n  if (type !== \"\") {\n    if (type?.widgets?.create !== undefined) {\n      return (\n        <Widget\n          src={type?.widgets?.create}\n          props={{ onChange: handleThingData }} // onChange\n        />\n      );\n    } else {\n      return (\n        <Widget\n          src=\"efiz.near/widget/every.md.create\"\n          props={{ onChange: handleThingData }} // onChange\n        />\n      );\n    }\n  }\n}\n\nreturn (\n  <>\n    <Container>\n      {props.type === undefined ? (\n        <>\n          <Row>\n            <TextContainer>create a thing of type:</TextContainer>\n          </Row>\n          <Row>\n            <Select value={state.selectedType} onChange={handleTypeChange}>\n              <option value=\"\">Select a type</option>\n              {availableTypes.map((it) => (\n                <option value={it} key={it}>\n                  {it}\n                </option>\n              ))}\n            </Select>\n          </Row>\n        </>\n      ) : null}\n\n      <RenderTypeCreate />\n    </Container>\n    <Button onClick={() => State.update({ expanded: !state.expanded })}>\n      optional {state.expanded ? \"-\" : \"+\"}\n    </Button>\n    <Row>\n      {state.expanded ? (\n        <>\n          <Input\n            onChange={(e) => State.update({ thingId: e.target.value })}\n            placeholder=\"thing id\"\n          />\n        </>\n      ) : null}\n    </Row>\n    <CommitButton\n      force\n      data={composeData()}\n      disabled={!state.thing}\n      className=\"styless\"\n    >\n      create\n    </CommitButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Every.Thing.Create", "__row_index": 11}