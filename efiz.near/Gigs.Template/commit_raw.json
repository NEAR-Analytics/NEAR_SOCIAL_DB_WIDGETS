{"tx_hash": "692FHcWtKLgacZYFQMCyTyAhLmCZ7exuKgSWnaxg6nBN", "action_id_social": "BLo2ikUjJwAhqW4EPTPxiRwbKcix27HRhSsutgm9FP3N-0-widget", "block_id": 91993673, "block_timestamp": "2023-05-16T13:39:40.338Z", "signer_id": "efiz.near", "widget_name": "Gigs.Template", "source_code": "const isDev = props.isDev ?? false;\nconst gigsBoardUrl = isDev\n  ? \"https://b54103fcb629.ngrok.app\" // place your own ngrok url here\n  : \"https://gigs-board.vercel.app\"; // or your fork of gigs-board\n\nconst daoId = \"liberty.sputnik-dao.near\"; // owner of the gigs board\n\nfunction onCardAdd(payload) {\n  console.log(JSON.stringify(payload));\n  // Generate UUID (can just be plain text for now, may need to integrate uuid.generate() into VM)\n  const uuid = 12345;\n\n  // Function call proposal to the DAO with payload\n  Social.set(\n    {\n      thing: {\n        [uuid]: JSON.stringify({\n          // save thing at uuid\n          payload,\n        }),\n      },\n      index: {\n        [daoId]: JSON.stringify({\n          // index key at daomain\n          key: uuid,\n          value: {\n            type: \"every.near/type/problem\", // What type should this be? Depends on the Kanban board...\n          },\n        }),\n      },\n    },\n    {\n      force: true,\n    }\n  );\n}\n\nfunction onCardDelete(payload) {\n  console.log(JSON.stringify(payload));\n}\n\nfunction onCardMoveAcrossLanes(payload) {\n  console.log(JSON.stringify(payload));\n  // function call proposal t\n  return { preventDefault: true };\n}\n\nfunction loadCards() {\n  // this should just get the ids from the DAO\n  // Then Social.index(daoId, {key}) on each key to get each \"gig\" and it's history\n  const addressForArticles = \"ndcGigArticle\";\n  const authorsWhitelist = props.writersWhiteList ?? [\n    \"neardigitalcollective.near\",\n    \"blaze.near\",\n    \"jlw.near\",\n    \"kazanderdad.near\",\n    \"joep.near\",\n    \"sarahkornfeld.near\",\n    \"yuensid.near\",\n  ];\n  const articleBlackList = [91092435, 91092174, 91051228, 91092223, 91051203];\n  const authorForWidget = \"neardigitalcollective.near\";\n  // ========== GET INDEX ARRAY FOR ARTICLES ==========\n  const postsIndex = Social.index(addressForArticles, \"main\", {\n    order: \"desc\",\n  });\n  // ========== GET ALL ARTICLES ==========\n  const resultArticles =\n    postsIndex &&\n    postsIndex\n      .reduce((acc, { accountId, blockHeight }) => {\n        const postData = Social.get(\n          `${accountId}/${addressForArticles}/main`,\n          blockHeight\n        );\n        const postDataWithBlockHeight = {\n          ...JSON.parse(postData),\n          blockHeight,\n        };\n        return [...acc, postDataWithBlockHeight];\n      }, [])\n      .filter((article) =>\n        authorsWhitelist.some((addr) => addr === article.author)\n      )\n      .filter((article) => !articleBlackList.includes(article.blockHeight));\n\n  // ========== FILTER DUPLICATES ==========\n  const filteredArticles =\n    resultArticles.length &&\n    resultArticles.reduce((acc, article) => {\n      if (!acc.some(({ articleId }) => articleId === article.articleId)) {\n        return [...acc, article];\n      } else {\n        return acc;\n      }\n    }, []);\n\n  const getDateLastEdit = (timestamp) => {\n    const date = new Date(Number(timestamp));\n    const dateString = {\n      date: date.toLocaleDateString(),\n      time: date.toLocaleTimeString(),\n    };\n    return dateString;\n  };\n\n  // Then convert into cards\n  const convertData = (inputData) => {\n    const cards = [];\n    inputData.forEach((item, index) => {\n      const card = {\n        id: item.articleId,\n        title: item.articleId,\n        laneId: index % 2 === 0 ? \"proposed\" : \"in-progress\",\n        author: item.author,\n        blockHeight: item.blockHeight,\n        body: item.body,\n        lastEditor: item.lastEditor,\n        timeCreate: item.timeCreate,\n        timeLastEdit: item.timeLastEdit,\n        version: item.version,\n      };\n      cards.push(card);\n    });\n    return cards;\n  };\n\n  const data = convertData(filteredArticles);\n  return data;\n}\n\nreturn (\n  <Widget\n    src={\"efiz.near/widget/Gigs.Board\"}\n    props={{\n      gigsBoardUrl,\n      onCardAdd,\n      onCardDelete,\n      onCardMoveAcrossLanes,\n      loadCards,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Gigs.Template", "__row_index": 0}