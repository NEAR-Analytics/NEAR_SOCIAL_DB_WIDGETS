{"tx_hash": "2LVa82iDCcDZ7wid33j9b6u2RdVbqqejRaFqwLT9CPxb", "action_id_social": "4AQ6au9DJiUn1VaeX1k5sijejWtCedDxJitNWKxHrutx-0-widget", "block_id": 92011816, "block_timestamp": "2023-05-16T19:21:00.328Z", "signer_id": "efiz.near", "widget_name": "Every.Node", "source_code": "const key = props.key;\nconst label = props.label;\nconst path = props.path;\nconst setPath = props.setPath;\nconst history = props.history;\nconst setHistory = props.setHistory;\nconst isRoot = props.isRoot;\n\nState.init({\n  expanded: false,\n});\n\nfunction handleExpand() {\n  State.update({ expanded: !state.expanded });\n}\n\nfunction handleInto() {\n  setPath(path);\n  setHistory([...history, path]);\n}\n\nfunction handleBack() {\n  const newPath = history[history.length - 2] || \"\";\n  setPath(newPath);\n  setHistory(history.slice(0, -1));\n}\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n\nfunction getType(path) {\n  const parts = path.split(\"/\");\n  if (parts.length === 1) {\n    return \"account\";\n  } else if (parts.length === 2) {\n    return parts[1];\n  } else {\n    const standard = parts[1];\n    if (standard === \"thing\") {\n      // We're gonna grab the type from the thing itself\n    }\n    return standard;\n  }\n}\n\nconst type = getType(path);\n\n// WHEN A NEW ROOT IS SET //\n// GET DATA AT THIS PATH //\nfunction getNode(path, type) {\n  const parts = path.split(\"/\");\n  let value = {};\n\n  // ACCOUNT //\n  if (type === \"account\") {\n    if (parts.length > 1) {\n      // GRAPH // FOLLOW // BACK TO ACCOUNT : WORKING\n      //   setRoot(parts[3], \"account\");\n    } else {\n      if (parts[0] !== \"*\") {\n        parts.push(\"**\");\n      }\n      value = Social.get(parts.join(\"/\"), \"final\");\n      return value;\n    }\n    // THING //\n  } else if (type === \"thing\") {\n    // path: \"everything\"\n    // type: \"thing\"\n    return rootNode; // Or should \"everything\" be \"*\"?\n    // PROFILE //\n  } else if (type === \"profile\") {\n    value = Social.get(parts.join(\"/\"), \"final\");\n    // POST : WIP //\n  } else if (type === \"post\") {\n    value = path;\n    // NAMETAG : WIP //\n  } else if (type === \"nametag\") {\n    if (parts.length > 2) {\n      if (parts.length === 3) {\n        // BACK TO ACCOUNT\n        // setRoot(parts[3], \"account\");\n      } else if (parts.length === 4) {\n        // ALL TAGS BY ACCOUNT\n        value = Social.keys(`${parts[0]}/profile/tags/*`, \"final\");\n      } else {\n        // THIS TAG\n        value = parts[5];\n      }\n    }\n  } else {\n    parts.push(\"**\");\n    value = Social.get(parts.join(\"/\"), \"final\");\n    return value;\n  }\n}\nlet node = {};\nif (isRoot) {\n  console.log(`getting node for ${path} and ${type}`);\n  node = getNode(path, type);\n}\n\nfunction renderThing(path, type) {\n  let dataSource;\n  let dataSourceArgs = {};\n  if (type === \"account\") {\n    dataSource = \"SOCIALDB\";\n    dataSourceArgs = {\n      arg1: path,\n    };\n  }\n  return (\n    <Widget\n      src=\"efiz.near/widget/Every.Thing\"\n      props={{ dataSource, dataSourceArgs, type, node, isRoot }}\n    />\n  );\n}\n\nreturn (\n  <div>\n    <div>\n      {isRoot ? (\n        <>\n          {/** render root view, is there a way to make the label better? get it from a map? */}\n          <div\n            style={{\n              fontFamily: \"Times New Roman\",\n              fontSize: \"4em\",\n              lineHeight: \"1.25\",\n              fontWeight: 400,\n              cursor: \"pointer\",\n            }}\n          >\n            {label}\n          </div>\n        </>\n      ) : (\n        <Button onClick={handleInto}>{label}</Button>\n      )}\n      {history.length > 1 && isRoot && (\n        <Button onClick={handleBack}>back</Button>\n      )}\n    </div>\n    {renderThing(path, type)}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Every.Node", "__row_index": 2}