{"tx_hash": "CAMTFyB1oL5ejrVf92uwJLjvSGr5WHEaXCsgvCEAPxqQ", "action_id_social": "HQQJzhv5azn1vnMoPaW6ad4A655SBkoLSej7R5pmvdL1-0-widget", "block_id": 91577073, "block_timestamp": "2023-05-11T03:14:31.170Z", "signer_id": "efiz.near", "widget_name": "Tree", "source_code": "const key = props.key || context.accountId;\nconst path = `${context.accountId}/**`;\nconst rootNode = Social.get(path, \"final\");\n\nState.init({\n  node: rootNode,\n  prevNode: rootNode,\n  path: path,\n  key: key,\n});\n\n// newPath, data, callback\nfunction traverse(path, node) {\n  console.log(JSON.stringify(node));\n  State.update({\n    path,\n    node,\n    prevPath: state.path,\n  });\n  //   const parts = newPath.split(\"/\");\n\n  //   State.update({ path: newPath, node: data });\n  //   callback(newPath, data);\n\n  //   if (parts.length === 1) {\n  //     parts.push(\"**\");\n\n  //     value = Social.get(parts.join(\"/\"), \"final\");\n  //     edges = Object.keys(value);\n  //     value = JSON.stringify(value, undefined, 2);\n  //   } else if (parts.length === 2) {\n  //     parts.push(\"**\");\n\n  //     value = Social.get(parts.join(\"/\"), \"final\");\n  //     edges = Object.keys(value);\n  //     value = JSON.stringify(value, undefined, 2);\n  //   } else if (parts.length > 2) {\n  //     value = Social.get(parts.join(\"/\"), \"final\");\n  //     const standard = parts[1];\n  //     switch (standard) {\n  //       case \"index\":\n  //         value = JSON.parse(value);\n  //         edges = [\"hi\"];\n  //         value = JSON.stringify(value, undefined, 2);\n  //         // if you go to an index, then it shows all the data\n  //         break;\n  //       case \"post\":\n  //         //   value = Social.get(parts.slice(0, 3).join(\"/\"), \"final\");\n  //         const value = Social.index(\"post\", parts[2], {\n  //           limit: 10,\n  //           order: \"desc\",\n  //           accountId: parts[0],\n  //         });\n  //         value = JSON.stringify(value, undefined, 2);\n  //         console.log(value);\n  //         // we want a special view for this\n  //         break;\n  //     }\n  //   }\n\n  //   console.log(data);\n  //   for (const key in data) {\n  //     const value = data[key];\n\n  //     if (typeof value === \"object\") {\n  //       traverse(value, callback);\n  //     } else {\n  //       callback(key, value);\n  //     }\n  //   }\n}\n\nfunction handleTraverse(path, node) {\n  traverse(path, node, (node) => console.log(node.value));\n  // could check the type, return the correct data.\n}\n\nreturn (\n  <Widget\n    src=\"efiz.near/widget/Node\"\n    props={{\n      key: state.key,\n      path: state.path,\n      node: state.node,\n      prevPath: state.prevPath,\n      onTraverse: handleTraverse,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Tree", "__row_index": 1}