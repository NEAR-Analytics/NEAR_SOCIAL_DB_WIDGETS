{"tx_hash": "SjvguvAjL3QgU4Tg4FGApSgwp3zJDht8JDvtNgSgQH9", "action_id_social": "5yZygR3SZBitv8PGspNqDRaWmKNwmbGtJsadsv9uQk11-1-widget", "block_id": 89258987, "block_timestamp": "2023-04-10 12:23:22.460", "signer_id": "efiz.near", "widget_name": "Everything.Template", "source_code": "const accountId = props.accountId || \"evrything.near\"; // which account's Types to use\nconst font = props.font || \"Times New Roman\"; // custom font for H1\nconst type = props.type || \"everything\"; // selected type\nconst text = props.text || type.toLowerCase(); // text for H1\nconst view = props.view || \"THINGS\";\nconst domain = props.domain || \"everything\"; // where to index data from\n\nconst H1 = styled.h1`\n  font-family: ${font}, Times, serif;\n  font-size: 4em;\n  line-height: 1.25;\n  font-weight: 400;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n`;\n\nconst Controller = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  margin-top: 160px;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 4px;\n  margin: 0 4px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nconst types = Social.keys(`${accountId}/type/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\ntypes = Object.entries(types[accountId].type ?? {});\n\nState.init({\n  title: text,\n  type: type,\n  selectedTab: view,\n});\n\nconst handleSelectType = (typeName) => {\n  if (typeName === \"everything\") {\n    State.update({\n      title: text,\n      type: \"everything\",\n      selectedTab: \"THINGS\",\n    });\n  } else {\n    State.update({\n      title: typeName.toLowerCase() + \"s\",\n      type: typeName,\n      selectedTab: \"THINGS\",\n    });\n  }\n};\n\nconst handleTypeDetails = () => {\n  State.update({\n    selectedTab: \"DETAILS\",\n  });\n};\n\nconst handleTypeCreate = () => {\n  State.update({\n    selectedTab: \"CREATE\",\n  });\n};\n\nconst renderView = () => {\n  switch (state.selectedTab) {\n    case \"DETAILS\":\n      return <div>Type details : ${state.type}</div>;\n    case \"CREATE\":\n      return (\n        <Widget\n          src={`${accountId}/widget/Everything.Create.${state.type}`}\n          props={{\n            type,\n          }}\n        />\n      );\n    case \"THINGS\":\n      return (\n        <Widget\n          src={\"evrything.near/widget/Everything.Things\"}\n          props={{\n            type:\n              state.type === \"everything\"\n                ? \"everything\"\n                : `${accountId}/type/${state.type}`,\n            domain,\n          }}\n        />\n      );\n  }\n};\n\nreturn (\n  <>\n    <Container>\n      <Controller>\n        <H1>{state.title}</H1>\n        <ButtonRow>\n          {state.type === \"everything\" ? (\n            <>\n              {types.map((it) => (\n                <Button onClick={() => handleSelectType(it[0])}>\n                  {it[0] + \"s\"}\n                </Button>\n              ))}\n              {context.accountId === accountId ? ( // currently thinking the button should only show if you are able to create types in domain\n                <a\n                  href={`/#/evrything.near/widget/Everything.Create.Type`} // this could get way more intense\n                  style={{ textDecoration: \"none\", color: \"inherit\" }}\n                >\n                  <Button>+</Button>\n                </a>\n              ) : null}\n            </>\n          ) : (\n            <>\n              <Button onClick={() => handleSelectType(\"everything\")}>\n                back\n              </Button>\n              <Button onClick={() => handleTypeDetails()}>\n                view type details\n              </Button>\n              <Button onClick={() => handleTypeCreate()}>create new</Button>\n            </>\n          )}\n        </ButtonRow>\n      </Controller>\n      {renderView()}\n    </Container>\n  </>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Everything.Template", "branch.draft.": NaN, "branch.draft.metadata": NaN}