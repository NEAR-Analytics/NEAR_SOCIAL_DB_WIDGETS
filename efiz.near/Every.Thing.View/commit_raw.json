{"tx_hash": "8mmtC4DUng3AaRx8bmvMiG1D7xXjfaxJoRoLKDtpA8gG", "action_id_social": "FeM7w7XxWUPVBstufjSG83yttgZBugC9rz4MpRs2SPSr-0-widget", "block_id": 92349487, "block_timestamp": "2023-05-21T05:03:36.931Z", "signer_id": "efiz.near", "widget_name": "Every.Thing.View", "source_code": "const path = props.path;\nconst blockHeight = props.blockHeight || \"final\";\n\n// GET THE THING //\nconst thing = JSON.parse(Social.get(path, blockHeight) || \"null\");\n\nif (thing === null) {\n  console.log(`thing not found at path: ${path}`);\n  return <></>;\n}\n\n// GET THE TYPE //\nconst type = JSON.parse(Social.get(thing.type, \"final\") || \"null\");\n\nif (type === null) {\n  return <p>type not found: {thing.type}</p>;\n}\n\n// GET THE OWNER //\nconst parts = path.split(\"/\");\nconst ownerId = parts[0];\n\nconst Container = styled.div`\n`;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  \n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: end;\n  width: 100%;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  margin-bottom: 5px;\n`;\n\nconst Key = styled.span`\n  font-weight: bold;\n  margin-right: 5px;\n`;\n\nconst Value = styled.span`\n  color: #888;\n`;\n\nconst Item = styled.div`\n  padding: 0;\n  .btn {\n    width: 100%;\n    border:0;\n    text-align: left;\n    &:hover,\n    &:focus {\n      background-color: #ECEDEE;\n      text-decoration: none;\n      outline: none;\n    }\n\n    i {\n      color: #7E868C;\n    }\n\n    span {\n      font-weight: 500;\n    }\n  }\n`;\n\nfunction composePost() {\n  return {\n    post: {\n      main: JSON.stringify({\n        path,\n        blockHeight,\n        type: thing.type,\n      }),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: thing.type, // because we want to filter by type\n        },\n      }),\n    },\n  };\n}\n\nState.init({ raw: false });\n\nfunction renderContent() {\n  if (state.showRaw) {\n    const text = `\n\\`\\`\\`json\n${JSON.stringify(thing, undefined, 2)}\n\\`\\`\\`\n`;\n    return <Markdown text={text} />;\n    // Would be cool to edit raw directly\n  } else {\n    if (state.showEdit) {\n      <>\n        {type?.widgets?.view && (\n          <Widget src={type.widgets.view} props={{ data: thing.data }} />\n        )}\n      </>;\n    } else {\n      return (\n        <>\n          {type?.widgets?.view && (\n            <Widget src={type.widgets.view} props={{ data: thing.data }} />\n          )}\n        </>\n      );\n    }\n  }\n}\n\nfunction toggleEdit() {\n  if (state.showEdit) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showEdit: false })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Cancel Edit</span>\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showEdit: true })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Edit</span>\n      </button>\n    );\n  }\n}\n\nfunction toggleRaw() {\n  if (state.showRaw) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showRaw: false })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Show Thing</span>\n      </button>\n    );\n  } else {\n    return (\n      <button className={`btn`} onClick={() => State.update({ showRaw: true })}>\n        <i className=\"bi bi-filetype-raw me-1\" />\n        <span>Raw</span>\n      </button>\n    );\n  }\n}\n\nconst renderIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"black\"\n      width=\"24px\"\n      height=\"24px\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"8\" />\n    </svg>\n  );\n};\n\nreturn (\n  <Container>\n    <Header>\n      <ButtonRow>\n        {ownerId === context.accountId && (\n          <Widget\n            src=\"efiz.near/widget/Common.Dropdown\"\n            props={{\n              renderIcon: renderIcon,\n              elements: [toggleEdit(), toggleRaw()],\n            }}\n          />\n        )}\n      </ButtonRow>\n    </Header>\n    <Content>{renderContent()}</Content>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Every.Thing.View", "__row_index": 8}