{"tx_hash": "GW6PYvdZjhDaVV5PWpaYSu3bgdWCoYmMmFAMNDRHVjTC", "action_id_social": "GjnqziaemNa8pQqEdrkP63dbV1vnCrXJw5KvLzPNv7iN-0-widget", "block_id": 92395994, "block_timestamp": "2023-05-21T19:48:00.210Z", "signer_id": "efiz.near", "widget_name": "Every.Thing.View", "source_code": "const path = props.path;\nconst blockHeight = props.blockHeight || \"final\";\n\n// Replace all in the VM? Thing keyword?\nlet parts = [];\ntry {\n  parts = path.split(\"/\");\n} catch (e) {\n  // TODO : Better error handling?\n  console.log(`path not valid.`);\n  return <></>;\n}\n\n// GET THE TYPE BASED ON THE PATH //\n// TODO: replace with Type.get(path) //\nlet type;\nif (parts.length === 1) {\n  type = \"account\";\n} else if (parts[1] === \"thing\") {\n  const thing = Social.get(path, blockHeight);\n  thing = JSON.parse(thing || \"null\");\n  type = thing.type || null;\n} else {\n  type = parts[1];\n}\n\nif (type === null) {\n  return <p>type not found: {thing.type}</p>;\n}\n\n// GET THE CREATOR ID //\n// ROOT ID? //\nconst creatorId = parts[0];\n\nconst Container = styled.div`\n  border: 1px solid #ccc;\n  width: fit-content;\n  height: fit-content;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  border-bottom: 1px solid #ccc;\n`;\n\nconst IconBox = styled.div`\n  font-family: \"Times New Roman\";\n  font-size: 2em;\n  line-height: 1.25;\n  font-weight: 400;\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  padding: 1px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  margin-bottom: 5px;\n`;\n\nconst Key = styled.span`\n  font-weight: bold;\n  margin-right: 5px;\n`;\n\nconst Value = styled.span`\n  color: #888;\n`;\n\nconst Item = styled.div`\n  padding: 0;\n  .btn {\n    width: 100%;\n    border: 0;\n    text-align: left;\n    &:hover,\n    &:focus {\n      background-color: #ecedee;\n      text-decoration: none;\n      outline: none;\n    }\n\n    i {\n      color: #7e868c;\n    }\n\n    span {\n      font-weight: 500;\n    }\n  }\n`;\n\nfunction composePost() {\n  return {\n    post: {\n      main: JSON.stringify({\n        path,\n        blockHeight,\n        type: type,\n      }),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: type, // because we want to filter by type\n        },\n      }),\n    },\n  };\n}\n\nState.init({ raw: false });\n\nfunction renderContent() {\n  if (state.showRaw) {\n    let thing;\n    if (type === \"settings\") {\n      // Need to normalize to accountId/settings/**\n      // Or fix the path that is given to the settings component.\n      // Every thing takes a path and a blockHeight\n      parts.pop();\n      parts.push(\"**\");\n      path = parts.join(\"/\");\n      thing = Social.get(path, blockHeight);\n    } else {\n      thing = JSON.parse(Social.get(path, blockHeight));\n    }\n    const text = `\\`\\`\\`json\\n${JSON.stringify(thing, undefined, 2)}\\n\\`\\`\\``;\n    return (\n      <div style={{ maxWidth: \"500px\" }}>\n        <Markdown text={text} />\n      </div>\n    );\n  } else {\n    if (type.split(\"/\").length > 1) {\n      const thingType = type;\n      const type = JSON.parse(Social.get(thingType, blockHeight) || \"null\");\n      if (type === null) {\n        console.log(\n          `edge case: thing ${path} had an invalid type: ${thingType}`\n        );\n      }\n      const widgetSrc = type?.widgets?.view; // Or settings\n      const thing = Social.get(path, blockHeight);\n      thing = JSON.parse(thing || \"null\"); // I already fetched thing when I got type\n      // what if thing data comes from somewhere else? auditable backend according to type, api keys are stored browser side\n      return <Widget src={widgetSrc} props={{ data: thing.data }} />;\n    } else {\n      switch (type) {\n        case \"widget\":\n          return <Widget src={path} />;\n        case \"account\":\n          return <p>account</p>;\n        case \"settings\":\n          return (\n            <Widget\n              src=\"efiz.near/widget/Every.Setting\"\n              props={{ path, blockHeight }}\n            />\n          );\n        case \"type\":\n          return <Widget src=\"efiz.near/widget/Every.Type\" />;\n        case \"profile\":\n          return (\n            <Widget\n              src={\"settings/every/profile\" || \"efiz.near/widget/Every.Profile\"}\n            />\n          );\n        case \"graph\":\n          return <p>graph</p>;\n        case \"post\":\n          return (\n            <Widget\n              src={\"settings/every/post\" || \"efiz.near/widget/Every.Post\"}\n            />\n          );\n        case \"thing\":\n          console.log(`edge case: ${path} had \"thing\" type`);\n          return <></>;\n        default:\n          // TODO: this doesn't work in current vm\n          return null;\n      }\n    }\n  }\n}\n\n// DROPDOWN //\n// where can I put this? I'd like a better editor\nfunction toggleEdit() {\n  if (state.showEdit) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showEdit: false })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Cancel Edit</span>\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showEdit: true })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Edit</span>\n      </button>\n    );\n  }\n}\n// These are two very similiar functions\nfunction toggleRaw() {\n  if (state.showRaw) {\n    return (\n      <button\n        className={`btn`}\n        onClick={() => State.update({ showRaw: false })}\n      >\n        <i className=\"bi bi-pencil me-1\" />\n        <span>Show Thing</span>\n      </button>\n    );\n  } else {\n    return (\n      <button className={`btn`} onClick={() => State.update({ showRaw: true })}>\n        <i className=\"bi bi-filetype-raw me-1\" />\n        <span>Raw</span>\n      </button>\n    );\n  }\n}\n// This should be a prop\nconst renderIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"black\"\n      width=\"24px\"\n      height=\"24px\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"8\" />\n    </svg>\n  );\n};\n\nreturn (\n  <Container>\n    <Header>\n      <ButtonRow>\n        {creatorId === context.accountId && (\n          <Widget\n            src=\"efiz.near/widget/Common.Dropdown\"\n            props={{\n              renderIcon: renderIcon,\n              elements: [toggleEdit(), toggleRaw()],\n            }}\n          />\n        )}\n      </ButtonRow>\n    </Header>\n    <Content>{renderContent()}</Content>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Every.Thing.View", "__row_index": 0}