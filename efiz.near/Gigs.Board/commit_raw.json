{"tx_hash": "9pt3VUPgg6evXC64SDakNuRnqZmGM5fmsy1yu4FALUvu", "action_id_social": "J3dfSecdhdyoSX26bE2tNCo86GUos6AJynV6FQphokqD-0-widget", "block_id": 91406407, "block_timestamp": "2023-05-08T20:59:01.350Z", "signer_id": "efiz.near", "widget_name": "Gigs.Board", "source_code": "/**\n * Serves a simple react app with react-trello, hooked up via near-social-bridge.\n *\n *\n * Props:\n *      gigsBoardUrl: app url for the bridged gigs app (default repository: https://github.com/near-everything/gigs-board)\n *      lanes: template for react-trello lanes, fully customizable, see https://github.com/rcdexta/react-trello/tree/master#usage\n *      onCardAdd: optional custom function called when a card is added\n *      onCardDelete: optional custom function called when a card is deleted\n *      loadCardData: optional custom function called to load card data\n *\n * Note: Customize how lanes look via lanes prop, customize how cards look via a repository fork\n */\nconst gigsBoardUrl = props.gigsBoardUrl || \"https://gigs-board.vercel.app\";\n\n// Define your template here:\nconst lanes = props.lanes || {\n  lanes: [\n    {\n      currentPage: 1,\n      id: \"proposed\",\n      style: {\n        border: 0,\n        backgroundColor: \"initial\",\n      },\n      title: \"Proposed\",\n      cards: [],\n    },\n    {\n      currentPage: 1,\n      id: \"in-progress\",\n      style: {\n        border: 0,\n        backgroundColor: \"initial\",\n      },\n      title: \"In Progress\",\n      disallowAddingCard: true,\n      cards: [],\n    },\n    {\n      currentPage: 1,\n      id: \"completed\",\n      style: {\n        border: 0,\n        backgroundColor: \"initial\",\n      },\n      title: \"Completed\",\n      disallowAddingCard: true,\n      cards: [],\n    },\n  ],\n};\n\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"add-card\":\n      handleAddCard(request, response);\n      break;\n    case \"delete-card\":\n      handleDeleteCard(request, response);\n      break;\n    case \"get-cards\":\n      handleGetCards(request, response, Utils);\n      break;\n  }\n};\n\n/**\n * Called when a new card is added: onCardAdd(card, laneId)\n * https://github.com/rcdexta/react-trello/tree/master#callbacks-and-handlers\n *\n * Pass a custom function via props.onCardAdd\n */\nconst handleAddCard = (request, response, Utils) => {\n  const { payload } = request;\n  if (payload) {\n    if (props.onCardAdd) {\n      props.onCardAdd(payload);\n    } else {\n      // add to everything, unassigned\n      console.log(payload);\n    }\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\n/**\n * Called when a card is deleted: onCardDelete(cardId, laneId)\n * https://github.com/rcdexta/react-trello/tree/master#callbacks-and-handlers\n *\n * Pass a custom function via props.onCardDelete\n */\nconst handleDeleteCard = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    if (props.onCardDelete) {\n      // TODO: What should happen when a card is deleted?\n      props.onCardDelete(request, response);\n    } else {\n      console.log(payload);\n    }\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\n/**\n * Called on load to populate data.\n *\n * Pass a custom function via props.loadCardData\n */\nconst handleGetCards = (request, response, Utils) => {\n  // We can put a data cache here\n  Utils.promisify(() => {\n    const addressForArticles = \"ndcGigArticle\";\n    const authorsWhitelist = props.writersWhiteList ?? [\n      \"neardigitalcollective.near\",\n      \"blaze.near\",\n      \"jlw.near\",\n      \"kazanderdad.near\",\n      \"joep.near\",\n      \"sarahkornfeld.near\",\n      \"yuensid.near\",\n    ];\n    const articleBlackList = [91092435, 91092174, 91051228, 91092223, 91051203];\n    const authorForWidget = \"neardigitalcollective.near\";\n    // ========== GET INDEX ARRAY FOR ARTICLES ==========\n    const postsIndex = Social.index(addressForArticles, \"main\", {\n      order: \"desc\",\n    });\n    // ========== GET ALL ARTICLES ==========\n    const resultArticles =\n      postsIndex &&\n      postsIndex\n        .reduce((acc, { accountId, blockHeight }) => {\n          const postData = Social.get(\n            `${accountId}/${addressForArticles}/main`,\n            blockHeight\n          );\n          const postDataWithBlockHeight = {\n            ...JSON.parse(postData),\n            blockHeight,\n          };\n          return [...acc, postDataWithBlockHeight];\n        }, [])\n        .filter((article) =>\n          authorsWhitelist.some((addr) => addr === article.author)\n        )\n        .filter((article) => !articleBlackList.includes(article.blockHeight));\n\n    // ========== FILTER DUPLICATES ==========\n    const filteredArticles =\n      resultArticles.length &&\n      resultArticles.reduce((acc, article) => {\n        if (!acc.some(({ articleId }) => articleId === article.articleId)) {\n          return [...acc, article];\n        } else {\n          return acc;\n        }\n      }, []);\n\n    const getDateLastEdit = (timestamp) => {\n      const date = new Date(Number(timestamp));\n      const dateString = {\n        date: date.toLocaleDateString(),\n        time: date.toLocaleTimeString(),\n      };\n      return dateString;\n    };\n\n    const convertData = (inputData) => {\n      const outputData = { cards: [] };\n      inputData.forEach((item) => {\n        const card = {\n          id: item.articleId,\n          title: item.articleId,\n          laneId: \"proposed\",\n          author: item.author,\n          blockHeight: item.blockHeight,\n          body: item.body,\n          lastEditor: item.lastEditor,\n          timeCreate: item.timeCreate,\n          timeLastEdit: item.timeLastEdit,\n          version: item.version,\n        };\n        outputData.cards.push(card);\n      });\n      return outputData;\n    };\n\n    const data = convertData(filteredArticles);\n\n    response(request).send({ data: data.cards });\n  });\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl: gigsBoardUrl,\n      path,\n      initialViewHeight: 600,\n      initialPayload: lanes,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Gigs.Board", "__row_index": 5}