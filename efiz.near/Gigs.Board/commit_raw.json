{"tx_hash": "s7QJqqWcN2GTtmpTkYmAfMwndtmnPVeHnj8vSvhoqRV", "action_id_social": "3r58D6vaSN2UJfJfaHaDEMMXjFV7PFJTgeD55beMuuyE-0-widget", "block_id": 91401641, "block_timestamp": "2023-05-08T19:28:10.348Z", "signer_id": "efiz.near", "widget_name": "Gigs.Board", "source_code": "const externalAppUrl = \"https://b54103fcb629.ngrok.app\";\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\nconst initialPayload = {};\n\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"add-card\":\n      handleAddCard(request, response);\n      break;\n    case \"delete-card\":\n      handleDeleteCard(request, response);\n      break;\n    case \"get-cards\":\n      handleGetCards(request, response, Utils);\n      break;\n  }\n};\n\nconst handleAddCard = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    console.log(payload);\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\nconst handleDeleteCard = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    console.log(payload);\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\nconst handleGetCards = (request, response, Utils) => {\n  // We can put a data cache here\n  Utils.promisify(() => {\n    const addressForArticles = \"ndcGigArticle\";\n    const authorsWhitelist = props.writersWhiteList ?? [\n      \"neardigitalcollective.near\",\n      \"blaze.near\",\n      \"jlw.near\",\n      \"kazanderdad.near\",\n      \"joep.near\",\n      \"sarahkornfeld.near\",\n      \"yuensid.near\",\n    ];\n    const articleBlackList = [91092435, 91092174, 91051228, 91092223, 91051203];\n    const authorForWidget = \"neardigitalcollective.near\";\n    // ========== GET INDEX ARRAY FOR ARTICLES ==========\n    const postsIndex = Social.index(addressForArticles, \"main\", {\n      order: \"desc\",\n    });\n    // ========== GET ALL ARTICLES ==========\n    const resultArticles =\n      postsIndex &&\n      postsIndex\n        .reduce((acc, { accountId, blockHeight }) => {\n          const postData = Social.get(\n            `${accountId}/${addressForArticles}/main`,\n            blockHeight\n          );\n          const postDataWithBlockHeight = {\n            ...JSON.parse(postData),\n            blockHeight,\n          };\n          return [...acc, postDataWithBlockHeight];\n        }, [])\n        .filter((article) =>\n          authorsWhitelist.some((addr) => addr === article.author)\n        )\n        .filter((article) => !articleBlackList.includes(article.blockHeight));\n\n    // ========== FILTER DUPLICATES ==========\n    const filteredArticles =\n      resultArticles.length &&\n      resultArticles.reduce((acc, article) => {\n        if (!acc.some(({ articleId }) => articleId === article.articleId)) {\n          return [...acc, article];\n        } else {\n          return acc;\n        }\n      }, []);\n\n    const getDateLastEdit = (timestamp) => {\n      const date = new Date(Number(timestamp));\n      const dateString = {\n        date: date.toLocaleDateString(),\n        time: date.toLocaleTimeString(),\n      };\n      return dateString;\n    };\n\n    const convertData = (inputData) => {\n      const outputData = { cards: [] };\n      inputData.forEach((item) => {\n        const card = {\n          id: item.articleId,\n          title: item.articleId,\n          laneId: \"proposed\",\n          author: item.author,\n          blockHeight: item.blockHeight,\n          body: item.body,\n          lastEditor: item.lastEditor,\n          timeCreate: item.timeCreate,\n          timeLastEdit: item.timeLastEdit,\n          version: item.version,\n        };\n        outputData.cards.push(card);\n      });\n      return outputData;\n    };\n\n    const data = convertData(filteredArticles);\n\n    response(request).send({ data: data.cards });\n  });\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Gigs.Board", "__row_index": 1}