{"tx_hash": "4PwCJpZNRGogBBCuHHYtNm9prCbPdtmtLYzHyYzmbxrJ", "action_id_social": "F6UbzJNfG5VxncJ8ikGdwUzS865uJXwZZjqYbRQYXZB7-0-widget", "block_id": 91408224, "block_timestamp": "2023-05-08T21:34:03.429Z", "signer_id": "efiz.near", "widget_name": "Gigs.Board", "source_code": "/**\n * Serves a simple react app with react-trello, hooked up via near-social-bridge.\n *\n *\n * Props:\n *      gigsBoardUrl: app url for the bridged gigs app (default repository: https://github.com/near-everything/gigs-board)\n *      lanes: template for react-trello lanes, fully customizable, see https://github.com/rcdexta/react-trello/tree/master#usage\n *      onCardAdd: optional custom function called when a card is added\n *      onCardDelete: optional custom function called when a card is deleted\n *      onCardMoveAcrossLanes: optional custom function called when a card is moves across lanes\n *      loadCards: optional custom function called to load cards\n *\n * Note: Customize how lanes look via lanes prop, customize how cards look via a repository fork\n */\nconst gigsBoardUrl = props.gigsBoardUrl || \"https://gigs-board.vercel.app\";\n\n// Define your template here:\nconst lanes = props.lanes || {\n  lanes: [\n    {\n      currentPage: 1,\n      id: \"proposed\",\n      style: {\n        border: 0,\n        backgroundColor: \"initial\",\n      },\n      title: \"Proposed\",\n      cards: [],\n    },\n    {\n      currentPage: 1,\n      id: \"in-progress\",\n      style: {\n        border: 0,\n        backgroundColor: \"initial\",\n      },\n      title: \"In Progress\",\n      disallowAddingCard: true,\n      cards: [],\n    },\n    {\n      currentPage: 1,\n      id: \"completed\",\n      style: {\n        border: 0,\n        backgroundColor: \"initial\",\n      },\n      title: \"Completed\",\n      disallowAddingCard: true,\n      cards: [],\n    },\n  ],\n};\n\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"add-card\":\n      handleAddCard(request, response);\n      break;\n    case \"delete-card\":\n      handleDeleteCard(request, response);\n      break;\n    case \"move-card-across-lanes\":\n      handleMoveCardAcrossLanes(request, response, Utils);\n      break;\n    case \"get-cards\":\n      handleGetCards(request, response, Utils);\n      break;\n  }\n};\n\n/**\n * Called when a new card is added: onCardAdd(card, laneId)\n * https://github.com/rcdexta/react-trello/tree/master#callbacks-and-handlers\n *\n * Pass a custom function via props.onCardAdd\n */\nconst handleAddCard = (request, response, Utils) => {\n  const { payload } = request;\n  if (payload) {\n    if (props.onCardAdd) {\n      props.onCardAdd(payload);\n    } else {\n      // add to everything, unassigned\n      console.log(payload);\n    }\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\n/**\n * Called when a card is deleted: onCardDelete(cardId, laneId)\n * https://github.com/rcdexta/react-trello/tree/master#callbacks-and-handlers\n *\n * Pass a custom function via props.onCardDelete\n */\nconst handleDeleteCard = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    if (props.onCardDelete) {\n      // TODO: What should happen when a card is deleted?\n      props.onCardDelete(payload);\n    } else {\n      console.log(payload);\n    }\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\n/**\n * Called when a card is moved across lanes: onCardMoveAcrossLanes(fromLaneId, toLaneId, cardId, index)\n * https://github.com/rcdexta/react-trello/tree/master#callbacks-and-handlers\n *\n * Pass a custom function via props.onCardMoveAcrossLanes\n */\nconst handleMoveCardAcrossLanes = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    Utils.promisify(() => {\n      if (props.onCardMoveAcrossLanes) {\n        const preventDefault = props.onCardMoveAcrossLanes(payload);\n        response(request).send({ success: { preventDefault } });\n      } else {\n        console.log(payload);\n      }\n    });\n  } else {\n    response(request).send({ error: \"payload not provided\" });\n  }\n};\n\n/**\n * Called on load to populate data.\n *\n * Pass a custom function via props.loadCards\n */\nconst handleGetCards = (request, response, Utils) => {\n  // We can put a data cache here\n  Utils.promisify(() => {\n    if (props.loadCards) {\n      const cards = props.loadCards();\n      response(request).send({ data: cards });\n    } else {\n      console.log(\"no function provided to load cards!\");\n      response(request).send({ data: [] });\n    }\n  });\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl: gigsBoardUrl,\n      path,\n      initialViewHeight: 600,\n      initialPayload: lanes,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/Gigs.Board", "__row_index": 7}