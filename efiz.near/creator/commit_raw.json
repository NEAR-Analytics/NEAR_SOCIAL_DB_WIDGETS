{"tx_hash": "6SpEWNavQVaD7z7drNuj2M7iTQooH5nerxYQ6mwgCSYe", "action_id_social": "HDZsjmMUeyttdLdgAcvNqwWJbp5AmJoows8bQ3brNCwh-0-widget", "block_id": 95178402, "block_timestamp": "2023-06-27T21:19:04.573Z", "signer_id": "efiz.near", "widget_name": "creator", "source_code": "const data = props.data || {};\nconst type = props.type || \"\";\nconst typeSrc = props.typeSrc || \"every.near\";\nconst buildEdges = props.buildEdges;\n\nif (type !== \"\") {\n  const parts = type.split(\"/\");\n  typeSrc = parts[0];\n}\n\nconst Container = styled.div`\n    display: flex;\n  `;\n\nconst SidePanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  background-color: #f2f2f2;\n  width: auto;\n  z-index: 50;\n`;\n\nconst MainContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    padding: 20px;\n  `;\n\nconst Header = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 20px;\n  `;\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-self: flex-start;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  `;\n\nconst LeftPanelItem = styled.div`\n    padding: 8px;\n    background-color: #ccc;\n    color: white;\n    border-radius: 4px;\n  `;\n\nconst Select = styled.select`\n  `;\n\nconst Label = styled.label`\n`;\n\nconst Input = styled.input`\n  `;\n\nconst ModalOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n`;\n\nconst ModalContent = styled.div`\n  background-color: white;\n  padding: 20px;\n  border-radius: 4px;\n`;\n\nconst ModalTitle = styled.h3`\n  margin-bottom: 10px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nState.init({\n  data,\n  isModalOpen: false,\n  typeSrc,\n  selectedType: type,\n  view: \"CREATE_THING\",\n});\n\nconst handleOnChange = (value) => {\n  State.update({ data: { ...state.data, ...value } });\n};\n\nconst handleApply = () => {\n  State.update({\n    config: state.data,\n    template: state.templateVal,\n  });\n  // set the props for the main content\n};\n\nconst handleSave = () => {\n  // create the thing\n  State.update({ isModalOpen: false });\n  const thingId = state.thingId || Math.random();\n  let edges = [];\n  if (buildEdges) {\n    const newPath = `${context.accountId}/thing/${thingId}`;\n    edges = buildEdges(newPath, state.selectedType);\n  }\n  console.log(JSON.stringify(edges));\n  const data = {\n    thing: {\n      [thingId]: JSON.stringify({\n        data: state.config,\n        type: state.selectedType,\n      }),\n    },\n    index: {\n      thing: JSON.stringify({\n        key: thingId,\n        value: {\n          type: state.selectedType,\n        },\n      }),\n    },\n  };\n  if (edges.length) {\n    data.index.edges = JSON.stringify(edges);\n  }\n  Social.set(data, {\n    onCommit: () => {\n      State.update({\n        data: {},\n        isModalOpen: false,\n        config: undefined,\n      });\n    },\n    onCancel: () => {\n      State.update({\n        isModalOpen: false,\n      });\n    },\n  });\n};\n\nlet availableTypes = [];\nconst types = Social.get(`${state.typeSrc}/type/**`, \"final\");\nif (types !== null) {\n  availableTypes =\n    Object.keys(types)?.map((it) => `${state.typeSrc}/type/${it}`) || [];\n}\n\nconst handleTypeChange = (e) => {\n  State.update({ selectedType: e.target.value, templateVal: \"\", data: {} });\n};\n\nreturn (\n  <Container>\n    <SidePanel>\n      <Row style={{ gap: \"8px\" }}>\n        <Button onClick={() => State.update({ view: \"CREATE_THING\" })}>\n          thing\n        </Button>\n        <Button onClick={() => State.update({ view: \"CREATE_TYPE\" })}>\n          type\n        </Button>\n      </Row>\n      {state.view === \"CREATE_THING\" ? (\n        <>\n          <Label>Type Source:</Label>\n          <Row>\n            <Input\n              type=\"text\"\n              value={state.newTypeSrc}\n              onChange={(e) => State.update({ newTypeSrc: e.target.value })}\n              placeholder={\"accountId\"}\n            />\n            <Button onClick={() => State.update({ typeSrc: state.newTypeSrc })}>\n              apply\n            </Button>\n          </Row>\n          <Label>Type</Label>\n          <Select value={state.selectedType} onChange={handleTypeChange}>\n            <option value=\"\">Select a type</option>\n            {availableTypes?.map((it) => (\n              <option value={it} key={it}>\n                {it}\n              </option>\n            ))}\n          </Select>\n          <Label>Template</Label>\n          <Input\n            value={state.templateVal}\n            onChange={(e) => State.update({ templateVal: e.target.value })}\n          />\n          <Widget\n            src=\"efiz.near/widget/create\"\n            props={{\n              item: {\n                type: state.selectedType,\n                value: state.data,\n              },\n              onChange: handleOnChange,\n            }}\n          />\n          <Footer>\n            <Button onClick={() => handleApply()}>apply</Button>\n            <Button\n              onClick={() => State.update({ isModalOpen: true })}\n              disabled={state.config === undefined}\n            >\n              save\n            </Button>\n          </Footer>\n        </>\n      ) : (\n        <>\n          <Widget src=\"efiz.near/widget/every.type.create\" />\n        </>\n      )}\n    </SidePanel>\n    <MainContent>\n      <Header></Header>\n      {state.template && (\n        <Widget src={state.template} props={{ data: state.config }} />\n      )}\n    </MainContent>\n    {state.isModalOpen && (\n      <ModalOverlay>\n        <ModalContent>\n          <ModalTitle>Save Confirmation</ModalTitle>\n          <p>Are you sure you want to save?</p>\n          <p>{JSON.stringify(state.config)}</p>\n          <p>{JSON.stringify(state.template)}</p>\n          <>\n            <Input\n              onChange={(e) => State.update({ thingId: e.target.value })}\n              placeholder=\"thing id\"\n            />\n          </>\n          <Button onClick={handleSave}>Save</Button>\n          <Button onClick={() => State.update({ isModalOpen: false })}>\n            Cancel\n          </Button>\n        </ModalContent>\n      </ModalOverlay>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/efiz.near/widget/creator", "__row_index": 20}