{"tx_hash": "H7BbosYmCP88mAkp1ZMBtjL46XgMJokCvXcqgwyprPgE", "action_id_social": "8MF6948AjJ9s8Q7e2qRFkyR98tqKPKBaRYk25gbTgCos-1-widget", "block_id": 86543062, "block_timestamp": "2023-03-04 14:12:00.016", "signer_id": "c1e568f7060af01a3b47f29f5ab075e773aa41302714cb9bc6f539fff374a7ff", "widget_name": "teal-test-import", "source_code": null, "metadata": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c1e568f7060af01a3b47f29f5ab075e773aa41302714cb9bc6f539fff374a7ff/widget/teal-test-import", "branch.draft": NaN, "branch.draft.": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nState.init({\n  propsLabel: props.label,\n  label: props.label,\n});\n\n// When rerendered with different props, State will be preserved, so we need to update the state when we detect that the props have changed.\nif (props.label !== state.propsLabel) {\n  State.update({\n    propsLabel: props.label,\n    label: props.label,\n  });\n}\n\nconst onSearch = (label) => {\n  State.update({ label });\n};\n\nreturn widget(\"components.layout.Page\", {\n  navbarChildren: widget(\"components.layout.Search\", {\n    searchQuery: { label: state.label },\n    onSearch,\n  }),\n  children: widget(\"components.posts.List\", {\n    recency: props.recency,\n    label: state.label,\n  }),\n});\n"}