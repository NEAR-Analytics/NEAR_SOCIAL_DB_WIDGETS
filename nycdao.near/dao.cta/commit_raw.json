{"tx_hash": "DF2d5ozrtcpQUsK8icQn6YdifEHsqYCVgfjZppvvuvg5", "action_id_social": "CzbzYeGbiXTquS5dcEiVoxwq58S2aDUeF4LCQQLJKHaX-0-widget", "block_id": 94252672, "block_timestamp": "2023-06-15T17:04:53.360Z", "signer_id": "nycdao.near", "widget_name": "dao.cta", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"liberty.sputnik-dao.near\";\n\nState.init({\n  isNftHolder: false,\n  isFollower: false,\n  isMember: false,\n});\n\n// Check if the user has an NFT\nconst nftData = Near.view(\"mint.sharddog.near\", \"nft_supply_for_owner\", {\n  account_id: accountId,\n});\n\nif (nftData > 0) {\n  State.update({ isNftHolder: true });\n}\n\n// Get DAO followers\nconst followEdge = Social.keys(\n  `${accountId}/graph/follow/${daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\nif (followEdge === null) {\n  return \"Loading...\";\n}\n\nconst follow = followEdge && Object.keys(followEdge).length;\n\n// Check if the user is a follower\nif (follow > 0) {\n  State.update({ isFollower: true });\n}\n\n// Get DAO policy data\nconst policy = Near.view(daoId, \"get_policy\");\n\nif (policy === null) {\n  return \"\";\n}\n\nconst groups = policy.roles\n  .filter((role) => role.name === \"community\")\n  .map((role) => role.kind.Group);\n\n// Check if the user is a member of a group\nconst isMember = groups.some((group) => group.includes(accountId));\nState.update({ isMember });\n\n// Function call used for membership requests\nconst handleJoin = () => {\n  const deposit = policy.proposal_bond;\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"potential member\",\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: \"community\",\n            },\n          },\n        },\n      },\n      gas: 300000000000000,\n      deposit: deposit,\n    },\n  ]);\n};\n\nconst Text = styled.p`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-size: ${(p) => p.size ?? \"18px\"};\n  line-height: ${(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${(p) => p.weight ?? \"400\"};\n  color: ${(p) => p.color ?? \"#000\"};\n  margin-bottom: 8px;\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n\n  @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n  }\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: \"nowrap\";\n\n  @media (max-width: 998px) {\n    flex-direction: column;\n    gap: var(--section-gap);\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  max-width: 1080px;\n  margin: 0 auto;\n  gap: var(--section-gap);\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: var(--section-gap) 24px;\n`;\n\nreturn (\n  <Container>\n    {state.isFollower ? (\n      <Flex>\n        <Text\n          size=\"18px\"\n          weight=\"600\"\n          style={{ textTransform: \"uppercase\", letterSpacing: \"0.17em\" }}\n        >\n          Your Adventure Has Begun\n        </Text>\n        <FlexContainer>\n          {state.isNftHolder ? (\n            <Widget\n              src=\"near/widget/DIG.Button\"\n              props={{\n                href: \"#/nycdao.near/widget/demo\",\n                label: \"Demo Day Voting\",\n                variant: \"outline-secondary\",\n                size: \"large\",\n              }}\n            />\n          ) : (\n            <button className=\"btn btn-success\" onClick={handleJoin}>\n              Join Community\n            </button>\n          )}\n        </FlexContainer>\n      </Flex>\n    ) : (\n      <Flex>\n        <Text\n          size=\"18px\"\n          weight=\"600\"\n          style={{ textTransform: \"uppercase\", letterSpacing: \"0.17em\" }}\n        >\n          Begin a New Adventure\n        </Text>\n        <FlexContainer>\n          {follow}\n          {nftData}\n\n          <Widget\n            src=\"mob.near/widget/FollowButton\"\n            props={{\n              accountId,\n            }}\n          />\n        </FlexContainer>\n      </Flex>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nycdao.near/widget/dao.cta", "__row_index": 8}