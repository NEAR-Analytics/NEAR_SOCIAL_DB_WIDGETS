{"tx_hash": "DMtRpc96MRz3NmzBDwGPz6dcjckCs3WdA99nmvDj6pLv", "action_id_social": "A1EVTTP1C6XuzKf92fr38rdqaLquqNCkgGmofjdexfVE-0-widget", "block_id": 83772597, "block_timestamp": "2023-01-25 16:10:18.867", "signer_id": "events_v1.near", "widget_name": "events_app___form", "source_code": "const accountId = context.accountId;\nif (!accountId) {\n  return 'Please connect your NEAR wallet to create an activity';\n}\n\nconst onSave = props.onSave;\nif (onSave === undefined || onSave === null) {\n  return 'props.onSave is required';\n}\n\nconst model = props.model;\nconst buttonText = props.buttonText || 'Save';\n\nconst MIN_LENGTH_NAME = 4;\nconst MIN_LENGTH_DESCRIPTION = 10;\nconst MILLISECONDS_IN_DAY = 86400000;\nconst DAYS_IN_WEEK = 7;\n\nconst TODAY =\n  Math.floor((Date.now() + 0) / MILLISECONDS_IN_DAY) * MILLISECONDS_IN_DAY;\nconst TOMORROW = TODAY + MILLISECONDS_IN_DAY;\nconst ONE_WEEK = DAYS_IN_WEEK * MILLISECONDS_IN_DAY;\n\nconst DEFAULT_STATE = {\n  name: '',\n  type: '',\n  category: '',\n  status: '',\n  start_date: new Date(TODAY + ONE_WEEK),\n  end_date: new Date(TOMORROW + ONE_WEEK),\n  location: '',\n  images: [\n    {\n      url: '',\n      type: 'tile',\n    },\n    {\n      url: '',\n      type: 'banner',\n    },\n  ],\n  links: [\n    {\n      text: 'Register here',\n      url: '',\n      type: 'register',\n    },\n    {\n      text: 'Get tickets',\n      url: '',\n      type: 'tickets',\n    },\n    {\n      text: 'Watch live',\n      url: '',\n      type: 'join_stream',\n    },\n  ],\n  description: '',\n\n  errors: {},\n};\nif (model) {\n  State.init({\n    ...model,\n    images: model.images || DEFAULT_STATE.images,\n    links: model.links || DEFAULT_STATE.links,\n  });\n} else {\n  State.init(DEFAULT_STATE);\n}\nif (!state) {\n  return <div>Loading...</div>;\n}\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 0.5rem;\n  margin: 0;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n  background-color: #ccc;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 0.5rem;\n  margin: 0;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n`;\n\nconst Label = styled.label`\n  width: 100%;\n  color: #666;\n  padding: 0.5rem 0;\n  margin: 0.5rem 0 0 0;\n  box-sizing: border-box;\n`;\n\nconst ErrorMessage = styled.div`\n  color: red;\n  font-size: 0.8rem;\n  margin: 0;\n`;\n\nconst EventStatus = [\n  { value: 'draft', label: 'Draft' },\n  { value: 'published', label: 'Published' },\n  { value: 'cancelled', label: 'Cancelled' },\n];\n\nconst EventTypes = [\n  { value: 'virtual', label: 'Online' },\n  { value: 'irl', label: 'In Person' },\n  { value: 'mixed', label: 'Both' },\n];\n\nconst ImageTypes = [\n  { value: 'tile', label: 'Tile' },\n  { value: 'banner', label: 'Banner' },\n];\n\nconst LinkTypes = [\n  { value: 'register', label: 'Register' },\n  { value: 'tickets', label: 'Tickets' },\n  { value: 'join_stream', label: 'Stream URL' },\n];\n\nfunction addError(key, message) {\n  console.log('addError', key, message);\n  State.update({ errors: { ...state.errors, [key]: message } });\n}\n\nfunction clearError(key) {\n  State.update({ errors: { ...state.errors, [key]: null } });\n}\n\nfunction getError(key) {\n  return state.errors[key];\n}\n\nfunction assertCondition(valid, condition, key, message) {\n  if (!condition) {\n    addError(key, message);\n    return false;\n  }\n  clearError(key);\n  return valid;\n}\n\nfunction sanitize(data) {\n  const {\n    name,\n    type,\n    category,\n    status,\n    start_date,\n    end_date,\n    location,\n    image,\n    links,\n    description,\n  } = data;\n  return {\n    name,\n    type,\n    category,\n    status,\n    start_date: new Date(start_date).getTime(),\n    end_date: new Date(end_date).getTime(),\n    location,\n    image,\n    links,\n    description,\n  };\n}\n\nfunction validate(data) {\n  let valid = true;\n\n  const { name, description } = data;\n\n  valid = assertCondition(\n    valid,\n    name.length >= MIN_LENGTH_NAME,\n    'name',\n    `Name must be at least ${MIN_LENGTH_NAME} characters long`\n  );\n\n  valid = assertCondition(\n    valid,\n    description.length >= MIN_LENGTH_DESCRIPTION,\n    'description',\n    `Description must be at least ${MIN_LENGTH_DESCRIPTION} characters long`\n  );\n\n  return valid;\n}\n\nfunction sanitizeValidateAndCall(data) {\n  const sanitized = sanitize(data);\n  const valid = validate(sanitized);\n  if (valid && onSave) {\n    onSave(sanitized);\n  }\n}\n\nfunction sanitizeAndValidate(data) {\n  const sanitized = sanitize(data);\n  return validate(sanitized);\n}\n\nconst updateState = (event, key) => {\n  State.update({ [key]: event.target.value });\n  sanitizeAndValidate({ ...state, [key]: event.target.value });\n};\n\nreturn (\n  <div\n    style={{\n      width: '100%',\n      backgroundColor: '#fff',\n      padding: '1rem',\n    }}\n  >\n    <div className=\"mt-3\">\n      <Label>Name</Label>\n      <input\n        type=\"text\"\n        placeholder=\"Event Name\"\n        value={state.name || ''}\n        onChange={(event) => {\n          updateState(event, 'name');\n        }}\n      />\n    </div>\n    <ErrorMessage>{getError('name')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Description</Label>\n      <textarea\n        className=\"w-100\"\n        placeholder=\"Event Description\"\n        value={state.description}\n        onChange={(event) => {\n          updateState(event, 'description');\n        }}\n        rows={3}\n      />\n    </div>\n    <ErrorMessage>{getError('description')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Type</Label>\n      <Select\n        value={state.type}\n        onChange={(event) => {\n          updateState(event, 'type');\n        }}\n      >\n        {EventTypes.map((type) => (\n          <option key={type.value} value={type.value}>\n            {type.label}\n          </option>\n        ))}\n      </Select>\n    </div>\n    <ErrorMessage>{getError('type')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Category</Label>\n      <input\n        type=\"text\"\n        placeholder=\"Event Category\"\n        value={state.category}\n        onChange={(event) => {\n          updateState(event, 'category');\n        }}\n      />\n    </div>\n    <ErrorMessage>{getError('category')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Status</Label>\n      <Select\n        value={state.status}\n        onChange={(event) => {\n          updateState(event, 'status');\n        }}\n      >\n        {EventStatus.map((status) => (\n          <option key={status.value} value={status.value}>\n            {status.label}\n          </option>\n        ))}\n      </Select>\n    </div>\n    <ErrorMessage>{getError('status')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Start Date</Label>\n      <input\n        type=\"date\"\n        value={state.start_date}\n        onChange={(event) => {\n          updateState(event, 'start_date');\n        }}\n      />\n    </div>\n    <ErrorMessage>{getError('start_date')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>End Date</Label>\n      <input\n        type=\"date\"\n        value={state.end_date}\n        onChange={(event) => {\n          updateState(event, 'end_date');\n        }}\n      />\n    </div>\n    <ErrorMessage>{getError('end_date')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Location</Label>\n      <textarea\n        className=\"w-100\"\n        placeholder=\"Event Location\"\n        value={state.location}\n        onChange={(event) => {\n          updateState(event, 'location');\n        }}\n        rows={3}\n      />\n    </div>\n    <ErrorMessage>{getError('location')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Images</Label>\n      {state.images.map((image, index) => (\n        <div key={index} className=\"mb-4 d-flex\">\n          <Select\n            style={{ width: '100px' }}\n            value={image.type}\n            onChange={(event) => {\n              const images = [...state.images];\n              images[index].type = event.target.value;\n              State.update({ images });\n              sanitizeAndValidate({ ...state, images });\n            }}\n          >\n            {ImageTypes.map((type) => (\n              <option key={type.value} value={type.value}>\n                {type.label}\n              </option>\n            ))}\n          </Select>\n\n          <div className=\"ms-2\">\n            <IpfsImageUpload\n              image={image.url}\n              onChange={(event) => {\n                const images = [...state.images];\n                images[index].url = event.target.value;\n                State.update({ images });\n                sanitizeAndValidate({ ...state, images });\n              }}\n            />\n          </div>\n\n          <button\n            className=\"ms-2 btn btn-danger\"\n            onClick={() => {\n              const images = [...state.images];\n              images.splice(index, 1);\n              State.update({ images });\n              sanitizeAndValidate({ ...state, images });\n            }}\n          >\n            Remove\n          </button>\n        </div>\n      ))}\n\n      <button\n        className=\"btn btn-secondary\"\n        onClick={() => {\n          const images = [...state.images];\n          images.push({ type: 'tile', image: '' });\n          State.update({ images });\n          sanitizeAndValidate({ ...state, images });\n        }}\n      >\n        Add Image\n      </button>\n    </div>\n    <ErrorMessage>{getError('images')}</ErrorMessage>\n\n    <div className=\"mt-3\">\n      <Label>Links</Label>\n      {state.links.map((link, index) => (\n        <div key={index} className=\"mb-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Link URL\"\n            className=\"mb-2\"\n            style={{\n              width: '100%',\n              padding: '0.5rem',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              boxSizing: 'border-box',\n            }}\n            value={link.url}\n            onChange={(event) => {\n              const links = [...state.links];\n              links[index].url = event.target.value;\n              State.update({ links });\n              sanitizeAndValidate({ ...state, links });\n            }}\n          />\n\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Link Text\"\n              style={{\n                width: '200px',\n                display: 'inline-block',\n                boxSizing: 'border-box',\n              }}\n              value={link.text}\n              onChange={(event) => {\n                const links = [...state.links];\n                links[index].text = event.target.value;\n                State.update({ links });\n                sanitizeAndValidate({ ...state, links });\n              }}\n            />\n\n            <Select\n              className=\"ms-2\"\n              style={{ width: '100px' }}\n              value={link.type}\n              onChange={(event) => {\n                const links = [...state.links];\n                links[index].type = event.target.value;\n                State.update({ links });\n                sanitizeAndValidate({ ...state, links });\n              }}\n            >\n              {LinkTypes.map((type) => (\n                <option key={type.value} value={type.value}>\n                  {type.label}\n                </option>\n              ))}\n            </Select>\n\n            <button\n              className=\"ms-2 btn btn-danger\"\n              onClick={() => {\n                const links = [...state.links];\n                links.splice(index, 1);\n                State.update({ links });\n                sanitizeAndValidate({ ...state, links });\n              }}\n            >\n              Remove\n            </button>\n          </div>\n        </div>\n      ))}\n      <button\n        className=\"btn btn-secondary\"\n        onClick={() => {\n          const links = [...state.links];\n          links.push('');\n          State.update({ links });\n          sanitizeAndValidate({ ...state, links });\n        }}\n      >\n        Add Link\n      </button>\n    </div>\n    <ErrorMessage>{getError('links')}</ErrorMessage>\n\n    <br />\n    <Button\n      className=\"mt-3\"\n      onClick={() => {\n        sanitizeValidateAndCall(state);\n      }}\n    >\n      {buttonText}\n    </Button>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events_v1.near/widget/events_app___form"}