{"tx_hash": "5tBeE5GVPqN3ZmtPF673DnmQFUTFiFobU1cuBFiiW1ca", "action_id_social": "An6e4Z3uLj8crPyd38z3aHFL9qJVqMxCN8Deje7YTCch-0-widget", "block_id": 86379586, "block_timestamp": "2023-03-02 09:40:45.884", "signer_id": "onboarder.near", "widget_name": "SputnikDAOProfileSearchStringMatch", "source_code": "const profiles =\n  Social.get([\"*/profile/name\", \"*/profile/tags/*\"], \"final\") || {};\n\nconst profilesWithTags = { ...profiles };\nObject.entries(profiles).forEach(([key, valueObj]) => {\n  if (!valueObj?.profile?.hasOwnProperty(\"tags\")) {\n    delete profilesWithTags[key];\n  }\n});\nconst taggedProfiles = Social.keys(`*/profile/tags/*`, \"final\") || {};\n\n// console.log(\"private\", taggedProfiles);\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._-]/)\n    .filter((s) => !!s.trim());\n  const matchedAccountIds = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 20;\n  const MaxScore = MaxSingleScore * 3;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.max(1, 20 - pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(profiles).forEach(([accountId, data]) => {\n    // const accountIdScore = computeScore(accountId);\n    const accountIdScore = computeScore(accountId);\n    // console.log(type(accountID));\n\n    const name = data.profile.name || \"\";\n    const tags = Object.keys(data.profile.tags || {}).slice(0, 10);\n    // const nameScore = computeScore(name);\n    const tagsScore = Math.min(\n      20,\n      tags.map(computeScore).reduce((s, v) => s + v, 0)\n    );\n    let score;\n    // score = tagsScore;     // score = nameScore;\n    score = accountIdScore;\n\n    const finalScore = score / MaxScore;\n    if (finalScore > 0) {\n      matchedAccountIds.push({ score: finalScore, accountId, name, tags });\n    }\n  });\n\n  matchedAccountIds.sort((a, b) => b.score - a.score);\n  const result = matchedAccountIds.slice(0, limit);\n\n  State.update({\n    term,\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, result });\n  }\n};\n\nlet hardCodeSearch = \"sputnik-dao.near\";\ncomputeResults(hardCodeSearch);\n\nreturn (\n  <>{props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}</>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/onboarder.near/widget/SputnikDAOProfileSearchStringMatch"}