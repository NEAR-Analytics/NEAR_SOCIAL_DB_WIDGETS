{"tx_hash": "ESxZdjxA82efzzbvRyip5umykLqZdodp8VfQki9FxKhg", "action_id_social": "2FQqpUNN6FhLLKeUSSHMDg31EFJoxXUhSMzH9a8KTZfF-0-widget", "block_id": 86612696, "block_timestamp": "2023-03-05 12:38:19.321", "signer_id": "onboarder.near", "widget_name": "polygon-erc20-sender", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender)\n  return <Web3Connect connectLabel=\"Connect with Web3 to Polygon Mainnet\" />;\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\ninitState({\n  token: \"\",\n  tokenDecimals: \"\",\n  sendTo: \"\",\n  sender,\n  senderBalance: \"0\",\n  receiverBalance: \"0\",\n  receiver: \"\",\n  amount: \"1\",\n});\nconst ethTokens = {\n  \"Select Token\": \"\",\n  USDT: \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n  DAI: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  USDC: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n  MKR: \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\",\n};\n// polygon tokens\nconst tokens = {\n  \"Select Token\": \"\",\n  USDT: \"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\",\n  DAI: \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\n  USDC: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n  QUICK: \"0x831753DD7087CaC61aB5644b308642cc1c33Dc13\",\n  AAVE: \"0xD6DF932A45C0f255f85145f286eA0b292B21C90B\",\n  LINK: \"0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39\",\n  WETH: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n  WMATIC: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n  WBTC: \"0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6\",\n  UNI: \"0xb33eaad8d922b1083446dc23f610c2567fb5180f\",\n  SUSHI: \"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\",\n  GHST: \"0x385eeac5cb85a38a9a07a70c73e0a3271cfb54a7\",\n  TEL: \"0xdf7837de1f2fa4631d716cf2502f8b230f1dcc32\",\n  BAL: \"0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3\",\n  BUSD: \"0xdab529f40e671a1d4bf91361c21bf9f0c9712ab7\",\n  DG: \"0xef938b6da8576a896f6E0321ef80996F4890f9c4\",\n  MANA: \"0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4\",\n};\n\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option value={tokens[token]}>{token}</option>\n));\n\nconst setSendTo = (sendTo) => {\n  const receiver = Ethers.resolveName(sendTo);\n  State.update({ sendTo, receiver: receiver ?? \"\" });\n  refreshBalances();\n};\n\nconst setToken = (token) => {\n  State.update({ token });\n  getTokenDecimals();\n};\n\nconst getTokenBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(state.tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getTokenDecimals = () => {\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n      refreshBalances();\n    });\n};\n\nconst refreshBalances = () => {\n  getTokenBalance(state.sender).then((value) => {\n    State.update({ senderBalance: value });\n  });\n\n  getTokenBalance(state.receiver).then((value) => {\n    State.update({ receiverBalance: value });\n  });\n};\n\nconst sendTokens = () => {\n  const erc20 = new ethers.Contract(\n    state.token,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(state.amount, state.tokenDecimals);\n\n  erc20.transfer(state.receiver, amount);\n\n  console.log(\"transactionHash is \" + transactionHash);\n};\n\nreturn (\n  <>\n    <h3>\ud83d\udcb8 Send ERC-20 tokens</h3>\n    <div class=\"row\">\n      <div class=\"mb-3 col-lg-6\">\n        <label for=\"selectToken\">Select token</label>\n        <select\n          class=\"form-select\"\n          id=\"selectToken\"\n          onChange={(e) => {\n            setToken(e.target.value);\n          }}\n        >\n          {tokensMenuItems}\n        </select>\n      </div>\n      <div class=\"mb-3 col-lg-6\">\n        <label for=\"amount\" class=\"form-label\">\n          Enter the amount\n        </label>\n        <input\n          value={state.amount}\n          class=\"form-control\"\n          id=\"amount\"\n          placeholder=\"\"\n          onChange={(e) => State.update({ amount: e.target.value })}\n        />\n      </div>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"send-to\" class=\"form-label\">\n        Recepient address\n      </label>\n      <input\n        value={state.sendTo}\n        class=\"form-control\"\n        id=\"send-to\"\n        placeholder=\"vitalik.eth\"\n        onChange={(e) => setSendTo(e.target.value)}\n      />\n      {state.receiver && (\n        <div class=\"text-secondary mt-3\">Resolved to {state.receiver}</div>\n      )}\n      {state.receiverBalance != \"0\" && (\n        <div class=\"text-secondary mt-3\">\n          Receiver's balance: {state.receiverBalance}\n        </div>\n      )}\n\n      {state.senderBalance != \"0\" && (\n        <div class=\"text-secondary mt-3\">\n          Sender's balance: {state.senderBalance}\n        </div>\n      )}\n    </div>\n\n    <div class=\"mb-3\">\n      <button onClick={sendTokens}>Send</button>\n    </div>\n  </>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/onboarder.near/widget/polygon-erc20-sender", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.defi": NaN, "metadata.tags.erc20": NaN, "metadata.tags.ethdenver2023": NaN, "metadata.tags.matic": NaN, "metadata.tags.polygon": NaN, "metadata.tags.token-send": NaN, "metadata": NaN, "metadata.tags.onboard": NaN, "metadata.tags.onboard-dao": NaN, "metadata.tags.onboarddao": NaN}