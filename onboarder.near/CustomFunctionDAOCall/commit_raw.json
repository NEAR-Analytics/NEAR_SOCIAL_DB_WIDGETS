{"tx_hash": "FjLMhZWBCPRwXiSPssM4iVs4zZRsP2tGgL4qQv3AqHEg", "action_id_social": "3Mjnuw8no6QFRo6rPfWnZREaQn3WJdRyY2bZEkqkLAw1-0-widget", "block_id": 86565062, "block_timestamp": "2023-03-04 21:24:03.870", "signer_id": "onboarder.near", "widget_name": "CustomFunctionDAOCall", "source_code": null, "widget_modules_used": null, "widget_url": "https://near.social/#/onboarder.near/widget/CustomFunctionDAOCall", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.dao": NaN, "metadata.tags.marketplace": NaN, "metadata.tags.mintbase": NaN, "metadata.tags.nft": NaN, "metadata.tags.nft-marketplace": NaN, "metadata.tags.paras": NaN, "branch.draft": NaN, "metadata": NaN, "branch.draft.": "const accountId = props.accountId ?? context.accountId;\n// error check for DAO ends with .sputnik-dao.near\nconst default_dao = \"onboarddao.sputnik-dao.near\";\nconst marketplace_default = \"marketplace.paras.near\";\nif (!accountId) {\n  return \"Please connect your NEAR wallet :)\";\n} // should add a shard dog link here\n\nconst onChangeGas = (gas) => {\n  State.update({\n    gas,\n  });\n};\nState.init({\n  dao: default_dao,\n  marketplace_address: marketplace_default,\n  ft_token: \"mear\",\n  price: 100000000000000000000000,\n  valid_dao: true,\n});\n\nconst onChangeDAO = (dao) => {\n  State.update({\n    dao,\n  });\n  onChangeValidDAO(dao);\n};\n\nconst onChangeValidDAO = (dao_address) => {\n  const valid_dao = dao_address.endsWith(\".sputnik-dao.near\");\n  State.update({\n    valid_dao,\n  });\n};\n\nconst onChangePrice = (price) => {\n  State.price({\n    price,\n  });\n};\n// is this different than price\nconst onChangeDeposit = (deposit) => {\n  State.update({\n    deposit,\n  });\n};\n\nconst onChangeMarketplace = (marketplace_address) => {\n  State.marketplace_address({\n    marketplace_address,\n  });\n};\n\nconst onChangeDescription = (description) => {\n  State.update({\n    description,\n  });\n};\n\n// const function_call_args;\n\n//  function_call_args = json.dumps({\n//   token_id: state.token_id,\n//   nft_contract_id: state.nft_contract_id,\n//   ft_token: \"near\",\n//   price: state.price\n// });\n\n// add emcpded args // mob said to user bugger\n// encode_function_args = base64.b64encode(bytes(function_call_args, \"utf-8\")).decode(\"utf-8\");\n\n// dao_args = json.dumps({\n//   proposal: {\n//     description: \"Description\",\n//     kind: {\n//       FunctionCall: {\n//         receiver_id: contract_account_id,\n//         actions: [\n//           {\n//             method_name: \"method_name\",\n//             args: base64\n//               .b64encode(bytes(function_call_args, \"utf-8\"))\n//               .decode(\"utf-8\"),\n//             deposit: \"1\",no\n//             gas: str(100 * 10 ** 12),\n//           },\n//         ],\n//       },\n//     },\n//   },\n// });\n\nconst handleProposal = () => {\n  Near.call([\n    {\n      contractName: state.dao ?? default_dao,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: state.description,\n          kind: {\n            FunctionCall: {\n              marketplace_address:\n                state.marketplace_address ?? marketplace_default,\n            },\n          },\n        },\n      },\n      gas: state.gas ?? 200000000000000,\n      deposit: state.deposit ?? 100000000000000000000000,\n    },\n  ]);\n};\n\nconst onChangeNFTContract = (nft_contract_id) => {\n  State.update({\n    nft_contract_id,\n  });\n};\nconst onChangeTokenID = (token_id) => {\n  State.update({\n    token_id,\n  });\n};\n\n// should render nft\nreturn (\n  <div className=\"mb-3\">\n    <h1>\ud83d\udcb8 DAO Proposal Buy NFT on Paras</h1>\n    DAO Address\n    <input\n      placeholder=\"onboarddao.sputnik-dao.near\"\n      onChange={(e) => onChangeDAO(e.target.value)}\n    />\n    {state.valid_dao && (\n      <div className=\"alert alert-success\" onClick={onChangeDAO(state.dao)}>\n        <i className=\"bi bi-x\"></i> DAO Address is valid\n      </div>\n    )}\n    {!state.valid_dao && (\n      <div className=\"alert alert-danger\">\n        <i className=\"bi bi-x\"></i> DAO Address is invalid\n      </div>\n    )}\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        NFT Contract ID:\n        <input\n          type=\"text\"\n          placeholder=\"x.paras.near\"\n          onChange={(e) => onChangeNFTContract(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Marketplace Address\n        <input\n          type=\"text\"\n          placeholder={marketplace_default}\n          onChange={(e) => onChangeMarketplace(e.target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        Token ID:\n        <input\n          type=\"text\"\n          placeholder=\"492017\"\n          onChange={(e) => onChangeTokenID(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        tGas\n        <input\n          type=\"text\"\n          placeholder=\"200\"\n          onChange={(e) => onChangeGas(e.target.value * 1e12)}\n        />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        Price (Offer)\n        <input\n          type=\"text\"\n          placeholder=\"0.1\"\n          onChange={(e) => onChangePrice(e.target.value * 1e24)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Deposit\n        <input\n          type=\"text\"\n          placeholder=\"0.1\"\n          onChange={(e) => onChangeDeposit(e.target.value * 1e24)}\n        />\n      </div>\n    </div>\n    <div className=\"mb-2\">\n      Description\n      <textarea\n        className=\"row col-lg-12 m-1 boder-light max-width form-control\"\n        placeholder=\"buying a nft on paras\"\n        onChange={(e) => onChangeDescription(e.target.value)}\n      />\n    </div>\n    <button className=\"btn btn-primary mt-3\" onClick={handleProposal}>\n      Propose Buying NFT on {state.marketplace_address} for {state.dao}\n    </button>\n    <div class=\"dropdown\">\n      <button\n        class=\"btn btn-secondary dropdown-toggle m-1\"\n        type=\"button\"\n        id=\"dropdownMenuButton1\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        DAO Widgets\n      </button>\n      <ul class=\"dropdown-menu m-1\" aria-labelledby=\"dropdownMenuButton1\">\n        <li>\n          <a\n            class=\"dropdown-item\"\n            href=\"#\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Add Member\n          </a>\n        </li>\n        <li>\n          <a\n            class=\"dropdown-item\"\n            href=\"#\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View DAO Members\n          </a>\n        </li>\n        <li>\n          <a\n            class=\"dropdown-item\"\n            href=\"#\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            My DAOs\n          </a>\n        </li>\n      </ul>\n    </div>\n  </div>\n);\n// should abstract dao widget directory in another widget\n"}