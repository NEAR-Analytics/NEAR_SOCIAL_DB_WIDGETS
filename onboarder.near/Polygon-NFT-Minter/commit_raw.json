{"tx_hash": "AcUU9CK2bvQnEJFmhRFLu7FEKGUwT2TfWo1dBVeiVDJR", "action_id_social": "45kUJut2trnyb2SoEvTeSnDcpAGaQd7fuHWg5ZqYKx9Y-0-widget", "block_id": 86582973, "block_timestamp": "2023-03-05 03:08:40.319", "signer_id": "onboarder.near", "widget_name": "Polygon-NFT-Minter", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return \"Please login first\";\n/**TO DO: CHECK IF OWNER HAS GAS, take out amount */\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\n\nconst signer = Ethers.provider().getSigner();\nconst minterABI = fetch(\n  \"https://raw.githubusercontent.com/GenaDrop/abi/main/abi/SingleNFTMinter.abi.json\"\n);\n\nif (!minterABI.ok) {\n  return \"unsuccesful\";\n}\n\nconst nft_minter_address = \"0x4836CFA7ff4Cafac18fF038F4Da75f68c254c732\";\n\n// const minterContract = new ethers.Contract(\n//   nft_minter_address,\n//   minterABI,\n//   signer\n// );\n\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n// send to msg.sender\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\n// const nft_interface = new ethers.utils.Interface(nft_interface.body);\n\ninitState({\n  token: \"\",\n  tokenDecimals: \"\",\n  sendTo: \"\",\n  sender,\n  senderBalance: \"0\",\n  receiverBalance: \"0\",\n  receiver: \"\",\n  amount: \"1\", // adding all nft state\n  name: \"NFT SAMPLE\",\n  description: \"This is a test polygon nft using BOS\",\n  uri: \"https://i.near.social/thumbnail/https://ipfs.near.social/ipfs/bafkreic2ywrxzzyyes56rkbaz3mth7phjao3hq6cgfxme6ojtyvdioupmq\",\n});\n\nconst tokens = {\n  \"Select Token\": \"\",\n  USDT: \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n  DAI: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  USDC: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n  MKR: \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\",\n};\n\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option value={tokens[token]}>{token}</option>\n));\n\nconst setSendTo = (sendTo) => {\n  const receiver = Ethers.resolveName(sendTo);\n  State.update({ sendTo, receiver: receiver ?? \"\" });\n  refreshBalances();\n};\n\nconst setToken = (token) => {\n  State.update({ token });\n  getTokenDecimals();\n};\n\nconst getTokenBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(state.tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getTokenDecimals = () => {\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n      refreshBalances();\n    });\n};\n\nconst refreshBalances = () => {\n  getTokenBalance(state.sender).then((value) => {\n    State.update({ senderBalance: value });\n  });\n\n  getTokenBalance(state.receiver).then((value) => {\n    State.update({ receiverBalance: value });\n  });\n};\n\nconst mintNFT = () => {\n  const erc20 = new ethers.Contract(\n    state.token,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(state.amount, state.tokenDecimals);\n\n  erc20.transfer(state.receiver, amount);\n\n  console.log(\"transactionHash is \" + transactionHash);\n};\n\nconst sendTokens = () => {\n  const erc20 = new ethers.Contract(\n    state.token,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(state.amount, state.tokenDecimals);\n\n  erc20.transfer(state.receiver, amount);\n\n  console.log(\"transactionHash is \" + transactionHash);\n};\n\nreturn (\n  <>\n    <h3>Mint NFT on Polygon</h3>\n    <div class=\"mb-3\">\n      <label for=\"selectToken\">Select token</label>\n      <select\n        class=\"form-select\"\n        id=\"selectToken\"\n        onChange={(e) => {\n          setToken(e.target.value);\n        }}\n      >\n        {tokensMenuItems}\n      </select>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"send-to\" class=\"form-label\">\n        Recepient address\n      </label>\n      <input\n        value={state.sendTo}\n        class=\"form-control\"\n        id=\"send-to\"\n        placeholder=\"vitalik.eth\"\n        onChange={(e) => setSendTo(e.target.value)}\n      />\n      {state.receiver && (\n        <div class=\"text-secondary mt-3\">Resolved to {state.receiver}</div>\n      )}\n      {state.receiverBalance != \"0\" && (\n        <div class=\"text-secondary mt-3\">\n          Receiver's balance: {state.receiverBalance}\n        </div>\n      )}\n\n      {state.senderBalance != \"0\" && (\n        <div class=\"text-secondary mt-3\">\n          Sender's balance: {state.senderBalance}\n        </div>\n      )}\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"amount\" class=\"form-label\">\n        Enter the amount\n      </label>\n      <input\n        value={state.amount}\n        class=\"form-control\"\n        id=\"amount\"\n        placeholder=\"\"\n        onChange={(e) => State.update({ amount: e.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Enter Name of NFT</label>\n      <input\n        value={state.name}\n        class=\"form-control\"\n        id=\"name\"\n        placeholder=\"\"\n        onChange={(e) => State.update({ name: e.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Enter Description of NFT</label>\n      <input\n        value={state.description}\n        class=\"form-control\"\n        id=\"name\"\n        placeholder=\"\"\n        onChange={(e) => State.update({ description: e.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Enter URI of image</label>\n      <input\n        value={state.uri}\n        class=\"form-control\"\n        id=\"name\"\n        placeholder=\"\"\n        onChange={(e) => State.update({ uri: e.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <button onClick={sendTokens}>Mint</button>\n    </div>\n    <div class=\"mb-3\"></div>\n  </>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/onboarder.near/widget/Polygon-NFT-Minter", "metadata.description": "Mint a NFT on Polygon blockchain (WIP", "metadata.image.ipfs_cid": "bafkreid2mfcuy7lpw3me62ydxoplyv6w73544ekp4o3b6hb7lsqd4chkei", "metadata.linktree.website": "genadrop.io/mint", "metadata.name": "Polygon NFT Minter", "metadata.tags.ethdenver2023": "", "metadata.tags.polygon": ""}