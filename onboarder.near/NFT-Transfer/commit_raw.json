{"tx_hash": "6Zowv24FX2nzXjMTPfkRZciWs55gBtPXTurDeiyRzPqy", "action_id_social": "FKsQnPX4z3pKek34pDXLvE6QxMTaLmce25H7MBXgrfG5-0-widget", "block_id": 87668415, "block_timestamp": "2023-03-19 20:07:56.439", "signer_id": "onboarder.near", "widget_name": "NFT-Transfer", "source_code": "// add nft transfers here\n// NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\nconst image = props.image;\nconst onChange = props.onChange;\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\nconst accountId = context.accountId; // add check for context it\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n}; // just in case need to pass in a NFT\nconst contractId = \"genadrop-contract.nftgen.near\"; // default nft contract\nconst tokenId = \"1679119560198\"; // maybe condtional check if props is eempty // default nft\nconst fewfarmarket = \"market.fewandfar.near\";\nconst tradeportmarket = \"market.tradeport.near\";\n// fewfar link // display button if listed // asking them for format and they are working on a fix // https://fewfar.com/genadrop-single-nft-near/1675689302938/\nconst tradeportLink =\n  \"https://www.tradeport.xyz/near/collection/\" + contractId + \"/\" + tokenId;\n// maybe utilize the helper funciton here\n// const fewfarlink =\nconst default_receiver = \"minorityprogrammers.near\"; // default reciver nft for transfers\nconst msg =\n  '{\"price\":' +\n  '\"' +\n  amount +\n  '\"' +\n  ',\"market_type\":\"sale\",\"ft_token_id\":\"near\"}';\n// need to find custom market link to work with\n\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\n  token_id: tokenId,\n});\nconsole.log(tokenInfo.approved_account_ids);\ninitState({\n  contractId: contractId,\n  tokenId: tokenId,\n  tradeportLink: tradeportLink,\n  validMarketLink: true,\n  nftMetadata: nftMetadata,\n  tokenInfo: tokenInfo,\n  receiverId: default_receiver,\n  validReceiver: true,\n  ownsNFT: false, // change this and check intially\n  transfer: false, // add checkbox for transfer that shows\n  url: image.url,\n  nft: image.nft ?? {}, // from santiago\n});\nfunction ownsNFT() {\n  const ownsNFT = accountId === state.tokenInfo.owner_id;\n  State.update({\n    ownsNFT: ownsNFT,\n  });\n}\nownsNFT();\nfunction updateTradeportLink() {\n  // Function body goes here\n  const updatedLink =\n    \"https://www.tradeport.xyz/near/collection/\" +\n    state.contractId +\n    \"/\" +\n    state.tokenId;\n  State.update({\n    tradeportLink: updatedLink,\n  });\n}\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\n\nconst onChangeReceiver = (receiverId) => {\n  const validReceiverLink = isNearAddress(receiverId); // add error message or change button based on this\n  ownsNFT();\n  State.update({\n    receiverId,\n    validReceiver: validReceiverLink,\n  });\n};\n\nconst onChangeContract = (contractId) => {\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\n  State.update({\n    contractId,\n    nftMetadata,\n  });\n  onChangeToken(state.tokenId); // this doesnt change the token\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeToken = (tokenId) => {\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\n    token_id: tokenId,\n  });\n  State.update({\n    tokenId,\n    tokenInfo,\n  });\n  ownsNFT();\n  updateTradeportLink();\n};\n// finish this statement\nconst updateLink = () => {\n  if (state.contractId && state.tokenId) {\n  }\n};\n/* HELPER FUNCTION */\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst transfer = () => {\n  if (!accountId) {\n    return;\n  }\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 1; // 0.01 near // maybe less\n  Near.call([\n    {\n      contractName: state.contractId,\n      methodName: \"nft_transfer\",\n      args: {\n        receiver_id: state.receiverId,\n        token_id: state.tokenId,\n      },\n      gas: gas ?? 200000000000000,\n      deposit: deposit ?? 10000000000000000000000,\n    },\n  ]);\n};\nreturn (\n  <div>\n    <h1> \ud83d\udecd\ufe0f Transfer NFT </h1>\n    <h3>\n      \ud83d\udca7\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n        GenaDrop\n      </a>\n      <Widget\n        src=\"miraclx.near/widget/Attribution\"\n        props={{ authors: [ownerId], dep: true }}\n      />\n    </h3>\n    <div>\n      <div\n        className=\"p-2\"\n        style={{\n          background: \"#fdfdfd\",\n          border: \"solid 1px #dee2e6\",\n          borderTop: 0,\n          borderBottomLeftRadius: \".375rem\",\n          borderBottomRightRadius: \".375rem\",\n          minHeight: \"9em\",\n        }}\n      >\n        <div>\n          <div className=\"mt-2\">\n            <Widget\n              src={`sainthiago.near/widget/nft-selector`}\n              props={{\n                onChange: ({ contractId, tokenId }) => {\n                  State.update({\n                    contractId: contractId,\n                    tokenId: tokenId,\n                  });\n                  onChangeToken(tokenId);\n                  onChangeContract(contractId);\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        ContractID\n        <input\n          type=\"text\"\n          placeholder={state.contractId}\n          onChange={(e) => onChangeContract(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Token ID\n        <input\n          type=\"text\"\n          placeholder={state.tokenId}\n          onChange={(e) => onChangeToken(e.target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"mb-2\">\n      Receiver Address\n      <input\n        type=\"text\"\n        placeholder={state.receiverId}\n        onChange={(e) => onChangeReceiver(e.target.value)}\n      />\n    </div>\n    <div className=\"row\">\n      {state.ownsNFT && state.validReceiver && (\n        <button className=\"btn btn-primary mt-3\" onClick={transfer}>\n          Transfer\n        </button>\n      )}\n      <div className=\"col-lg-6\"></div>\n      {state.ownsNFT && !state.validReceiver && (\n        <button className=\"btn btn-warning mt-3\">\n          Can't Transfer (Invalid Receiver)\n        </button>\n      )}\n      {!state.ownsNFT && state.validReceiver && (\n        <button className=\"btn btn-danger mt-3\">\n          Can't Transfer (Don't Own)\n        </button>\n      )}\n    </div>\n    <a\n      href={state.tradeportLink}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"col-lg-12 btn btn-dark mt-3 text-align align-center\"\n    >\n      View on Tradeport\n    </a>\n  </div>\n);\n\n// TODO: Only listing to marketplaces (already listed) to marketplaces that this nft hasnt been listed on\n// add buttons to links in the marketplaces if they have been listed\n// add ability to list on different marketplaces at different price\n// add conditional for not being able to list if their is invalid custom maretkpalce trying to list to or invalid anything\n", "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/onboarder.near/widget/NFT-Transfer", "metadata.description": NaN, "metadata.tags.app": NaN, "metadata.tags.genadrop": NaN, "metadata.tags.minorityprogrammers": NaN, "metadata.tags.nft-selector": NaN, "metadata": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.nft": NaN, "metadata.tags.nft-transfer": NaN, "metadata.tags.onboard": NaN, "metadata.tags.onboard-dao": NaN, "metadata.tags.onboarddao": NaN, "metadata.tags.transfer": NaN, "branch.draft": NaN}