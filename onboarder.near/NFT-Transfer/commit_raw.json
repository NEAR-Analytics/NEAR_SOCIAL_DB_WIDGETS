{"tx_hash": "3TjSJC4aRLnSCGbbLjLWsHSNFQ1ijRNCYEm5rBh4F1us", "action_id_social": "AP5LcNyhFYtKGz3Jvy5W6ffDnEaJBXR9p7ADmAyhRKw4-0-widget", "block_id": 86647539, "block_timestamp": "2023-03-06 00:06:32.337", "signer_id": "onboarder.near", "widget_name": "NFT-Transfer", "source_code": "const nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n};\n// const contractId = nft.contractId; // NEED TO CHECK IF owner_id // conditional show reciever and transfer if owner\nconst contractId = \"genadrop-contract.nftgen.near\"; // pass as\n// error for serialization of reciever id, maybe need a buffer\n// const tokenId = nft.tokenId;\nconst tokenId = \"1674644968189\";\n// check owner // add state init // get message sender\nconst className = props.className ?? \"img-fluid\";\nconst style = props.style;\nconst alt = props.alt;\nconst thumbnail = props.thumbnail;\nconst fallbackUrl = props.fallbackUrl;\nconst reciever = \"onboarddao.sputnik-dao.near\";\nconst gas = \"30000000000000\";\nconst deposit = \"10000000000000000000\";\nconst loadingUrl =\n  props.loadingUrl ??\n  \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n\nState.init({\n  contractId,\n  tokenId,\n  imageUrl: null,\n  reciever,\n  gas,\n  deposit,\n});\n\nif (contractId !== state.contractId || tokenId !== tokenId) {\n  State.update({\n    contractId,\n    tokenId,\n    imageUrl: null,\n  });\n}\nconst onChangeReciever = (reciever) => {\n  State.update({\n    reciever,\n  });\n};\n\nconst onChangeContract = (contractId) => {\n  State.update({\n    contractId,\n  });\n};\n\nconst onChangeToken = (tokenId) => {\n  State.update({\n    tokenId,\n  });\n};\n\nconst nftMetadata =\n  nft.contractMetadata ?? Near.view(contractId, \"nft_metadata\");\nconst tokenMetadata =\n  nft.tokenMetadata ??\n  Near.view(contractId, \"nft_token\", {\n    token_id: tokenId,\n  }).metadata;\n\nlet imageUrl = null;\n\nif (nftMetadata && tokenMetadata) {\n  let tokenMedia = tokenMetadata.media || \"\";\n\n  imageUrl =\n    tokenMedia.startsWith(\"https://\") ||\n    tokenMedia.startsWith(\"http://\") ||\n    tokenMedia.startsWith(\"data:image\")\n      ? tokenMedia\n      : nftMetadata.base_uri\n      ? `${nftMetadata.base_uri}/${tokenMedia}`\n      : tokenMedia.startsWith(\"Qm\") || tokenMedia.startsWith(\"ba\")\n      ? `https://ipfs.near.social/ipfs/${tokenMedia}`\n      : tokenMedia;\n\n  if (!tokenMedia && tokenMetadata.reference) {\n    if (\n      nftMetadata.base_uri === \"https://arweave.net\" &&\n      !tokenMetadata.reference.startsWith(\"https://\")\n    ) {\n      const res = fetch(`${nftMetadata.base_uri}/${tokenMetadata.reference}`);\n      imageUrl = res.body.media;\n    } else if (\n      tokenMetadata.reference.startsWith(\"https://\") ||\n      tokenMetadata.reference.startsWith(\"http://\")\n    ) {\n      const res = fetch(tokenMetadata.reference);\n      imageUrl = JSON.parse(res.body).media;\n    } else if (tokenMetadata.reference.startsWith(\"ar://\")) {\n      const res = fetch(\n        `${\"https://arweave.net\"}/${tokenMetadata.reference.split(\"//\")[1]}`\n      );\n      imageUrl = JSON.parse(res.body).media;\n    }\n  }\n\n  if (!imageUrl) {\n    imageUrl = false;\n  }\n}\n\nconst rex =\n  /^(?:https?:\\/\\/)(?:[^\\/]+\\/ipfs\\/)?(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(?:\\.[^\\/]+)?(\\/.*)?$/g;\nrex.lastIndex = 0;\n\nconst replaceIpfs = (imageUrl) => {\n  if (state.oldUrl !== imageUrl && imageUrl) {\n    const match = rex.exec(imageUrl);\n    if (match) {\n      const newImageUrl = `https://ipfs.near.social/ipfs/${match[1]}${\n        match[2] || \"\"\n      }`;\n      if (newImageUrl !== imageUrl) {\n        State.update({\n          oldUrl: imageUrl,\n          imageUrl: newImageUrl,\n        });\n        return;\n      }\n    }\n  }\n  if (state.imageUrl !== false) {\n    State.update({\n      imageUrl: false,\n    });\n  }\n};\n\nconst thumb = (imageUrl) =>\n  thumbnail && imageUrl && !imageUrl.startsWith(\"data:image/\")\n    ? `https://i.near.social/${thumbnail}/${imageUrl}`\n    : imageUrl;\n\nconst img = state.imageUrl !== null ? state.imageUrl : imageUrl;\nconst src = img !== false ? img : fallbackUrl;\n\nconst transferNFT = () => {\n  Near.call([\n    {\n      contractName: state.contractId,\n      methodName: \"nft_transfer\",\n      args: {\n        reciever_id: state.reciever,\n        token_id: state.tokenId,\n      },\n      gas: state.gas ?? 200000000000000,\n      deposit: state.deposit ?? 10000000000000000000000,\n    },\n  ]);\n};\nreturn (\n  <div className=\"col\">\n    <h1>Transfer A NFT</h1>\n    <img\n      className={className}\n      style={style}\n      src={src !== null ? thumb(src) : loadingUrl}\n      alt={alt}\n      onError={() => replaceIpfs(img)}\n    />\n    <div className=\"row\">\n      <div className=\"col-lg-6 mb-2\">\n        ContractID\n        <input\n          type=\"text\"\n          placeholder={state.contractId}\n          onChange={(e) => onChangeContract(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Token ID\n        <input\n          type=\"text\"\n          placeholder={state.tokenId}\n          onChange={(e) => onChangeToken(e.target.value)}\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Reciever\n        <input\n          type=\"text\"\n          placeholder={state.reciever}\n          onChange={(e) => onChangeReciever(e.target.value)}\n        />\n      </div>\n    </div>\n    <button onClick={transferNFT}>Transfer NFT to {state.reciever}</button>\n  </div>\n);\n", "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/onboarder.near/widget/NFT-Transfer", "metadata.description": "Transfer individual NFT\n\nWIP\nNeed to serialize args, check if nft is owner, and abstract to be passed through props for collection galleries", "metadata.tags.app": NaN, "metadata.tags.genadrop": NaN, "metadata.tags.minorityprogrammers": NaN, "metadata.tags.nft-selector": NaN, "metadata": NaN, "metadata.image.ipfs_cid": "bafkreia2ry3327cvkndnbg6aicfviieh4zk2vtxmk6wlpplcmpnyo5xv4a", "metadata.linktree.website": "onboarddao.org", "metadata.name": "NFT Transfer", "metadata.tags.nft": "", "metadata.tags.nft-transfer": "", "metadata.tags.onboard": "", "metadata.tags.onboard-dao": "", "metadata.tags.onboarddao": "", "metadata.tags.transfer": "", "branch.draft": NaN}