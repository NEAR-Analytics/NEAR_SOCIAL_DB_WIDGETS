{"tx_hash": "2K1KvRFj1TDPy964JTGP96RTxgTqViaKZXrJSWTbw1hv", "action_id_social": "EaR3d5KLa9sQKtUExeupYkGqWHJjNpoABV9Qrg1Eax8V-0-widget", "block_id": 92859102, "block_timestamp": "2023-05-27T22:25:48.038Z", "signer_id": "achildhoodhero.near", "widget_name": "genadrop.multilisting.near", "source_code": null, "metadata": null, "branch": {"draft": {"": "// add nft transfers here\n// NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\nconst image = props.image;\nconst onChange = props.onChange;\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\nconst accountId = context.accountId; // add check for context it\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n}; // just in case need to pass in a NFT\nconst NEAR_NOMINATION_EXP = 24;\nconst contractId = \"genadrop-contract.nftgen.near\"; // default nft contract\nconst tokenId = \"1679119560198\"; // maybe condtional check if props is eempty // default nft\nconst fewfarmarket = \"market.fewandfar.near\";\nconst tradeportmarket = \"market.tradeport.near\";\n// fewfar link // display button if listed // asking them for format and they are working on a fix // https://fewfar.com/genadrop-single-nft-near/1675689302938/\nconst tradeportLink =\n  \"https://www.tradeport.xyz/near/collection/\" + contractId + \"/\" + tokenId;\n// maybe utilize the helper funciton here\n// const fewfarlink =\nconst defaultCustomMarket = \"apollo42.near\";\nconst mintbasemarket = \"simple.market.mintbase1.near\";\nconst default_receiver = \"minorityprogrammers.near\"; // default reciver nft for transfers\nconst trpMsg = JSON.stringify({\n  price: amount,\n  market_type: \"sale\",\n  ft_token_id: \"near\",\n});\n\nconst fnfMsg = JSON.stringify({\n  sale_conditions: {\n    near: amount,\n  },\n});\n// need to find custom market link to work with\n\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\n  token_id: tokenId,\n});\nconsole.log(tokenInfo.approved_account_ids);\ninitState({\n  contractId: contractId,\n  tokenId: tokenId,\n  amount: amount,\n  msg: msg,\n  fnfMsg: fnfMsg,\n  trpMsg: trpMsg,\n  tradeportLink: tradeportLink,\n  custom: false,\n  customMarketLink: defaultCustomMarket,\n  validMarketLink: true,\n  nftMetadata: nftMetadata,\n  tokenInfo: tokenInfo,\n  receiverId: default_receiver,\n  validReceiver: true,\n  transfer: false, // add checkbox for transfer that shows\n  url: image.url,\n  nft: image.nft ?? {}, // from santiago\n});\nfunction ownsNFT() {\n  const ownsNFT = context.accountId === state.tokenInfo.owner_id;\n  State.update({\n    ownsNFT: ownsNFT,\n  });\n}\nownsNFT();\nfunction updateTradeportLink() {\n  // Function body goes here\n  const updatedLink =\n    \"https://www.tradeport.xyz/near/collection/\" +\n    state.contractId +\n    \"/\" +\n    state.tokenId;\n  State.update({\n    tradeportLink: updatedLink,\n  });\n}\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, \"\").trim();\n}\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, \"\");\n  if (value === \"\") {\n    return \"0\";\n  }\n  return value;\n}\nfunction parseNearAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n  amt = cleanupAmount(amt);\n  const split = amt.split(\".\");\n  const wholePart = split[0];\n  const fracPart = split[1] || \"\";\n  if (split.length > 2 || fracPart.length > NEAR_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n  }\n  return trimLeadingZeroes(\n    wholePart + fracPart.padEnd(NEAR_NOMINATION_EXP, \"0\")\n  );\n}\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\nconst onChangeAmount = (amount) => {\n  amount = parseNearAmount(amount);\n  console.log(\"parsed amount\", amount);\n  const msgConcat = JSON.stringify({\n    price: amount,\n    market_type: \"sale\",\n    ft_token_id: \"near\",\n  });\n  const fnfMsg = JSON.stringify({\n    sale_conditions: {\n      near: amount,\n    },\n  });\n  // console.log(bigIntNumber);\n  console.log(amount);\n  State.update({\n    amount,\n    msg: msgConcat,\n    fnfMsg: fnfMsg,\n    trpMsg: msgConcat,\n  });\n};\n\nconst onChangeMsg = (msg) => {\n  // currently done in the amount\n  State.update({\n    msg: msg,\n  });\n};\n\nconst onChangeReceiver = (receiverId) => {\n  const validReceiverLink = isNearAddress(receiverId[0]); // add error message or change button based on this\n  State.update({\n    receiverId: receiverId[0],\n    validReceiver: validReceiverLink,\n  });\n  console.log(`receiver: ${state.receiverId[0]}`);\n};\n\nconst onChangeContract = (contractId) => {\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\n  State.update({\n    contractId,\n    nftMetadata,\n  });\n  onChangeToken(state.tokenId);\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeToken = (tokenId) => {\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\n    token_id: tokenId,\n  });\n  State.update({\n    tokenId,\n    tokenInfo,\n  });\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeCustomMarket = (customMarketLink) => {\n  const validMarketLink = isNearAddress(customMarketLink);\n  State.update({\n    customMarketLink,\n    validMarketLink,\n  });\n};\n/* HELPER FUNCTION */\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst list = () => {\n  if (!accountId) {\n    console.log(\"Sign in to list\");\n    return;\n  }\n  console.log(state.trpMsg);\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 10000000000000000000000; // 0.01 near\n  Near.call(\n    [\n      state.tradeport\n        ? {\n            contractName: tradeportmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.tradeport\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: tradeportmarket,\n              msg: state.trpMsg,\n            },\n            gas: gas,\n            deposit: deposit,\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: fewfarmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: fewfarmarket,\n              msg: state.fnfMsg,\n            },\n            gas: gas,\n            deposit: deposit,\n          }\n        : null,\n      state.mintbase\n        ? {\n            contractName: mintbasemarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.mintbase\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: mintbasemarket,\n              msg: state.msg, // need to change mesg to conform with mitnbase market // \"{\\\"price\\\":\\\"3900000000000000000000000\\\",\\\"autotransfer\\\":true}\"\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n      state.custom\n        ? {\n            contractName: state.customMarketLink,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.custom\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: state.customMarketLink,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n    ].filter((entry) => entry !== null)\n  );\n};\nconst transfer = () => {\n  if (!accountId) {\n    return;\n  }\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 1; // 0.01 near // maybe less\n  Near.call([\n    {\n      contractName: state.contractId,\n      methodName: \"nft_transfer\",\n      args: {\n        receiver_id: state.receiverId,\n        token_id: state.tokenId,\n      },\n      gas: gas ?? 200000000000000,\n      deposit: deposit ?? 10000000000000000000000,\n    },\n  ]);\n};\nconst selectFewFar = () => {\n  State.update({\n    fewfar: !state.fewfar,\n  });\n};\nconst selectTradeport = () => {\n  State.update({\n    tradeport: !state.tradeport,\n  });\n};\nconst selectMintbase = () => {\n  State.update({\n    mintbase: !state.mintbase,\n  });\n};\nconst selectCustom = () => {\n  State.update({\n    custom: !state.custom,\n  });\n}; // need better helper function for checking whether valid NEAR address\nreturn (\n  <div>\n    {!accountId && (\n      <p className=\"text-danger\">Please sign in with NEAR wallet</p>\n    )}\n    <h1 className=\"text-center\"> \ud83d\udecd\ufe0f List NFT to Multiple Marketplaces </h1>\n    <div>\n      <div\n        className=\"p-2 rounded mt-3\"\n        style={{\n          background: \"#fdfdfd\",\n          border: \"solid 1px #dee2e6\",\n          borderBottomLeftRadius: \".375rem\",\n          borderBottomRightRadius: \".375rem\",\n          minHeight: \"9em\",\n        }}\n      >\n        <div>\n          <div className=\"mt-2\">\n            <Widget\n              src={`jgodwill.near/widget/genadrop-nft-selector`}\n              props={{\n                onChange: ({ contractId, tokenId }) => {\n                  State.update({\n                    contractId: contractId,\n                    tokenId: tokenId,\n                  });\n                  onChangeToken(tokenId);\n                  onChangeContract(contractId);\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n    {state.tokenId !== \"1679119560198\" && (\n      <>\n        <Widget\n          src=\"jgodwill.near/widget/NftListingInput\"\n          props={{\n            state,\n            onChangeContract,\n            onChangeToken,\n            selectTradeport,\n            selectFewFar,\n            selectCustom,\n            selectMintbase,\n            onChangeCustomMarket,\n            onChangeAmount,\n            list,\n            onChangeReceiver,\n          }}\n        />\n        {/*<br></br>\n        <h1 className=\"text-center\">OR</h1>\n        <h2 className=\"text-center\">Transfer</h2>\n        <div className=\" mb-2\">\n          Receiver Address\n          <input\n            type=\"text\"\n            placeholder={state.receiverId}\n            onChange={(e) => onChangeReceiver(e.target.value)}\n          />\n        </div>\n        <div className=\"row\">\n          {state.ownsNFT && state.validReceiver && (\n            <button className=\"btn btn-primary mt-3\" onClick={transfer}>\n              Transfer\n            </button>\n          )}\n          <div className=\"col-lg-6\"></div>\n          {state.ownsNFT && !state.validReceiver && (\n            <button className=\"btn btn-warning mt-3\">\n              Can't Transfer (Invalid Receiver)\n            </button>\n          )}\n          {!state.ownsNFT && state.validReceiver && (\n            <button className=\"btn btn-danger mt-3\">\n              Can't Transfer (Don't Own)\n            </button>\n          )}\n        </div>*/}\n      </>\n    )}\n    <h4 className=\"text-center mt-5\">\n      \ud83d\udca7\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n        GenaDrop\n      </a>\n      <Widget\n        src=\"miraclx.near/widget/Attribution\"\n        props={{ authors: [ownerId], dep: true }}\n      />\n    </h4>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/achildhoodhero.near/widget/genadrop.multilisting.near", "__row_index": 1}