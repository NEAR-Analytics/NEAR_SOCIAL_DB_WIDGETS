{"tx_hash": "cZ4D1Zmho1B9Z9puYA8XVTZ8zdLAzyfSzUKE179PaKh", "action_id_social": "E1bqL4Y7j7PpFriKH9a97fJCEaejzRicxAiv3mHesrm-0-widget", "block_id": 89319329, "block_timestamp": "2023-04-11 07:24:51.899", "signer_id": "contribut3.near", "widget_name": "Entity", "source_code": "const ownerId = \"contribut3.near\";\nconst accountId = props.accountId;\nconst notStandalone = props.notStandalone ?? false;\nconst isPreview = props.isPreview ?? false;\nconst inboxView = props.inboxView;\n\nif (!accountId) {\n  return \"Cannot show entity without account ID!\";\n}\n\nState.init({\n  contributionFormHidden: true,\n  entity: null,\n  entityFetched: false,\n  founders: [],\n  foundersFetched: false,\n  profile: null,\n  profileFetched: false,\n});\n\nif (!state.entityFetched) {\n  Near.asyncView(\n    ownerId,\n    \"get_entity\",\n    { account_id: accountId },\n    \"final\",\n    false\n  ).then((entity) => State.update({ entity, entityFetched: true }));\n}\n\nif (!state.profileFetched) {\n  const profile = Social.getr(`${accountId}/profile`, \"final\", {\n    subscribe: false,\n  });\n  State.update({ profile, profileFetched: true });\n}\n\nif (!state.foundersFetched) {\n  Near.asyncView(\n    ownerId,\n    \"get_founders\",\n    { account_id: accountId },\n    \"final\",\n    false\n  ).then((founders) => State.update({ founders, foundersFetched: true }));\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: start;\n  min-height: 8em;\n  max-width: 100%;\n  padding: 0 0.75em;\n  border-bottom: 1px solid #eaecf0;\n`;\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  padding: 0.75em 0;\n  max-width: 100%;\n`;\n\nconst ActionColumn = styled.div`\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\n  flex-direction: row;\n  justify-content: between;\n  align-items: center;\n`;\n\nconst DescriptionWrapper = styled.div`\n  max-width: 100%;\n  margin-top: 0.5em;\n`;\n\nreturn (\n  <Container id={accountId}>\n    <Wrapper>\n      <Widget\n        src={`${ownerId}/widget/ProfileLine`}\n        props={{\n          accountId,\n          isEntity: true,\n          imageSize: \"3em\",\n          update: props.update,\n          additionalColumn: (\n            <ActionColumn show={!inboxView}>\n              <Widget\n                src={`${ownerId}/widget/ActiveIndicator`}\n                props={{ active: state.entity.status }}\n              />\n              <Widget\n                src={`${ownerId}/widget/CardMenu`}\n                props={{\n                  update: props.update,\n                  items: [\n                    {\n                      text: \"Propose contribution\",\n                      icon: \"bi-person-up\",\n                      href: `/${ownerId}/widget/Index?tab=create&content=proposal&accountId=${accountId}`,\n                      onClick: () =>\n                        props.update({\n                          tab: \"create\",\n                          content: \"proposal\",\n                          search: \"\",\n                          accountId,\n                        }),\n                    },\n                    {\n                      text: \"View details\",\n                      icon: \"bi-info-circle\",\n                      href: `/#/${ownerId}/widget/Index?tab=entity&accountId=${accountId}`,\n                      onClick: () =>\n                        props.update({\n                          tab: \"entity\",\n                          content: \"\",\n                          search: \"\",\n                          accountId,\n                        }),\n                    },\n                    {\n                      text: \"Share\",\n                      icon: \"bi-arrow-up-right\",\n                      id: \"share\",\n                    },\n                  ],\n                }}\n              />\n            </ActionColumn>\n          ),\n          additionalRow: (\n            <div>\n              <div>\n                {state.founders.map((founder) =>\n                  state.founders.length === 1 ? (\n                    <Widget\n                      src={`${ownerId}/widget/ProfileLine`}\n                      props={{\n                        accountId: founder,\n                        isEntity: false,\n                        update: props.update,\n                      }}\n                    />\n                  ) : (\n                    <Widget\n                      src={`${ownerId}/widget/ProfileCircle`}\n                      props={{\n                        accountId: founder,\n                        isEntity: false,\n                        update: props.update,\n                      }}\n                    />\n                  )\n                )}\n              </div>\n              <Widget\n                src={`${ownerId}/widget/Tags`}\n                props={{ tags: state.profile.tags }}\n              />\n            </div>\n          ),\n        }}\n      />\n      <DescriptionWrapper>\n        <Widget\n          src={`${ownerId}/widget/DescriptionArea`}\n          props={{\n            description: state.entity.description || state.profile.description,\n          }}\n        />\n      </DescriptionWrapper>\n    </Wrapper>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contribut3.near/widget/Entity"}