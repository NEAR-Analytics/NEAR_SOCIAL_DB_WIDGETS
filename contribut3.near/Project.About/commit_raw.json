{"tx_hash": "3JydZFetxhUUsY6bSdnJ6HR3y5EE3EHHnGvutaWeaV5L", "action_id_social": "3muBw6j3M7WueW6a2xsD5qCN5hiyyrY5xao39J2nSrys-0-widget", "block_id": 89997756, "block_timestamp": "2023-04-20 06:20:00.407", "signer_id": "contribut3.near", "widget_name": "Project.About", "source_code": "const ownerId = \"contribut3.near\";\nconst accountId = props.accountId;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  gap: 1em;\n  padding: 0.5em 0.2em;\n`;\n\nconst Heading = styled.div`\n  padding-bottom: 0.5em;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.125em;\n  line-height: 1.5em;\n  color: #000;\n  width: 100%;\n`;\n\nState.init({\n  project: null,\n  projectIsFetched: false,\n  profile: \"\",\n  profileIsFetched: false,\n});\n\nif (!state.projectIsFetched) {\n  Near.asyncView(\n    ownerId,\n    \"get_project\",\n    { account_id: accountId },\n    \"final\",\n    false\n  ).then((project) => State.update({ project, projectIsFetched: true }));\n}\n\nif (!state.profileIsFetched) {\n  Near.asyncView(\n    \"social.near\",\n    \"get\",\n    { keys: [`${accountId}/profile/**`] },\n    \"final\",\n    false\n  ).then((data) =>\n    State.update({\n      profile: data[accountId].profile,\n      profileIsFetched: true,\n    })\n  );\n}\n\nif (!state.projectIsFetched || !state.profileIsFetched) {\n  return <>Loading...</>;\n}\n\nconst onPrivateSave = (value) => {\n  Near.call(ownerId, \"edit_project\", {\n    account_id: accountId,\n    project: { ...state.project, application: { ...state.project.application, private: value } },\n  });\n};\n\nconst onSave = (value) => {\n  Near.call(ownerId, \"edit_project\", {\n    account_id: accountId,\n    project: { ...state.project, application: { ...state.project.application, ...value } },\n  });\n}\n\nreturn (\n  <Container>\n    <Heading>About project</Heading>\n    <Widget\n      src={`${ownerId}/widget/Inputs.Viewable.TextArea`}\n      props={{\n        label: \"Description\",\n        id: \"description\",\n        value: state.profile.description,\n        onSave: (description) =>\n          Near.call(\"social.near\", \"set\", {\n            data: { [accountId]: { profile: { description } } },\n          }),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Inputs.Viewable.TextArea`}\n      props={{\n        label: \"What problem(s) are you solving?\",\n        id: \"problem\",\n        value: state.profile.problem,\n        onSave: (problem) => Near.call(\"social.near\", \"set\", {\n          data: { [accountId]: { profile: { problem } } },\n        }),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Inputs.Viewable.TextArea`}\n      props={{\n        label: \"What makes your team uniquely positioned for success?\",\n        id: \"success_position\",\n        value: state.project.application.success_position,\n        onSave: (succcess_position) => onSave({ succcess_position }),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Inputs.Viewable.TextArea`}\n      props={{\n        label: \"Why are you building on NEAR?\",\n        id: \"why\",\n        value: state.project.why,\n        onSave: (why) => onSave({ why }),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Inputs.Viewable.TextArea`}\n      props={{\n        label: \"What's your 5 year vision? 1B users project evolution?\",\n        id: \"vision\",\n        value: state.project.vision,\n        onSave: (vision) => onSave({ vision }),\n      }}\n    />\n    {/*<Widget\n      src={`${ownerId}/widget/Inputs.Viewable.TextArea`}\n      props={{\n        label: \"Are you going to launch your token?\",\n        id: \"token\",\n        value:\n          \"Ethereum bought lots of cold wallet although VeChain waited some dead cat bounce during many ICO. NFT proves the digital signature until a burned, nor since ERC20 token standard generates many quick distributed ledger, Lightning Network halving a REKT in many decentralised application! Because Silk Road broadcast some provably bagholder, Ripple sharded some instant all-time-high, nor when TRON returns lots of peer-to-peer FUD, Ripple counted a accidental fork at the dead cat bounce! When blockchain could be a provably fair consensus process of some fork, Cardano required few burned bollinger band in many zero confirmation transaction\",\n        onSave: (token) => onSave({ token }),\n      }}\n    />*/}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contribut3.near/widget/Project.About"}