{"tx_hash": "Dhz4ev5zHWbVYCPveDcF2bnctDTfZG7S894urrCUp2qM", "action_id_social": "4wxFrL8Ku9etnLtKQ7e884wxjsdMCEcAyAg6NqSFSawH-0-widget", "block_id": 83920126, "block_timestamp": "2023-01-27 15:13:02.622", "signer_id": "contribut3.near", "widget_name": "ModeratorAccountIdInput", "source_code": "const ownerId = \"contribut3.near\";\r\nconst allAccountIds = props.allAccountIds;\r\nconst accountId = props.accountId;\r\nconst fixed = props.fixed;\r\nconst update = props.update;\r\n\r\ninitState({\r\n  valid: props.valid ?? true,\r\n  errorMessage: \"\",\r\n});\r\n\r\nconst validate = (accountId) => {\r\n  const accountIdRegex =\r\n    /^(([a-z\\d]+[\\-_])*[a-z\\d]+\\.)*([a-z\\d]+[\\-_])*[a-z\\d]+$/;\r\n\r\n  if (typeof accountId !== \"string\") {\r\n    State.update({\r\n      valid: false,\r\n      errorMessage: \"Account ID must be a text value!\",\r\n    });\r\n    update(accountId, false);\r\n    return;\r\n  }\r\n\r\n  if (accountId.length < 2) {\r\n    State.update({\r\n      valid: false,\r\n      errorMessage: \"Account ID must be at least 2 characters long!\",\r\n    });\r\n    update(accountId, false);\r\n    return;\r\n  }\r\n\r\n  if (accountId.length > 64) {\r\n    State.update({\r\n      valid: false,\r\n      errorMessage: \"Account ID must be at most 64 characters long!\",\r\n    });\r\n    update(accountId, false);\r\n    return;\r\n  }\r\n\r\n  if (!accountIdRegex.test(accountId)) {\r\n    State.update({\r\n      valid: false,\r\n      errorMessage: (\r\n        <>\r\n          Account ID must follow the rules specified{\" \"}\r\n          <a href=\"https://nomicon.io/DataStructures/Account#account-id-rules\">\r\n            here\r\n          </a>\r\n          !\r\n        </>\r\n      ),\r\n    });\r\n    update(accountId, false);\r\n    return;\r\n  }\r\n\r\n  State.update({ valid: true, errorMessage: \"\" });\r\n  update(accountId, true);\r\n};\r\n\r\nconst formatDate = (timestampString) => {\r\n  const date = new Date(Number(timestampString));\r\n  return `${date.getFullYear()}-${(date.getMonth() + 1)\r\n    .toString()\r\n    .padStart(2, \"0\")}-${date.getDate().toString().padStart(2, \"0\")}`;\r\n};\r\n\r\nreturn (\r\n  <div className=\"col-lg-12 mb-2\">\r\n    Account ID of entity:\r\n    <small style={{ color: \"red\" }}>\r\n      {state.valid ? null : state.errorMessage}\r\n    </small>\r\n    <Typeahead\r\n      id=\"account-id-input\"\r\n      labelKey=\"name\"\r\n      onChange={(accountId) => {\r\n        const args = { account_id: accountId[0].name };\r\n        Near.asyncView(ownerId, \"get_entity\", args, \"final\").then(\r\n          (existing) => {\r\n            const updatedState = {\r\n              accountId,\r\n            };\r\n\r\n            if (existing) {\r\n              updatedState.existing = existing;\r\n              updatedState.kind = [{ name: existing.kind }];\r\n              updatedState.entityStatus = [{ name: existing.status }];\r\n              updatedState.startDate = formatDate(existing.start_date);\r\n\r\n              if (existing.end_date) {\r\n                updatedState.endDate = formatDate(existing.endDate);\r\n              }\r\n            }\r\n\r\n            update(updatedState);\r\n          }\r\n        );\r\n      }}\r\n      onBlur={() => validate(accountId[0].name)}\r\n      options={allAccountIds}\r\n      placeholder=\"contribut3.near, social.near...\"\r\n      selected={state.accountId}\r\n      isInvalid={!state.valid}\r\n      positionFixed\r\n      allowNew\r\n      disabled={state.fixed}\r\n    />\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contribut3.near/widget/ModeratorAccountIdInput"}