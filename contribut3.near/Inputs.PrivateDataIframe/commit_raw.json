{"tx_hash": "4rPEhrt7ZgBLBM4wM98zGA681esPY2JnA5EU945xJjYN", "action_id_social": "HiaqCd63tHzT6ebgMryT7eoKgWSjvEon9ePtXZhYLPoD-0-widget", "block_id": 89927852, "block_timestamp": "2023-04-19 08:12:14.902", "signer_id": "contribut3.near", "widget_name": "Inputs.PrivateDataIframe", "source_code": "const iframeCode = `\n  <script src=\"https://cdn.jsdelivr.net/npm/libsodium@0.7.11/dist/modules/libsodium.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/libsodium-wrappers@0.7.11/dist/modules/libsodium-wrappers.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/near-api-js@2.0.4/dist/near-api-js.min.js\" integrity=\"sha256-KOzR3jJG5npydkwoDZHaUyNi0xKa+qUEYItBetrLiPY=\" crossorigin=\"anonymous\"></script>\n\n  <script>\n    async function getBlockHash() {\n      const connection = await nearApi.connect({\n        networkId: \"mainnet\",\n        keyStore: new nearApi.keyStores.InMemoryKeyStore(),\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        walletUrl: \"https://wallet.mainnet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://explorer.mainnet.near.org\",\n      });\n      const block = await connection.connection.provider.block({ finality: \"final\" });\n      return block.header.hash;\n    }\n\n    function getKey(accountId) {\n      const key = localStorage.getItem(\"near-api-js:keystore:\" + accountId + \":mainnet\");\n      const keyPair = new nearApi.utils.KeyPairEd25519(key);\n      const secretKey = nearApi.utils.PublicKey.fromString(keyPair.secretKey).data;\n      const publicKey = keyPair.publicKey.data;\n      return { secretKey, publicKey };\n    }\n\n    function signMessage(message, secretKey) {\n      const signed = sodium.crypto_sign_detached(message, secretKey);\n      return sodium.to_hex(signed);\n    }\n\n    async function sendRequest(url, body, accountId) {\n      const key = getKey(accountId);\n      const blockHash = await getBlockHash();\n      const message = accountId + \"\\\\n\" + sodium.to_hex(key.publicKey) + \"\\\\n\" + blockHash + \"\\\\n\" + JSON.stringify(body);\n      const signature = signMessage(message, key.secretKey);\n      const result = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Near-Public-Key\": sodium.to_hex(key.publicKey),\n          \"X-Near-Account-Id\": accountId,\n          \"X-Near-Block-Hash\": blockHash,\n          \"X-Near-Signature\": signature,\n        },\n        body: JSON.stringify(body),\n      });\n      return await result.json();\n    }\n\n    window.addEventListener(\"message\", ({ data }) => {\n      sodium.ready.then(async function() {\n        const { accountId, body, url, send } = data;\n        if (!send) return;\n        const result = await sendRequest(url, body, accountId);\n        window.top.postMessage(result, \"*\");\n      });\n    });\n  </script>\n`;\n\nconsole.log(Storage.get(\"near-api-js:keystore:\" + context.accountId + \":mainnet\"));\n\nreturn (\n  <iframe\n    style={{ display: \"none\" }}\n    srcDoc={iframeCode}\n    sandbox=\"allow-scripts allow-same-origin\"\n    message={{\n      accountId: context.accountId,\n      url: `https://encryption-service-73dm.onrender.com${props.encrypt ? \"/encrypt/\" : \"/decrypt/\"}${props.accountId}`,\n      body: props.body,\n      send: props.send,\n    }}\n    onMessage={props.onChange}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/contribut3.near/widget/Inputs.PrivateDataIframe"}