{"tx_hash": "68ezSqUz3h5eZRmtiMbtnAfBbu14oQ6CehUunPyrbCs6", "action_id_social": "HkGnuoEJSNcq5b6xb2UndxZXfy7twyw2Sx7QTDp8Heq1-0-widget", "block_id": 86600108, "block_timestamp": "2023-03-05 08:36:39.259", "signer_id": "p516entropy.near", "widget_name": "PromotedPostsCarousel", "source_code": "State.init({\r\n  promotedPosts: [],\r\n});\r\n\r\nconst daysBetweenTimestamps = (timestamp1, timestamp2) => {\r\n  const oneDay = 24 * 60 * 60 * 1000; // one day in milliseconds\r\n  const timeDiff = Math.abs(timestamp2 - timestamp1); // difference in milliseconds\r\n  const numDays = Math.round(timeDiff / oneDay); // round to nearest integer\r\n  return numDays;\r\n};\r\n\r\nconst calculateBidPower = (deposit) => {\r\n  const daysBetween = daysBetweenTimestamps(\r\n    deposit.timestamp,\r\n    deposit.expire_timestamp\r\n  );\r\n  return deposit.amount / daysBetween;\r\n};\r\n\r\nconst findPromotedPosts = (posts, deposits) => {\r\n  const postsDepositsDictionary = {};\r\n\r\n  deposits\r\n    .filter((deposit) => deposit.expire_timestamp > Date.now())\r\n    .forEach((deposit) => {\r\n      const postId = deposit.post_id;\r\n      const currentBidPower = (\r\n        postsDepositsDictionary[postId] || { bidPower: 0 }\r\n      ).bidPower;\r\n\r\n      postsDepositsDictionary[postId] = {\r\n        bidPower: currentBidPower + calculateBidPower(deposit),\r\n      };\r\n    });\r\n\r\n  const promotedPosts = posts.filter((post) =>\r\n    postsDepositsDictionary.hasOwnProperty(post.id)\r\n  );\r\n\r\n  promotedPosts.sort((a, b) => {\r\n    const postABidPower = postsDepositsDictionary[a.id].bidPower;\r\n    const postBBidPower = postsDepositsDictionary[b.id].bidPower;\r\n\r\n    if (postABidPower !== postBBidPower) {\r\n      // If scores are different, sort by score in descending order\r\n      return postBBidPower - postABidPower;\r\n    } else {\r\n      // If scores are equal, add a random factor to the sorting\r\n      return Math.random() - 0.5;\r\n    }\r\n  });\r\n  return promotedPosts.slice(0, 3);\r\n};\r\n\r\nconst deposits = Near.view(\"promotepost.near\", \"get_all_deposits\") || [];\r\n\r\nconst posts = Near.view(\"devgovgigs.near\", \"get_posts\") || [];\r\nconst promotedPosts = findPromotedPosts(posts, deposits);\r\nState.update({ promotedPosts });\r\n\r\nreturn (\r\n  <div>\r\n    <div id=\"carouselExampleIndicators\" class=\"carousel carousel-dark slide\">\r\n      <div class=\"carousel-indicators mb-1\">\r\n        {state.promotedPosts.map((post, i) => {\r\n          return (\r\n            <button\r\n              type=\"button\"\r\n              data-bs-target=\"#carouselExampleIndicators\"\r\n              data-bs-slide-to={i}\r\n              class={i === 0 ? \"active\" : undefined}\r\n            ></button>\r\n          );\r\n        })}\r\n      </div>\r\n      <div class=\"card card-body pb-4\">\r\n        <div class=\"fs-5\">\r\n          <i class=\"bi-cash-coin\"></i>\r\n          <span>Promoted Posts</span>\r\n        </div>\r\n        {!state.promotedPosts.length && (\r\n          <div class=\"py-2\">Not posts have been promoted recently</div>\r\n        )}\r\n        <div class=\"carousel-inner\">\r\n          {state.promotedPosts.map((post, i) => {\r\n            return (\r\n              <div key={post.id}>\r\n                <div\r\n                  class={i === 0 ? \"carousel-item active\" : \"carousel-item\"}\r\n                  data-interval=\"1000\"\r\n                >\r\n                  <div alt=\"First slide\">\r\n                    <Widget\r\n                      src={`p516entropy.near/widget/SearchResultPost`}\r\n                      props={{\r\n                        post: post,\r\n                      }}\r\n                      key={key}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/p516entropy.near/widget/PromotedPostsCarousel", "metadata.description": NaN, "metadata.tags.devgovgigs": NaN, "metadata.tags.promote": NaN}