{"tx_hash": "3j1sZFjySYaEMPWhxSxxDgrtTGwLTYoMQ4UhfqSVqsVT", "action_id_social": "BTd3A56EBEkj9Xmqn1qmWcwsxBNyQdLw7ek7s9Tr5tqK-0-widget", "block_id": 85256591, "block_timestamp": "2023-02-15 04:07:54.887", "signer_id": "p516entropy.near", "widget_name": "NftPollWindow", "source_code": "const CONTRACT = \"nft-vote.near\";\r\nconst accountId = context.accountId;\r\nif (context.loading) {\r\n  return \"Loading\";\r\n}\r\nif (!accountId) {\r\n  return \"Please sign in with NEAR wallet to use this widget\";\r\n}\r\nconst pollId = props.pollId;\r\nif (pollId == null) {\r\n  return \"No pollId\";\r\n}\r\nconst nftContract = props.nftContract;\r\nif (!nftContract) {\r\n  return \"No nftContract\";\r\n}\r\n\r\nconst userNftsData = Near.view(nftContract, \"nft_tokens_for_owner\", {\r\n  account_id: accountId,\r\n});\r\nconst myNft = userNftsData.map((userNftData) => {\r\n  return userNftData.token_id;\r\n});\r\n\r\nconst getPollDetatils = (poll) => {\r\n  console.log(poll);\r\n  const getPollOptionVotes = (votes) => {\r\n    return Object.values(votes).reduce((acc, curr) => {\r\n      acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n  const myVotes = myNft.reduce((acc, curr) => {\r\n    if (curr in poll.votes) {\r\n      acc[curr] = poll.votes[curr];\r\n    }\r\n    return acc;\r\n  }, {});\r\n\r\n  const pollOptionVotes = getPollOptionVotes(poll.votes);\r\n  const myPollOptionVotes = getPollOptionVotes(myVotes);\r\n\r\n  console.log(pollOptionVotes);\r\n  console.log(myPollOptionVotes);\r\n  const votedTotal = Object.values(pollOptionVotes).reduce(\r\n    (partialSum, a) => partialSum + a,\r\n    0\r\n  );\r\n  const myVotedTotal = Object.values(myPollOptionVotes).reduce(\r\n    (partialSum, a) => partialSum + a,\r\n    0\r\n  );\r\n  console.log(votedTotal);\r\n\r\n  const topic = poll.name;\r\n  const description = poll.description;\r\n  const availableToVote = myNft.length - myVotedTotal;\r\n\r\n  const options = poll.answers.map((answer, i) => {\r\n    return {\r\n      id: i + \"_id\",\r\n      label: answer,\r\n      progress: Math.round((pollOptionVotes[i] / votedTotal) * 100) || 0,\r\n      votedTotal: pollOptionVotes[i] || 0,\r\n      voted: myPollOptionVotes[i],\r\n    };\r\n  });\r\n  const myNftVoted = Object.keys(myVotes);\r\n  return {\r\n    options: options,\r\n    availableToVote: availableToVote,\r\n    description: description,\r\n    topic: topic,\r\n    votedTotal: votedTotal,\r\n    myNftVoted: myNftVoted,\r\n    ownerId: poll.owner_id,\r\n    pollStatus: poll.status,\r\n  };\r\n};\r\n\r\nconst updateState = () => {\r\n  const asyncPolls = Near.asyncView(CONTRACT, \"get_votes_by_contract\", {\r\n    contract_id: nftContract,\r\n    limit: 1000,\r\n    offset: 0,\r\n  });\r\n  asyncPolls.then((polls) => {\r\n    console.log(polls);\r\n\r\n    const currentState = getPollDetatils(polls[pollId]);\r\n    State.update({\r\n      options: currentState.options,\r\n      availableToVote: currentState.availableToVote,\r\n      description: currentState.description,\r\n      myNftVoted: currentState.myNftVoted,\r\n      votedTotal: currentState.votedTotal,\r\n      ownerId: currentState.ownerId,\r\n      pollStatus: currentState.pollStatus,\r\n      topic: currentState.topic,\r\n    });\r\n  });\r\n};\r\n\r\nif (!state.options) {\r\n  State.init({\r\n    viewMode: true,\r\n    options: [],\r\n    availableToVote: 0,\r\n    description: \"\",\r\n    myNftVoted: [],\r\n    topic: \"\",\r\n  });\r\n  updateState();\r\n}\r\n\r\nconst vote = (answerId) => {\r\n  const myNftVoted = state.myNftVoted;\r\n  const myNftNotVoted = myNft.filter((myNft) => !myNftVoted.includes(myNft));\r\n  const pollData = {\r\n    contract_id: nftContract,\r\n    index: pollId,\r\n    answer: answerId,\r\n    nft_token_id: myNftNotVoted[0],\r\n  };\r\n  console.log(\"NEAR.call: vote \" + JSON.stringify(pollData));\r\n  Near.call(CONTRACT, \"vote\", pollData, 70 * Math.pow(10, 12));\r\n  console.log(\"NEAR.call: vote finished\");\r\n};\r\n\r\nconst closePoll = () => {\r\n  const pollData = {\r\n    contract_id: nftContract,\r\n    index: pollId,\r\n  };\r\n  console.log(\"NEAR.call: close_vote \" + JSON.stringify(pollData));\r\n  Near.call(CONTRACT, \"close_vote\", pollData);\r\n  console.log(\"NEAR.call: close_vote finished\");\r\n};\r\n\r\nconst displayOptionsToView = state.options.map((option) => {\r\n  return (\r\n    <OverlayTrigger\r\n      key={option.id + \"view\"}\r\n      placement=\"bottom\"\r\n      delay={{ show: 250, hide: 400 }}\r\n      overlay={\r\n        <Tooltip id=\"button-tooltip\">\r\n          Voted {option.votedTotal} out of {state.votedTotal}\r\n        </Tooltip>\r\n      }\r\n    >\r\n      <div\r\n        class=\"row\"\r\n        style={{\r\n          \"min-height\": \"50px\",\r\n        }}\r\n      >\r\n        <div class=\"col-2\">\r\n          <strong>{option.progress}%</strong>\r\n        </div>\r\n\r\n        <div\r\n          class=\"col-10\"\r\n          style={{\r\n            \"padding-left\": \"0\",\r\n          }}\r\n        >\r\n          {option.label}\r\n          {option.voted > 0 && (\r\n            <strong style={{ color: \"mediumseagreen\" }}>+{option.voted}</strong>\r\n          )}\r\n        </div>\r\n        <div class=\"w-100 d-none d-md-block\"></div>\r\n\r\n        <div class=\"col-2 text-center\">\r\n          <i\r\n            class=\"bi bi-check-circle-fill\"\r\n            style={{\r\n              visibility: option.voted ? \"visible\" : \"hidden\",\r\n              color: \"mediumseagreen\",\r\n            }}\r\n          ></i>\r\n        </div>\r\n\r\n        <div\r\n          class=\"col-10 align-self-center\"\r\n          style={{\r\n            \"padding-left\": \"0\",\r\n          }}\r\n        >\r\n          <div\r\n            class=\"progress\"\r\n            style={{\r\n              height: \"6px\",\r\n            }}\r\n          >\r\n            <div\r\n              class=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              style={{\r\n                width: option.progress + \"%\",\r\n                \"background-color\": option.voted ? \"mediumseagreen\" : undefined,\r\n              }}\r\n              aria-valuenow=\"75\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              data-bs-toggle=\"tooltip\"\r\n              data-bs-placement=\"bottom\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </OverlayTrigger>\r\n  );\r\n});\r\n\r\nconst displayOptionsToVote = state.options.map((option, i) => {\r\n  return (\r\n    <div class=\"mb-2 d-flex\" key={option.id + \"edit\"}>\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline-secondary\"\r\n        onClick={() => {\r\n          vote(i);\r\n          console.log(\"pressed \" + option.id);\r\n        }}\r\n      >\r\n        +\r\n      </button>\r\n      <div class=\"align-self-center\" style={{ \"padding-left\": \"10px\" }}>\r\n        {option.label}\r\n      </div>\r\n      {option.voted > 0 && (\r\n        <strong\r\n          class=\"align-self-center\"\r\n          style={{ \"padding-left\": \"10px\", color: \"mediumseagreen\" }}\r\n        >\r\n          +{option.voted}\r\n        </strong>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nreturn (\r\n  <div class=\"mx-2 my-3\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div>\r\n          <p>\r\n            <strong>{state.topic}</strong>\r\n            {state.pollStatus === 1 && <strong>(CLOSED)</strong>}\r\n          </p>\r\n          <p>{state.description}</p>\r\n        </div>\r\n        <hr />\r\n        {state.viewMode ? (\r\n          <div>{displayOptionsToView}</div>\r\n        ) : (\r\n          <div>{displayOptionsToVote}</div>\r\n        )}\r\n      </div>\r\n      <div class=\"card-footer text-end\">\r\n        {state.ownerId === accountId && state.pollStatus === 0 && (\r\n          <button type=\"button\" onClick={closePoll} class=\"btn btn-danger\">\r\n            Close\r\n          </button>\r\n        )}\r\n        <button onClick={updateState} type=\"button\" class=\"btn btn-primary\">\r\n          <i class=\"bi bi-repeat\"></i>\r\n        </button>\r\n        {state.viewMode ? (\r\n          <button\r\n            onClick={() => {\r\n              console.log(\"viewMode \" + state.viewMode);\r\n              State.update({\r\n                viewMode: !state.viewMode,\r\n              });\r\n            }}\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            disabled={state.availableToVote < 1 || state.pollStatus === 1}\r\n          >\r\n            Vote mode ({state.availableToVote} votes left)\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={() => {\r\n              console.log(\"viewMode \" + state.viewMode);\r\n              State.update({\r\n                viewMode: !state.viewMode,\r\n              });\r\n            }}\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n          >\r\n            View mode ({state.availableToVote} votes left)\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/p516entropy.near/widget/NftPollWindow"}