{"tx_hash": "6UiHKzped1TPVSLNtZt9SmhyTqKxPTJ7pSrue3wjSSnR", "action_id_social": "4xfZtzaHgT1UZnQFM6LQQehqErwcMWJEQyT1kBHD2JAn-0-widget", "block_id": 89268466, "block_timestamp": "2023-04-10 15:22:46.875", "signer_id": "evrything-docs.near", "widget_name": "Everything.Create.Document", "source_code": "// Repository: https://github.com/elliotBraem/document-creator\nconst externalAppUrl = \"https://document-creator.vercel.app/\";\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\nconst initialPayload = {};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"create-thing\":\n      handleCreateThing(request, response);\n      break;\n  }\n};\n\nconst handleCreateThing = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    asyncFetch(\"https://monkfish-app-ginhc.ondigitalocean.app/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Everything\": \"simple\",\n      },\n      body: JSON.stringify({\n        query:\n          \"mutation createDocument($title: String, $body: String, $author: String) { documents { create(name: $title, author: $author) { entities { id } } appendContentToDescription(value: $body) { entities { id   } } } }\",\n        variables: { ...payload, author: context.accountId },\n      }),\n    }).then((res) => {\n      if (res.body.errors) {\n        response(request).send(res.body.errors);\n      } else {\n        Social.set(\n          {\n            thing: {\n              main: JSON.stringify({\n                thingId: res.body.data.documents.create.entities[0].id,\n              }),\n            },\n            index: {\n              [\"everything-docs\"]: JSON.stringify({\n                key: \"main\",\n                value: {\n                  type: \"evrything-docs.near/type/Document\",\n                },\n              }),\n            },\n          },\n          {\n            force: true,\n            onCommit: () => {\n              response(request).send({ success: true });\n            },\n            onCancel: () => {\n              response(request).send({ error: \"the action was canceled\" });\n            },\n          }\n        );\n        response(request).send(res.body.data);\n      }\n    });\n    return;\n  }\n  // Error\n  response(request).send({\n    error: \"thing must be provided\",\n  });\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything-docs.near/widget/Everything.Create.Document", "branch.draft.": null, "branch.draft.metadata": null}