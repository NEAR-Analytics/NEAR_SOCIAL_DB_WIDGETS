{"tx_hash": "BpUqpA5CUq1V82DLV1sdHS2RxKJmMp6JZDV8oJCz9A4f", "action_id_social": "FtBrFAdUhirKeyHa4evPoUYzkSCTDJmjMh5SZkTzmrpa-0-widget", "block_id": 88595269, "block_timestamp": "2023-04-01 17:48:23.527", "signer_id": "saidulbadhon.near", "widget_name": "SearchPage.Searchbar", "source_code": "const allMetadata =\r\n  Social.get(\r\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\r\n    \"final\"\r\n  ) || {};\r\nconst keys = Social.keys([\"*/widget/*\"], \"final\", { values_only: true }) || {};\r\n\r\nconst requiredTag = props.filterTag;\r\nconst boostedTag = props.boostedTag;\r\nconst inputTerm = props.term;\r\n\r\nconst computeResults = (term) => {\r\n  const terms = (term || \"\")\r\n    .toLowerCase()\r\n    .split(/[^\\w._\\/-]/)\r\n    .filter((s) => !!s.trim());\r\n\r\n  const matchedWidgets = [];\r\n\r\n  const limit = props.limit ?? 30;\r\n\r\n  const MaxSingleScore = 1;\r\n  const MaxScore = MaxSingleScore * 4;\r\n\r\n  const computeScore = (s) => {\r\n    s = s.toLowerCase();\r\n    return (\r\n      terms\r\n        .map((term) => {\r\n          const pos = s.indexOf(term);\r\n          return pos >= 0 ? Math.exp(-pos) : 0;\r\n        })\r\n        .reduce((s, v) => s + v, 0) / terms.length\r\n    );\r\n  };\r\n\r\n  Object.entries(keys).forEach(([accountId, data]) => {\r\n    Object.keys(data.widget).forEach((componentId) => {\r\n      const widgetSrc = `${accountId}/widget/${componentId}`;\r\n      const widgetSrcScore = computeScore(widgetSrc);\r\n      const componentIdScore = computeScore(componentId);\r\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\r\n      const name = metadata.name || componentId;\r\n      if (requiredTag && !(metadata.tags && requiredTag in metadata.tags)) {\r\n        return;\r\n      }\r\n      const boosted =\r\n        boostedTag && metadata.tags && boostedTag in metadata.tags;\r\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\r\n      const nameScore = computeScore(name);\r\n      const tagsScore = Math.min(\r\n        MaxSingleScore,\r\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\r\n      );\r\n      const score =\r\n        (widgetSrcScore + componentIdScore + nameScore + tagsScore) / MaxScore;\r\n      if (score > 0) {\r\n        matchedWidgets.push({\r\n          score,\r\n          accountId,\r\n          widgetName: componentId,\r\n          widgetSrc,\r\n          name,\r\n          tags,\r\n          boosted,\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  matchedWidgets.sort(\r\n    (a, b) => (b.boosted ? 2 : 0) + b.score - (a.boosted ? 2 : 0) - a.score\r\n  );\r\n  const result = matchedWidgets.slice(0, limit);\r\n\r\n  State.update({\r\n    term,\r\n    result,\r\n  });\r\n\r\n  if (props.onChange) {\r\n    props.onChange({ term, result });\r\n  }\r\n};\r\n\r\nif (props.term && props.term !== state.oldTerm) {\r\n  State.update({\r\n    oldTerm: props.term,\r\n  });\r\n  if (props.term !== state.term) {\r\n    computeResults(props.term);\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding: 0;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 40px;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  color: #e2e8f0;\r\n  width: calc(100% - 40px);\r\n//   height: 40px;\r\n  outline:none;\r\n  border:none;\r\nbackground-color: transparent;\r\n\r\n  &:focus{\r\n    color: #e2e8f0;\r\n    outline:none;\r\n    border:none;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: ${props.theme.buttonColor};\r\n  color: ${props.theme.buttonTextColor};\r\n  width: 40px;\r\n  height: 40px;\r\n  outline:none;\r\n  border:none;\r\n  transition: all .2s ease-in-out;\r\n\r\n  &:hover{\r\n    background-color: ${props.theme.buttonColor}CC;\r\n    outline:none;\r\n    border:none;\r\n  }\r\n  &:active{\r\n    background-color: ${props.theme.buttonColor}99;\r\n  }\r\n`;\r\n\r\nreturn (\r\n  <Container\r\n    style={{\r\n      backgroundColor: props.theme.ui,\r\n      border: `1px ${theme.borderColor} solid`,\r\n    }}\r\n  >\r\n    <i\r\n      className=\"bi bi-search\"\r\n      style={{\r\n        width: 50,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        color: props.theme.textColor2,\r\n      }}\r\n    ></i>\r\n    <Input\r\n      type=\"text\"\r\n      value={state.term ?? \"\"}\r\n      onChange={(e) => computeResults(e.target.value)}\r\n      placeholder={props.placeholder ?? `Search components`}\r\n    />\r\n\r\n    {state.term && (\r\n      <Button type=\"button\" onClick={() => computeResults(\"\")}>\r\n        <i className=\"bi bi-x\" style={{ fontSize: 20 }}></i>\r\n      </Button>\r\n    )}\r\n\r\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/saidulbadhon.near/widget/SearchPage.Searchbar", "branch.draft": NaN}