{"tx_hash": "122AgAd4G9Zf7WNVKSPsNt58t1RjNvyQV4G3j7bQFyDT", "action_id_social": "72KFSvCu7fZVrLKr7vr9puGfG8YLrC1eaPK2sW6eWed4-0-widget", "block_id": 88594763, "block_timestamp": "2023-04-01 17:38:48.611", "signer_id": "saidulbadhon.near", "widget_name": "SearchPage.Searchbar", "source_code": "const allMetadata =\n  Social.get(\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\n    \"final\"\n  ) || {};\nconst keys = Social.keys([\"*/widget/*\"], \"final\", { values_only: true }) || {};\n\nconst requiredTag = props.filterTag;\nconst boostedTag = props.boostedTag;\nconst inputTerm = props.term;\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._\\/-]/)\n    .filter((s) => !!s.trim());\n\n  const matchedWidgets = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 1;\n  const MaxScore = MaxSingleScore * 4;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.exp(-pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(keys).forEach(([accountId, data]) => {\n    Object.keys(data.widget).forEach((componentId) => {\n      const widgetSrc = `${accountId}/widget/${componentId}`;\n      const widgetSrcScore = computeScore(widgetSrc);\n      const componentIdScore = computeScore(componentId);\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\n      const name = metadata.name || componentId;\n      if (requiredTag && !(metadata.tags && requiredTag in metadata.tags)) {\n        return;\n      }\n      const boosted =\n        boostedTag && metadata.tags && boostedTag in metadata.tags;\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\n      const nameScore = computeScore(name);\n      const tagsScore = Math.min(\n        MaxSingleScore,\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\n      );\n      const score =\n        (widgetSrcScore + componentIdScore + nameScore + tagsScore) / MaxScore;\n      if (score > 0) {\n        matchedWidgets.push({\n          score,\n          accountId,\n          widgetName: componentId,\n          widgetSrc,\n          name,\n          tags,\n          boosted,\n        });\n      }\n    });\n  });\n\n  matchedWidgets.sort(\n    (a, b) => (b.boosted ? 2 : 0) + b.score - (a.boosted ? 2 : 0) - a.score\n  );\n  const result = matchedWidgets.slice(0, limit);\n\n  State.update({\n    term,\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, result });\n  }\n};\n\nif (props.term && props.term !== state.oldTerm) {\n  State.update({\n    oldTerm: props.term,\n  });\n  if (props.term !== state.term) {\n    computeResults(props.term);\n  }\n}\n\nconst Container = styled.div`\n  background-color: ${theme.ui};\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 40px;\n\n    border: 1px ${props.theme.borderColor} solid;\n    borderRadius: 4px;\n`;\n\nconst Input = styled.input`\n  color: ${props.theme.textColor};\n  width: calc(100% - 40px);\n//   height: 40px;\n  outline:none;\n  border:none;\n\n  &:focus{\n    color: ${props.theme.textColor};\n    outline:none;\n    border:none;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: ${props.theme.buttonColor};\n  color: ${props.theme.buttonTextColor};\n  width: 40px;\n  height: 40px;\n  outline:none;\n  border:none;\n  transition: all .2s ease-in-out;\n\n  &:hover{\n    background-color: ${props.theme.buttonColor}CC;\n    outline:none;\n    border:none;\n  }\n  &:active{\n    background-color: ${props.theme.buttonColor}99;\n  }\n`;\n\nreturn (\n  <Container>\n    <i\n      className=\"bi bi-search\"\n      style={{ width: 50, display: \"flex\", justifyContent: \"center\" }}\n    ></i>\n    <Input\n      type=\"text\"\n      value={state.term ?? \"\"}\n      onChange={(e) => computeResults(e.target.value)}\n      placeholder={props.placeholder ?? `Search components`}\n    />\n\n    {/*{state.term && (*/}\n    <Button type=\"button\" onClick={() => computeResults(\"\")}>\n      <i className=\"bi bi-x\"></i>\n    </Button>\n    {/*})}*/}\n\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\n  </Container>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/saidulbadhon.near/widget/SearchPage.Searchbar", "branch.draft": NaN}