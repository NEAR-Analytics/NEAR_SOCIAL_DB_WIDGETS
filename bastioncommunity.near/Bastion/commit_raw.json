{"tx_hash": "HJ97ojhTKT8eKachoWekuFRj52he4gzq17yT2toW6s62", "action_id_social": "8864PjwTURE48EFpbULQZHEQ9BrjXWa5cXA4LrAhT14Y-0-widget", "block_id": 92430675, "block_timestamp": "2023-05-22T06:40:51.349Z", "signer_id": "bastioncommunity.near", "widget_name": "Bastion", "source_code": "const { selectedTokenId, amount, hasError, status } = state;\r\n\r\n// check if account connected\r\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\r\nif (!sender) {\r\n  return (\r\n    <div style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n      <h2>Please login first</h2>\r\n      <br />\r\n      <Web3Connect connectLabel=\"Connect with Web3\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n// check if correct chain\r\nconst { chainId } = Ethers.getNetwork();\r\nconst chainIdToSwitch = \"0x4E97D6A2\";\r\nconst switchChain = () => {\r\n  const auroraChain = {\r\n    chainId: \"0x4e454152\", // The chain ID for Aurora (1313161554 in hexadecimal)\r\n    chainName: \"Aurora\", // The name of the Aurora chain\r\n    nativeCurrency: {\r\n      name: \"Ethereum\",\r\n      symbol: \"ETH\",\r\n      decimals: 18,\r\n    },\r\n    rpcUrls: [\"https://mainnet.aurora.dev\"], // The RPC endpoint for the Aurora chain\r\n    blockExplorerUrls: [\"https://aurorascan.dev/\"], // The block explorer URL for Aurora\r\n  };\r\n\r\n  Ethers.send(\"wallet_addEthereumChain\", [auroraChain]);\r\n};\r\n\r\nif (chainId !== 1313161554) {\r\n  return (\r\n    <div style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n      <h2>Please switch to Aurora</h2>\r\n      <br />\r\n      <button onClick={switchChain}>Switch to Aurora</button>\r\n      <br />\r\n      <br />\r\n      <p>**Please refresh once after switch chain**</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n// fetch data from lens\r\nconst LenABI = fetch(\r\n  \"https://raw.githubusercontent.com/pysrbastion/bastion-abi/main/Lens.json\"\r\n).body;\r\nconst EIP20InterfaceABI = fetch(\r\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/EIP20.json\"\r\n).body;\r\nconst CEthABI = fetch(\r\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/CEther.json\"\r\n).body;\r\nconst CErc20ABI = fetch(\r\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/CErc20.json\"\r\n).body;\r\nconst ComptrollerABI = fetch(\r\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/Comptroller.json\"\r\n).body;\r\n\r\nconst checkABI1 = JSON.parse(LenABI);\r\nconst checkABI2 = JSON.parse(EIP20InterfaceABI);\r\nconst checkABI3 = JSON.parse(CEthABI);\r\nconst checkABI4 = JSON.parse(CErc20ABI);\r\n\r\nconst lenContract = \"0x080B5ce373fE2103A7086b31DabA412E88bD7356\";\r\n\r\nconst len = new ethers.Contract(lenContract, LenABI, Ethers.provider());\r\n\r\nconst dataArray = [\r\n  \"0xfa786baC375D8806185555149235AcDb182C033b\",\r\n  \"0x4E8fE8fd314cFC09BDb0942c5adCC37431abDCD0\",\r\n  \"0x8C14ea853321028a7bb5E4FB0d0147F183d3B677\",\r\n  \"0xe5308dc623101508952948b141fD9eaBd3337D99\",\r\n  \"0x845E15A441CFC1871B7AC610b0E922019BaD9826\",\r\n];\r\n\r\nlen.callStatic\r\n  .cTokenBalancesAll(dataArray, sender, 0)\r\n  .then((cTokenBalancesAll) => {\r\n    State.update({ cTokenBalancesAll });\r\n  });\r\n\r\nlen.callStatic.cTokenMetadataAll(dataArray, 0).then((cTokenMetadataAll) => {\r\n  State.update({ cTokenMetadataAll });\r\n});\r\n\r\n// provide constants\r\nconst TokensDetail = {\r\n  [\"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\"]: {\r\n    name: \"Near\",\r\n    symbol: \"NEAR\",\r\n    address: \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\",\r\n    cAddress: \"0x8C14ea853321028a7bb5E4FB0d0147F183d3B677\",\r\n    icon: \"near.svg\",\r\n    decimals: 24,\r\n  },\r\n  [\"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\"]: {\r\n    name: \"USD Coin\",\r\n    symbol: \"USDC\",\r\n    address: \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\",\r\n    cAddress: \"0xe5308dc623101508952948b141fD9eaBd3337D99\",\r\n    icon: \"usdc.svg\",\r\n    decimals: 6,\r\n  },\r\n  [\"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\"]: {\r\n    name: \"Tether USD\",\r\n    symbol: \"USDT.e\",\r\n    address: \"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\",\r\n    cAddress: \"0x845E15A441CFC1871B7AC610b0E922019BaD9826\",\r\n    icon: \"usdt.svg\",\r\n    decimals: 6,\r\n  },\r\n  [\"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\"]: {\r\n    name: \"Wrapped Bitcoin\",\r\n    symbol: \"WBTC\",\r\n    address: \"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\",\r\n    cAddress: \"0xfa786baC375D8806185555149235AcDb182C033b\",\r\n    icon: \"btc.png\",\r\n    decimals: 8,\r\n  },\r\n  [\"ETH\"]: {\r\n    name: \"Ether\",\r\n    symbol: \"ETH\",\r\n    address: ethers.constants.AddressZero,\r\n    cAddress: \"0x4E8fE8fd314cFC09BDb0942c5adCC37431abDCD0\",\r\n    icon: \"eth.svg\",\r\n    decimals: 18,\r\n  },\r\n};\r\n\r\nconst Comptroller = \"0x6De54724e128274520606f038591A00C5E94a1F6\";\r\n\r\nif (!checkABI1 || !checkABI2 || !checkABI3 || !checkABI4) {\r\n  return (\r\n    <div>\r\n      <h2>Loading Data...</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nlen.callStatic\r\n  .getAccountLimits(Comptroller, sender)\r\n  .then((getAccountLimits) => {\r\n    State.update({ getAccountLimits });\r\n  });\r\n\r\nconst expandToken = (value, decimals) => {\r\n  return new Big(value).mul(new Big(10).pow(decimals));\r\n};\r\n\r\nconst handleSelect = (e) => {\r\n  State.update({\r\n    selectedTokenId: e.target.value,\r\n    hasError: 0,\r\n  });\r\n};\r\n\r\nconst handleAmount = (e) => {\r\n  State.update({\r\n    amount: e.target.value,\r\n    selectedTokenId,\r\n    hasError: 0,\r\n  });\r\n};\r\n\r\nconst handleApprove = () => {\r\n  if (!selectedTokenId || !amount || hasError) return;\r\n\r\n  if (state.actionTabs == \"repay\") {\r\n    if (amount > state.borrowedAmount) {\r\n      State.update({ hasError: 3 });\r\n      return;\r\n    }\r\n  } else if (state.actionTabs == \"deposit\") {\r\n    if (amount > state.balance) {\r\n      State.update({ hasError: 1 });\r\n      return;\r\n    }\r\n  }\r\n\r\n  const erc20 = new ethers.Contract(\r\n    selectedTokenId,\r\n    EIP20InterfaceABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const expandedAmount = expandToken(\r\n    amount,\r\n    TokensDetail[selectedTokenId].decimals\r\n  ).toString();\r\n\r\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\r\n\r\n  erc20\r\n    .approve(TokensDetail[selectedTokenId].cAddress, toBigNumber)\r\n    .then((transactionHash) => {\r\n      State.update({ success: true });\r\n      console.log(\"transactionHash is \" + transactionHash);\r\n    });\r\n};\r\n\r\nconst handleDeposit = () => {\r\n  if (!selectedTokenId || !amount || hasError) return;\r\n\r\n  if (Number(amount) > Number(state.balance)) {\r\n    State.update({ hasError: 1 });\r\n    return;\r\n  }\r\n\r\n  let contractABI;\r\n  if (selectedTokenId == \"ETH\") {\r\n    contractABI = CEthABI;\r\n  } else {\r\n    contractABI = CErc20ABI;\r\n  }\r\n\r\n  const connection = new ethers.Contract(\r\n    TokensDetail[selectedTokenId].cAddress,\r\n    contractABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const expandedAmount = expandToken(\r\n    amount,\r\n    TokensDetail[selectedTokenId].decimals\r\n  ).toString();\r\n\r\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\r\n  console.log(toBigNumber.toString());\r\n\r\n  const mintPromise =\r\n    selectedTokenId == \"ETH\"\r\n      ? connection.mint({ value: expandedAmount })\r\n      : connection.mint(expandedAmount);\r\n\r\n  mintPromise\r\n    .then((transaction) => {\r\n      console.log(\"Transaction sent:\", transaction.hash);\r\n      State.update({ hasError: -1 });\r\n      return transaction.wait();\r\n    })\r\n    .then((receipt) => {\r\n      State.update({ hasError: 0 });\r\n      State.update({ success: true });\r\n      console.log(\"Transaction mined, receipt:\", receipt);\r\n    })\r\n    .catch((error) => {\r\n      State.update({ hasError: 5, errorMessage: error });\r\n      console.log(\"Error in mint function:\", error);\r\n    });\r\n};\r\n\r\nconst getCTokenBalancesAllIndex = () => {\r\n  const rewardIndex = state.cTokenBalancesAll.findIndex(\r\n    (element) => element[0] == TokensDetail[selectedTokenId].cAddress\r\n  );\r\n  return rewardIndex;\r\n};\r\n\r\nconst walletBalance = () => {\r\n  const rewardIndex = getCTokenBalancesAllIndex();\r\n  const bigValue = state.cTokenBalancesAll[rewardIndex][4].toString();\r\n  const cal = (\r\n    Number(bigValue) / Math.pow(10, TokensDetail[selectedTokenId].decimals)\r\n  ).toFixed(2);\r\n  State.update({\r\n    balance: Number(cal),\r\n  });\r\n  return cal;\r\n};\r\n\r\nconst supplyBalance = () => {\r\n  const rewardIndex = getCTokenBalancesAllIndex();\r\n  const bigValue = state.cTokenBalancesAll[rewardIndex][1].mul(\r\n    state.cTokenBalancesAll[rewardIndex][3]\r\n  );\r\n  return (\r\n    Number(bigValue.toString()) /\r\n    Math.pow(10, 18 + TokensDetail[selectedTokenId].decimals)\r\n  ).toFixed(3);\r\n};\r\n\r\nconst getAllowance = () => {\r\n  const rewardIndex = getCTokenBalancesAllIndex();\r\n  const bigValue = state.cTokenBalancesAll[rewardIndex][5].toString();\r\n  const cal = (\r\n    Number(bigValue) / Math.pow(10, TokensDetail[selectedTokenId].decimals)\r\n  ).toFixed(2);\r\n  State.update({\r\n    allowance: Number(cal),\r\n  });\r\n};\r\n\r\nconst remainingBalance = () => {\r\n  let totalBorrowLimit = ethers.BigNumber.from(0);\r\n  let totalBorrowd = ethers.BigNumber.from(0);\r\n  for (const key of dataArray) {\r\n    // find total borrow limit\r\n    const indexBalance = state.cTokenBalancesAll.findIndex(\r\n      (element) => element[0] == key\r\n    );\r\n    const indexMeta = state.cTokenMetadataAll.findIndex(\r\n      (element) => element[0] == key\r\n    );\r\n    const bigValue = state.cTokenBalancesAll[indexBalance][1].mul(\r\n      state.cTokenBalancesAll[indexBalance][3]\r\n    );\r\n    const valueUsd = bigValue.mul(state.cTokenMetadataAll[indexMeta][1]);\r\n    const valueWithCFactor = valueUsd.mul(\r\n      state.cTokenMetadataAll[indexMeta][11]\r\n    );\r\n    // find total borrowed\r\n    const bigValueBorrowedUSD = state.cTokenBalancesAll[indexBalance][2].mul(\r\n      state.cTokenMetadataAll[indexMeta][1]\r\n    );\r\n    if (state.getAccountLimits[0].includes(key)) {\r\n      totalBorrowLimit = totalBorrowLimit.add(valueWithCFactor);\r\n      totalBorrowd = totalBorrowd.add(bigValueBorrowedUSD);\r\n    }\r\n  }\r\n  const totalBorrowdFinal = (\r\n    Number(totalBorrowd.toString()) / Math.pow(10, 18 * 2)\r\n  ).toFixed(2);\r\n  const totalBorrowdLimitFinal = (\r\n    Number(totalBorrowLimit.toString()) / Math.pow(10, 18 * 4)\r\n  ).toFixed(2);\r\n  State.update({\r\n    LimitAmount: (totalBorrowdLimitFinal - totalBorrowdFinal).toFixed(2),\r\n  });\r\n  return (totalBorrowdLimitFinal - totalBorrowdFinal).toFixed(2);\r\n};\r\n\r\nconst handleBorrow = () => {\r\n  if (!selectedTokenId || !amount || hasError) return;\r\n  if (Number(state.amount) > Number(state.LimitAmount)) {\r\n    State.update({ hasError: 2 });\r\n    return;\r\n  }\r\n\r\n  let contractABI;\r\n  if (selectedTokenId == \"ETH\") {\r\n    contractABI = CEthABI;\r\n  } else {\r\n    contractABI = CErc20ABI;\r\n  }\r\n\r\n  const connection = new ethers.Contract(\r\n    TokensDetail[selectedTokenId].cAddress,\r\n    contractABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const expandedAmount = expandToken(\r\n    amount,\r\n    TokensDetail[selectedTokenId].decimals\r\n  ).toString();\r\n\r\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\r\n\r\n  connection\r\n    .borrow(toBigNumber)\r\n    .then((transaction) => {\r\n      console.log(\"Transaction sent:\", transaction.hash);\r\n      State.update({ hasError: -1 });\r\n      return transaction.wait();\r\n    })\r\n    .then((receipt) => {\r\n      State.update({ hasError: 0 });\r\n      State.update({ success: true });\r\n      console.log(\"Transaction receipt:\", receipt);\r\n    })\r\n    .catch((error) => {\r\n      State.update({ hasError: 5, errorMessage: error });\r\n      console.log(\"Error:\", error);\r\n    });\r\n};\r\n\r\nconst getBorrowed = () => {\r\n  const rewardIndex = getCTokenBalancesAllIndex();\r\n  const bigValueBorrowed = state.cTokenBalancesAll[rewardIndex][2];\r\n  const finalValue = (\r\n    Number(bigValueBorrowed.toString()) /\r\n    Math.pow(10, TokensDetail[selectedTokenId].decimals)\r\n  ).toFixed(2);\r\n  State.update({ borrowedAmount: finalValue });\r\n  return finalValue;\r\n};\r\n\r\nconst handleRepay = () => {\r\n  if (!selectedTokenId || !amount || hasError) return;\r\n\r\n  if (Number(amount) > Number(state.borrowedAmount)) {\r\n    State.update({ hasError: 3 });\r\n    return;\r\n  }\r\n\r\n  let contractABI;\r\n  if (selectedTokenId == \"ETH\") {\r\n    contractABI = CEthABI;\r\n  } else {\r\n    contractABI = CErc20ABI;\r\n  }\r\n\r\n  const connection = new ethers.Contract(\r\n    TokensDetail[selectedTokenId].cAddress,\r\n    contractABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const expandedAmount = expandToken(\r\n    amount,\r\n    TokensDetail[selectedTokenId].decimals\r\n  ).toString();\r\n\r\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\r\n\r\n  connection\r\n    .repayBorrow(toBigNumber)\r\n    .then((transaction) => {\r\n      console.log(\"Transaction sent:\", transaction.hash);\r\n      State.update({ hasError: -1 });\r\n      return transaction.wait();\r\n    })\r\n    .then((receipt) => {\r\n      State.update({ hasError: 0 });\r\n      State.update({ success: true });\r\n      console.log(\"Transaction receipt:\", receipt);\r\n    })\r\n    .catch((error) => {\r\n      State.update({ hasError: 5, errorMessage: error });\r\n      console.log(\"Error:\", error);\r\n    });\r\n};\r\n\r\nconst maxWithdraw = () => {\r\n  const rewardIndex = getCTokenBalancesAllIndex();\r\n  const supplyBalance = supplyBalance();\r\n  const tokenPrice =\r\n    Number(state.cTokenMetadataAll[rewardIndex][1].toString()) /\r\n    Math.pow(10, 18 + (18 - TokensDetail[selectedTokenId].decimals));\r\n  const liquidity =\r\n    Number(state.getAccountLimits[1].toString()) / Math.pow(10, 18);\r\n  const liquidityInToken = liquidity / tokenPrice;\r\n  const CFactor =\r\n    Number(state.cTokenMetadataAll[rewardIndex][11].toString()) /\r\n    Math.pow(10, 18);\r\n  const totalLiquidity = (liquidityInToken / CFactor).toFixed(3);\r\n  if (supplyBalance >= totalLiquidity) {\r\n    State.update({ maxWithdraw: Number(totalLiquidity) });\r\n    return totalLiquidity;\r\n  } else {\r\n    State.update({ maxWithdraw: Number(supplyBalance) });\r\n    return supplyBalance;\r\n  }\r\n};\r\n\r\nconst handleWithdraw = () => {\r\n  if (!selectedTokenId || !amount || hasError) return;\r\n\r\n  if (Number(amount) > Number(state.maxWithdraw)) {\r\n    State.update({ hasError: 4 });\r\n    return;\r\n  }\r\n\r\n  let contractABI;\r\n  if (selectedTokenId == \"ETH\") {\r\n    contractABI = CEthABI;\r\n  } else {\r\n    contractABI = CErc20ABI;\r\n  }\r\n\r\n  const connection = new ethers.Contract(\r\n    TokensDetail[selectedTokenId].cAddress,\r\n    contractABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const expandedAmount = expandToken(\r\n    amount,\r\n    TokensDetail[selectedTokenId].decimals\r\n  ).toString();\r\n\r\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\r\n  const supplyBalance = supplyBalance();\r\n\r\n  if (amount >= supplyBalance) {\r\n    connection\r\n      .redeem(toBigNumber)\r\n      .then((transaction) => {\r\n        console.log(\"Transaction sent:\", transaction.hash);\r\n        State.update({ hasError: -1 });\r\n        return transaction.wait();\r\n      })\r\n      .then((receipt) => {\r\n        State.update({ hasError: 0 });\r\n        State.update({ success: true });\r\n        console.log(\"Transaction receipt:\", receipt);\r\n      })\r\n      .catch((error) => {\r\n        State.update({ hasError: 5, errorMessage: error });\r\n        console.log(\"Error:\", error);\r\n      });\r\n  } else {\r\n    connection\r\n      .redeemUnderlying(toBigNumber)\r\n      .then((transaction) => {\r\n        console.log(\"Transaction sent:\", transaction.hash);\r\n        State.update({ hasError: -1 });\r\n        return transaction.wait();\r\n      })\r\n      .then((receipt) => {\r\n        State.update({ hasError: 0 });\r\n        State.update({ success: true });\r\n        console.log(\"Transaction receipt:\", receipt);\r\n      })\r\n      .catch((error) => {\r\n        State.update({ hasError: 5, errorMessage: error });\r\n        console.log(\"Error:\", error);\r\n      });\r\n  }\r\n};\r\n\r\nfunction numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst handleCollateral = () => {\r\n  if (!selectedTokenId) return;\r\n  const connection = new ethers.Contract(\r\n    \"0x6De54724e128274520606f038591A00C5E94a1F6\",\r\n    ComptrollerABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n  if (\r\n    !state.getAccountLimits[0].includes(TokensDetail[selectedTokenId].cAddress)\r\n  ) {\r\n    connection\r\n      .enterMarkets([TokensDetail[selectedTokenId].cAddress])\r\n      .then((transaction) => {\r\n        console.log(\"Transaction sent:\", transaction.hash);\r\n        State.update({ hasError: -1 });\r\n        return transaction.wait();\r\n      })\r\n      .then((receipt) => {\r\n        State.update({ hasError: 0 });\r\n        State.update({ success: true });\r\n        console.log(\"Transaction receipt:\", receipt);\r\n      })\r\n      .catch((error) => {\r\n        State.update({ hasError: 5, errorMessage: error });\r\n        console.log(\"Error:\", error);\r\n      });\r\n  } else {\r\n    const borrowBalance = getBorrowed();\r\n    const supplyBalance = supplyBalance();\r\n    const maxWithdraw = maxWithdraw();\r\n\r\n    if (Number(borrowBalance) > 0) {\r\n      State.update({ hasError: 6 });\r\n    } else if (supplyBalance > maxWithdraw) {\r\n      State.update({ hasError: 7 });\r\n    } else {\r\n      connection\r\n        .exitMarket(TokensDetail[selectedTokenId].cAddress)\r\n        .then((transaction) => {\r\n          console.log(\"Transaction sent:\", transaction.hash);\r\n          State.update({ hasError: -1 });\r\n          return transaction.wait();\r\n        })\r\n        .then((receipt) => {\r\n          State.update({ hasError: 0 });\r\n          State.update({ success: true });\r\n          console.log(\"Transaction receipt:\", receipt);\r\n        })\r\n        .catch((error) => {\r\n          State.update({ hasError: 5, errorMessage: error });\r\n          console.log(\"Error:\", error);\r\n        });\r\n    }\r\n  }\r\n};\r\n\r\nconst allAssetData = state.cTokenMetadataAll\r\n  ? Object.keys(TokensDetail).map((key) => {\r\n      const indexMeta = state.cTokenMetadataAll.findIndex(\r\n        (element) => element[0] == TokensDetail[key].cAddress\r\n      );\r\n      const totalSupply = state.cTokenMetadataAll[indexMeta][8].mul(\r\n        state.cTokenMetadataAll[indexMeta][2]\r\n      );\r\n      const totalSupplyValue = (\r\n        Number(totalSupply.toString()) /\r\n        Math.pow(10, 18 + TokensDetail[key].decimals)\r\n      ).toFixed(2);\r\n      const supplyRatePerBlock = state.cTokenMetadataAll[indexMeta][3];\r\n      const supplyApy = (\r\n        (Math.pow(\r\n          (Number(supplyRatePerBlock.toString()) / 1e18) * 86400 + 1,\r\n          365\r\n        ) -\r\n          1) *\r\n        100\r\n      ).toFixed(2);\r\n      const borrowRatePerBlock = state.cTokenMetadataAll[indexMeta][4];\r\n      const borrowApy = (\r\n        (Math.pow(\r\n          (Number(borrowRatePerBlock.toString()) / 1e18) * 86400 + 1,\r\n          365\r\n        ) -\r\n          1) *\r\n        100\r\n      ).toFixed(2);\r\n      const valueUSD =\r\n        totalSupplyValue *\r\n        (Number(state.cTokenMetadataAll[indexMeta][1].toString()) /\r\n          Math.pow(10, 18 + (18 - TokensDetail[key].decimals)));\r\n      return (\r\n        <tr>\r\n          <td>{TokensDetail[key].name}</td>\r\n          <td class=\"text-end\">{supplyApy}%</td>\r\n          <td class=\"text-end\">{borrowApy}%</td>\r\n          <td class=\"text-end\">\r\n            {numberWithCommas(totalSupplyValue)} {TokensDetail[key].symbol}\r\n            <br />\r\n            (${numberWithCommas(valueUSD.toFixed(2))})\r\n          </td>\r\n        </tr>\r\n      );\r\n    })\r\n  : undefined;\r\n\r\nconst fetchAllData = () => {\r\n  State.update({ allDataTab: allAssetData });\r\n};\r\n\r\nconst portfolio =\r\n  state.cTokenBalancesAll && state.cTokenMetadataAll\r\n    ? Object.keys(TokensDetail).map((key) => {\r\n        const indexMeta = state.cTokenMetadataAll.findIndex(\r\n          (element) => element[0] == TokensDetail[key].cAddress\r\n        );\r\n        const indexBalance = state.cTokenBalancesAll.findIndex(\r\n          (element) => element[0] == TokensDetail[key].cAddress\r\n        );\r\n        const bigValue = state.cTokenBalancesAll[indexBalance][4].toString();\r\n        const cal = (\r\n          Number(bigValue) / Math.pow(10, TokensDetail[key].decimals)\r\n        ).toFixed(2);\r\n\r\n        const bigValueSupply = state.cTokenBalancesAll[indexBalance][1].mul(\r\n          state.cTokenBalancesAll[indexBalance][3]\r\n        );\r\n        const supplied = (\r\n          Number(bigValueSupply.toString()) /\r\n          Math.pow(10, 18 + TokensDetail[key].decimals)\r\n        ).toFixed(3);\r\n        const bigValueBorrowed = state.cTokenBalancesAll[indexBalance][2];\r\n        const finalValueBorrowed = (\r\n          Number(bigValueBorrowed.toString()) /\r\n          Math.pow(10, TokensDetail[key].decimals)\r\n        ).toFixed(2);\r\n        const price =\r\n          Number(state.cTokenMetadataAll[indexMeta][1].toString()) /\r\n          Math.pow(10, 18 + (18 - TokensDetail[key].decimals));\r\n        return (\r\n          <tr>\r\n            <td>{TokensDetail[key].name}</td>\r\n            <td class=\"text-end\">\r\n              {cal} {TokensDetail[key].symbol}\r\n              <br />\r\n              (${numberWithCommas((Number(cal) * price).toFixed(2))})\r\n            </td>\r\n            <td class=\"text-end\">\r\n              {supplied} {TokensDetail[key].symbol}\r\n              <br />\r\n              (${numberWithCommas((Number(supplied) * price).toFixed(2))})\r\n            </td>\r\n            <td class=\"text-end\">\r\n              {finalValueBorrowed} {TokensDetail[key].symbol}\r\n              <br />\r\n              ($\r\n              {numberWithCommas(\r\n                (Number(finalValueBorrowed) * price).toFixed(2)\r\n              )}\r\n              )\r\n            </td>\r\n            <td class=\"text-end\">\r\n              {state.getAccountLimits[0].includes(\r\n                TokensDetail[key].cAddress\r\n              ) ? (\r\n                <span style={{ color: \"green\" }}>Used</span>\r\n              ) : (\r\n                <span style={{ color: \"red\" }}>Not used</span>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        );\r\n      })\r\n    : undefined;\r\n\r\nif (!state.actionTabs) {\r\n  State.update({ actionTabs: \"deposit\" });\r\n}\r\nif (!state.actionList) {\r\n  State.update({ actionList: \"assets\" });\r\n}\r\n\r\nreturn (\r\n  <>\r\n    {state.cTokenBalancesAll &&\r\n    state.cTokenMetadataAll &&\r\n    state.getAccountLimits ? (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          width: \"100%\",\r\n          marginTop: \"20px\",\r\n          marginLeft: \"20px\",\r\n        }}\r\n      >\r\n        <div style={{ paddingRight: \"3rem\", width: \"60%\" }}>\r\n          <div class=\"list btn-group\" role=\"group\" aria-label=\"List\">\r\n            <input\r\n              type=\"radio\"\r\n              class=\"btn-check\"\r\n              name=\"btnradiolist\"\r\n              id=\"assets\"\r\n              autocomplete=\"off\"\r\n              checked={state.actionList === \"assets\"}\r\n              onClick={() => State.update({ actionList: \"assets\" })}\r\n            />\r\n            <label class=\"btn btn-outline-primary\" for=\"assets\">\r\n              Assets\r\n            </label>\r\n            <input\r\n              type=\"radio\"\r\n              class=\"btn-check\"\r\n              name=\"btnradiolist\"\r\n              id=\"portfolio\"\r\n              autocomplete=\"off\"\r\n              checked={state.actionList === \"portfolio\"}\r\n              onClick={() => State.update({ actionList: \"portfolio\" })}\r\n            />\r\n            <label class=\"btn btn-outline-primary\" for=\"portfolio\">\r\n              Portfolio\r\n            </label>\r\n          </div>\r\n          {state.actionList == \"assets\" ? (\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr\r\n                  style={{\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <th scope=\"col\">Asset</th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    APY\r\n                  </th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    APY (borrow)\r\n                  </th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    Total Supply\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              {fetchAllData()}\r\n              <tbody>{state.allDataTab}</tbody>\r\n            </table>\r\n          ) : (\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr\r\n                  style={{\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <th scope=\"col\">Asset</th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    Wallet Balance\r\n                  </th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    Supplied\r\n                  </th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    Borrowed\r\n                  </th>\r\n                  <th scope=\"col\" class=\"text-end\">\r\n                    Collateral status\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{portfolio}</tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n        <div style={{ maxWidth: \"400px\" }}>\r\n          <div class=\"card-body d-grid gap-3\">\r\n            <div class=\"action btn-group\" role=\"group\" aria-label=\"Deposit\">\r\n              <input\r\n                type=\"radio\"\r\n                class=\"btn-check\"\r\n                name=\"btnradioaction\"\r\n                id=\"deposit\"\r\n                autocomplete=\"off\"\r\n                checked={state.actionTabs === \"deposit\"}\r\n                onClick={() => State.update({ actionTabs: \"deposit\" })}\r\n              />\r\n              <label class=\"btn btn-outline-primary\" for=\"deposit\">\r\n                Deposit\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                class=\"btn-check\"\r\n                name=\"btnradioaction\"\r\n                id=\"borrow\"\r\n                autocomplete=\"off\"\r\n                checked={state.actionTabs === \"borrow\"}\r\n                onClick={() => State.update({ actionTabs: \"borrow\" })}\r\n              />\r\n              <label class=\"btn btn-outline-primary\" for=\"borrow\">\r\n                Borrow\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                class=\"btn-check\"\r\n                name=\"btnradioaction\"\r\n                id=\"repay\"\r\n                autocomplete=\"off\"\r\n                checked={state.actionTabs === \"repay\"}\r\n                onClick={() => State.update({ actionTabs: \"repay\" })}\r\n              />\r\n              <label class=\"btn btn-outline-primary\" for=\"repay\">\r\n                Repay\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                class=\"btn-check\"\r\n                name=\"btnradioaction\"\r\n                id=\"withdraw\"\r\n                autocomplete=\"off\"\r\n                checked={state.actionTabs === \"withdraw\"}\r\n                onClick={() => State.update({ actionTabs: \"withdraw\" })}\r\n              />\r\n              <label class=\"btn btn-outline-primary\" for=\"withdraw\">\r\n                Withdraw\r\n              </label>\r\n            </div>\r\n            <div>\r\n              <div class=\"mb-2 text-muted\">Token</div>\r\n              <select\r\n                onChange={handleSelect}\r\n                class=\"p-2 mb-1\"\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <option value=\"\">Choose your token</option>\r\n                {Object.keys(TokensDetail).map((key) => {\r\n                  return (\r\n                    <option key={key} value={key}>\r\n                      {TokensDetail[key].symbol}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n              {state.selectedTokenId !== undefined &&\r\n              state.selectedTokenId !== \"\" ? (\r\n                state.actionTabs == \"deposit\" ? (\r\n                  <div>\r\n                    <span class=\"badge bg-light text-dark\">\r\n                      Wallet Balance: {walletBalance()}{\" \"}\r\n                      {TokensDetail[selectedTokenId].symbol}\r\n                    </span>\r\n                    <span class=\"badge bg-light text-dark\">\r\n                      Supply Balance: {supplyBalance()}{\" \"}\r\n                      {TokensDetail[selectedTokenId].symbol}\r\n                    </span>\r\n                    {getAllowance()}\r\n                  </div>\r\n                ) : state.actionTabs == \"borrow\" ? (\r\n                  <div>\r\n                    <span class=\"badge bg-light text-dark\">\r\n                      Remaining Borrow Limit: $ {remainingBalance()}\r\n                    </span>\r\n                  </div>\r\n                ) : state.actionTabs == \"repay\" ? (\r\n                  <div>\r\n                    <span class=\"badge bg-light text-dark\">\r\n                      Wallet Balance: {walletBalance()}{\" \"}\r\n                      {TokensDetail[selectedTokenId].symbol}\r\n                    </span>\r\n                    <span class=\"badge bg-light text-dark\">\r\n                      Amount Borrowed: {getBorrowed()}{\" \"}\r\n                      {TokensDetail[selectedTokenId].symbol}\r\n                    </span>\r\n                    {getAllowance()}\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <span class=\"badge bg-light text-dark\">\r\n                      Max Withdrawal: {maxWithdraw()}{\" \"}\r\n                      {TokensDetail[selectedTokenId].symbol}\r\n                    </span>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n            {state.actionTabs == \"deposit\" &&\r\n              state.selectedTokenId !== undefined &&\r\n              state.selectedTokenId !== \"\" && (\r\n                <div class=\"flex\">\r\n                  <span>\r\n                    {state.getAccountLimits[0].includes(\r\n                      TokensDetail[selectedTokenId].cAddress\r\n                    )\r\n                      ? \"You are using this asset as colleteral.\"\r\n                      : \"This asset is NOT being used as collateral.\"}\r\n                  </span>\r\n                  {state.getAccountLimits[0].includes(\r\n                    TokensDetail[selectedTokenId].cAddress\r\n                  ) ? (\r\n                    <span\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={handleCollateral}\r\n                    >\r\n                      Click here to Remove\r\n                    </span>\r\n                  ) : (\r\n                    <span\r\n                      style={{ cursor: \"pointer\", color: \"green\" }}\r\n                      onClick={handleCollateral}\r\n                    >\r\n                      Click here to Enable\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              )}\r\n            <div>\r\n              <div class=\"mb-2 text-muted\">Amount</div>\r\n              <input type=\"number\" value={amount} onChange={handleAmount} />\r\n            </div>\r\n            {state.hasError == 1 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                Amount greater than balance\r\n              </p>\r\n            ) : state.hasError == 2 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                Amount greater than Remaining Borrow Limit\r\n              </p>\r\n            ) : state.hasError == 3 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                Amount greater than Amount Borrowed\r\n              </p>\r\n            ) : state.hasError == 4 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                Amount greater than Max Withdrawal\r\n              </p>\r\n            ) : state.hasError == 5 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                Something went wrong!! error: {errorMessage}\r\n              </p>\r\n            ) : state.hasError == 6 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                You need to repay your borrowed{\" \"}\r\n                {TokensDetail[selectedTokenId].symbol} to stop using this asset\r\n                as collateral.\r\n              </p>\r\n            ) : state.hasError == 7 ? (\r\n              <p class=\"alert alert-danger\" role=\"alert\">\r\n                Your liquidity is not enough to stop using this asset as\r\n                collateral.\r\n              </p>\r\n            ) : state.hasError == -1 ? (\r\n              <p class=\"alert alert-warning\" role=\"alert\">\r\n                Waiting for confirmation ...\r\n              </p>\r\n            ) : state.success == true ? (\r\n              <p class=\"alert alert-success\" role=\"alert\">\r\n                Your transaction was sent successfully\r\n              </p>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {state.actionTabs == \"deposit\" ? (\r\n              state.amount > state.allowance &&\r\n              state.selectedTokenId !== \"ETH\" ? (\r\n                <button\r\n                  disabled={state.amount == undefined || state.amount == \"\"}\r\n                  onClick={handleApprove}\r\n                  style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n                >\r\n                  Approve\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  disabled={state.amount == undefined || state.amount == \"\"}\r\n                  onClick={handleDeposit}\r\n                  style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n                >\r\n                  Deposit\r\n                </button>\r\n              )\r\n            ) : state.actionTabs == \"borrow\" ? (\r\n              <button\r\n                disabled={state.amount == undefined || state.amount == \"\"}\r\n                onClick={handleBorrow}\r\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n              >\r\n                Borrow\r\n              </button>\r\n            ) : state.amount > state.allowance &&\r\n              state.selectedTokenId !== \"ETH\" ? (\r\n              <button\r\n                disabled={state.amount == undefined || state.amount == \"\"}\r\n                onClick={handleApprove}\r\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n              >\r\n                Approve\r\n              </button>\r\n            ) : state.actionTabs == \"repay\" ? (\r\n              <button\r\n                disabled={state.amount == undefined || state.amount == \"\"}\r\n                onClick={handleRepay}\r\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n              >\r\n                Repay\r\n              </button>\r\n            ) : (\r\n              <button\r\n                disabled={state.amount == undefined || state.amount == \"\"}\r\n                onClick={handleWithdraw}\r\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n              >\r\n                Withdraw\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bastioncommunity.near/widget/Bastion", "__row_index": 10}