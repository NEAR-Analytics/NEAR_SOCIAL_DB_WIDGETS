{"tx_hash": "HkAcWWW7KhCoVGekqygiuPCPiBtEPseZWBYCGXktawCb", "action_id_social": "L1CG2wdA5kvaPeAkUHmJP6naj6bNTHLMsrP3CaaU6rW-0-widget", "block_id": 90583417, "block_timestamp": "2023-04-27 23:26:20.532", "signer_id": "ostolex.near", "widget_name": "near_radar", "source_code": "State.init({\r\n  contractName: \"marketplace.paras.near\",\r\n  daysRange: 7, // 7, 14, 30, ... or 0 (all time),\r\n  diagramKey: \"unique_users\", // unique_users, new_users or tx_count\r\n});\r\n\r\nconst Container = styled.div`\r\n    @import url('https://fonts.googleapis.com/css2?family=Figtree:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\r\n    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\r\n`;\r\n\r\nconst ContractSearch = styled.div`\r\n    display: flex;\r\n    direction: row;\r\n    height: 40px;\r\n    width: 100%;\r\n    font-family: \"Inter\";\r\n    font-size: 24px;\r\n    margin-bottom: 10px;\r\n    gap: 10px;\r\n    padding: 0.5rem;\r\n    border-radius: 0.25rem;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 1rem;\r\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n    transition: all 0.2s ease-in-out;\r\n\r\n    &:focus {\r\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nconst ContractSearchIcon = styled.div`\r\n    width: 20px;\r\n    height: 20px;\r\n`;\r\n\r\nconst TilesRow = styled.div`\r\n    display: flex;\r\n    align-items: display-start;\r\n    direction: row;\r\n    justify-content: space-between;\r\n    gap: 50px;\r\n`;\r\n\r\nconst Tile = styled.div`\r\n    height: 160px;\r\n    width: 100%;\r\n    padding: 20px;\r\n    background-color: rgb(255, 255, 255);\r\n    color: rgb(17, 25, 39);\r\n    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n    box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 5px;\r\n    overflow: hidden;\r\n    display: flex;\r\n    direction: row;\r\n`;\r\n\r\nconst ColLeft = styled.div`\r\n    width: 80%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst ColRight = styled.div`\r\n    width: 20%;\r\n`;\r\n\r\nconst TileName = styled.div`\r\n    font-family: Inter;\r\n    color: #6C737F;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst StatNumber = styled.div`\r\n    font-family: \"Inter\";\r\n    color: #111927;\r\n    font-size: 48px;\r\n    font-weight: 500;\r\n`;\r\n\r\nconst BottomRow = styled.div`\r\n    display: flex;\r\n    direction: row;\r\n    font-family: Inter;\r\n    font-size: 14px;\r\n    gap: 10px;\r\n`;\r\n\r\nconst PercentChange = styled.div`\r\n    //(green for \u2191) color: #3dc699;\r\n    color: #f47269;\r\n`;\r\n\r\nconst Label = styled.div`\r\n    color: #6C737F;\r\n`;\r\n\r\nconst TileIcon = styled.div`\r\n    width: 60px;\r\n    height: 60px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 99999px;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n    width: 40px;\r\n    height: 40px;\r\n    filter: invert(100%);\r\n`;\r\n\r\nconst Title = styled.div`\r\n    font-family: Inter;\r\n    color: #6C737F;\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    margin: 20px;\r\n`;\r\n\r\nconst ChartNavigation = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`;\r\n\r\nconst ButtonsRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    gap: 10px;\r\n`;\r\n\r\nconst Button = styled.div`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: relative;\r\n    background-color: #f8f9fa;\r\n    outline: 0px;\r\n    border: 0px currentcolor;\r\n    margin: 0px;\r\n    cursor: pointer;\r\n    font-family: Inter;\r\n    font-size: 0.875rem;\r\n    font-weight: 600;\r\n    min-width: 64px;\r\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n    border-radius: 12px;\r\n    padding: 9px 16px;\r\n\r\n    &:active {\r\n    background-color: #6366f1;\r\n    color: #ffffff;\r\n    }\r\n`;\r\n\r\nconst response = fetch(\r\n  `https://api.pikespeak.ai/contract-analysis/metrics/${state.contractName}`,\r\n\r\n  {\r\n    headers: {\r\n      \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\r\n    },\r\n\r\n    subscribe: true,\r\n  }\r\n);\r\n\r\nconst lastData = response && response.body[response.body.length - 1];\r\n\r\nconst yesterdayData = response && response.body[response.body.length - 2];\r\n\r\nlet uniqueUsers;\r\nlet newUsers;\r\nlet transitionsCount;\r\nlet uniqueUsersSign;\r\nlet uniqueUsersDiffPercent;\r\nlet newUsersSign;\r\nlet newUsersDiffPercent;\r\nlet transitionsSign;\r\nlet transitionsDiffPercent;\r\n\r\nif (response) {\r\n  uniqueUsers = lastData ? lastData.unique_users : 0;\r\n  newUsers = lastData ? lastData.new_users : 0;\r\n  transitionsCount = lastData ? lastData.tx_count : 0;\r\n  if (parseInt(lastData.unique_users) > parseInt(yesterdayData.unique_users)) {\r\n    uniqueUsersSign = \"+\";\r\n\r\n    uniqueUsersDiffPercent =\r\n      100 -\r\n      Math.round(\r\n        (parseInt(yesterdayData.unique_users) /\r\n          parseInt(lastData.unique_users)) *\r\n          100\r\n      );\r\n  } else {\r\n    uniqueUsersSign = \"-\";\r\n\r\n    uniqueUsersDiffPercent =\r\n      100 -\r\n      Math.round(\r\n        (parseInt(lastData.unique_users) /\r\n          parseInt(yesterdayData.unique_users)) *\r\n          100\r\n      );\r\n  }\r\n\r\n  if (parseInt(lastData.new_users) > parseInt(yesterdayData.new_users)) {\r\n    newUsersSign = \"+\";\r\n\r\n    newUsersDiffPercent =\r\n      100 -\r\n      Math.round(\r\n        (parseInt(yesterdayData.new_users) / parseInt(lastData.new_users)) * 100\r\n      );\r\n  } else {\r\n    newUsersSign = \"-\";\r\n\r\n    newUsersDiffPercent =\r\n      100 -\r\n      Math.round(\r\n        (parseInt(lastData.new_users) / parseInt(yesterdayData.new_users)) * 100\r\n      );\r\n  }\r\n\r\n  if (parseInt(lastData.tx_count) > parseInt(yesterdayData.tx_count)) {\r\n    transitionsSign = \"+\";\r\n\r\n    transitionsDiffPercent =\r\n      100 -\r\n      Math.round(\r\n        (parseInt(yesterdayData.tx_count) / parseInt(lastData.tx_count)) * 100\r\n      );\r\n  } else {\r\n    transitionsSign = \"-\";\r\n\r\n    transitionsDiffPercent =\r\n      100 -\r\n      Math.round(\r\n        (parseInt(lastData.tx_count) / parseInt(yesterdayData.tx_count)) * 100\r\n      );\r\n  }\r\n}\r\n\r\nconst dataSlice = response\r\n  ? state.daysRange === 0\r\n    ? response.body\r\n    : response.body.slice(state.daysRange * -1)\r\n  : [];\r\n\r\nconst data = dataSlice.map((el) => {\r\n  return {\r\n    label: new Date(Date.parse(el.day)).toLocaleString(\"en-US\").split(\",\")[0],\r\n    value: el[state.diagramKey],\r\n  };\r\n});\r\n\r\nconst chartWidth = 650;\r\nconst chartHeight = 325;\r\nconst chartMargin = 60;\r\nconst tickSize = 5;\r\n\r\nconst maxDataValue = Math.max(...data.map((item) => item.value));\r\n\r\nconst xScale = (chartWidth - chartMargin * 2) / (data.length - 1);\r\n\r\nconst yScale = (chartHeight - chartMargin * 2) / maxDataValue;\r\n\r\nconst points = data.map((item, index) => ({\r\n  x: chartMargin + index * xScale,\r\n  y: chartHeight - chartMargin - item.value * yScale,\r\n}));\r\n\r\nconst path =\r\n  `M ${points[0].x} ${points[0].y} ` +\r\n  points\r\n    .slice(1)\r\n    .map((point) => `L ${point.x} ${point.y}`)\r\n    .join(\" \");\r\n\r\nconst xTicks = data.map((item, index) => ({\r\n  x: chartMargin + index * xScale,\r\n  y: chartHeight - chartMargin + tickSize,\r\n  label: item.label,\r\n}));\r\n\r\nconst yTicks = [...Array(6).keys()].map((index) => ({\r\n  x: chartMargin - tickSize,\r\n  y: chartHeight - chartMargin - (index * (chartHeight - chartMargin * 2)) / 5,\r\n  label: (index * maxDataValue) / 5,\r\n}));\r\n\r\nconst viewBox = `0 0 ${chartWidth} ${chartHeight}`;\r\n\r\nlet xTicksFontSize;\r\nswitch (state.daysRange) {\r\n  case 7:\r\n    xTicksFontSize = 0.8;\r\n    break;\r\n  case 14:\r\n    xTicksFontSize = 0.5;\r\n    break;\r\n  case 30:\r\n    xTicksFontSize = 0.45;\r\n    break;\r\n  default:\r\n    xTicksFontSize = 0.1;\r\n}\r\n\r\nlet diagramFill;\r\nswitch (state.diagramKey) {\r\n  case \"unique_users\":\r\n    diagramFill = \"#6366f1\";\r\n    break;\r\n  case \"new_users\":\r\n    diagramFill = \"#10b981\";\r\n    break;\r\n  case \"tx_count\":\r\n    diagramFill = \"#f79009\";\r\n    break;\r\n}\r\n\r\nreturn (\r\n  <Container>\r\n    <ContractSearch>\r\n      <ContractSearchIcon>\r\n        <img\r\n          src=\"https://img.icons8.com/?size=512&id=100947&format=png\"\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n        />\r\n      </ContractSearchIcon>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter contract name...\"\r\n        value={state.contractName}\r\n        onChange={(e) => State.update({ contractName: e.target.value })}\r\n      />\r\n    </ContractSearch>\r\n    <Title>Today</Title>\r\n    {response ? (\r\n      <>\r\n        <TilesRow>\r\n          <Tile>\r\n            <ColLeft>\r\n              <TileName>UNIQUE USERS</TileName>\r\n\r\n              <StatNumber>{uniqueUsers}</StatNumber>\r\n\r\n              <BottomRow>\r\n                <PercentChange\r\n                  style={{\r\n                    color: uniqueUsersSign == \"+\" ? \"#3dc699\" : \"#f47269\",\r\n                  }}\r\n                >\r\n                  {uniqueUsersSign == \"+\" ? \"\u2191\" : \"\u2193\"}\r\n                  {uniqueUsersDiffPercent}%\r\n                </PercentChange>\r\n\r\n                <Label>Since yesterday</Label>\r\n              </BottomRow>\r\n            </ColLeft>\r\n\r\n            <ColRight>\r\n              <TileIcon style={{ backgroundColor: \"#6366f1\" }}>\r\n                <Icon>\r\n                  <img\r\n                    src=\"https://img.icons8.com/ios-glyphs/256/user--v1.png\"\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                  />\r\n                </Icon>\r\n              </TileIcon>\r\n            </ColRight>\r\n          </Tile>\r\n\r\n          <Tile>\r\n            <ColLeft>\r\n              <TileName>NEW USERS</TileName>\r\n\r\n              <StatNumber>{newUsers}</StatNumber>\r\n\r\n              <BottomRow>\r\n                <PercentChange\r\n                  style={{\r\n                    color: newUsersSign == \"+\" ? \"#3dc699\" : \"#f47269\",\r\n                  }}\r\n                >\r\n                  {newUsersSign == \"+\" ? \"\u2191\" : \"\u2193\"}\r\n                  {newUsersDiffPercent}%\r\n                </PercentChange>\r\n\r\n                <Label>Since yesterday</Label>\r\n              </BottomRow>\r\n            </ColLeft>\r\n\r\n            <ColRight>\r\n              <TileIcon style={{ backgroundColor: \"#10b981\" }}>\r\n                <Icon>\r\n                  <img\r\n                    src=\"https://img.icons8.com/material/256/add-user-male--v1.png\"\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                  />\r\n                </Icon>\r\n              </TileIcon>\r\n            </ColRight>\r\n          </Tile>\r\n\r\n          <Tile>\r\n            <ColLeft>\r\n              <TileName>TRANSACTION COUNT</TileName>\r\n\r\n              <StatNumber>{transitionsCount}</StatNumber>\r\n\r\n              <BottomRow>\r\n                <PercentChange\r\n                  style={{\r\n                    color: transitionsSign == \"+\" ? \"#3dc699\" : \"#f47269\",\r\n                  }}\r\n                >\r\n                  {transitionsSign == \"+\" ? \"\u2191\" : \"\u2193\"}\r\n                  {transitionsDiffPercent}%\r\n                </PercentChange>\r\n\r\n                <Label>Since yesterday</Label>\r\n              </BottomRow>\r\n            </ColLeft>\r\n\r\n            <ColRight>\r\n              <TileIcon style={{ backgroundColor: \"#f79009\" }}>\r\n                <Icon>\r\n                  <img\r\n                    src=\"https://img.icons8.com/material/256/purchase-order--v1.png\"\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                  />\r\n                </Icon>\r\n              </TileIcon>\r\n            </ColRight>\r\n          </Tile>\r\n        </TilesRow>\r\n\r\n        <div>\r\n          <Title>Historical Data</Title>\r\n\r\n          <ChartNavigation>\r\n            <ButtonsRow>\r\n              <Button\r\n                style={{\r\n                  backgroundColor:\r\n                    state.daysRange === 7 ? \"#6366f1\" : \"#f8f9fa\",\r\n                  color: state.daysRange === 7 ? \"#fff\" : \"#000\",\r\n                }}\r\n                onClick={() => State.update({ daysRange: 7 })}\r\n              >\r\n                7 days\r\n              </Button>\r\n\r\n              <Button\r\n                style={{\r\n                  backgroundColor:\r\n                    state.daysRange === 14 ? \"#6366f1\" : \"#f8f9fa\",\r\n                  color: state.daysRange === 14 ? \"#fff\" : \"#000\",\r\n                }}\r\n                onClick={() => State.update({ daysRange: 14 })}\r\n              >\r\n                14 days\r\n              </Button>\r\n\r\n              <Button\r\n                style={{\r\n                  backgroundColor:\r\n                    state.daysRange === 30 ? \"#6366f1\" : \"#f8f9fa\",\r\n                  color: state.daysRange === 30 ? \"#fff\" : \"#000\",\r\n                }}\r\n                onClick={() => State.update({ daysRange: 30 })}\r\n              >\r\n                30 days\r\n              </Button>\r\n            </ButtonsRow>\r\n\r\n            <ButtonsRow>\r\n              <Button\r\n                style={{\r\n                  backgroundColor:\r\n                    state.diagramKey === \"unique_users\" ? \"#6366f1\" : \"#f8f9fa\",\r\n                  color: state.diagramKey === \"unique_users\" ? \"#fff\" : \"#000\",\r\n                }}\r\n                onClick={() => State.update({ diagramKey: \"unique_users\" })}\r\n              >\r\n                Unique users\r\n              </Button>\r\n\r\n              <Button\r\n                style={{\r\n                  backgroundColor:\r\n                    state.diagramKey === \"new_users\" ? \"#10b981\" : \"#f8f9fa\",\r\n                  color: state.diagramKey === \"new_users\" ? \"#fff\" : \"#000\",\r\n                }}\r\n                onClick={() => State.update({ diagramKey: \"new_users\" })}\r\n              >\r\n                New users\r\n              </Button>\r\n\r\n              <Button\r\n                style={{\r\n                  backgroundColor:\r\n                    state.diagramKey === \"tx_count\" ? \"#f79009\" : \"#f8f9fa\",\r\n                  color: state.diagramKey === \"tx_count\" ? \"#fff\" : \"#000\",\r\n                }}\r\n                onClick={() => State.update({ diagramKey: \"tx_count\" })}\r\n              >\r\n                Transaction count\r\n              </Button>\r\n            </ButtonsRow>\r\n          </ChartNavigation>\r\n\r\n          <svg\r\n            viewBox={viewBox}\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n          >\r\n            <path d={path} fill=\"none\" stroke={diagramFill} strokeWidth=\"2\" />\r\n\r\n            {points.map((point, index) => (\r\n              <circle\r\n                key={index}\r\n                cx={point.x}\r\n                cy={point.y}\r\n                r=\"5\"\r\n                fill={diagramFill}\r\n              />\r\n            ))}\r\n\r\n            {xTicks.map((tick, index) => (\r\n              <g key={index}>\r\n                <line\r\n                  x1={tick.x}\r\n                  y1={tick.y}\r\n                  x2={tick.x}\r\n                  y2={tick.y - tickSize}\r\n                  stroke=\"black\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n\r\n                <text\r\n                  x={tick.x}\r\n                  y={tick.y + 20}\r\n                  fontSize={`${xTicksFontSize}em`}\r\n                  transform={`rotate(-45, ${tick.x}, ${tick.y + 20})`}\r\n                  textAnchor=\"middle\"\r\n                >\r\n                  {tick.label}\r\n                </text>\r\n              </g>\r\n            ))}\r\n\r\n            {yTicks.map((tick, index) => (\r\n              <g key={index}>\r\n                <line\r\n                  x1={tick.x - tickSize}\r\n                  y1={tick.y}\r\n                  x2={tick.x}\r\n                  y2={tick.y}\r\n                  stroke=\"black\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n\r\n                <text x={tick.x - tickSize - 5} y={tick.y} textAnchor=\"end\">\r\n                  {tick.label}\r\n                </text>\r\n              </g>\r\n            ))}\r\n\r\n            {points.map((point, index) => (\r\n              <line\r\n                key={index}\r\n                x1={point.x}\r\n                y1={point.y}\r\n                x2={point.x}\r\n                y2={chartHeight - chartMargin}\r\n                stroke=\"lightgray\"\r\n                strokeWidth=\"1\"\r\n                strokeDasharray=\"5, 5\"\r\n              />\r\n            ))}\r\n          </svg>\r\n        </div>\r\n      </>\r\n    ) : (\r\n      <h1>Loading...</h1>\r\n    )}\r\n  </Container>\r\n);\r\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ostolex.near/widget/near_radar", "metadata.description": "Look at your favorite Near projects data analytics by simply pasting a smart contract address! \n\nMade with [pikespeak.ai](pikespeak.ai) API\nInspired by [dappradar.com](dappradar.com)", "metadata.image.ipfs_cid": "bafkreiamur4664sjyu43rsk5wu32ftxxqawrbsltw7phpue3yeono5lecy", "metadata.name": "Near Radar", "metadata.tags.app": "", "metadata.tags.chart": "", "metadata.tags.dev": "", "metadata.tags.hack": "", "metadata.tags.hackathon": "", "metadata.tags.near-analytics": "", "metadata.tags.widget": ""}