{"tx_hash": "6ojSBTsWbqMc69hAquSv74LbwZH1SkERGCKBqqBwQRoH", "action_id_social": "4JrXw9SMfSL9pDfXKp35xHXxU9s7YcKPupYnuUQWLKPq-0-widget", "block_id": 95028885, "block_timestamp": "2023-06-25T22:23:42.051Z", "signer_id": "ostolex.near", "widget_name": "CastlediceOnline", "source_code": "State.init({\n  roomId: props.roomId | null,\n  firstLoad: true,\n  message: {},\n  playerColor: null,\n  currentPlayer: null,\n  boardSetup: null,\n  actionsCount: null,\n  showDice: false,\n});\n\nif (!state.roomId) {\n  return <h1>roomId property must be specified</h1>;\n}\n\nconst user = \"ostolex.near\";\n\nconst abiObjData = fetch(\n  \"https://raw.githubusercontent.com/OSTOLEX-Technologies/Castledice-smart-contract/main/abi.json\"\n);\n\nif (!abiObjData) {\n  return <h1>Fetching ABI...</h1>;\n}\n\nconst abiObj = JSON.parse(abiObjData.body);\n\nconst iface = new ethers.utils.Interface(abiObj);\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) {\n  return (\n    <Web3Connect\n      className=\"LidoStakeFormSubmitContainer\"\n      connectLabel=\"Connect with Web3\"\n    />\n  );\n}\n\nconst contractId = \"0x530cbC8336a0A2214c6ee536067195A24C42f469\";\n\nconst castledice = new ethers.Contract(\n  contractId,\n  abiObj,\n  Ethers.provider(\"https://testnet.aurora.dev\").getSigner()\n);\n\nconst externalAppUrl = \"https://castledice.ostolex.com/\";\n\nfunction sendMessage(message) {\n  State.update({ message });\n  setTimeout(() => State.update({ message: {} }), 100);\n}\n\nfunction onGameLoaded(message) {\n  State.update({ firstLoad: false, showDice: true });\n  if (state.currentPlayer !== state.playerColor)\n    pollForOpponentMoves(state.playerColor === \"red\" ? \"blue\" : \"red\");\n}\n\nfunction onMoveMade(message) {\n  const row = message.payload.row;\n  const col = message.payload.col;\n\n  castledice.makeMove(state.roomId, row, col).then((result) =>\n    result.wait().then((result) => {\n      sendMessage({ type: \"moveFinished\" });\n      if (message.actions === 0) {\n        getActionsCount().then((actionsCount) => {\n          State.update({\n            currentPlayer: state.playerColor === \"red\" ? \"blue\" : \"red\",\n            actionsCount: actionsCount,\n            showDice: true,\n          });\n          sendMessage({ type: \"switchTurn\", actions: actionsCount });\n          console.log(\n            \"Switched turn\",\n            \"Prev currentPlayer\",\n            state.currentPlayer,\n            \"New currentPlayer\",\n            state.currentPlayer === \"red\" ? \"blue\" : \"red\"\n          );\n\n          pollForOpponentMoves(state.playerColor === \"red\" ? \"blue\" : \"red\");\n        });\n      }\n    })\n  );\n}\n\nfunction pollForOpponentMoves(opponentColor) {\n  let interval = setInterval(() => {\n    console.log(\"Polling...\");\n    getBoardSetup().then((setup) => {\n      getActionsCount().then((actionsCount) => {\n        sendMessage({\n          type: \"reinitBoard\",\n          setup: setup,\n          actions: actionsCount,\n        });\n        // sendMessage({ type: \"updateActionsCount\", actions: actionsCount });\n        getCurrentPlayerColor().then((currentPlayer) => {\n          if (currentPlayer !== opponentColor) {\n            console.log(\n              \"Current player\",\n              currentPlayer,\n              \"state.currentPlayer\",\n              state.currentPlayer\n            );\n            clearInterval(interval);\n            State.update({\n              currentPlayer,\n              actionsCount: actionsCount,\n              showDice: true,\n            });\n            sendMessage({ type: \"switchTurn\", actions: actionsCount });\n          }\n        });\n      });\n    });\n  }, 5000);\n}\n\nfunction onGameMessage(message) {\n  console.log(message);\n  switch (message.type) {\n    case \"gameLoaded\":\n      onGameLoaded(message);\n      break;\n    case \"makeMove\":\n      onMoveMade(message);\n      break;\n    // case \"updateActions\":\n    //   updateActions(message);\n    //   break;\n  }\n}\n\nconst getPlayerColor = () => {\n  return castledice.getMyIndex(state.roomId).then((result) => {\n    console.log(result);\n    return result === 0 ? \"blue\" : \"red\";\n  });\n};\n\nconst getCurrentPlayerColor = () => {\n  return castledice\n    .getCurrentPlayerIndex(state.roomId)\n    .then((result) => (parseInt(result._hex, 16) === 0 ? \"blue\" : \"red\"));\n};\n\nconst getBoardSetup = () => {\n  return castledice.getBoardArray(state.roomId).then((result) => result);\n};\n\nconst getActionsCount = () => {\n  return castledice\n    .getCurrentPlayerMovesLeft(state.roomId)\n    .then((result) => parseInt(result._hex, 16));\n};\n\nconst getPlayerInRoom = () => {\n  return castledice.playerInRoom(sender).then((result) => result);\n};\n\nconst getRoom = () => {\n  return castledice.rooms(state.roomId).then((result) => result);\n};\n\nif (!state.playerColor) {\n  getPlayerColor().then((playerColor) => State.update({ playerColor }));\n  return <h1>Getting your color...</h1>;\n}\n\nif (!state.currentPlayer) {\n  getCurrentPlayerColor().then((currentPlayer) =>\n    State.update({ currentPlayer })\n  );\n  return <h1>Getting current player color...</h1>;\n}\n\nif (!state.boardSetup) {\n  getBoardSetup().then((boardSetup) => State.update({ boardSetup }));\n  return <h1>Getting your board setup</h1>;\n}\n\nif (state.boardSetup[0] === 0 && state.boardSetup[99] === 0) {\n  return <h1>Room does not exist</h1>;\n}\n\nif (state.actionsCount === null) {\n  getActionsCount().then((actionsCount) => State.update({ actionsCount }));\n  return <h1>Getting actions count</h1>;\n}\n\nconst Background = styled.div`\nposition: fixed;\nwidth: 100vw;\nheight: calc(-98px + 100vh);\ntop: 98px;\nleft: 0;\n`;\n\nreturn (\n  <Background>\n    <iframe\n      src={externalAppUrl}\n      message={\n        state.firstLoad\n          ? {\n              type: \"setupGame\",\n              playerColor: state.playerColor,\n              boardSetup: state.boardSetup,\n              actionsCount: state.actionsCount,\n              currentPlayer: state.currentPlayer,\n            }\n          : state.message\n      }\n      onMessage={onGameMessage}\n      class=\"w-100 h-100\"\n      style={{ width: \"100%\", height: \"800px\" }}\n    />\n    {state.showDice && (\n      <Widget\n        src={`${user}/widget/DiceWidget`}\n        props={{\n          diceResult: [state.actionsCount],\n          callback: (result) => State.update({ showDice: false }),\n        }}\n      />\n    )}\n  </Background>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ostolex.near/widget/CastlediceOnline", "__row_index": 1}