{"tx_hash": "4s4RJAYiD6emjyL8e1uFSKhx3DPmsdeGpwdSC38NCVQz", "action_id_social": "GpvPmLbwaMmitMehAedq4mhTaeKt6ck6dZmQ8CvvydF8-1-widget", "block_id": 88653573, "block_timestamp": "2023-04-02 13:03:28.737", "signer_id": "ostolex.near", "widget_name": "DiceWidget", "source_code": "function getDiceResult(count) {\n  if (!count) count = 1;\n  const results = [];\n  for (let i = 0; i < count; i++) {\n    results.push(Math.floor(Math.random() * 6) + 1);\n  }\n  return results;\n}\n\nif (!props.mainColor) {\n  props.mainColor = \"white\";\n}\n\nif (!props.dotsColor) {\n  props.dotsColor = \"black\";\n}\n\nif (!props.borderColor) {\n  props.borderColor = \"black\";\n}\n\nif (!props.diceCount) {\n  props.diceCount = 2;\n}\n\nlet diceResult = getDiceResult(props.diceCount);\n\nif (props.diceResult) {\n  diceResult = props.diceResult;\n}\n\nconst iframeCode = `<style>\n        body {\n            background-color: rgba(255, 255, 255, 0.7);\n        }\n\n        .dice-container {\n            display: flex;\n            flex-direction: row;\n            justify-content: center;\n            align-items: center;\n            margin-top: 20px;\n            width: 100%;\n            gap: 200px;\n            flex-wrap: wrap;\n        }\n\n        .dice {\n            position: relative;\n        }\n    </style>\n    <div class=\"dice-container\">\n    </div>\n    <script>\n        const edges = {\n            1: \\`<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"2.5\" y=\"2.5\" width=\"123\" height=\"123\" rx=\"17.5\" fill=\"${props.mainColor}\" stroke=\"${props.borderColor}\" stroke-width=\"5\"/>\n<circle cx=\"64\" cy=\"64\" r=\"12\" fill=\"${props.dotsColor}\"/>\n</svg>\\`,\n            2: \\`<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"2.5\" y=\"2.5\" width=\"123\" height=\"123\" rx=\"17.5\" fill=\"${props.mainColor}\" stroke=\"${props.borderColor}\" stroke-width=\"5\"/>\n<circle cx=\"36\" cy=\"36\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"92\" r=\"12\" fill=\"${props.dotsColor}\"/>\n</svg>\\`,\n            3: \\`<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"2.5\" y=\"2.5\" width=\"123\" height=\"123\" rx=\"17.5\" fill=\"${props.mainColor}\" stroke=\"${props.borderColor}\" stroke-width=\"5\"/>\n<circle cx=\"64\" cy=\"64\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"36\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"92\" r=\"12\" fill=\"${props.dotsColor}\"/>\n</svg>\\`,\n            4: \\`<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"2.5\" y=\"2.5\" width=\"123\" height=\"123\" rx=\"17.5\" fill=\"${props.mainColor}\" stroke=\"${props.borderColor}\" stroke-width=\"5\"/>\n<circle cx=\"36\" cy=\"36\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"92\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"92\" r=\"12\" transform=\"rotate(-90 36 92)\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"36\" r=\"12\" transform=\"rotate(-90 92 36)\" fill=\"${props.dotsColor}\"/>\n</svg>\\`,\n            5: \\`<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"2.5\" y=\"2.5\" width=\"123\" height=\"123\" rx=\"17.5\" fill=\"${props.mainColor}\" stroke=\"${props.borderColor}\" stroke-width=\"5\"/>\n<circle cx=\"64\" cy=\"64\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"36\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"92\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"92\" r=\"12\" transform=\"rotate(-90 36 92)\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"36\" r=\"12\" transform=\"rotate(-90 92 36)\" fill=\"${props.dotsColor}\"/>\n</svg>\\`,\n            6: \\`<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"2.5\" y=\"2.5\" width=\"123\" height=\"123\" rx=\"17.5\" fill=\"${props.mainColor}\" stroke=\"${props.borderColor}\" stroke-width=\"5\"/>\n<circle cx=\"92\" cy=\"64\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"64\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"36\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"92\" r=\"12\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"36\" cy=\"92\" r=\"12\" transform=\"rotate(-90 36 92)\" fill=\"${props.dotsColor}\"/>\n<circle cx=\"92\" cy=\"36\" r=\"12\" transform=\"rotate(-90 92 36)\" fill=\"${props.dotsColor}\"/>\n</svg>\\`\n        };\n\n        const diceContainer = document.querySelector('.dice-container');\n\n        // dice must appear from bottom to top, and then disappear from top to bottom\n\n        const animateDiceToTop = (id, initialTop, initialOpacity) => {\n            const dice = document.getElementById(id);\n            dice.style.top = initialTop + 'px';\n            dice.style.opacity = initialOpacity;\n            return new Promise(\n                resolve => {\n                    const interval = setInterval(() => {\n                        if (initialTop > 200) {\n                            initialTop -= 4;\n                            dice.style.top = initialTop + 'px';\n                        }\n                        if (initialOpacity <= 1) {\n                            initialOpacity += 0.05;\n                            dice.style.opacity = initialOpacity;\n                        }\n                        if (initialTop <= 200 && initialOpacity >= 1) {\n                            dice.style.top = \"200px\";\n                            dice.style.opacity = \"1\";\n                            clearInterval(interval);\n                            resolve();\n                        }\n                    }, 10);\n                }\n            )\n        }\n\n        const rollDice = (...values) => {\n            const promises = [];\n            for (let i in values) {\n                // create div element inside diceContainer\n                const dice = document.createElement('div');\n                dice.classList.add('dice');\n                dice.id = \\`dice\\${i}\\`;\n                diceContainer.appendChild(dice);\n                dice.innerHTML = edges[values[i]];\n                promises.push(animateDiceToTop(\\`dice\\${i}\\`, 500, 0));\n            }\n            return Promise.all(promises);\n        }\n\n        window.addEventListener(\"message\", async (event) => {\n            // event.data in format \"1,2\"\n            const values = event.data.split(',').map(value => parseInt(value));\n            await rollDice(...values);\n            // wait for second\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            window.top.postMessage('animationFinished', '*')\n        })\n    </script>`;\n\nconst IframeParent = styled.div`\n  position: static;\n  height: 1000px;\n  width: 100%;\n  margin-top: 0px;\n`;\n\nreturn (\n  <>\n    <IframeParent>\n      <iframe\n        srcDoc={iframeCode}\n        class=\"w-100 h-100\"\n        style={{ width: \"100%\", height: \"100%\", top: 0, position: \"absolute\" }}\n        message={diceResult.join(\",\")}\n        onMessage={(message) => props.callback(diceResult)}\n      />\n    </IframeParent>\n  </>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ostolex.near/widget/DiceWidget", "metadata.description": "It's a widget that allows you to roll dice.\n\nAvailable props:\n- mainColor: main color of dice (default white). Supports hex (i. e. \"#FF0000\")\n- dotsColor: dots color (default black). Supports hex (i. e. \"#FF0000\")\n- borderColor: border color (default black). Supports hex (i. e. \"#FF0000\")\n- diceCount: count of dice to be rolled (default 2). \n- diceResult: if you already have your own dice roll results, you can pass them as an array, i. e. [1, 5, 2]. This will roll 3 dice with pre-defined results 1, 5, and 2. If this prop passed, props.diceCount is ignored.\n- callback: function to be called after dice were rolled. Must accept one argument, which is an array of numbers. For example:\n```js\nfunction callback(diceResults) {\n    console.log(\"Sum: \", diceResults.reduce((partialSum, a) => partialSum + a, 0))\n}", "metadata.name": "Reusable dice widget", "metadata.tags.component": "", "metadata.tags.reusable": "", "metadata.tags.widget": "", "metadata.image.ipfs_cid": NaN}