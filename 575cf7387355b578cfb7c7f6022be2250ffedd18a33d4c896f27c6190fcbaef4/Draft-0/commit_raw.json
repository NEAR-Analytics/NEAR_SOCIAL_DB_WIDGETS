{"tx_hash": "A1d7uGjVn7jvHx1JWKnt5vVjoj5Qq9xgNSfqGJ2TEE1Y", "action_id_social": "GNHSHkhnziNVv9PwADzpxfjqy8Tho95RkPUuT35hrb9X-1-widget", "block_id": 86598697, "block_timestamp": "2023-03-05 08:09:33.567", "signer_id": "575cf7387355b578cfb7c7f6022be2250ffedd18a33d4c896f27c6190fcbaef4", "widget_name": "Draft-0", "source_code": "const wethAddress = \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\";\nconst tokenDecimals = 18;\n\nconst wethAbi = fetch(\n  \"https://api.etherscan.io/api?module=contract&action=getabi&address=0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2&format=raw\"\n);\n\nif (!wethAbi.ok) {\n  return \"Loading\";\n}\n\nconst wethAbiBody = wethAbi.body;\n\nconst signer = Ethers.provider() ? Ethers.provider().getSigner() : null;\n\nconst wethContract = new ethers.Contract(wethAddress, wethAbiBody, signer);\n\nconst updateBalances = () => {\n  return signer.getAddress().then((signerAddress) => {\n    Ethers.provider()\n      .getBalance(signerAddress)\n      .then((balance) => {\n        State.update({ balanceETH: balance });\n      });\n\n    wethContract.balanceOf(signerAddress).then((balance) => {\n      State.update({ balanceWETH: balance });\n    });\n  });\n};\n\nif (!state.intervalStarted) {\n  State.update({ intervalStarted: true });\n\n  updateBalances();\n\n  setInterval(() => {\n    updateBalances();\n  }, 2000);\n}\n\nconst wrapEth = () => {\n  const amount = ethers.utils.parseUnits(state.amountIn, tokenDecimals);\n\n  wethContract.deposit({ value: amount });\n};\n\nconst unwrapEth = () => {\n  const amount = ethers.utils.parseUnits(state.amountIn, tokenDecimals);\n\n  wethContract.withdraw(amount);\n};\n\nconst swapInputOnChange = (event) => {\n  let re = /^[0-9]*[.,]?[0-9]*$/;\n\n  if (re.test(event.target.value)) {\n    try {\n      if (event.target.value != \"\") {\n        ethers.utils.parseUnits(event.target.value, tokenDecimals);\n      }\n\n      State.update({\n        amountIn: event.target.value,\n        amountOut: event.target.value,\n        swapButtonText: null,\n      });\n\n      updateSwapButton();\n    } catch (e) {}\n  }\n};\n\nconst updateSwapButton = () => {\n  State.update({ swapReady: false });\n\n  if (!signer) {\n    State.update({ swapButtonText: \"Connect Wallet\" });\n    return;\n  }\n\n  if (!state.amountIn) {\n    return;\n  }\n\n  let amountIn = ethers.utils.parseUnits(state.amountIn, tokenDecimals);\n\n  if (amountIn.lte(ethers.utils.parseUnits(\"0\", tokenDecimals))) {\n    State.update({ swapButtonText: \"Invalid Amount\" });\n    return;\n  }\n\n  let limit = state.unwrap ? state.balanceWETH : state.balanceETH;\n\n  if (limit && amountIn.lte(limit)) {\n    State.update({\n      swapButtonText: state.unwrap ? \"Unwrap ETH\" : \"Wrap ETH\",\n      swapReady: true,\n    });\n  } else {\n    State.update({\n      swapButtonText: `Insufficient ${state.unwrap ? \"WETH\" : \"ETH\"} Balance`,\n    });\n  }\n};\n\nconst swapButtonOnClick = () => {\n  if (state.unwrap) {\n    unwrapEth();\n  } else {\n    wrapEth();\n  }\n};\n\nconst Card = styled.div`\n  font-family: 'Inter custom',sans-serif;\n  font-size: 16px;\n  font-variant: none;\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: transparent;\n  color: rgb(255, 255, 255);\n  box-sizing: border-box;\n\n  background: rgb(13, 17, 28);\n  border-radius: 16px;\n  border: 1px solid rgb(27, 34, 54);\n  padding: 8px;\n  z-index: 1;\n  transition: transform 250ms ease 0s;\n\n  display: block;\n`;\n\nconst SwapContainer = styled.div`\n  background-color: rgb(19, 26, 42);\n  border-radius: 12px;\n  padding: 16px;\n`;\n\nconst SwapContainerOuter = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  border-radius: 20px;\n`;\n\nconst SwapContainerInner = styled.div`\n  border-radius: 20px;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SwapInput = styled.input`\n  color: rgb(255, 255, 255);\n  position: relative;\n  font-weight: 400;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  appearance: textfield;\n  filter: none;\n  opacity: 1;\n  transition: opacity 0.2s ease-in-out 0s;\n  text-align: left;\n  font-size: 36px;\n  line-height: 44px;\n  font-variant: small-caps;\n`;\n\nconst SwapArrowContainer = styled.div`\n  border-radius: 12px;\n  height: 40px;\n  width: 40px;\n  position: relative;\n  margin: -18px auto;\n  background-color: rgb(41, 50, 73);\n  border: 4px solid rgb(13, 17, 28);\n  z-index: 2;\n\n  :hover {\n    opacity: 0.75;\n  }\n`;\n\nconst SwapArrowWrapper = styled.div`\n  display: inline-flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;\n\nconst CurrencyPillContainer = styled.div`\n  text-decoration: none;\n  background-color: rgb(41, 50, 73);\n  color: rgb(255, 255, 255);\n  border-radius: 16px;\n  padding: 4px 8px 4px 4px;\n  margin-left: 12px;\n`;\n\nconst CurrencyPillWrapper = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: start;\n  justify-content: flex-start;\n`;\n\nconst CurrencyPillImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CurrencyPillImage = styled.img`\n  color: rgb(255, 255, 255);\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  margin-right: 2px;\n`;\n\nconst CurrencyPillText = styled.span`\n  margin: 0px 4px;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst SwapDetailsContainer = styled.div`\n  padding: 8px 0px 0px;\n`;\n\nconst SwapDetailsWrapper = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n`;\n\nconst TextSmall = styled.div`\n  color: rgb(152, 161, 192);\n  line-height: 1rem;\n  box-sizing: border-box;\n  font-weight: 400;\n  font-size: 14px;\n`;\n\nconst SwapButtonWrapper = styled.div`\n  margin-top: 12px;\n`;\n\nconst SwapButton = styled.button`\n  background-color: ${(props) =>\n    props.disabled ? \"rgb(41, 50, 73)\" : \"rgb(76, 130, 251)\"};\n  padding: 16px;\n  font-size: 20px;\n  font-weight: 600;\n  color: rgb(245, 246, 252);\n  width: 100%;\n  text-align: center;\n  border-radius: 20px;\n  outline: none;\n  border: 1px solid transparent;\n  text-decoration: none;\n  position: relative;\n  z-index: 1;\n  cursor: pointer;\n`;\n\nconst TitleWrapper = styled.div`\n  padding: 8px 12px;\n  margin: 0px 0px 8px 0px;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n  font-size: 16px;\n`;\n\nconst imgETH =\n  \"https://github.com/spothq/cryptocurrency-icons/raw/master/128/color/eth.png\";\nconst imgETHalt = \"ETH logo\";\nconst imgWETH =\n  \"https://github.com/spothq/cryptocurrency-icons/raw/master/128/white/eth.png\";\nconst imgWETHalt = \"WETH logo\";\n\nreturn (\n  <Card>\n    <TitleWrapper>\n      <p style={{ margin: 0 }}>ETH Wrapper</p>\n    </TitleWrapper>\n    <SwapContainer>\n      <SwapContainerOuter>\n        <SwapContainerInner>\n          <InputContainer>\n            <SwapInput\n              inputmode=\"decimal\"\n              autocomplete=\"off\"\n              autocorrect=\"off\"\n              type=\"text\"\n              placeholder=\"0\"\n              minlength=\"1\"\n              maxlength=\"79\"\n              spellcheck=\"false\"\n              value={state.amountIn}\n              onChange={swapInputOnChange}\n            />\n            <CurrencyPillContainer>\n              <CurrencyPillWrapper>\n                <CurrencyPillImageWrapper>\n                  <CurrencyPillImage\n                    alt={state.unwrap ? imgWETHalt : imgETHalt}\n                    src={state.unwrap ? imgWETH : imgETH}\n                  />\n                  <CurrencyPillText>\n                    {state.unwrap ? \"WETH\" : \"ETH\"}\n                  </CurrencyPillText>\n                </CurrencyPillImageWrapper>\n              </CurrencyPillWrapper>\n            </CurrencyPillContainer>\n          </InputContainer>\n          <SwapDetailsContainer>\n            <SwapDetailsWrapper>\n              <TextSmall></TextSmall>\n              {state.unwrap ? (\n                state.balanceWETH ? (\n                  <TextSmall>\n                    Balance: {ethers.utils.formatUnits(state.balanceWETH)}\n                  </TextSmall>\n                ) : null\n              ) : state.balanceETH ? (\n                <TextSmall>\n                  Balance: {ethers.utils.formatUnits(state.balanceETH)}\n                </TextSmall>\n              ) : null}\n            </SwapDetailsWrapper>\n          </SwapDetailsContainer>\n        </SwapContainerInner>\n      </SwapContainerOuter>\n    </SwapContainer>\n    <SwapArrowContainer\n      onClick={() => {\n        State.update({\n          unwrap: !state.unwrap,\n          amountIn: state.amountOut,\n          amountOut: state.amountIn,\n        });\n        updateSwapButton();\n      }}\n    >\n      <SwapArrowWrapper>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"#FFFFFF\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n        >\n          <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n          <polyline points=\"19 12 12 19 5 12\"></polyline>\n        </svg>\n      </SwapArrowWrapper>\n    </SwapArrowContainer>\n    <SwapContainer>\n      <SwapContainerOuter>\n        <SwapContainerInner>\n          <InputContainer>\n            <SwapInput\n              inputmode=\"decimal\"\n              autocomplete=\"off\"\n              autocorrect=\"off\"\n              type=\"text\"\n              placeholder=\"0\"\n              minlength=\"1\"\n              maxlength=\"79\"\n              spellcheck=\"false\"\n              value={state.amountIn}\n              onChange={swapInputOnChange}\n            />\n            <CurrencyPillContainer>\n              <CurrencyPillWrapper>\n                <CurrencyPillImageWrapper>\n                  <CurrencyPillImage\n                    alt={state.unwrap ? imgETHalt : imgWETHalt}\n                    src={state.unwrap ? imgETH : imgWETH}\n                  />\n                  <CurrencyPillText>\n                    {state.unwrap ? \"ETH\" : \"WETH\"}\n                  </CurrencyPillText>\n                </CurrencyPillImageWrapper>\n              </CurrencyPillWrapper>\n            </CurrencyPillContainer>\n          </InputContainer>\n          <SwapDetailsContainer>\n            <SwapDetailsWrapper>\n              <TextSmall></TextSmall>\n              {state.unwrap ? (\n                state.balanceETH ? (\n                  <TextSmall>\n                    Balance: {ethers.utils.formatUnits(state.balanceETH)}\n                  </TextSmall>\n                ) : null\n              ) : state.balanceWETH ? (\n                <TextSmall>\n                  Balance: {ethers.utils.formatUnits(state.balanceWETH)}\n                </TextSmall>\n              ) : null}\n            </SwapDetailsWrapper>\n          </SwapDetailsContainer>\n        </SwapContainerInner>\n      </SwapContainerOuter>\n    </SwapContainer>\n    <SwapButtonWrapper>\n      <SwapButton disabled={!state.swapReady} onClick={swapButtonOnClick}>\n        {state.swapButtonText ??\n          (state.unwrap ? \"Enter WETH Amount\" : \"Enter ETH Amount\")}\n      </SwapButton>\n    </SwapButtonWrapper>\n  </Card>\n);\n", "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/575cf7387355b578cfb7c7f6022be2250ffedd18a33d4c896f27c6190fcbaef4/widget/Draft-0", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": "goerliETH Wrapper", "metadata.tags.image": NaN, "metadata.tags.near-analytics": NaN, "metadata.tags.near-social": NaN, "metadata.tags.post": NaN, "metadata.image.nft.contractId": NaN, "metadata.image.nft.tokenId": NaN, "metadata": NaN, "metadata.tags.canto-test": NaN, "metadata.image.url": NaN, "metadata.tags.awesome": NaN, "metadata.tags.font": NaN, "metadata.tags.icons": NaN, "metadata.tags.graph": NaN, "metadata.tags.list": NaN, "metadata.tags.rank": NaN, "metadata.tags.app": NaN, "branch.draft.": NaN, "metadata.tags.ethdenver2023": "", "metadata.tags.hackathon": "", "metadata.tags.widget": "", "metadata.tags.astrodao": NaN, "metadata.tags.dao": NaN, "metadata.tags.meta-pool": NaN, "metadata.tags.staking": NaN, "metadata.tags.validators": NaN, "metadata.tags.vote": NaN}