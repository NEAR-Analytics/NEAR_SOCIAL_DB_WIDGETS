{"tx_hash": "6VTdkDrJNzFjdohxR6d3aCsCPg44bdFrDyY7YLGjS2rP", "action_id_social": "6MaAP3cdWqoJKXbLo39XQ2YvEErqjSKM31GGdLg58m3M-0-widget", "block_id": 94478392, "block_timestamp": "2023-06-18T17:32:01.896Z", "signer_id": "rustkyiv.near", "widget_name": "Keypom-Drop-Viewer-fork", "source_code": "const user = context.accountId;\n\nif (!user) {\n  return \"Please Sign In!\";\n}\n\nState.init({\n  numDrops: 0,\n  dropId: 0,\n  keys: [],\n  dropType: \"\",\n  keypom_contract: \"v2.keypom.near\",\n  sortOrder: \"id-asc\",\n});\n\nconst sortByUsage = (keys) => {\n  if (state.sortOrder === \"not-used\") {\n    return keys.sort(\n      (a, b) =>\n        a.cur_key_use - a.remaining_uses - (b.cur_key_use - b.remaining_uses) ||\n        a.key_id - b.key_id\n    );\n  } else if (state.sortOrder === \"partly-used\") {\n    return keys.sort(\n      (a, b) => a.remaining_uses - b.remaining_uses || a.key_id - b.key_id\n    );\n  } else if (state.sortOrder === \"id-desc\") {\n    return keys.sort((a, b) => b.key_id - a.key_id);\n  } else {\n    return keys.sort((a, b) => a.key_id - b.key_id);\n  }\n};\n\nconst keypom_contract = \"v2.keypom.near\";\n\nlet num_drops = Near.view(state.keypom_contract, \"get_drop_supply_for_owner\", {\n  account_id: user,\n});\n\nconst my_drops = Near.view(state.keypom_contract, \"get_drops_for_owner\", {\n  account_id: user,\n  limit: num_drops,\n});\n\nconst selectedDropIndex =\n  my_drops.findIndex((el) => el.drop_id === state.dropId) < 0\n    ? 0\n    : my_drops.findIndex((el) => el.drop_id === state.dropId);\n\nconsole.log(\"my_drops\", my_drops);\n\nconst keysVec = Near.view(state.keypom_contract, \"get_keys_for_drop\", {\n  drop_id: my_drops[selectedDropIndex].drop_id,\n});\n\nconst sortedKeys = sortByUsage(keysVec);\n\nlet drop_type = \"\";\n\nif (my_drops[selectedDropIndex].hasOwnProperty(\"simple\")) {\n  drop_type = \"Simple Drop\";\n} else if (my_drops[selectedDropIndex].hasOwnProperty(\"nft\")) {\n  drop_type = \"Non-Fungible Token Drop\";\n} else if (my_drops[selectedDropIndex].hasOwnProperty(\"ft\")) {\n  drop_type = \"Fungible Token Drop\";\n} else if (my_drops[selectedDropIndex].hasOwnProperty(\"fc\")) {\n  drop_type = \"Function Call Drop\";\n} else {\n  drop_type = \"Unknown\";\n}\n\nState.update({\n  numDrops: num_drops,\n  dropId: my_drops[selectedDropIndex].drop_id,\n  keys: sortedKeys,\n  dropType: drop_type,\n});\n\nconst handleDropChange = (e) => {\n  console.log(e.target.value);\n  State.update({\n    dropId: e.target.value,\n  });\n};\n\nlet type = typeof my_drops[selectedDropIndex];\n\nconst tableStyle = {\n  display: \"table\",\n  width: \"100%\",\n  borderCollapse: \"separate\",\n  borderSpacing: \"0px\",\n  fontSize: \"16px\",\n  textAlign: \"center\",\n};\nconst thStyle = {\n  width: \"5%\",\n  textAlign: \"center\",\n  lineHeight: \"14px\",\n};\n\nconst changeSortType = (sortType) => {\n  State.update({\n    sortOrder: sortType,\n  });\n};\n\nif (!state.keys) {\n  return (\n    <>\n      <div class=\"container border border-info p-3\">\n        <h4 class=\"text-center\"> Drops from {user} </h4>\n        <div class=\"text-center\">\n          <button class=\"btn btn-primary mt-2\" onClick={onPrevClick}>\n            Previous\n          </button>\n          <button class=\"btn btn-primary mt-2\" onClick={onNextClick}>\n            Next\n          </button>\n        </div>\n        <h3 class=\"text-center\">Drop ID:</h3>\n        <p class=\"text-center\">\n          {\" \"}\n          {my_drops[my_drops.length - state.counter].drop_id}{\" \"}\n        </p>\n        <h3 class=\"text-center\">Drop Type:</h3>\n        <p class=\"text-center\"> {state.dropType} </p>\n        <h3 class=\"text-center\">Keys:</h3>\n      </div>\n    </>\n  );\n} else {\n  return (\n    <>\n      <div class=\"container border border-info p-3\">\n        <h4 class=\"text-center\">Drops from {user}</h4>\n        <div class=\"d-flex flex-column align-items-center\">\n          <select\n            class=\"form-select\"\n            style={{\n              maxWidth: \"20vw\",\n              fontSize: \"16px\",\n              backgroundColor: \"#f7f7f7\",\n              borderColor: \"#ccc\",\n              borderRadius: \"4px\",\n              padding: \"6px\",\n              cursor: \"pointer\",\n            }}\n            value={dropId}\n            onChange={handleDropChange}\n          >\n            {my_drops.map((drop, index) => (\n              <option key={index} value={drop.drop_id}>\n                {drop.drop_id}\n              </option>\n            ))}\n          </select>\n        </div>\n        <h3 class=\"text-center\">Drop ID:</h3>\n        <p class=\"text-center\">{my_drops[selectedDropIndex].drop_id}</p>\n        <h3 class=\"text-center\">Drop Type:</h3>\n        <p class=\"text-center\">{state.dropType}</p>\n        <h3 class=\"text-center\">Public Keys:</h3>\n        <div class=\"dropdown\">\n          <button\n            class=\"btn btn-light dropdown-toggle\"\n            type=\"button\"\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n            style={{ marginBottom: \"16px\" }}\n          >\n            Sort: {state.sortOrder}\n          </button>\n          <ul class=\"dropdown-menu px-2 shadow\">\n            <li\n              class=\"dropdown-item\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => changeSortType(\"id-asc\")}\n            >\n              ID Ascending\n            </li>\n            <li\n              class=\"dropdown-item\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => changeSortType(\"id-desc\")}\n            >\n              ID Descending\n            </li>\n            <li\n              class=\"dropdown-item\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => changeSortType(\"not-used\")}\n            >\n              Not Used\n            </li>\n            <li\n              class=\"dropdown-item\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => changeSortType(\"partly-used\")}\n            >\n              Partly Used\n            </li>\n          </ul>\n        </div>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Key ID</th>\n              <th scope=\"col\">Private Key</th>\n              <th scope=\"col\">Remaining Uses</th>\n            </tr>\n          </thead>\n          <tbody>\n            {state.keys.map((key) => (\n              <tr key={key.key_id}>\n                <td>{key.key_id}</td>\n                <td>{key.pk}</td>\n                <td>\n                  {key.remaining_uses ===\n                  key.cur_key_use + key.remaining_uses - 1 ? (\n                    <span class=\"text-danger\">Not Used</span>\n                  ) : key.cur_key_use > 0 ? (\n                    <span class=\"text-warning\">Partly Used</span>\n                  ) : (\n                    <span class=\"text-success\">Used</span>\n                  )}\n                  {key.remaining_uses}/\n                  {key.cur_key_use + key.remaining_uses - 1}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rustkyiv.near/widget/Keypom-Drop-Viewer-fork", "__row_index": 10}