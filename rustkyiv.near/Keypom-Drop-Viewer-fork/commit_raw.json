{"tx_hash": "3ct9okk6Gq476YguFEracnKfNWhd9CFU5Q7VxE5c3G4q", "action_id_social": "Eao7GChiXChGanSm1JiJZoGsXxD7Hyew8tA299PZXLKY-0-widget", "block_id": 94323919, "block_timestamp": "2023-06-16T16:49:01.790Z", "signer_id": "rustkyiv.near", "widget_name": "Keypom-Drop-Viewer-fork", "source_code": "const user = context.accountId;\n\nif (!user) {\n  return \"Please Sign In!\";\n}\n\nState.init({\n  numDrops: 0,\n  dropId: 0,\n  keys: [],\n  dropType: \"\",\n  counter: 1,\n  keypom_contract: \"v2.keypom.near\",\n});\n\nconst keypom_contract = \"v2.keypom.near\";\n\nlet num_drops = Near.view(state.keypom_contract, \"get_drop_supply_for_owner\", {\n  account_id: user,\n});\n\nlet my_drops = Near.view(state.keypom_contract, \"get_drops_for_owner\", {\n  account_id: user,\n  limit: num_drops,\n});\n\nlet keysVec = Near.view(state.keypom_contract, \"get_keys_for_drop\", {\n  drop_id: my_drops[my_drops.length - state.counter].drop_id,\n}).sort((a, b) => a.key_id - b.key_id);\n\nconsole.log(\"keysVec\", keysVec);\n\nlet drop_type = \"\";\n\nif (my_drops[my_drops.length - state.counter].hasOwnProperty(\"simple\")) {\n  drop_type = \"Simple Drop\";\n} else if (my_drops[my_drops.length - state.counter].hasOwnProperty(\"nft\")) {\n  drop_type = \"Non-Fungible Token Drop\";\n} else if (my_drops[my_drops.length - state.counter].hasOwnProperty(\"ft\")) {\n  drop_type = \"Fungible Token Drop\";\n} else if (my_drops[my_drops.length - state.counter].hasOwnProperty(\"fc\")) {\n  drop_type = \"Function Call Drop\";\n} else {\n  drop_type = \"Unknown\";\n}\n\nState.update({\n  numDrops: num_drops,\n  dropId: my_drops[my_drops.length - state.counter].drop_id,\n  keys: keysVec,\n  dropType: drop_type,\n});\n\nconst onNextClick = () => {\n  if (state.counter < num_drops) {\n    State.update({\n      counter: state.counter + 1,\n    });\n  }\n};\n\nconst onPrevClick = () => {\n  if (state.counter > 1) {\n    State.update({\n      counter: state.counter - 1,\n    });\n  }\n};\n\nlet type = typeof my_drops[my_drops.length - state.counter];\n\nconst tableStyle = {\n  display: \"table\",\n  width: \"100%\",\n  borderCollapse: \"separate\",\n  borderSpacing: \"0px\",\n  fontSize: \"16px\",\n  textAlign: \"center\",\n};\nconst thStyle = {\n  // position: \"sticky\",\n  // top: 0,\n  width: \"5%\",\n  // padding: \"16px\",\n  textAlign: \"center\",\n  lineHeight: \"14px\",\n};\n\nif (!state.keys) {\n  return (\n    <>\n      <div class=\"container border border-info p-3\">\n        <h4 class=\"text-center\"> Drops from {user} </h4>\n        <div class=\"text-center\">\n          <button class=\"btn btn-primary mt-2\" onClick={onPrevClick}>\n            Previous\n          </button>\n          <button class=\"btn btn-primary mt-2\" onClick={onNextClick}>\n            Next\n          </button>\n        </div>\n        <h3 class=\"text-center\">Drop ID:</h3>\n        <p class=\"text-center\">\n          {\" \"}\n          {my_drops[my_drops.length - state.counter].drop_id}{\" \"}\n        </p>\n        <h3 class=\"text-center\">Drop Type:</h3>\n        <p class=\"text-center\"> {state.dropType} </p>\n        <h3 class=\"text-center\">Keys:</h3>\n      </div>\n    </>\n  );\n} else {\n  return (\n    <>\n      <div class=\"container border border-info p-3\">\n        <h4 class=\"text-center\"> Drops from {user} </h4>\n        <div class=\"text-center\">\n          <button class=\"btn btn-primary mt-2\" onClick={onPrevClick}>\n            Previous\n          </button>\n          <button class=\"btn btn-primary mt-2\" onClick={onNextClick}>\n            Next\n          </button>\n        </div>\n        <h3 class=\"text-center\">Drop ID:</h3>\n        <p class=\"text-center\">\n          {\" \"}\n          {my_drops[my_drops.length - state.counter].drop_id}{\" \"}\n        </p>\n        <h3 class=\"text-center\">Drop Type:</h3>\n        <p class=\"text-center\"> {state.dropType} </p>\n        <h3 class=\"text-center\">Public Keys:</h3>\n        <p class=\"text-center\">\n          <table style={tableStyle}>\n            <tr>\n              <th>Key ID</th>\n              <th>Remaining Uses</th>\n            </tr>\n\n            <tr>\n              <th style={thStyle}>\n                {state.keys.map((key) => (\n                  <div key={key}>{key.key_id}</div>\n                ))}\n              </th>\n              <th style={thStyle}>\n                {state.keys.map((key) => (\n                  <div key={key}>\n                    {key.remaining_uses}/\n                    {key.cur_key_use + key.remaining_uses - 1}\n                  </div>\n                ))}\n              </th>\n            </tr>\n          </table>\n        </p>\n      </div>\n    </>\n  );\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rustkyiv.near/widget/Keypom-Drop-Viewer-fork", "__row_index": 6}