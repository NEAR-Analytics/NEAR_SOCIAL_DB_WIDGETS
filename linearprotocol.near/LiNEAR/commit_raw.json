{"tx_hash": "AvG1nEE3XdaExTx1Rba2g88CzkjhAktdKr86wUKecPHB", "action_id_social": "14cqxVQ4yBVpXELoY1KyHYLteizBX5NVtBg2rLACTSNu-0-widget", "block_id": 91444012, "block_timestamp": "2023-05-09T08:58:14.844Z", "signer_id": "linearprotocol.near", "widget_name": "LiNEAR", "source_code": "// MIT License: https://github.com/linear-protocol/linear-bos-components/blob/main/LICENSE\n\n/** common lib start */\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst NEAR_DECIMALS = 24;\nconst LiNEAR_DECIMALS = 24;\nconst BIG_ROUND_DOWN = 0;\nconst MIN_BALANCE_CHANGE = 0.5;\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n/** common lib end */\n\n// Config for LiNEAR app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"linearprotocol.near\",\n        contractId: \"linear-protocol.near\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        appUrl: \"https://app.linearprotocol.org\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"linear-builder.testnet\",\n        contractId: \"linear-protocol.testnet\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        appUrl: \"https://testnet.linearprotocol.org\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\n\nState.init({\n  tabName: \"stake\", // stake | unstake\n  page: \"stake\", // \"stake\" | \"account\"\n  nearBalance: \"\",\n  unstakeInfo: {},\n});\n\nconst Main = styled.div`\n  position: relative;\n  color: white;\n  width: 100%;\n  height: 100vh;\n  background: #09071f;\n  padding: 20px;\n\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst updateTabName = (tabName) =>\n  State.update({\n    tabName,\n  });\n\nconst updatePage = (pageName) => State.update({ page: pageName });\n\n// Account balances\nfunction getNearBalance(accountId, onInvalidate) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  };\n  asyncFetch(config.nodeUrl, options).then((res) => {\n    const { amount, storage_usage } = res.body.result;\n    const COMMON_MIN_BALANCE = 0.05;\n\n    let newBalance = \"-\";\n    if (amount) {\n      const availableBalance = Big(amount || 0).minus(\n        Big(storage_usage).mul(Big(10).pow(19))\n      );\n      const balance = availableBalance\n        .div(Big(10).pow(NEAR_DECIMALS))\n        .minus(COMMON_MIN_BALANCE);\n      newBalance = balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN);\n    }\n    State.update({\n      nearBalance: newBalance,\n    });\n    if (onInvalidate) {\n      onInvalidate(nearBalance, newBalance);\n    }\n  });\n}\n\nfunction getLinearBalance(accountId, subscribe) {\n  const linearBalanceRaw = Near.view(\n    config.contractId,\n    \"ft_balance_of\",\n    {\n      account_id: accountId,\n    },\n    undefined,\n    subscribe\n  );\n  if (!linearBalanceRaw) return \"-\";\n  const balance = Big(linearBalanceRaw).div(Big(10).pow(LiNEAR_DECIMALS));\n  return balance.lt(0) ? \"0\" : balance.toFixed();\n}\n\nfunction getAccountDetails(accountId, subscribe) {\n  return Near.view(\n    config.contractId,\n    \"get_account_details\",\n    {\n      account_id: accountId,\n    },\n    undefined,\n    subscribe\n  );\n}\n\nconst nearBalance = accountId ? state.nearBalance : \"-\";\n// Initial fetch of account NEAR balance\nif (accountId && !isValid(nearBalance)) {\n  getNearBalance(accountId);\n}\nconst linearBalance = accountId ? getLinearBalance(accountId) : \"-\";\nconst accountDetails = accountId ? getAccountDetails(accountId) : \"-\";\n\nfunction updateAccountInfo({ notUpdateNearBalance, callback }) {\n  const interval1 = setInterval(() => {\n    const data = getAccountDetails(accountId, true);\n    if (\n      data.unstaked_balance !== accountDetails.unstaked_balance ||\n      data.staked_balance !== accountDetails.staked_balance\n    ) {\n      // stop polling\n      clearInterval(interval1);\n      // update NEAR and LiNEAR balances\n      getLinearBalance(accountId, true);\n      if (notUpdateNearBalance) {\n        getNearBalance(accountId);\n      }\n      // invoke callback functions if any\n      if (callback) callback();\n    }\n  }, 500);\n  if (!notUpdateNearBalance) {\n    const interval2 = setInterval(() => {\n      getNearBalance(accountId, (oldBalance, newBalance) => {\n        if (\n          newBalance !== \"-\" &&\n          oldBalance !== \"-\" &&\n          Big(newBalance).sub(oldBalance).abs().gt(MIN_BALANCE_CHANGE)\n        ) {\n          // stop polling\n          clearInterval(interval2);\n        }\n      });\n    }, 500);\n  }\n}\n\nfunction onLoad(data) {\n  State.update({ unstakeInfo: data });\n}\n\nconst body =\n  state.page === \"stake\" ? (\n    <Main>\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Element.TitleAndDescription`}\n      />\n      <Widget src={`${config.ownerId}/widget/LiNEAR.Data.Apy`} />\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Layout.Tab`}\n        props={{\n          tabName: state.tabName,\n          updateTabName,\n        }}\n      />\n      {state.tabName === \"stake\" && (\n        <Widget\n          src={`${config.ownerId}/widget/LiNEAR.Stake`}\n          props={{ config, nearBalance, linearBalance, updateAccountInfo }}\n        />\n      )}\n      {state.tabName === \"unstake\" && (\n        <Widget\n          src={`${config.ownerId}/widget/LiNEAR.Unstake`}\n          props={{\n            config,\n            linearBalance,\n            unstakeInfo: state.unstakeInfo,\n            updateAccountInfo,\n            updatePage,\n          }}\n        />\n      )}\n    </Main>\n  ) : (\n    <Widget\n      src={`${config.ownerId}/widget/LiNEAR.Account`}\n      props={{\n        config,\n        nearBalance,\n        linearBalance,\n        unstakeInfo: state.unstakeInfo,\n        updatePage,\n        updateTabName,\n        updateAccountInfo,\n      }}\n    />\n  );\n\nreturn (\n  <Main>\n    <Widget\n      src={`${config.ownerId}/widget/LiNEAR.Data.Unstake`}\n      props={{ config, accountDetails, onLoad }}\n    />\n    <Widget\n      src={`${config.ownerId}/widget/LiNEAR.Layout.Navigation`}\n      props={{\n        updatePage,\n      }}\n    />\n    {body}\n  </Main>\n);\n", "metadata": {"description": "LiNEAR Protocol is a liquid staking solution built on the NEAR Protocol. LiNEAR unlocks liquidity of the staked NEAR by creating a staking derivative to be engaged with various DeFi protocols on NEAR and Aurora, while also enjoying over 10% APY staking rewards of the underlying base tokens. LiNEAR is the cornerstone piece of the NEAR-Aurora DeFi ecosystem.", "image": {"ipfs_cid": "bafkreigio67zz63ozsrtl2ydvczmbsx2dgblv2rqzxrizry7zycs3yco7q"}, "name": "LiNEAR -- Liquid Staking on NEAR Protocol", "tags": {"app": "", "defi": "", "linear": "", "liquid": "", "near": "", "staking": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/linearprotocol.near/widget/LiNEAR", "__row_index": 31}