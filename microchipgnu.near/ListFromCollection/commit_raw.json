{"tx_hash": "7aKdjWMQarRrvB9QyzS58oJ5ZxTfhGCxXcyuUhw2pCFn", "action_id_social": "HVHsSF3DmRHeDkThCCw3dfMPRTADU6yWXhU25RVxcFxL-0-widget", "block_id": 88292132, "block_timestamp": "2023-03-28 10:33:17.262", "signer_id": "microchipgnu.near", "widget_name": "ListFromCollection", "source_code": "const accountId = context?.accountId;\nconst marketAddress = \"simple.market.mintbase1.near\";\n\nconst LISTING_DEPOSIT_IN_NEAR_PER_TOKEN = 10000000000000000000000;\nconst size = \"3em\";\n\nState.init({\n  tokens: {},\n  price: 0,\n});\n\nconst _data = fetch(\"https://graph.mintbase.xyz\", {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"omni-site\",\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-role\": \"anonymous\",\n  },\n  body: JSON.stringify({\n    query: `\n        query MyQuery ($accountId: String){\n            mb_views_nft_owned_tokens(limit: 100, where: {listing_kind: {_is_null: true}, owner: {_eq: $accountId}}) {\n                token_id\n                nft_contract_id\n            }\n        }\n`,\n    variables: {\n      accountId: accountId,\n    },\n  }),\n});\n\nconst data = _data.body.data.mb_views_nft_owned_tokens;\n\nconst addToListCart = (token_id, nft_contract_id) => {\n  const key = `${token_id}::${nft_contract_id}`;\n\n  const _tokens = {\n    ...state.tokens,\n    [key]: {\n      tokenId: token_id,\n      nftContractId: nft_contract_id,\n    },\n  };\n\n  State.update({\n    tokens: _tokens,\n  });\n};\n\nconst removeFromCart = (token_id, nft_contract_id) => {\n  const key = `${token_id}::${nft_contract_id}`;\n\n  delete state.tokens[key];\n\n  State.update({\n    tokens: state.tokens,\n  });\n};\n\nconst clear = () => {\n  State.update({\n    tokens: {},\n    price: 0,\n  });\n};\n\nconst numTokensSelected = Object.keys(state.tokens).length;\n\nconst YoctoToNear = (amountYocto) =>\n  new Big(amountYocto).div(new Big(10).pow(24)).toString();\n\nconst listMarket = () => {\n  const gas = 200000000000000;\n\n  const storageDeposit = new Big(\n    LISTING_DEPOSIT_IN_NEAR_PER_TOKEN * numTokensSelected\n  ).toFixed(0);\n\n  const _price = Number(\n    Number(new Big(state.price).mul(new Big(10).pow(24)).toString())\n  )\n    .toLocaleString()\n    .replace(/,/g, \"\");\n\n  const approvals = Object.values(state.tokens).map((token) => {\n    return {\n      methodName: \"nft_approve\",\n      contractName: token.nftContractId,\n      gas: gas,\n      args: {\n        token_id: token.tokenId,\n        account_id: marketAddress,\n        msg: JSON.stringify({\n          price: _price,\n        }),\n      },\n      deposit: 800000000000000000000,\n    };\n  });\n\n  Near.call([\n    {\n      contractName: marketAddress,\n      methodName: \"deposit_storage\",\n      args: {},\n      gas: gas,\n      deposit: storageDeposit,\n    },\n    ...approvals,\n  ]);\n};\n\nif (!accountId) return <div>Sign in first</div>;\n\nreturn (\n  <div class=\"d-flex flex-column gap-4\">\n    <div>\n      <h4>Mass-listing tool for NFTs</h4>\n      <p>Use this tool to mass-list tokens to the Mintbase Market.</p>\n    </div>\n\n    <div>\n      <div class=\"d-flex gap-1 justify-content-center\">\n        <p class=\"text-black\">Selected</p>\n        <p class=\"text-black\">\n          <span class=\"fw-bold\">{numTokensSelected}</span> tokens\n        </p>\n        <p class=\"text-black\">for</p>\n        <p class=\"text-black\">\n          <span class=\"fw-bold\">{state.price}</span>N\n        </p>\n      </div>\n\n      <div class=\"d-flex gap-1 flex-wrap justify-content-center\">\n        {Object.values(state.tokens).map((token) => {\n          return (\n            <Widget\n              src=\"mob.near/widget/NftImage\"\n              props={{\n                nft: {\n                  tokenId: token.tokenId,\n                  contractId: token.nftContractId,\n                },\n                style: {\n                  width: size,\n                  height: size,\n                  objectFit: \"cover\",\n                  minWidth: size,\n                  minHeight: size,\n                  maxWidth: size,\n                  maxHeight: size,\n                  overflowWrap: \"break-word\",\n                },\n                thumbnail: \"thumbnail\",\n                className: \"\",\n                fallbackUrl:\n                  \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n              }}\n            />\n          );\n        })}\n      </div>\n    </div>\n    <div class=\"w-100 d-flex gap-1\">\n      <div\n        class=\"d-flex gap-2 flex-column\"\n        style={{\n          width: \"50%\",\n        }}\n      >\n        <label>Price (in NEAR)</label>\n        <input type=\"text\" value={state.price}></input>\n        <div class=\"d-flex flex-row-reverse gap-2 \">\n          <button\n            onClick={() => {\n              listMarket();\n            }}\n          >\n            List\n          </button>\n          {numTokensSelected > 0 && (\n            <div\n              class=\"p-1 bg-white rounded\"\n              style={{\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                clear();\n              }}\n            >\n              Clear\n            </div>\n          )}\n        </div>\n      </div>\n      <div\n        style={{\n          width: \"50%\",\n        }}\n      >\n        <Widget\n          src=\"microchipgnu.near/widget/NFT.Selector\"\n          props={{\n            compressImages: true,\n            onChange: ({ contractId, tokenId }) => {\n              addToListCart(tokenId, contractId);\n            },\n          }}\n        />\n      </div>\n    </div>\n\n    <Widget src=\"mintbase.near/widget/BuiltWithMintbase\" />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/microchipgnu.near/widget/ListFromCollection"}