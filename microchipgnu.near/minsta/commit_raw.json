{"tx_hash": "4XfCUKALFEcsVsCNpUJjw4zZL13AQ7yAQpYbBiaZRTUn", "action_id_social": "56dRWGfHyKA8Rrcr3HFFHJGRoGiomrhpDK4YZvMPVEBc-0-widget", "block_id": 84847264, "block_timestamp": "2023-02-09 14:46:05.116", "signer_id": "microchipgnu.near", "widget_name": "minsta", "source_code": "const accountId = context?.accountId;\n\nconst proxyMinter = \"proxy2.minsta.near\";\nconst nftContractId = \"minsta.mintbase1.near\";\nconst mbGraphEndpoint = \"https://graph.mintbase.xyz\";\n\nconst ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n\nlet posts = [];\n\nconst data = fetch(mbGraphEndpoint, {\n  method: \"POST\",\n  headers: {\n    \"mb-api-key\": \"omni-site\",\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-role\": \"anonymous\",\n  },\n  body: JSON.stringify({\n    query: `\n  query FetchFeedMintedThings($accountId: String!, $contractAddress: String) {\n    token: mb_views_nft_tokens(\n      where: {\n        minter: { _eq: $accountId }\n        nft_contract_id: { _eq: $contractAddress }\n        burned_timestamp: { _is_null: true }\n      }\n      order_by: { minted_timestamp: desc }\n      limit: 3\n    ) {\n      id: token_id\n      createdAt: minted_timestamp\n      media\n      title\n      description\n      metadata_id\n    }\n  }\n`,\n    variables: {\n      accountId: proxyMinter,\n      contractAddress: nftContractId,\n    },\n  }),\n});\n\nconst handleImageUpload = (files) => {\n  if (files?.length > 0) {\n    State.update({\n      img: {\n        uploading: true,\n        cid: null,\n      },\n    });\n    const body = files[0];\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body,\n    }).then((res) => {\n      const cid = res.body.cid;\n\n      State.update({\n        img: {\n          cid,\n        },\n      });\n\n      handleMint(cid);\n    });\n  } else {\n    State.update({\n      img: null,\n    });\n  }\n};\n\nconst handleMint = (cid) => {\n  const gas = 200000000000000;\n  const deposit = 0;\n\n  Near.call([\n    {\n      contractName: proxyMinter,\n      methodName: \"mint\",\n      args: {\n        owner_id: accountId,\n        metadata: {\n          media: ipfsUrl(cid),\n        },\n        num_to_mint: 1,\n        royalty_args: {\n          split_between: {\n            [accountId]: 10000,\n          },\n          percentage: 1000,\n        },\n        split_owners: null,\n        nft_contract_id: nftContractId,\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\nif (data?.body?.data?.token) {\n  posts = data?.body?.data?.token;\n}\n\nif (posts.length === 0) {\n  return \"Loading...\";\n}\n\nreturn (\n  <div class=\"text-black p-2 container-fluid\">\n    <div class=\"container-fluid d-flex flex-wrap justify-content-center gap-2\">\n      <Files\n        multiple={false}\n        accepts={[\"image/*\"]}\n        minFileSize={1}\n        clickable\n        onChange={handleImageUpload}\n        style={{\n          cursor: \"pointer\",\n        }}\n      >\n        <div\n          class=\"col-md-4 col-sm-6 px-1 d-flex justify-content-center align-items-center\"\n          style={{ width: \"150px\", height: \"150px\" }}\n        >\n          {state.img?.uploading ? <>...</> : state.img?.cid ? \"Replace\" : \"+\"}\n        </div>\n      </Files>\n      {posts.map((post) => {\n        return (\n          <div\n            class=\"col-md-4 col-sm-6 px-1 d-flex justify-content-center\"\n            style={{ width: \"150px\", height: \"150px\" }}\n          >\n            <img src={post.media} class=\"object-fit-contain w-100\" />\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/microchipgnu.near/widget/minsta", "metadata.image.ipfs_cid": NaN}