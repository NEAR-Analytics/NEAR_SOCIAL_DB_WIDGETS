{"tx_hash": "Dj2xJ2QEWoUcf5TrYcXyRvRKLXtMKrtWCuiJ2coqNkXW", "action_id_social": "8D1LY42mY87GbDhLNwGoEKBE9fDXsGhE7yGCGs2gtX54-1-widget", "block_id": 88989989, "block_timestamp": "2023-04-07 00:16:41.863", "signer_id": "generalstrike.near", "widget_name": "StrikeCard", "source_code": "const externalAppUrl = \"https://strike-card.vercel.app/\";\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send const externalAppUrl = \"https://strike-card.vercel.app/\";\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\nconst initialPayload = {};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"sign-card\":\n      handleSignCard(request, response);\n      break;\n  }\n};\n\nconst handleSignCard = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    asyncFetch(\"https://2ed0-172-56-161-197.ngrok.io\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Strike-Card\": \"simple\",\n      },\n      body: JSON.stringify({\n        query:\n          'mutation signCard($firstName: String = \"\", $lastName: String = \"\", $email: String = \"\", $phone: String = \"\", $sponsor: String = \"\", $consent: Boolean = false) { signatures { create(firstName: $firstName, lastName: $lastName, email: $email, phone: $phone, sponsor: $sponsor, consent: $consent) { message } } }',\n        variables: payload,\n      }),\n    }).then((res) => {\n      if (res.body.errors) {\n        response(request).send(res.body.error);\n      } else {\n        response(request).send(res.body.data);\n      }\n    });\n  }\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/generalstrike.near/widget/StrikeCard"}