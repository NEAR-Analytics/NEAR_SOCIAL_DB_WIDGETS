{"tx_hash": "FPBgfbRvnXzxe74WuhSN4dHCfT2FpAL4LEjBnoL3ixx2", "action_id_social": "Bon5sEMUmnahtQbvaaWQFEJyeoRh1zBFmHgD1SZJaDj2-0-widget", "block_id": 87479792, "block_timestamp": "2023-03-17 07:35:17.762", "signer_id": "y3k.near", "widget_name": "NEAR.ATLAS.DATA.CHAINS_TWITTER", "source_code": "let static_file_param = \"NEAR-ATLAS-DATA-TWITTER.csv\";\n// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://github-near-data-api.vercel.app/api/static_file_param?filename=\" +\n    static_file_param,\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nconst METRIC_NAME = \"NEAR TWITTER FOLLOWERS\";\n\nlet Style = styled.div`\n\n\n      .bar {\n        transition: fill 0.2s;\n      }\n\n      .bar:hover {\n        fill: #ffa726;\n      }\n\n      .bar-chart {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n        svg {\n          width: 80%;\n        }\n\n        rect {\n          shape-rendering: crispEdges;\n          fill: #61dafb;\n          stroke: #333;\n          stroke-width: 1;\n        }\n\n\n        `;\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst v_bar_labels = monthNames;\n\nrawData.body.forEach((datum) => {\n  if (!datum[\"Daily_Date\"]) {\n    return;\n  }\n});\n\nconst colorGenerator = () => {\n  const colors = [\n    \"rgb(255, 99, 132)\",\n    \"rgb(75, 192, 192)\",\n    \"rgb(153, 102, 255)\",\n    \"rgb(255, 159, 64)\",\n    \"rgb(54, 162, 235)\",\n    \"rgb(201, 203, 207)\",\n    \"rgb(255, 205, 86)\",\n    \"rgb(255, 99, 71)\",\n    \"rgb(147, 112, 219)\",\n    \"rgb(0, 128, 128)\",\n    \"rgb(100, 149, 237)\",\n    \"rgb(127, 255, 0)\",\n  ];\n\n  let index = 0;\n\n  return () => {\n    if (index >= colors.length) {\n      index = 0;\n    }\n\n    return colors[index++];\n  };\n};\n\nconst getBackgroundColor = colorGenerator();\n\nfunction parseCounts(countsString) {\n  if (typeof countsString === \"number\") {\n    return parseInt(countsString);\n  } else if (typeof countsString === \"string\") {\n    const dailyString = countsString.replace(\",\", \"\").replace(\",\", \"\") || \"0\"; // default to \"0\" if\n    return parseInt(dailyString);\n  } else {\n    console.log(` ${countsString} is neither a string nor a number`);\n  }\n  // return countsString.split(\",\").map((str) => parseInt(str, 10));\n}\n\nconst formatData = (rawData) => {\n  let result = [];\n\n  rawData.forEach((item) => {\n    let year = item.Date ? item.Date.split(\"-\")[0] : \"\";\n    let month = item.Date ? item.Date.split(\"-\")[1] : \"\";\n\n    if (!year || !month) return;\n\n    if (!result.find((x) => x.label === year)) {\n      result.push({\n        label: year,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      });\n    }\n\n    let yearData = result.find((x) => x.label === year);\n    yearData.data[monthNames[month - 1]] = parseCounts(item[\"# of Followers\"]);\n  });\n\n  result.forEach((year) => {\n    const yearData = year.data;\n    monthNames.forEach((month) => {\n      if (!yearData[month]) {\n        yearData[month] = 0;\n      }\n    });\n  });\n\n  result.sort((a, b) => {\n    if (a.label === b.label) {\n      return (\n        monthNames.indexOf(Object.keys(a.data)[0]) -\n        monthNames.indexOf(Object.keys(b.data)[0])\n      );\n    }\n    return a.label - b.label;\n  });\n\n  return result;\n};\n\nconst formattedDataMonth = [];\n\nlet project_labels = [];\n\ntry {\n  rawData.body.forEach((entry) => {\n    if (entry.Date === null) return;\n\n    entry.keys().forEach((key) => {\n      if (key === \"Date\") return;\n      if (!project_labels.includes(key)) {\n        project_labels.push(key);\n      }\n    });\n  });\n} catch (err) {\n  console.log(err);\n}\n\nrawData.body.forEach((entry) => {\n  if (entry.Date === null) return;\n  const year = new Date(entry.Date).getFullYear();\n  const month = new Date(entry.Date).getMonth();\n  const monthName = monthNames[month];\n  let monthData = formattedDataMonth.find((data) => data.label === monthName);\n  if (!monthData) {\n    monthData = {\n      label: monthName,\n      data: {},\n      backgroundColor: getBackgroundColor(),\n    };\n    formattedDataMonth.push(monthData);\n  }\n  monthData.data[year] = parseCounts(entry[\"# of Followers\"]);\n});\n\n// const sortedArray = formattedDataMonth\n//   .sort((a, b) => {\n//     const yearsA = Object.keys(a.data);\n//     const yearsB = Object.keys(b.data);\n//     return parseInt(yearsB[0]) - parseInt(yearsA[0]);\n//   })\n//   .sort((a, b) => {\n//     const monthAIndex = monthNames.indexOf(a.label);\n//     const monthBIndex = monthNames.indexOf(b.label);\n//     return monthAIndex - monthBIndex;\n//   });\n\nconst sortedArray = formattedDataMonth.sort((a, b) => {\n  const yearsA = Object.keys(a.data);\n  const yearsB = Object.keys(b.data);\n  return parseInt(yearsB[0]) - parseInt(yearsA[0]);\n});\n\nconst allYears = [...new Set(sortedArray.map((x) => Object.keys(x.data)[0]))];\n\nsortedArray.forEach((item) => {\n  allYears.forEach((y) => {\n    if (!item.data[y]) {\n      item.data[y] = 0;\n    }\n  });\n});\n\nsortedArray.sort((a, b) => {\n  const monthAIndex = monthNames.indexOf(a.label);\n  const monthBIndex = monthNames.indexOf(b.label);\n  return monthAIndex - monthBIndex;\n});\n\nconsole.log(sortedArray);\n\nconst v_bar_data = {\n  project_labels,\n  datasets: formattedDataMonth,\n};\n\nconst v_bar_options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: true,\n      text: \"NEAR TWITTER FOLLOWERS\",\n    },\n  },\n};\n\nreturn (\n  <Style>\n    <div className=\"text-bg-light rounded-4 p-3 mb-4\">\n      {data !== null ? (\n        <p>\n          <div class=\"\">\n            <div class=\"\">\n              <div>\n                <h3>{METRIC_NAME}</h3>\n                <BarEl options={v_bar_options} data={v_bar_data} />\n              </div>\n            </div>\n          </div>\n\n          <div></div>\n        </p>\n      ) : (\n        <div>Loading ...</div>\n      )}\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/NEAR.ATLAS.DATA.CHAINS_TWITTER"}