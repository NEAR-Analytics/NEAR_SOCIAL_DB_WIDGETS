{"tx_hash": "GBFxkpvTP5b2QGFpr9hXC7W6Fhs9XbmJTJn3AfbFh4JV", "action_id_social": "GyGHvn2pKdgzU6GMb3iFnf7VWLVSC81g1QKSz9xrcxBz-0-widget", "block_id": 88743053, "block_timestamp": "2023-04-03 18:45:50.417", "signer_id": "y3k.near", "widget_name": "NEAR.ATLAS.REACT.TABLE.TOP.DAPPS", "source_code": "// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/2122b458-2138-4d4b-b030-efa784fc04d3/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\n// data.body = data.body.sort((a, b) => new Date(a.MONTH) - new Date(b.MONTH));\n\nlet Style = styled.div`\n\n          `;\n\nlet nodes = rawData.body || [];\n\nconst sub_widget_map = {\n  \"Play Ember\": \"https://nearatlas.com/#/y3k.near/widget/WAU_PlayEmber\",\n};\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a\n      href={\n        \"https://nearatlas.com/#/y3k.near/widget/NEART.ATLAS.DETAILED_PROJECT_DASHBOARD?project_name=\" +\n        text\n      }\n      className=\"text-warning text-wrap \"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-danger\">{number}%</span>;\n  } else if (number > 0) {\n    return <span className=\"text-success\">{number}%</span>;\n  } else {\n    return <span className=\"text-warning\">{number}%</span>;\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\n\nconst COLUMNS = [\n  {\n    label: <p className=\"text-center text-white text-wrap\">Project</p>,\n    renderCell: (item) => formatCell(item[\"Contract Address\"]),\n    sort: { sortKey: \"ContractAddress\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">Past 30 Days</p>,\n    renderCell: (item) => formatNumber(item[\"Past 30 Days\"]),\n    sort: { sortKey: \"Past30\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">Last Month</p>,\n    renderCell: (item) => formatNumber(item[\"30-60 Days Ago\"]),\n    sort: { sortKey: \"PercentNew\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">M/M</p>,\n    renderCell: (item) => formatText(item[\"M/M\"]),\n    sort: { sortKey: \"MM\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">New MAAs</p>,\n    renderCell: (item) => formatNumber(item[\"New MAAs\"]),\n    sort: { sortKey: \"MM\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">M2 Retention</p>,\n    renderCell: (item) => formatPercentNew(item[\"M2 Retention\"]),\n    sort: { sortKey: \"MM\" },\n  },\n\n  {\n    label: <p className=\"text-center text-white text-wrap \">Average DAU</p>,\n    renderCell: (item) => formatNumberDecimal(item[\"Daily Average\"]),\n    sort: { sortKey: \"PercentNew\" },\n  },\n\n  {\n    label: <p className=\"text-center text-white text-wrap \">Stickiness</p>,\n    renderCell: (item) => formatPercentNew(item[\"DAU / MAU\"]),\n    sort: { sortKey: \"PercentNew\" },\n  },\n];\n\nconst sortFns = {\n  ContractAddress: (array) =>\n    array.sort((a, b) =>\n      a[\"Contract Address\"].localeCompare(b[\"Contract Address\"])\n    ),\n  Past30: (array) =>\n    array.sort((a, b) => a[\"Contract Address\"] - b[\"Contract Address\"]),\n  PercentNew: (array) =>\n    array.sort((a, b) => a[\"Past 30 Days\"] - b[\"Past 30 Days\"]),\n  MM: (array) => array.sort((a, b) => a[\"M/M\"] - b[\"M/M\"]),\n  Past60: (array) =>\n    array.sort((a, b) => a[\"60-90 Days Ago\"] - b[\"60-90 Days Ago\"]),\n  M2M: (array) => array.sort((a, b) => a[\"M/2M\"] - b[\"M/2M\"]),\n};\n\nreturn (\n  <div className=\"text-bg-dark rounded-4 mb-12\">\n    {data !== null ? (\n      <div Style={{ \"min-width\": \"780px\" }} className=\"bg-dark\">\n        <BasicTable columns={COLUMNS} data={data} sortFns={sortFns} />\n      </div>\n    ) : (\n      <div>Loading ...</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/NEAR.ATLAS.REACT.TABLE.TOP.DAPPS"}