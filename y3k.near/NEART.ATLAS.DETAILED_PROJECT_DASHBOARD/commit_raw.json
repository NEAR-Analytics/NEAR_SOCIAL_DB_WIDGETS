{"tx_hash": "FUVajCY167A4Zs1jq9GdrDApyZdyfyUfLjmNCr4ma3fv", "action_id_social": "3fFoU92a6DTGW6uttxkPUsGhWf252iA9UW6BQfKxUTpR-0-widget", "block_id": 88810131, "block_timestamp": "2023-04-04 15:42:09.184", "signer_id": "y3k.near", "widget_name": "NEART.ATLAS.DETAILED_PROJECT_DASHBOARD", "source_code": "const initialState = {\n  selectedMetric: \"MAU\",\n  processedData: processedData,\n  metric_period: \"Monthly\",\n};\n\nstate = State.init(initialState);\n\nfunction filterByProjectName(arr, project_name) {\n  return arr.filter((obj) => obj.PROJECT_NAME === project_name);\n}\n\nfunction sortByActivityDate(arr) {\n  return arr.sort(\n    (a, b) => new Date(a.ACTIVITY_DATE) - new Date(b.ACTIVITY_DATE)\n  );\n}\n\nconst rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/536ff291-995e-479c-8a45-8c77781aa329/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nfunction parseUTCDate(dateString) {\n  const [year, month, day] = dateString\n    .split(\"-\")\n    .map((str) => parseInt(str, 10));\n  // Subtract 1 from the month, as JavaScript months are zero-based\n  const utcTimestamp = Date.UTC(year, month - 1, day);\n  return new Date(utcTimestamp);\n}\n\nlet Style = styled.div`\n\n\n                  .bar {\n                    transition: fill 0.2s;\n                  }\n\n                  .bar:hover {\n                    fill: #ffa726;\n                  }\n\n                  .bar-chart {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                  }\n\n                    svg {\n                      width: 80%;\n                    }\n\n                    rect {\n                      shape-rendering: crispEdges;\n                      fill: #61dafb;\n                      stroke: #333;\n                      stroke-width: 1;\n                    }\n\n\n                    `;\n\nconst colorGenerator = () => {\n  const colors = [\n    \"rgb(255, 99, 132)\",\n    \"rgb(75, 192, 192)\",\n    \"rgb(153, 102, 255)\",\n    \"rgb(255, 159, 64)\",\n    \"rgb(54, 162, 235)\",\n    \"rgb(201, 203, 207)\",\n    \"rgb(255, 205, 86)\",\n    \"rgb(255, 99, 71)\",\n    \"rgb(147, 112, 219)\",\n    \"rgb(0, 128, 128)\",\n    \"rgb(100, 149, 237)\",\n    \"rgb(127, 255, 0)\",\n  ];\n\n  let index = 0;\n\n  return () => {\n    if (index >= colors.length) {\n      index = 0;\n    }\n\n    return colors[index++];\n  };\n};\n\nfunction updateProcessedData(filteredSortedData, selectedMetric) {\n  const processedData = [];\n\n  filteredSortedData.forEach((datum) => {\n    if (!datum.ACTIVITY_DATE) {\n      return;\n    }\n\n    const activity_date = parseUTCDate(datum.ACTIVITY_DATE);\n\n    const month =\n      months[\n        parseInt(activity_date.toISOString().slice(0, 10).split(\"-\")[1]) - 1\n      ];\n\n    let monthData = processedData.find((data) => data.label === month);\n\n    if (!monthData) {\n      monthData = {\n        label: month,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      };\n      processedData.push(monthData);\n    }\n\n    monthData.data[activity_date.toISOString().slice(0, 10)] =\n      datum[selectedMetric];\n  });\n\n  return processedData;\n}\n\nconst finalData = rawData.body;\n\nif (!finalData) {\n  return <h1> \ud83e\ude84 Loading MAGIC \ud83e\ude84</h1>;\n}\n\nconst project_name = props.project_name || \"Sweat Economy\";\n\nconst METRIC_NAME = `\"${project_name}'s ${state.metric_period}\"`;\n\nconst filteredData = filterByProjectName(finalData, project_name) || [];\n\nconst filteredSortedData = sortByActivityDate(filteredData) || [];\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\n// logic start\n\nconst getBackgroundColor = colorGenerator();\n\nlet processedData = [];\n\ntry {\n  filteredSortedData.forEach((datum) => {\n    if (!datum.ACTIVITY_DATE) {\n      return;\n    }\n\n    const activity_date = parseUTCDate(datum.ACTIVITY_DATE);\n\n    const month =\n      months[\n        parseInt(activity_date.toISOString().slice(0, 10).split(\"-\")[1]) - 1\n      ];\n\n    let monthData = processedData.find((data) => data.label === month);\n\n    if (!monthData) {\n      monthData = {\n        label: month,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      };\n      processedData.push(monthData);\n    }\n\n    monthData.data[activity_date.toISOString().slice(0, 10)] = datum.MAU;\n  });\n} catch (err) {\n  console.log(err);\n}\n\n// logic end\n\nconst v_bar_labels = months;\n\nconst v_bar_data = {\n  v_bar_labels,\n  datasets: processedData,\n};\n\nconst v_bar_options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: true,\n      text: \"\",\n    },\n  },\n};\n\n// ...Other code...\n\n// logic part-3\n\nconst handleDropdownChange = (e) => {\n  console.log(\"selectedMetric:\", e.target.value);\n  State.update({\n    selectedMetric: e.target.value,\n  });\n};\n\nconst header_map = {\n  DAA: \"Daily Active Accounts\",\n  WAU: \"Weekly Active Accounts\",\n  MAU: \"Monthly Active Accounts\",\n  M2_RETENTION: \"Retention Rate\",\n  NEW_MAA: \"New MAAs\",\n  PERCENT_NEW: \"% New Accounts\",\n  STICKINESS: \"DAA / MAA\",\n};\nconst getBarData = () => {\n  const { selectedMetric } = state;\n  console.log(selectedMetric);\n  State.update({ processedData: [] });\n\n  let newProcessedData = updateProcessedData(\n    filteredSortedData,\n    selectedMetric\n  );\n\n  State.update({\n    processedData: newProcessedData,\n    metric_period: header_map[selectedMetric],\n  });\n\n  console.log(newProcessedData);\n  console.log(\"processedData WAA\");\n\n  return {\n    v_bar_labels,\n    datasets: newProcessedData,\n  };\n};\n\nreturn (\n  <Style>\n    <div className=\"text-bg-light rounded-4 p-3 mb-4\">\n      {data !== null ? (\n        <p>\n          <div class=\"\">\n            <div class=\"\">\n              <div>\n                <h2 className=\"text-black\">Metric: {METRIC_NAME}</h2>\n\n                <label htmlFor=\"metric-dropdown\">Select metric: </label>\n                <select\n                  id=\"metric-dropdown\"\n                  value={selectedMetric}\n                  onChange={handleDropdownChange}\n                >\n                  <option value=\"MAU\">MAA</option>\n                  <option value=\"WAU\">WAA</option>\n                  <option value=\"DAA\">DAA</option>\n                  <option value=\"M2_RETENTION\">Retention Rate</option>\n                  <option value=\"NEW_MAA\">New MAAs</option>\n                  <option value=\"PERCENT_NEW\">% New Accounts</option>\n                  <option value=\"STICKINESS\">DAA / MAA</option>\n                </select>\n\n                <BarEl options={v_bar_options} data={getBarData()} />\n              </div>\n            </div>\n          </div>\n\n          <div></div>\n        </p>\n      ) : (\n        <div>Loading ...</div>\n      )}\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/NEART.ATLAS.DETAILED_PROJECT_DASHBOARD"}