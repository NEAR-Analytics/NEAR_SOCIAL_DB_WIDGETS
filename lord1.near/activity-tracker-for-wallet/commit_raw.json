{"tx_hash": "HPDJahucQd1ZYPtjS4PXxeTyA7r8WCnpG7i7iPyyaNHt", "action_id_social": "BayJVFnVTaagE7wfFjfPWzPncbLD41SVhyj51VSbz3F9-0-widget", "block_id": 86978776, "block_timestamp": "2023-03-10 12:23:46.522", "signer_id": "lord1.near", "widget_name": "activity-tracker-for-wallet", "source_code": "const nn = {\r\n  \"background-image\": \"linear-gradient(270deg, #ff0420, #d9029d)\",\r\n  \"font-family\": \"Rubik, sans-serif\",\r\n  color: \"transparent\",\r\n  \"-webkit-background-clip\": \"text\",\r\n  \"background-clip\": \"text\",\r\n  \"-webkit-text-fill-color\": \"transparent\",\r\n  float: \"right\",\r\n};\r\n\r\nconst bb = {\r\n  \"background-image\": \"linear-gradient(270deg, #ff0420, #d9029d)\",\r\n  \"font-family\": \"Rubik, sans-serif\",\r\n  color: \"transparent\",\r\n  \"-webkit-background-clip\": \"text\",\r\n  \"background-clip\": \"text\",\r\n  \"-webkit-text-fill-color\": \"transparent\",\r\n};\r\n\r\nconst cc = {\r\n  background:\r\n    \"linear-gradient(90deg, rgba(209,139,255,1) 0%, rgba(234,207,251,1) 0%, rgba(246,246,246,1) 100%\",\r\n};\r\n\r\nconst styleStat = {\r\n  display: \"flex\",\r\n  \"flex-direction\": \"column\",\r\n  \"font-weight\": 500,\r\n  \"font-size\": \"16px\",\r\n  \"line-height\": \"24px\",\r\n  \"padding-right\": \"20px\",\r\n  \"padding-bottom\": \"10px\",\r\n};\r\nconst ss = {\r\n  \"font-size\": \"20px\",\r\n  \"box-shadow\": \"0 20px 20px rgba(128, 117, 226, 0.15)\",\r\n  border: \"2px solid lightgray\",\r\n  padding: \"2%\",\r\n  \"border-radius\": \"13px\",\r\n  width: \"50%\",\r\n};\r\nconst dd = {\r\n  \"font-size\": \"15px\",\r\n  border: \"2px solid lightgray\",\r\n  padding: \"5%\",\r\n  \"border-radius\": \"13px\",\r\n  width: \"100%\",\r\n  margin: \"2px\",\r\n};\r\n\r\nState.init({\r\n  is_stake_loading: false,\r\n  is_born_date_loading: false,\r\n  is_born_date_loadings: false,\r\n  is_swap_loading: false,\r\n  is_children_loading: false,\r\n  is_ledger_loading: false,\r\n\r\n  address: \"\",\r\n  ledger_data: [],\r\n  stake_data: [],\r\n  social: [],\r\n  children_data: [],\r\n  born_data: [],\r\n  born_datas: [],\r\n\r\n  is_init: true,\r\n});\r\n\r\nconst {\r\n  is_stake_loading,\r\n  is_born_date_loading,\r\n  is_born_date_loadings,\r\n  is_swap_loading,\r\n  is_children_loading,\r\n  is_ledger_loading,\r\n  address,\r\n  previous_address,\r\n  social,\r\n  stake_data,\r\n  ledger_data,\r\n  children_data,\r\n  born_data,\r\n  born_datas,\r\n  is_init,\r\n} = state;\r\n\r\nconst is_loading =\r\n  is_stake_loading &&\r\n  is_born_date_loading &&\r\n  is_born_date_loadings &&\r\n  is_swap_loading &&\r\n  is_children_loading &&\r\n  is_ledger_loading;\r\n\r\nconst is_any_loading =\r\n  is_stake_loading ||\r\n  is_born_date_loading ||\r\n  is_born_date_loadings ||\r\n  is_swap_loading ||\r\n  is_children_loading ||\r\n  is_ledger_loading;\r\n\r\nconst fetchData = (sql, whichState, whichLoadingState) => {\r\n  //clear and reset data\r\n  State.update({ [whichLoadingState]: true, [whichState]: [] });\r\n  sql = sql.replace(\"{{address}}\", address).replace(/\\+/g, \"%2B\");\r\n  var formBody = [];\r\n  formBody.push(`statement=${sql}`);\r\n  formBody = formBody.join(\"&\");\r\n\r\n  // doesn't work\r\n  try {\r\n    asyncFetch(\"https://flipside.leslug.com/execute\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\r\n      },\r\n      body: formBody,\r\n    }).then((res) => {\r\n      State.update({\r\n        [whichState]: res.body,\r\n        [whichLoadingState]: false,\r\n      });\r\n\r\n      //.catch doesn't work either\r\n    });\r\n  } catch {\r\n    State.update({\r\n      [whichLoadingState]: false,\r\n      [whichState]: [],\r\n    });\r\n  }\r\n};\r\n\r\nconst ellipsizeThis = (x, leftCharLength, rightCharLength) => {\r\n  let totalLength = leftCharLength + rightCharLength;\r\n\r\n  if (totalLength >= x.length) {\r\n    return x;\r\n  }\r\n\r\n  return x.substring(0, leftCharLength) + \"...\" + x.substr(-rightCharLength);\r\n};\r\n\r\nfunction toTwoDecimals(x) {\r\n  if (!x) {\r\n    return \"\";\r\n  }\r\n  if (typeof x === \"string\") {\r\n    x = parseFloat(x);\r\n  }\r\n  return x.toLocaleString(\"en\", {\r\n    maximumFractionDigits: 2,\r\n    minimumFractionDigits: 2,\r\n  });\r\n}\r\n\r\nconst getStakeData = () => {\r\n  let sql = `\r\nselect \r\ncount(distinct TX_HASH) as trx ,\r\nmonthname(date_trunc('month',BLOCK_TIMESTAMP) ) as date \r\nfrom near.social.fact_decoded_actions \r\nwhere SIGNER_ID = {{address}}\r\ngroup by 2 order by date desc `;\r\n\r\n  fetchData(sql, \"stake_data\", \"is_stake_loading\");\r\n};\r\n\r\nconst getIsLedgerData = () => {\r\n  let sql = `with a as \r\n(\r\nselect \r\ndistinct  TX_HASH ,\r\nBLOCK_TIMESTAMP ,\r\nSIGNER_ID as sin,\r\n\r\ncase \r\nwhen parse_json(node_data:graph):key::string ='poke' then 'poke'\r\nwhen parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='follow' then 'follow'\r\nwhen parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='unfollow' then 'unfollow'\r\nwhen parse_json(node_data:like):key:type::string ='social' then 'like'\r\nwhen parse_json(node_data:comment):item:type::string ='social' then 'comment'\r\nwhen parse_json(node_data:comment):key::string is not null  then null\r\nwhen parse_json(node_data:post):key::string is not null  then null\r\nwhen parse_json(node_data:follow)::string is not null then null \r\n\r\nelse NODE end as action ,\r\n\r\n\r\nNODE_DATA\r\n\r\n\r\nfrom \r\nnear.social.fact_decoded_actions \r\n)\r\n\r\n\r\n\r\nselect \r\n count(distinct TX_HASH )as total_trxs ,\r\n (SUM (CASE when action ='post' THEN 1 ELSE 0 END)) as post ,\r\n (SUM (CASE when action ='like' THEN 1 ELSE 0 END)) as \"like\" ,\r\n(SUM (CASE when action ='commenet' THEN 1 ELSE 0 END)) as commenets ,\r\n(SUM (CASE when action ='poke' THEN 1 ELSE 0 END)) as poke ,\r\n (SUM (CASE when action ='widget' THEN 1 ELSE 0 END)) as widget ,\r\n (SUM (CASE when action ='profile' THEN 1 ELSE 0 END)) as profile ,\r\n (SUM (CASE when parse_json(NODE_DATA:graph):key::string ='follow'and parse_json(NODE_DATA:graph):value:type::string ='follow'  THEN 1 ELSE 0 END)) as follow ,\r\n (SUM (CASE when parse_json(NODE_DATA:graph):key::string ='follow'and parse_json(NODE_DATA:graph):value:type::string ='unfollow'  THEN 1 ELSE 0 END)) as unfollow , \r\n(post+commenets+poke+widget+profile+follow+unfollow+\"like\") as total_activity_trx ,\r\ntotal_trxs - total_activity_trx as total_widget_trx \r\nfrom a \r\nwhere  action is not null\r\n AND sin = '{{address}}'`;\r\n  fetchData(sql, \"ledger_data\", \"is_ledger_loading\");\r\n};\r\n\r\nconst getBornDateData = () => {\r\n  let sql = `with a as \r\n(\r\nselect \r\ndistinct  TX_HASH  as tx_hashs,\r\nBLOCK_TIMESTAMP as block_timestamp,\r\nSIGNER_ID as singers ,\r\nNODE  as action ,\r\ncase when  NODE ='profile' then SIGNER_ID else null end as target_account ,\r\ncase  when NODE ='profile' then parse_json(node_data):name::string else NODE_DATA end as profiles\r\n\r\n\r\nfrom  near.social.fact_decoded_actions \r\nwhere target_account =singers\r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom a  where  action is not null\r\nAND singers = '{{address}}'\r\norder by block_timestamp desc limit 1 `;\r\n  fetchData(sql, \"born_data\", \"is_born_date_loading\");\r\n};\r\n\r\nconst getBornDateDatas = () => {\r\n  let sql = `\r\nselect \r\ncount(distinct TX_HASH) as trxs ,\r\nsplit((date_trunc('day',BLOCK_TIMESTAMP) ),' 00:00:00.000')[0] as date ,\r\nmonth(date_trunc('month',BLOCK_TIMESTAMP) ) as month ,\r\nyear(date_trunc('year',BLOCK_TIMESTAMP) ) as year \r\n\r\nfrom near.social.fact_decoded_actions \r\nwhere SIGNER_ID = '{{address}}'\r\ngroup by 2,3,4 order by year,month,date asc  `;\r\n  fetchData(sql, \"born_datas\", \"is_born_date_loadings\");\r\n};\r\n\r\nlet date = born_datas.map((items) => items.date);\r\nlet trx = born_datas.map((items) => items.trxs);\r\nlet srcc = `\r\nhttps://quickchart.io/chart?width=400&height=200&chart={type:'bar',data:{labels:${JSON.stringify(\r\n  date\r\n)}, datasets:[{label:'',data:${JSON.stringify(trx)}}]}}`;\r\n\r\nconst getSwapData = () => {\r\n  let sql = `with a as \r\n(\r\nselect \r\ndistinct  TX_HASH as tx_hash ,\r\nBLOCK_TIMESTAMP as block_timestamp ,\r\nSIGNER_ID as singer ,\r\n\r\ncase \r\nwhen parse_json(node_data:graph):key::string ='poke' then 'poke'\r\nwhen parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='follow' then 'follow'\r\nwhen parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='unfollow' then 'unfollow'\r\nwhen parse_json(node_data:like):key:type::string ='social' then 'like'\r\nwhen parse_json(node_data:comment):item:type::string ='social' then 'comment'\r\nwhen parse_json(node_data:comment):key::string is not null  then null\r\nwhen parse_json(node_data:post):key::string is not null  then null\r\nwhen parse_json(node_data:follow)::string is not null then null \r\n\r\nelse NODE end as action ,\r\n\r\n\r\ncase\r\n when  parse_json(node_data:graph):key::string ='poke' then parse_json(node_data:graph):value:accountId::string\r\n when  NODE ='profile' then SIGNER_ID\r\n when  parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='unfollow'  then parse_json(node_data:graph):value:accountId::string\r\n when  parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='follow'  then parse_json(node_data:graph):value:accountId::string\r\n when  NODE ='widget' then SIGNER_ID\r\n when  NODE ='post' then SIGNER_ID\r\nwhen parse_json(node_data:comment):item:type::string ='social'  then split((parse_json(node_data:comment):item:path::string),'/')[0]\r\nwhen parse_json(node_data:like):key:type::string ='social' then   split((parse_json(node_data:like):key:path::string),'/')[0]\r\nwhen parse_json(node_data:moo)::string is not null then  SIGNER_ID\r\nwhen parse_json(node_data:genie):answers::string is not null then  split(split(parse_json(node_data:genie):answers::string ,'--')[0] ,'\"')[1]\r\nwhen parse_json(node_data:sent)::string is not null then  split(split(parse_json(node_data:sent)::string ,':')[0] ,'\"')[1]\r\n\r\nelse null end as target_account ,\r\n\r\n\r\ncase \r\n--when parse_json(node_data:like):key:type::string ='social' then   null\r\nwhen parse_json(node_data:graph):value:type::string ='unfollow'  then null \r\n when  parse_json(node_data:graph):key::string ='poke' then null \r\nwhen parse_json(node_data:follow)::string is not null then null \r\nwhen parse_json(node_data:graph):value:type::string ='follow'  then null \r\nwhen NODE ='profile' then NODE_DATA\r\nwhen NODE ='widget' then '\u2699\ufe0f'\r\nwhen parse_json(node_data:comment):item:type::string ='social'  then parse_json(node_data:comment):text::string\r\nwhen parse_json(node_data:comment):key::string is not null  then null\r\nwhen parse_json(node_data:post):key::string is not null  then null\r\nwhen parse_json(node_data:main):type::string ='md'  then parse_json(node_data:main):text::string\r\nwhen parse_json(node_data:moo)::string is not null then  (parse_json(node_data:moo):value::string)\r\nwhen parse_json(node_data:genie):answers::string is not null then  parse_json(node_data:genie):answers::string \r\nwhen parse_json(node_data:sent)::string is not null then  split(split(split(parse_json(node_data:sent)::string ,':')[1] ,'\"')[1],'\"')[0]\r\nwhen parse_json(node_data:boo)::string is not null then  parse_json(node_data:boo):value::string\r\nwhen parse_json(node_data:blunt)::string is not null then  parse_json(node_data:blunt):value::string\r\nwhen parse_json(node_data:answer_poll)::string is not null then parse_json(node_data:answer_poll):key::string || parse_json(node_data:answer_poll):value:user_vote::string || parse_json(node_data:answer_poll):value:user_answer::string \r\nwhen parse_json(node_data:like):key:type::string ='social' then '\ud83d\udc97'\r\n\r\nelse NODE_DATA end as node_datas \r\n\r\n\r\nfrom \r\nnear.social.fact_decoded_actions \r\n)\r\n\r\n\r\n\r\nselect *\r\n from a \r\nwhere  action is not null\r\n AND singer = '{{address}}'\r\norder by block_timestamp desc`;\r\n  fetchData(sql, \"social\", \"is_swap_loading\");\r\n};\r\n\r\nconst getChildrenData = () => {\r\n  let sql = `with a as \r\n(\r\nselect \r\ndistinct  TX_HASH ,\r\nSIGNER_ID ,\r\n\r\ncase \r\nwhen parse_json(node_data:graph):key::string ='poke' then 'poke'\r\nwhen parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='follow' then 'follow'\r\nwhen parse_json(node_data:graph):key::string ='follow'and parse_json(node_data:graph):value:type::string ='unfollow' then 'unfollow'\r\nwhen parse_json(node_data:like):key:type::string ='social' then 'like'\r\nwhen parse_json(node_data:comment):item:type::string ='social' then 'comment'\r\nwhen parse_json(node_data:comment):key::string is not null  then null\r\nwhen parse_json(node_data:post):key::string is not null  then null\r\nwhen parse_json(node_data:follow)::string is not null then null \r\n when NODE ='widget' then 'widget create'\r\n when NODE ='profile' then 'profile'\r\n when parse_json(node_data:main):type::string ='md' then 'post'\r\n else 'widget Usage' end as action \r\n\r\n\r\nfrom \r\nnear.social.fact_decoded_actions \r\nwhere  action is not null\r\n\r\n)\r\n\r\n\r\nselect \r\ncount(distinct tx_hash) as trxs ,\r\n action \r\n from a \r\n where  SIGNER_ID = '{{address}}'\r\ngroup by 2 order by 1 desc `;\r\n  fetchData(sql, \"children_data\", \"is_children_loading\");\r\n};\r\n\r\nlet action = children_data.map((item) => item.action);\r\nlet trxs = children_data.map((item) => item.trxs);\r\nlet src = `\r\nhttps://quickchart.io/chart?width=200&height=180&chart={type:'bar',data:{labels:${JSON.stringify(\r\n  action\r\n)}, datasets:[{label:'',data:${JSON.stringify(trxs)}}]}}`;\r\n\r\nconst onAddressChange = ({ target }) => {\r\n  State.update({ address: target.value });\r\n};\r\n\r\nconst onSearch = () => {\r\n  State.update({ is_init: false });\r\n  getStakeData();\r\n  getBornDateData();\r\n  getBornDateDatas();\r\n  getIsLedgerData();\r\n  getChildrenData();\r\n  getSwapData();\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <h3 class=\"d-flex flex-row align-items-center mt-5 mb-5\">\r\n      <p style={bb}>\r\n        Put your near address in the box and click on the search button\r\n      </p>\r\n    </h3>\r\n\r\n    <div class=\"d-flex flex-row align-items-center mt-5\">\r\n      <div class=\"w-100\">\r\n        <input\r\n          onChange={onAddressChange}\r\n          class=\"form-control\"\r\n          placeholder=\"Near Address : chefsale.near\"\r\n        />\r\n      </div>\r\n      <div class=\"d-flex\">\r\n        <button\r\n          class=\"btn btn-info btn-sm d-flex flex-row ms-3\"\r\n          onClick={() => {\r\n            onSearch();\r\n          }}\r\n          disabled={is_any_loading}\r\n        >\r\n          {!is_any_loading && <i class=\"bi bi-search me-2\"></i>}\r\n          {is_any_loading && (\r\n            <div class=\"spinner-grow spinner-grow-sm me-2\" role=\"status\"></div>\r\n          )}\r\n          Search\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"d-flex w-100\" style={{ minHeight: 500 }}>\r\n      {is_loading && (\r\n        <div\r\n          class=\"spinner-border spinner-border-lg m-auto\"\r\n          role=\"status\"\r\n        ></div>\r\n      )}\r\n      {!is_loading && !is_init && (\r\n        <div class=\"d-flex flex-column w-100 h-100 p-3  mt-5\">\r\n          <div class=\"col-12 row\">\r\n            <Widget\r\n              src=\"mob.near/widget/ProfileLarge\"\r\n              props={{ accountId: address }}\r\n            />\r\n          </div>\r\n          <div\r\n            class=\"container mt-3\"\r\n            style={{\r\n              color: \" #000\",\r\n              background:\r\n                \"linear-gradient(90deg, rgba(209,139,255,1) 0%, rgba(234,207,251,1) 0%, rgba(246,246,246,1) 100%\",\r\n              padding: \"20px\",\r\n              border: \"2px solid #282828\",\r\n              \"border-radius\": \"13px\",\r\n              heigth: \"100vh\",\r\n              \"min-width\": \"300px\",\r\n            }}\r\n          >\r\n            <h3 class=\"mb-5 mt-2\" style={bb}>\r\n              Near Social Transactions\r\n            </h3>\r\n            <div>\r\n              Here you can see how many <i style={bb}>transactions</i> you have\r\n              done so far .\r\n            </div>\r\n            <div>\r\n              <span style={bb}>1 - </span>follow transactions is not equall to\r\n              number of followings , some transactions can be used to follow\r\n              more than 1 accounts.\r\n            </div>\r\n            <div>\r\n              <span style={bb}>2 - </span>notice that we have 2 different widget\r\n              transactions , widget create transactions and widget usage\r\n              transactions. some users create widget and other can use those\r\n              widget.\r\n            </div>\r\n            <div>\r\n              <span style={bb}>3 - </span>\r\n              <span style={bb}>credit :</span> antonyip bar chart widget ,\r\n              mob.near widgets and reallyveryy.near widget\r\n            </div>\r\n            <div>\r\n              <span style={bb}>4 - </span>buy me a coffee ,near wallet :\r\n              <span style={bb}> lord1.near</span>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6 mt-3\">\r\n                <div>\r\n                  <img src={src} />\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6 mt-4\">\r\n                {ledger_data.map((xx) => (\r\n                  <div class=\"row \">\r\n                    <span class=\"col-md-3 mt-2 \" style={ss}>\r\n                      <div style={dd}>\r\n                        <i>Total Transaction</i> :\r\n                        <i style={nn}> {xx.total_trxs}</i>\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>Follow</i>:<i style={nn}> {xx.follow}</i>\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>UnFollow</i> :<i style={nn}> {xx.unfollow}</i>\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>Post </i>:<i style={nn}> {xx.post}</i>\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>Profile </i>:<i style={nn}> {xx.profile}</i>\r\n                      </div>\r\n                    </span>\r\n                    <span class=\"col-md-3 mt-2 \" style={ss}>\r\n                      <div style={dd}>\r\n                        <i> Poke </i> : <i style={nn}>{xx.poke}</i>{\" \"}\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>Like </i> : <i style={nn}>{xx.like}</i>{\" \"}\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>Comment </i> : <i style={nn}>{xx.commenets}</i>{\" \"}\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i> Widget Create </i> :<i style={nn}>{xx.widget}</i>\r\n                      </div>\r\n                      <div style={dd}>\r\n                        <i>Widget Usage </i> :\r\n                        <i style={nn}> {xx.total_widget_trx}</i>\r\n                      </div>\r\n                    </span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-12 \"></div>\r\n              <img src={srcc} />\r\n            </div>\r\n          </div>\r\n\r\n          <h3 class=\"text-lg mt-5 \" style={bb}>\r\n            Transaction's History in near social\r\n          </h3>\r\n          <div class=\"row\"></div>\r\n          <div class=\"table-responsive mt-3\">\r\n            <table class=\"table-striped table\" style={{ minHeight: 100 }}>\r\n              <thead>\r\n                <tr style={cc}>\r\n                  <th>Block Timestamp</th>\r\n                  <th>Tx Hash</th>\r\n                  <th>Account</th>\r\n                  <th>Action</th>\r\n                  <th>Target Account</th>\r\n                  <th>About</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {social.map((x) => (\r\n                  <tr>\r\n                    <td>{x.block_timestamp}</td>\r\n                    <td>\r\n                      <a\r\n                        href={`https://nearblocks.io/txns/${x.tx_hash}`}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                      >\r\n                        {ellipsizeThis(x.tx_hash ?? \"N/A\", 4, 3)}\r\n                      </a>\r\n                    </td>\r\n                    <td>\r\n                      <Widget\r\n                        src=\"mob.near/widget/ProfileLine\"\r\n                        props={{ accountId: address }}\r\n                      />\r\n                    </td>\r\n                    <td style={bb}>{x.action}</td>\r\n                    <td class=\"width:10%\">\r\n                      <Widget\r\n                        src=\"mob.near/widget/ProfileLine\"\r\n                        props={{ accountId: x.target_account }}\r\n                      />\r\n                    </td>\r\n                    <td>{x.node_datas}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/activity-tracker-for-wallet"}