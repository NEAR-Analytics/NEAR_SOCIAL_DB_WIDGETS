{"tx_hash": "Aqtqa87rUdUTiJKkgpGDuHrgWnr75cvMgQtaP9MaQLPn", "action_id_social": "2f3AmxpdgFL4JZUyGDnWi1ak61VLPsXtgSAzdJ5W7zXN-0-widget", "block_id": 95086993, "block_timestamp": "2023-06-26T16:39:45.718Z", "signer_id": "garlicfaucet.near", "widget_name": "liquityOpenTrove", "source_code": "/**\n * @description\n * Initialize State for UI rendering\n */\nState.init({\n  displayColl: \"\",\n  displayBorrow: \"\",\n  coll: 0,\n  borrow: 0,\n  borrowingFee: 0,\n  totalcoll: 0,\n  collateralRatio: 0,\n  liquidationReserve: 0,\n  complete: false,\n  loading: false,\n  msg: \"\",\n  borrowRateRaw: 0,\n  borrowRate: 0,\n  address: undefined,\n  chainId: undefined,\n  balance: undefined,\n  price: 0,\n  isOpenTrove: undefined,\n  isRecoveryMode: undefined,\n  isBlocked: true,\n  isGasAllocated: false,\n  isBorrowingRate: false,\n});\n\n/**\n *\n * @param depositChangeEvent\n * @description\n * Update 'coll' when user fills ETH to number field.\n * Recalculate collateral ratio when ETH and LUSD number field is updated.\n * Collateral ratio : ((ETH * cueerent ETH price) / (borowwing LUSD + liquidation reserve + borrowing fee)) * 100\n * Check requirements for an active \"Open Trove\" button.\n */\nconst setcoll = (depositChangeEvent) => {\n  const value = depositChangeEvent.target.value.replace(/[^.0-9]/g, \"\");\n  const coll = Number(value);\n  const { totalcoll } = state;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({\n    displayColl: value,\n    coll,\n    collateralRatio,\n  });\n\n  validateTrove();\n};\n\n/**\n *\n * @param borrowChangeEvent\n * @description\n * Update 'borrow' when user fills LUSD to number field.\n * Calculate borrowing fee and total coll(=== total debt)\n * Borrowing fee formula cases.\n *   1. recovery mode : 0\n *   2. normal mode: (borrow * borrow rate) / 100\n *\n * Collateral ratio formula : ((ETH * cueerent ETH price) / (borowwing LUSD + liquidation reserve + borrowing fee)) * 100\n * Check requirements for an active \"Open Trove\" button.\n */\nconst setBorrow = (borrowChangeEvent) => {\n  const { coll, liquidationReserve, borrowRate, isRecoveryMode } = state;\n  const value = borrowChangeEvent.target.value.replace(/[^.0-9]/g, \"\");\n  const borrow = Number(value);\n  const borrowingFee =\n    isRecoveryMode === true ? 0 : (borrow * borrowRate) / 100;\n  const totalcoll =\n    borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({\n    displayBorrow: value,\n    borrow,\n    borrowingFee,\n    totalcoll,\n    collateralRatio,\n  });\n  validateTrove();\n};\n\n/**\n *\n * @description\n * check list for an active \"Open Trove\" button.\n *   1. LUSD being borrowed must be over 1800(LUSD).\n *   2. if the system is in recovery mode, the collateral ratio must exceed 150%.\n *   3. if the system is in normal mode, the collateral ratio must exceed 110%.\n *   4. you can only add coll(ETH) on your ETH balance.\n */\nconst validateTrove = () => {\n  const { coll, borrow, totalcoll, balance, isRecoveryMode } = state;\n\n  if (borrow < 1800) {\n    State.update({\n      msg: \"Borrow must be at least 1800 LUSD\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  if (isRecoveryMode === true) {\n    if (collateralRatio < 150) {\n      State.update({\n        msg: \"Collateral ratio must be at least 150%\",\n        isBlocked: true,\n      });\n      return;\n    }\n  } else {\n    if (collateralRatio < 110) {\n      State.update({\n        msg: \"Collateral ratio must be at least 110%\",\n        isBlocked: true,\n      });\n      return;\n    }\n  }\n\n  if (coll > Number(balance)) {\n    State.update({\n      msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH`,\n      isBlocked: true,\n    });\n    return;\n  }\n\n  State.update({ msg: \"\", isBlocked: false });\n};\n\n/**\n * @description\n * 5 out of all contracts are being used for open trove.\n * Only the used functions are defined in the abi objects.\n * The contract address is registered on the Ethereum mainnet.\n *\n * Contract list.\n *   1. borrowerOperation\n *   2. troveManager\n *   3. priceFeed\n *   4. sortedTroves\n *   5. hintHelpers\n */\nconst borrowerOperationAddress = \"0x24179CD81c9e782A4096035f7eC97fB8B783e007\";\nconst borrowerOperationABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_maxFeePercentage\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_LUSDAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_upperHint\", type: \"address\" },\n      { internalType: \"address\", name: \"_lowerHint\", type: \"address\" },\n    ],\n    name: \"openTrove\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst troveManagerAddress = \"0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2\";\n\nconst troveManagerABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"_borrower\", type: \"address\" }],\n    name: \"getTroveStatus\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\n    name: \"getTCR\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"LUSD_GAS_COMPENSATION\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_LUSDDebt\", type: \"uint256\" }],\n    name: \"getBorrowingFeeWithDecay\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBorrowingRateWithDecay\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\n    name: \"checkRecoveryMode\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst priceFeedAddress = \"0x4c517D4e2C851CA76d7eC94B805269Df0f2201De\";\nconst priceFeedABI = [\n  {\n    inputs: [],\n    name: \"lastGoodPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst sortedtrovesAddress = \"0x8FdD3fbFEb32b28fb73555518f8b361bCeA741A6\";\nconst sortedtrovesABI = [\n  {\n    inputs: [],\n    name: \"getSize\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_NICR\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_prevId\", type: \"address\" },\n      { internalType: \"address\", name: \"_nextId\", type: \"address\" },\n    ],\n    name: \"findInsertPosition\",\n    outputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst hintHelpersAddress = \"0xE84251b93D9524E0d2e621Ba7dc7cb3579F997C0\";\nconst hintHelpersABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_CR\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_numTrials\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_inputRandomSeed\", type: \"uint256\" },\n    ],\n    name: \"getApproxHint\",\n    outputs: [\n      { internalType: \"address\", name: \"hintAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"diff\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"latestRandomSeed\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @description\n * Calculate two hints to reduce the gas cost; in which the gas spent is to insert the money into the trove list before calling the transaction.\n * The gas cost is O(n) in the worst case, but we want to reduce it for efficient O(1).\n * Call transaction \"borrowingOperation.openTrove()\" user click Open Trove button.\n * Example Borrower Operations with Hints reference link is \"https://github.com/liquity/dev#example-borrower-operations-with-hints\".\n */\nconst openTrove = async () => {\n  if (state.complete) {\n    State.update({ complete: false, hash: null });\n  }\n\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationABI,\n    Ethers.provider().getSigner()\n  );\n\n  const sortedTroveContract = new ethers.Contract(\n    sortedtrovesAddress,\n    sortedtrovesABI,\n    Ethers.provider().getSigner()\n  );\n\n  const hintHelpersContract = new ethers.Contract(\n    hintHelpersAddress,\n    hintHelpersABI,\n    Ethers.provider().getSigner()\n  );\n\n  const LUSDAmount = ethers.BigNumber.from(\n    ethers.utils.parseEther(state.borrow.toString())\n  );\n\n  const expectedDebt = ethers.BigNumber.from(\n    ethers.utils.parseEther(state.totalcoll.toString())\n  );\n\n  const _1e20 = ethers.BigNumber.from(ethers.utils.parseEther(\"100\"));\n\n  const ETHColl = ethers.BigNumber.from(\n    ethers.utils.parseEther(state.coll.toString())\n  );\n\n  const NICR = ETHColl.mul(_1e20).div(expectedDebt);\n  sortedTroveContract.getSize().then((numTroves) => {\n    const _numTrials = numTroves.mul(ethers.BigNumber.from(\"15\"));\n\n    hintHelpersContract\n      .getApproxHint(NICR.toString(), _numTrials.toString(), 42)\n      .then((approxHintRes) => {\n        const approxHint = approxHintRes[0];\n\n        sortedTroveContract\n          .findInsertPosition(NICR.toString(), approxHint, approxHint)\n          .then((hintRes) => {\n            const upperHint = hintRes[0];\n            const lowerHint = hintRes[1];\n\n            borrowerOperationContract\n              .openTrove(\n                state.borrowRateRaw,\n                LUSDAmount,\n                upperHint,\n                lowerHint,\n                {\n                  value: ETHColl,\n                }\n              )\n              .then((transactionHash) => {\n                State.update({\n                  loading: true,\n                  hash: transactionHash.hash,\n                  borrow: 0,\n                  displayBorrow: \"\",\n                  coll: 0,\n                  displayColl: \"\",\n                  borrowingFee: 0,\n                  totalcoll: state.liquidationReserve,\n                  collateralRatio: 0,\n                  liquidationReserve: state.liquidationReserve,\n                });\n              });\n          });\n      });\n  });\n};\n\n/**\n * @description\n * This code block initializes sceanario\n * The checklist assumes you have already connected your wallet.\n * Check List\n *   1. The network must be the Ethereum mainnet.\n *   2. Get ETH balance in your wallet.\n *   3. Check your trove is already open.\n *   4. Get liquity system LUSD_GAS_COMPENSATION.\n *   5. Get liquity system borrowing rate.\n *   6. Get ETH:USD price.\n *   7. Get liquity system called TCR(total collateral ratio).\n *   8. Get liquity system is recovery mode.\n */\nif (Ethers.provider()) {\n  const signer = Ethers.provider().getSigner();\n  signer.getAddress().then((address) => {\n    State.update({ address });\n    if (state.chainId === 1) {\n      const troveManagerContract = new ethers.Contract(\n        troveManagerAddress,\n        troveManagerABI,\n        Ethers.provider().getSigner()\n      );\n\n      if (state.balance === undefined) {\n        Ethers.provider()\n          .getBalance(address)\n          .then((balance) => {\n            State.update({\n              balance: Big(balance).div(Big(10).pow(18)).toFixed(2),\n            });\n          });\n      }\n\n      if (state.isOpenTrove === undefined) {\n        troveManagerContract.getTroveStatus(address).then((res) => {\n          const isOpenTrove = ethers.utils.formatEther(res).includes(\"1\");\n          State.update({ isOpenTrove });\n        });\n      }\n\n      if (state.isGasAllocated === false) {\n        troveManagerContract\n          .LUSD_GAS_COMPENSATION()\n          .then((liquidationReserveRes) => {\n            const liquidationReserve = Number(\n              ethers.utils.formatEther(liquidationReserveRes)\n            );\n\n            State.update({\n              isGasAllocated: true,\n              totalcoll: liquidationReserve,\n              liquidationReserve: liquidationReserve,\n            });\n          });\n      }\n\n      if (state.isBorrowingRate === false) {\n        troveManagerContract\n          .getBorrowingRateWithDecay()\n          .then((borrowingRateRes) => {\n            State.update({\n              isBorrowingRate: true,\n              borrowRateRaw: borrowingRateRes,\n              borrowRate:\n                Number(\n                  ethers.utils.formatEther(borrowingRateRes).substring(0, 6)\n                ) * 100,\n            });\n          });\n      }\n    }\n  });\n\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n\n  if (state.price === 0) {\n    const priceFeedContract = new ethers.Contract(\n      priceFeedAddress,\n      priceFeedABI,\n      Ethers.provider().getSigner()\n    );\n\n    const troveManagerContract = new ethers.Contract(\n      troveManagerAddress,\n      troveManagerABI,\n      Ethers.provider().getSigner()\n    );\n\n    priceFeedContract.lastGoodPrice().then((priceRes) => {\n      const price = Number(ethers.utils.formatEther(priceRes));\n\n      State.update({ price });\n      troveManagerContract.getTCR(priceRes).then((tcrRes) => {\n        const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\n\n        State.update({ tcr });\n      });\n\n      troveManagerContract\n        .checkRecoveryMode(ethers.BigNumber.from(priceRes))\n        .then((isRecoveryMode) => {\n          State.update({ isRecoveryMode: isRecoveryMode });\n        });\n    });\n  }\n}\n\nconst complete = () => {\n  State.update({ complete: true });\n};\n\n/**\n * @description\n * Present the current status of the UI where the transaction is in progress.\n */\nEthers.provider() &&\n  Ethers.provider()\n    .waitForTransaction(state.hash)\n    .then((res) => {\n      State.update({\n        loading: false,\n      });\n      complete();\n    })\n    .catch((err) => {\n      State.update({ loading: false });\n    });\n\n/**\n * @description\n * This UI style uses the the \"Styled Component\" library.\n * Update this code block to change the style.\n */\nconst BorrowWrapper = styled.div`\n  width: 100%;\n  .input-section{\n    width: 100%;\n    color: #8e9aaf;\n    &.deposit{\n        margin-bottom: 1rem;\n    }\n  }\n  .input-label{\n    color: black;\n    margin-bottom: 0.5rem;\n  }\n  .input-wrapper{\n    display: flex;\n    width: 100%;\n    border: rgb(220, 220, 220) 1px solid;\n    border-radius: 10px;\n    overflow: hidden;\n  }\n  .info-wrapper{\n    display: flex;\n    flex-direction: column;\n    margin: 0 0 2rem 0;\n    div {\n      height: 1.75rem;\n      display: flex;\n      align-items: center;\n    }\n  }\n  .detail-info-wrapper{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: #8e9aaf;\n  }\n    .error-message{\n        height: 2rem;\n        width: 100%;\n        color: #3a0ca3;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .info-unit{\n        margin-left: 0.5rem;\n    }\n\n    .confirm-wrapper {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n  .confirm {\n    border: none;\n    border-radius: 1000px;\n    width: 75%;\n    height: 2rem;\n    transition: 0.5s all;\n    \n    font-weight: 600;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    &.ok {\n      background-color: #3a0ca3;\n      color: white;\n      font-size: 1.1rem;\n    }\n    &.not-ok {\n      background-color: #8e9aaf;\n      color: white;\n      font-size: 0.9rem;\n    }\n  }\n\n  input {\n    border: none;\n    background-color: transparent;\n  }\n  input:focus {\n    outline: none;\n  }\n  input[type=\"number\"]::-webkit-outer-spin-button,\n  input[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\n/**\n * @description\n * This code block is HTML tags for building the UI structure.\n *\n * The UI is activated when the conditions below are satisfied.\n * 1. Connect your wallet.\n * 2. Network is Ethereum mainnet.\n * 3. Passes the \"validateTrove\" function result.\n * 4. There should be no active trove.\n * 5. Enter a value greater than 0 in the \"coll\" and \"borrow\" Number fields.\n */\nreturn (\n  <BorrowWrapper>\n    <div className=\"input-section deposit\">\n      <div className=\"input-label\">Deposit (ETH)</div>\n      <div className=\"input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"0.0000 ETH\"\n          disabled={!state.address || state.isOpenTrove || state.chainId !== 1}\n          onChange={setcoll}\n          value={state.displayColl}\n        ></input>\n      </div>\n    </div>\n    <div className=\"input-section\">\n      <div className=\"input-label\">Borrow (LUSD)</div>\n      <div className=\"input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"0.0000 LUSD\"\n          disabled={!state.address || state.isOpenTrove || state.chainId !== 1}\n          onChange={setBorrow}\n          value={state.displayBorrow}\n        />\n      </div>\n    </div>\n    <div className=\"error-message\">{state.msg}</div>\n    <div className=\"info-wrapper\">\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Liquidation Reserve</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.liquidationReserve}</span>\n          <span className=\"info-unit\">LUSD</span>\n        </div>\n      </div>\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Borrowing Fee</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.borrowingFee.toFixed(2)}</span>{\" \"}\n          <span className=\"info-unit\">\n            LUSD (\n            {state.isRecoveryMode === true ? 0 : state.borrowRate.toFixed(2)}%)\n          </span>\n        </div>\n      </div>\n\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Recieve</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.borrow.toFixed(2)}</span>\n          <span className=\"info-unit\">LUSD</span>\n        </div>\n      </div>\n\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Total debt</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.totalcoll.toFixed(2)}</span>\n          <span className=\"info-unit\">LUSD</span>\n        </div>\n      </div>\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Collateral ratio</div>\n        <div className=\"detail-info-value\">\n          <span>{state.collateralRatio.toFixed(1)}</span>\n          <span className=\"info-unit\">%</span>\n        </div>\n      </div>\n    </div>\n    <div className=\"confirm-wrapper\">\n      {state.address ? (\n        <button\n          className={`confirm ${state.isBlocked ? \"not-ok\" : \"ok\"}`}\n          disabled={state.isBlocked}\n          onClick={openTrove}\n        >\n          {Ethers.provider() && state.chainId !== 1\n            ? \"Change network to Ethereum\"\n            : state.isOpenTrove === true\n            ? \"You already have active Trove\"\n            : state.loading\n            ? \"Loading...\"\n            : state.complete\n            ? \"Done \u2705\"\n            : state.coll === 0 || state.borrow === 0\n            ? \"Enter input value\"\n            : state.isBlocked\n            ? \"Check stats\"\n            : \"Open Trove\"}\n        </button>\n      ) : (\n        <Web3Connect className=\"connect-wallet\" />\n      )}\n    </div>\n  </BorrowWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/garlicfaucet.near/widget/liquityOpenTrove", "__row_index": 0}