{"tx_hash": "8Xh1zpaQMV3mTs51L6V8gwZfWQ144Rj7oafWBkMfPryR", "action_id_social": "3ja5hY7z2VmC94dJTPs9uEqZkRMMU8ghzBXUTGQxGmzh-0-widget", "block_id": 94549750, "block_timestamp": "2023-06-19T16:14:00.644Z", "signer_id": "neardigitalcollective.near", "widget_name": "EasyPoll.DisplayVote2", "source_code": "const widgetOwner = \"neardigitalcollective.near\";\nconst isTest = props.isTest;\n\nlet defaultVotes = [];\nfor (let i = 0; i < props.poll.value.questions.length; i++) {\n  if (props.poll.value.questions[i].questionType == \"2\") {\n    defaultVotes.push([\"\"]);\n  } else {\n    defaultVotes.push(\"\");\n  }\n}\n\nlet userVote;\n\nState.init({\n  vote: userVote ?? defaultVotes,\n});\n\nfunction getInputStyles(questionType, questionNumber, optionNumber) {\n  if (questionType == \"2\") {\n    return state.vote[questionNumber].includes(optionNumber + \"\")\n      ? {\n          borderColor: \"black\",\n          borderWidth: \"thick\",\n          width: \"1rem\",\n          marginRight: \"0.7rem\",\n        }\n      : {\n          width: \"1rem\",\n          marginRight: \"0.7rem\",\n        };\n  } else {\n    return optionNumber + \"\" == state.vote[questionNumber]\n      ? {\n          borderColor: \"black\",\n          borderWidth: \"thick\",\n          width: \"1rem\",\n          marginRight: \"0.7rem\",\n        }\n      : {\n          width: \"1rem\",\n          marginRight: \"0.7rem\",\n        };\n  }\n}\n\n// let secondaryColor = \"#E9EBF8\";\n// let fontColorBlue = \"#003E9C\";\n// let fontColorRed = \"#9C2B2B\";\n// let fontColorYellow = \"#9C7B03\";\n// let fontColorPurple = \"#763E9C\";\n// let fontColorGreen = \"#009C6D\";\n// let fontColorPink = \"#9C0034\";\n// let fontColorSkyBlue = \"#007C9C\";\n// let fontColorIndigo = \"#006758\";\n\n// let allFontColors = [\n//   fontColorBlue,\n//   fontColorRed,\n//   fontColorYellow,\n//   fontColorPurple,\n//   fontColorGreen,\n//   fontColorPink,\n//   fontColorSkyBlue,\n//   fontColorIndigo,\n// ];\n\n// function getFontColor(index) {\n//   return Number.isInteger((index + 1) / allFontColors.length)\n//     ? allFontColors[0]\n//     : allFontColors[\n//         ((index + 1) / allFontColors.length -\n//           Math.trunc((index + 1) / allFontColors.length)) *\n//           allFontColors.length -\n//           1\n//       ];\n// }\n\nlet bgBlue = \"#96C0FF\";\nlet bgRed = \"#FFB4B4\";\nlet bgYellow = \"#FFE999\";\nlet bgPurple = \"#E6C0FF\";\nlet bgGreen = \"#96FFE0\";\nlet bgPink = \"#FF96B9\";\nlet bgSkyBlue = \"#96EAFF\";\nlet bgIndigo = \"#96DCD2\";\n\nlet allBgColors = [\n  bgBlue,\n  bgRed,\n  bgYellow,\n  bgPurple,\n  bgGreen,\n  bgPink,\n  bgSkyBlue,\n  bgIndigo,\n];\n\nlet secondaryBgBlue = \"#E6F0FF\";\nlet secondaryBgRed = \"#FFEDED\";\nlet secondaryBgYellow = \"#FFFAE6\";\nlet secondaryBgPurple = \"#F9F0FF\";\nlet secondaryBgGreen = \"#E6FFF7\";\nlet secondaryBgPink = \"#FFE6EE\";\nlet secondaryBgSkyBlue = \"#E6FAFF\";\nlet secondaryBgIndigo = \"#E6F6F4\";\n\nlet allSecondaryBgColors = [\n  secondaryBgBlue,\n  secondaryBgRed,\n  secondaryBgYellow,\n  secondaryBgPurple,\n  secondaryBgGreen,\n  secondaryBgPink,\n  secondaryBgSkyBlue,\n  secondaryBgIndigo,\n];\n\nfunction getBgColor(index, isPrimary) {\n  let allColorsOfThisType =\n    state.vote != `${index}` && isPrimary ? allBgColors : allSecondaryBgColors;\n\n  return Number.isInteger((index + 1) / allColorsOfThisType.length)\n    ? allColorsOfThisType[0]\n    : allColorsOfThisType[\n        ((index + 1) / allColorsOfThisType.length -\n          Math.trunc((index + 1) / allColorsOfThisType.length)) *\n          allColorsOfThisType.length -\n          1\n      ];\n}\n\nfunction isVoteValid() {\n  let isValid = state.vote.length == props.poll.value.questions.length;\n  isValid = isValid && context.accountId;\n  for (let i = 0; i < state.vote.length; i++) {\n    const vote = state.vote[i];\n    // vote should always be a string, but in one case is treated as an array. Replace array with csv\n    if (Array.isArray(vote)) {\n      isValid = isValid && vote.filter((v) => v.trim() != \"\").length > 0;\n    } else {\n      isValid = isValid && vote.trim() != \"\";\n    }\n  }\n  return isValid;\n}\n\nreturn (\n  <>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.DisplayMultiVote2`}\n      props={{\n        isTest,\n        widgetOwner,\n        getBgColor,\n        poll: props.poll,\n        indexVersion: props.indexVersion,\n        vote: state.vote,\n        questions: props.poll.value.questions,\n        renderMultipleChoiceInput,\n        getInputStyles: getInputStyles,\n        canVote: props.canVote,\n        hasVoted: props.hasVoted,\n        stateUpdate: (data) => State.update(data),\n        isQuestionOpen: props.isQuestionOpen,\n        isVoteValid: isVoteValid,\n        validAnswersToThisPoll: props.validAnswersToThisPoll,\n        countVotes: props.countVotes,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/EasyPoll.DisplayVote2", "__row_index": 0}