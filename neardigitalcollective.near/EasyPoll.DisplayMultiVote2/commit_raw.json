{"tx_hash": "5MygxjMm4BFoLmLE7vGTsS9oPbqBqgGQ1tS655c2B68s", "action_id_social": "CmxSGawFXA3Y7nxLzwp7NoF2YBSBWcBpYvqrcvz8KUc2-0-widget", "block_id": 94549737, "block_timestamp": "2023-06-19T16:13:45.957Z", "signer_id": "neardigitalcollective.near", "widget_name": "EasyPoll.DisplayMultiVote2", "source_code": "State.init({\n  currentQuestion: 0,\n  vote: props.vote,\n  showErrorsInForm: false,\n  validAnswersToThisPoll: props.validAnswersToThisPoll,\n  hasVoted: props.hasVoted,\n});\n\nlet hasVoted = state.hasVoted;\nlet validAnswersToThisPoll = state.validAnswersToThisPoll;\n\nconst isTest = props.isTest;\n\nlet widgetOwner = props.widgetOwner;\n\nfunction newValidAnswers() {\n  let newAnswers;\n  if (validAnswersToThisPoll) {\n    validAnswersToThisPoll.push({\n      accountId: context.accountId,\n      blockHeight: 1,\n      value: {\n        answer: props.vote,\n        questionBlockHeight: props.poll.blockHeight,\n      },\n    });\n    newAnswers = validAnswersToThisPoll;\n  } else {\n    newAnswers = {\n      accountId: context.accountId,\n      blockHeight: 1,\n      value: {\n        answer: props.vote,\n        questionBlockHeight: props.poll.blockHeight,\n      },\n    };\n  }\n\n  return newAnswers;\n}\n\n//TODO review this!\nconst getPublicationParams = () => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: isTest\n            ? `test-answer-v${props.indexVersion}`\n            : `answer-v${props.indexVersion}`,\n          value: {\n            answer: props.vote,\n            questionBlockHeight: props.poll.blockHeight,\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nfunction clickCheckboxInputHandler(questionNumber, optionNumber) {\n  return () => {\n    let newVote = state.vote;\n\n    let oldQuestionVotes = newVote[questionNumber];\n    let newQuestionVotes = [];\n\n    if (!oldQuestionVotes.includes(optionNumber + \"\")) {\n      newQuestionVotes = oldQuestionVotes;\n      newQuestionVotes.push(optionNumber + \"\");\n    } else {\n      for (let i = 0; i < oldQuestionVotes.length; i++) {\n        if (oldQuestionVotes[i] != optionNumber + \"\") {\n          newQuestionVotes.push(oldQuestionVotes[i]);\n        }\n      }\n    }\n\n    newVote[questionNumber] = newQuestionVotes.filter((a) => a != \"\");\n\n    State.update({ votes: newVote });\n  };\n}\n\nfunction clickRadioInputHandler(questionNumber, optionNumber) {\n  return () => {\n    let newVote = props.vote;\n\n    newVote[questionNumber] = optionNumber + \"\";\n    State.update({ vote: newVote });\n  };\n}\n\nconst renderMultipleChoiceInput = ({\n  questionNumber,\n  questionType,\n  option,\n  optionNumber,\n}) => (\n  <>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.DisplayMultiVote`}\n      props={{\n        vote: state.vote,\n        questionNumber,\n        questionType,\n        option,\n        optionNumber,\n        canVote: !hasVoted,\n        getBgColor: props.getBgColor,\n        countVotes: props.countVotes,\n        clickRadioInputHandler: clickRadioInputHandler,\n        clickCheckboxInputHandler: clickCheckboxInputHandler,\n        getInputStyles: props.getInputStyles,\n      }}\n    />\n  </>\n);\n\nconst renderAnswers = (questionNumber) => {\n  return (\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.AnswerCommentsContainer`}\n      props={{\n        answers: validAnswersToThisPoll,\n        questionNumber,\n      }}\n    />\n  );\n};\n\nlet questions = props.questions;\n\nconst ChangeQuestionContainer = styled.div`\n  div {\n    cursor: pointer;\n    display: flex;\n    aling-items: center;\n    margin-top: 0.5rem;\n    padding: 0.5rem;\n    background-color: #000000;\n    color: #FFFFFF;\n    font-size: 1rem;\n    border-radius: 9px;\n    border: 1.5px solid transparent;\n  }\n\n  div:hover {\n    background-color: #FFFFFF;\n    color: #000000;\n    border: 1.5px solid #000000;\n  }\n`;\n\nconst getFirstSBTToken = () => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: `${context.accountId}`,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst hasSBTTokens = true || getFirstSBTToken() !== undefined;\n\nconst renderTextInput = (questionNumber) => {\n  return (\n    <div>\n      {hasVoted ? (\n        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2,1fr)\" }}>\n          {renderAnswers(questionNumber)}\n        </div>\n      ) : (\n        <div>\n          <textarea\n            value={state.vote[questionNumber]}\n            onChange={(e) => {\n              let newVote = state.vote;\n              newVote[questionNumber] = e.target.value;\n\n              State.update({ vote: newVote });\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn (\n  <>\n    {hasVoted && <h6 className=\"text-center mt-3\">You have voted</h6>}\n    {questions.map((question, questionNumber) => {\n      {\n        if (questionNumber == state.currentQuestion || hasVoted) {\n          return (\n            <div\n              style={{\n                border: \"1.5px solid rgb(206, 212, 218)\",\n                borderRadius: \"24px\",\n                position: \"relative\",\n              }}\n              className=\"p-3 my-3\"\n            >\n              <div className=\"d-flex\">\n                <p\n                  style={{\n                    backgroundColor: \"#353A40\",\n                    padding: \"0.15rem 0.65rem\",\n                    borderRadius: \"9px\",\n                    color: \"white\",\n                  }}\n                >\n                  {questionNumber + 1}\n                </p>\n                <h4 style={{ fontWeight: \"700\", marginLeft: \"0.8rem\" }}>\n                  {question.question}\n                </h4>\n              </div>\n\n              {!hasVoted &&\n              (question.questionType == \"0\" || question.questionType == \"1\") ? (\n                <p className=\"mb-1\">Select one option:</p>\n              ) : !hasVoted && question.questionType == \"2\" ? (\n                <p className=\"mb-1\">You can check multiple options:</p>\n              ) : (\n                !hasVoted && <p className=\"mb-1\">Write your answer:</p>\n              )}\n              {question.questionType != \"3\"\n                ? question.choicesOptions.map((option, optionNumber) => {\n                    return renderMultipleChoiceInput({\n                      questionNumber: questionNumber,\n                      questionType: question.questionType,\n                      option,\n                      optionNumber,\n                      clickRadioInputHandler,\n                    });\n                  })\n                : renderTextInput(questionNumber)}\n            </div>\n          );\n        } else <></>;\n      }\n    })}\n\n    {!hasVoted && questions.length > 1 && (\n      <div className=\"d-flex justify-content-between\">\n        {state.currentQuestion > 0 ? (\n          <ChangeQuestionContainer\n            onClick={() => {\n              State.update({ currentQuestion: state.currentQuestion - 1 });\n            }}\n          >\n            <div>\n              <i className=\"bi bi-arrow-left\" />\n              <h6\n                className=\"mx-2\"\n                style={{ marginTop: \"0.7px\", marginBottom: \"0\" }}\n              >\n                Previous question\n              </h6>\n            </div>\n          </ChangeQuestionContainer>\n        ) : (\n          <div style={{ minWidth: \"1px\" }}></div>\n        )}\n        {state.currentQuestion < questions.length - 1 ? (\n          <ChangeQuestionContainer\n            onClick={() => {\n              State.update({ currentQuestion: state.currentQuestion + 1 });\n            }}\n          >\n            <div>\n              <h6\n                className=\"mx-2\"\n                style={{ marginTop: \"0.7px\", marginBottom: \"0\" }}\n              >\n                Next question\n              </h6>\n              <i className=\"bi bi-arrow-right\" />\n            </div>\n          </ChangeQuestionContainer>\n        ) : props.isQuestionOpen ? (\n          hasVoted ? (\n            \"\"\n          ) : props.isVoteValid() && hasSBTTokens ? (\n            <CommitButton\n              style={\n                state.hoveringElement != \"voteButton\"\n                  ? {\n                      marginTop: \"0.5rem\",\n                      padding: \"0.5rem\",\n                      backgroundColor: \"#000000\",\n                      color: \"#FFFFFF\",\n                      fontSize: \"1rem\",\n                      borderRadius: \"9px\",\n                      border: \"1.5px solid transparent\",\n                    }\n                  : {\n                      marginTop: \"0.5rem\",\n                      padding: \"0.5rem\",\n                      backgroundColor: \"#FFFFFF\",\n                      color: \"#000000\",\n                      fontSize: \"1rem\",\n                      borderRadius: \"9px\",\n                      border: \"1.5px solid #000000\",\n                    }\n              }\n              onMouseEnter={() => {\n                State.update({\n                  hoveringElement: \"voteButton\",\n                });\n              }}\n              onMouseLeave={() => State.update({ hoveringElement: \"\" })}\n              data={getPublicationParams()}\n              onCommit={() => {\n                State.update({\n                  validAnswersToThisPoll: newValidAnswers(),\n                  hasVoted: true,\n                });\n              }}\n            >\n              NEXT\n            </CommitButton>\n          ) : (\n            <>\n              {hasSBTTokens ? (\n                <button\n                  style={\n                    state.hoveringElement != \"voteButton\"\n                      ? {\n                          marginTop: \"0.5rem\",\n                          padding: \"0.5rem\",\n                          backgroundColor: \"#000000\",\n                          color: \"#FFFFFF\",\n                          fontSize: \"1rem\",\n                          borderRadius: \"9px\",\n                          border: \"1.5px solid transparent\",\n                        }\n                      : {\n                          marginTop: \"0.5rem\",\n                          padding: \"0.5rem\",\n                          backgroundColor: \"#FFFFFF\",\n                          color: \"#000000\",\n                          fontSize: \"1rem\",\n                          borderRadius: \"9px\",\n                          border: \"1.5px solid #000000\",\n                        }\n                  }\n                  onMouseEnter={() =>\n                    State.update({ hoveringElement: \"voteButton\" })\n                  }\n                  onMouseLeave={() => State.update({ hoveringElement: \"\" })}\n                  onClick={() => State.update({ showErrorsInForm: true })}\n                >\n                  NEXT\n                </button>\n              ) : (\n                <>\n                  <p className=\"p-2\">\n                    In order to vote get verified on{\" \"}\n                    <a href=\"https://i-am-human.app\">i-am-human.app</a> and get\n                    a FV SBT\n                  </p>\n                </>\n              )}\n            </>\n          )\n        ) : (\n          \"\"\n        )}\n      </div>\n    )}\n    {state.showErrorsInForm && (\n      <span className=\"text-danger\">Please answer all the questions</span>\n    )}\n\n    <p\n      style={{\n        fontWeight: \"500\",\n        fontSize: \"1.1rem\",\n        color: \"#767B8E\",\n        letterSpacing: \"-0.02em\",\n        marginTop: \"0.8rem\",\n      }}\n    >\n      {validAnswersToThisPoll.length} votes\n    </p>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/EasyPoll.DisplayMultiVote2", "__row_index": 0}