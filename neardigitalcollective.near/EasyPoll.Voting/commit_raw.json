{"tx_hash": "6kE3adtzs4TVv7FUPjJJmAA4p5EVC3wzmASe1TJcjvdz", "action_id_social": "7DmQwez4xFMvHtEBkRCN5SU7FXvtw6SVEtQjD4ELzhqv-0-widget", "block_id": 94549722, "block_timestamp": "2023-06-19T16:13:27.261Z", "signer_id": "neardigitalcollective.near", "widget_name": "EasyPoll.Voting", "source_code": "State.init({\n  showQuestionsByThisUser: false,\n  descriptionHeightLimited: true,\n  poll: {},\n  polls: [{}],\n  profile: {},\n  pollsByThisCreator: [{}],\n  answers: [{}],\n});\n\nconst isTest = props.isTest;\n\nif (!props.isPreview && !props.blockHeight) {\n  return \"Prop block height wasn't provided\";\n}\n\nif (!props.canOperate) {\n  return \"You are not allowed to vote\";\n}\n\nconst widgetOwner = \"neardigitalcollective.near\";\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\nconst canOperate = props.canOperate;\nconst whitelist = props.whitelist;\n\nlet isPreview = props.isPreview ?? false;\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\n\nlet questionBlockHeight = Number(props.blockHeight);\n\nconst polls =\n  !props.previewInfo &&\n  Social.index(\"poll_question\", `question-v${indexVersion}`);\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\n  State.update({ polls: polls });\n}\n\nif (!state.polls) {\n  return \"Loading\";\n} else {\n  const poll =\n    props.previewInfo ??\n    state.polls.find((q) => q.blockHeight == questionBlockHeight);\n\n  if (JSON.stringify(poll) != JSON.stringify(state.poll)) {\n    State.update({ poll: poll });\n  }\n\n  if (!state.poll && !isPreview) {\n    return \"Loading... \";\n  }\n}\n\nlet profile = Social.getr(`${state.poll.accountId}/profile`);\n\nif (JSON.stringify(profile) != JSON.stringify(state.profile)) {\n  State.update({ profile: profile });\n}\n\n// if (!profile) {\n//   return \"Loading\";\n// }\n\nlet pollsByThisCreator = Social.index(\n  \"poll_question\",\n  `question-v${indexVersion}`,\n  {\n    accountId: state.poll.accountId,\n  }\n);\n\nif (\n  JSON.stringify(pollsByThisCreator) != JSON.stringify(state.pollsByThisCreator)\n) {\n  State.update({ pollsByThisCreator: pollsByThisCreator });\n}\n\nif (!state.pollsByThisCreator) {\n  return \"Loading\";\n}\n\nfunction transformDateFormat(date) {\n  return new Date(date).toLocaleDateString();\n}\n\nfunction isActive(poll) {\n  return (\n    poll.value.startTimestamp < Date.now() &&\n    Date.now() < poll.value.endTimestamp\n  );\n}\n\nfunction isUpcoming(poll) {\n  return poll.value.startTimestamp > Date.now();\n}\n\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\n  // let poll = polls.find(q => q.blockHeight == questionBlockHeight)\n\n  const answers = isTest\n    ? Social.index(\"poll_question\", `test-answer-v${indexVersion}`)\n    : Social.index(\"poll_question\", `answer-v${indexVersion}`);\n\n  if (JSON.stringify(answers) != JSON.stringify(state.answers)) {\n    State.update({ answers: answers });\n  }\n\n  if (!state.answers) {\n    return \"Loading\";\n  }\n\n  const answersFromThisPoll = state.answers.filter(\n    (a) => a.value.questionBlockHeight == questionBlockHeight\n  );\n\n  const usersWithAnswers = answersFromThisPoll.map((a) => a.accountId);\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\n    (u, index) => usersWithAnswers.indexOf(u) == index\n  );\n  return usersWithAnswersWithoutDuplicates.length;\n}\n\nconst renderPollTypeIcon = () => {\n  let allPollTypes = [];\n  for (let i = 0; i < poll.value.questions.length; i++) {\n    if (!allPollTypes.includes(poll.value.questions[i].questionType)) {\n      allPollTypes.push(poll.value.questions[i].questionType);\n    }\n  }\n\n  return allPollTypes.length == 1 &&\n    (allPollTypes[0] == \"0\" || allPollTypes[0] == \"1\") ? (\n    <i className=\"bi bi-pie-chart\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"2\" ? (\n    <i\n      style={{\n        transform: \"rotate(90deg)\",\n        padding: \"0.6rem 0.8rem\",\n      }}\n      className=\"bi bi-bar-chart-line\"\n    ></i>\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"3\" ? (\n    <i className=\"bi bi-file-text\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  ) : (\n    <i className=\"bi bi-collection\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  );\n};\n\nconst renderQuestionsByThisCreator = () => {\n  //TODO show only the 2 polls\n  return state.pollsByThisCreator.map((pollByCreator, index) => {\n    let divStyle =\n      index == 0\n        ? { backGroundColor: \"white\" }\n        : {\n            backGroundColor: \"white\",\n            paddingTop: \"1rem\",\n            borderTop: \"1px solid #ced4da\",\n          };\n    return (\n      <div style={divStyle}>\n        <div className=\"d-flex align-items-center\">\n          <div\n            className=\"d-flex justify-content-center\"\n            style={{\n              maxHeight: \"2.8rem\",\n              aspectRatio: \"1\",\n              borderRadius: \"16px\",\n              backgroundColor: \"#F2F6FA\",\n              marginRight: \"0.8rem\",\n            }}\n          >\n            {renderPollTypeIcon(pollByCreator)}\n          </div>\n          <p\n            className=\"w-100 text-truncate\"\n            style={{ fontWeight: \"500\", margin: \"0\" }}\n          >\n            {pollByCreator.value.title}\n          </p>\n        </div>\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary mb-2\">\n          <div>\n            <i className=\"bi bi-people\"></i>\n            <span>\n              {getValidAnswersQtyFromQuestion(pollByCreator.blockHeight)}\n            </span>\n          </div>\n          <span>\n            Ends\n            <Widget\n              src={`silkking.near/widget/timeAgo`}\n              props={{\n                timeInFuture: pollByCreator.value.endTimestamp,\n                reduced: true,\n              }}\n            />\n          </span>\n          <span\n            style={{\n              backgroundColor: isUpcoming(pollByCreator)\n                ? \"#FFF3B4\"\n                : isActive(pollByCreator)\n                ? \"#D9FCEF\"\n                : \"#FFE5E5\",\n\n              height: \"1.5rem\",\n              width: \"4rem\",\n              textAlign: \"center\",\n              borderRadius: \"16px\",\n              marginRight: \"1rem\",\n              lineHeight: \"1.5rem\",\n              fontSize: \"0.8rem\",\n              letterSpacing: \"-0.025rem\",\n              color: isUpcoming(pollByCreator)\n                ? \"#FFC905\"\n                : isActive(pollByCreator)\n                ? \"#00B37D\"\n                : \"#FF4747\",\n              fontWeight: \"500\",\n            }}\n          >\n            {isUpcoming(pollByCreator)\n              ? \"Upcoming\"\n              : isActive(pollByCreator)\n              ? \"Active\"\n              : \"Closed\"}\n          </span>\n        </div>\n      </div>\n    );\n  });\n};\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\n  };\n}\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestionsByThisUser && {\n          display: \"block\",\n          backgroundColor: \"#7e7e7e70\",\n        }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div\n        className=\"modal-dialog\"\n        style={{ maxWidth: \"100%\" }}\n        role=\"document\"\n      >\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/EasyPoll.Questions`}\n              props={{\n                accountId: state.poll.accountId,\n                onlyUser: true,\n                indexVersion,\n                canOperate,\n              }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction showDescription(description) {\n  if (state.descriptionHeightLimited && description.length > 501) {\n    return description.slice(0, 500) + \"...\";\n  } else {\n    return description;\n  }\n}\n\nreturn (\n  <>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.Voting2`}\n      props={{\n        isTest,\n        state,\n        stateUpdate: (data) => State.update(data),\n        profile,\n        isUpcoming,\n        isActive,\n        widgetOwner,\n        questionBlockHeight,\n        showDescription,\n        questionsByCreator,\n        shouldDisplayViewAll: true,\n        renderQuestionsByThisCreator,\n        isPreview,\n        renderModal,\n        indexVersion,\n        whitelist,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/EasyPoll.Voting", "__row_index": 7}