{"tx_hash": "5Pexs1psKYWDm2sN5tG5uEHqfKUJwWH2Gwaf4YLNG5fP", "action_id_social": "DBXPCVwpssn9HEhrrtYEDw3y9tEehAvTvcRyguQPcLjZ-0-widget", "block_id": 91111081, "block_timestamp": "2023-05-04 23:07:24.296", "signer_id": "neardigitalcollective.near", "widget_name": "Gigs_OneArticle", "source_code": "const addressForComments = \"gig-comments\";\r\nconst addressForArticles = \"ndcGigArticle\";\r\nconst authorForWidget = \"neardigitalcollective.near\";\r\nconst accountId = props.accountId ?? context.accountId;\r\nif (!accountId) {\r\n  return \"No account ID\";\r\n}\r\n\r\nconst lastEditor = props.lastEditor;\r\nconst blockHeight =\r\n  props.blockHeight === \"now\" ? \"now\" : parseInt(props.blockHeight);\r\nconst subscribe = !!props.subscribe;\r\nconst raw = !!props.raw;\r\n\r\nconst notifyAccountId = accountId;\r\n\r\nState.init({ showReply: false, isMain: true });\r\n\r\nconst article = JSON.parse(\r\n  Social.get(`${lastEditor}/${addressForArticles}/main`, blockHeight)\r\n);\r\nState.update({ article });\r\n\r\n// ======= CHECK WHO CAN EDIT ARTICLE\r\nconst authorsWhiteList = [\r\n  \"neardigitalcollective.near\",\r\n  \"blaze.near\",\r\n  \"jlw.near\",\r\n  \"kazanderdad.near\",\r\n  \"joep.near\",\r\n  \"sarahkornfeld.near\",\r\n  \"yuensid.near\",\r\n];\r\nconst doesUserCanEditArticle = () => {\r\n  const isAccountIdInWhiteList = authorsWhiteList.some(\r\n    (val) => val === accountId\r\n  );\r\n  const isAccountIdEqualsAuthor = accountId === state.article.author;\r\n  return isAccountIdInWhiteList || isAccountIdEqualsAuthor ? true : false;\r\n};\r\n\r\n// ======= GET DATA TO ATACH COMMENTS TO THE ARTICLE =======\r\n// we attach all comments to the first initial article (which version = 0)\r\nconst articlesIndex = Social.index(addressForArticles, \"main\", {\r\n  order: \"asc\",\r\n  accountId: state.article.author,\r\n});\r\n\r\nconst resultArticles =\r\n  articlesIndex &&\r\n  articlesIndex.reduce((acc, { accountId, blockHeight }) => {\r\n    const postData = Social.get(\r\n      `${accountId}/${addressForArticles}/main`,\r\n      blockHeight\r\n    );\r\n    const postDataWithBlockHeight = { ...JSON.parse(postData), blockHeight };\r\n    return [...acc, postDataWithBlockHeight];\r\n  }, []);\r\n\r\nconst firstArticle =\r\n  resultArticles &&\r\n  resultArticles.find(\r\n    (article) => article.articleId === state.article.articleId\r\n  );\r\n\r\nconst firstArticleBlockHeight = firstArticle.blockHeight;\r\n\r\n// ======= Item for comment =======\r\nconst item = {\r\n  type: \"social\",\r\n  path: `${state.article.author}/${addressForArticles}/main`,\r\n  blockHeight: firstArticleBlockHeight,\r\n};\r\n\r\nconst saveArticle = (args) => {\r\n  const newArticleData = {\r\n    ...state.article,\r\n    body: state.note,\r\n    lastEditor: accountId,\r\n    timeLastEdit: Date.now(),\r\n    version: Number(state.article.version) + 1,\r\n  };\r\n\r\n  const composeArticleData = () => {\r\n    const data = {\r\n      [addressForArticles]: {\r\n        main: JSON.stringify(newArticleData),\r\n      },\r\n      index: {\r\n        [addressForArticles]: JSON.stringify({\r\n          key: \"main\",\r\n          value: {\r\n            type: \"md\",\r\n          },\r\n        }),\r\n      },\r\n    };\r\n    return data;\r\n  };\r\n  const newData = composeArticleData();\r\n  Social.set(newData, { force: true });\r\n};\r\n\r\n// ========== article parts ========== //\r\n\r\nconst isHeading = (str, headingLevel) => {\r\n  const headingType = \"\".padStart(headingLevel, \"#\");\r\n  return (\r\n    str.substring(0, 1 + headingLevel) === `${headingType} ` ||\r\n    str.substring(0, 2 + headingLevel) === ` ${headingType} ` ||\r\n    str.substring(0, 3 + headingLevel) === `  ${headingType} ` ||\r\n    str.substring(0, 4 + headingLevel) === `   ${headingType} `\r\n  );\r\n};\r\n\r\nconst articleParts = (lineArray) => {\r\n  const resultText = [];\r\n  const resultHeading = [];\r\n  lineArray.forEach((line) => {\r\n    if (isHeading(line, 1)) {\r\n      resultText.push([[]]);\r\n      resultHeading.push([[line.trim().substring(2)]]);\r\n    } else if (resultText.length - 1 < 0) {\r\n      resultText.push([[]]);\r\n      resultHeading.push([[\"Introduction\"]]);\r\n    } else if (isHeading(line, 2)) {\r\n      resultText[resultText.length - 1].push([]);\r\n      resultHeading[resultHeading.length - 1].push([line.trim().substring(3)]);\r\n    }\r\n    const maxIndexDimension1 = resultText.length - 1;\r\n    const maxIndexDimension2 = resultText[maxIndexDimension1].length - 1;\r\n    resultText[maxIndexDimension1][maxIndexDimension2].push(line);\r\n  });\r\n  return { resultText, resultHeading };\r\n};\r\n\r\nconst { resultText, resultHeading } = articleParts(\r\n  state.article.body.split(\"\\n\")\r\n);\r\n\r\nconst handleHeaderClick = (index1, index2) => {\r\n  if ((!state.viewHistory && !state.editArticle) || index2 === 0) {\r\n    let resp;\r\n    if (index2 === 0) {\r\n      resp = resultText[index1].map((item) => item.join(\"\\n\")).join(\"\\n\");\r\n    } else resp = resultText[index1][index2].join(\"\\n\");\r\n    State.update({\r\n      isMain: index2 === 0,\r\n      note: resp,\r\n    });\r\n  }\r\n};\r\n\r\nconst Button = styled.button`\r\n  width: 100%;\r\n  display: inline-block;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  transition: color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;\r\n  \r\n  border: 2px solid transparent;\r\n  font-weight: 500;\r\n  padding: 0.3rem 0.5rem;\r\n  background-color: #010A2D;\r\n  border-radius: 12px;\r\n  color: white;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    color: #010A2D;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\nreturn (\r\n  <div\r\n    className=\"container-fluid\"\r\n    style={{ backgroundColor: \"rgb(230, 230, 230)\", padding: \"0 0 1rem 0\" }}\r\n  >\r\n    <Widget\r\n      src={`${authorForWidget}/widget/Gigs_MainNavigation`}\r\n      props={{ currentNavPill: \"articles\" }}\r\n    />\r\n    <div\r\n      className=\"row h-100\"\r\n      style={{\r\n        width: \"90%\",\r\n        minWidth: \"360px\",\r\n        margin: \"0 auto\",\r\n        backgroundColor: \"white\",\r\n        padding: \"2rem\",\r\n        borderRadius: \"20px\",\r\n      }}\r\n    >\r\n      <div className=\"col-12 col-md-3 border-end\">\r\n        <h4\r\n          className=\"text-center\"\r\n          style={{ cursor: \"pointer\", fontSize: \"1.5rem\" }}\r\n          onClick={() => {\r\n            State.update({\r\n              note: state.article.body,\r\n            });\r\n          }}\r\n        >\r\n          {state.article.articleId}\r\n        </h4>\r\n        <hr />\r\n        <Button\r\n          onClick={() => {\r\n            State.update({\r\n              ...state,\r\n              editArticle: false,\r\n              viewHistory: !state.viewHistory,\r\n            });\r\n          }}\r\n        >\r\n          View History\r\n        </Button>\r\n        {doesUserCanEditArticle() && (\r\n          <button\r\n            className=\"btn btn-outline-dark w-100\"\r\n            onClick={() => {\r\n              State.update({\r\n                ...state,\r\n                viewHistory: false,\r\n                editArticle: !state.editArticle,\r\n                note: state.article.body,\r\n              });\r\n            }}\r\n          >\r\n            Edit Article\r\n          </button>\r\n        )}\r\n        <hr />\r\n        <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\">\r\n          {resultHeading.map((arrItem, index1) => {\r\n            return (\r\n              <div className=\"accordion-item shadow-none \">\r\n                {arrItem.map((item, index2) => {\r\n                  if (index2 === 0) {\r\n                    return (\r\n                      <h5\r\n                        className=\"accordion-header shadow-none py-1\"\r\n                        id=\"flush-headingOne\"\r\n                      >\r\n                        <button\r\n                          className=\"accordion collapsed border-0 bg-white text-dark shadow-none\"\r\n                          type=\"button\"\r\n                          data-bs-toggle=\"collapse\"\r\n                          data-bs-target={\"#flush-collapseOne\" + index1}\r\n                          aria-expanded=\"true\"\r\n                          aria-controls={\"flush-collapseOne\" + index1}\r\n                          onClick={() => handleHeaderClick(index1, index2)}\r\n                        >\r\n                          {item}\r\n                        </button>\r\n                      </h5>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div\r\n                      id={\"flush-collapseOne\" + index1}\r\n                      className=\"accordion-collapse collapse\"\r\n                      aria-labelledby={\"flush-collapseOne\" + index1}\r\n                      data-bs-parent=\"#accordionFlushExample\"\r\n                    >\r\n                      <div\r\n                        style={{ cursor: \"pointer\" }}\r\n                        className=\"accordion-body py-1\"\r\n                        onClick={() => handleHeaderClick(index1, index2)}\r\n                      >\r\n                        {item}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"mb-3\" />\r\n        {/* === FOOTER === */}\r\n        <Widget\r\n          src={`${authorForWidget}/widget/WikiOnSocialDB_OneArticle.Footer`}\r\n          props={{\r\n            author: state.article.author,\r\n            lastEditor: state.article.lastEditor,\r\n            timeLastEdit: state.article.timeLastEdit,\r\n            version: state.article.version,\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"d-md-none mb-3\" />\r\n      <hr className=\"d-md-none\" />\r\n      <div className=\"col-12 col-md-9\">\r\n        <div>\r\n          {/* === BUTTON - EDIT ARTICLE === */}\r\n          {state.editArticle && (\r\n            <>\r\n              <div className=\"d-flex justify-content-center w-100\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-success mx-1\"\r\n                  style={{ minWidth: \"120px\" }}\r\n                  onClick={() => {\r\n                    if (!state.note || article.body === state.note) return;\r\n\r\n                    const args = {\r\n                      article_id: state?.articleId,\r\n                      body: state.note,\r\n                      navigation_id: null,\r\n                    };\r\n\r\n                    saveArticle(args);\r\n                  }}\r\n                >\r\n                  Save Article{\" \"}\r\n                </button>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-danger mx-1\"\r\n                  style={{ minWidth: \"120px\" }}\r\n                  onClick={() => {\r\n                    State.update({\r\n                      ...state,\r\n                      editArticle: false,\r\n                      note: undefined,\r\n                    });\r\n                  }}\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n              <hr />\r\n            </>\r\n          )}\r\n\r\n          {/* === EDIT ARTICLE === */}\r\n          {state.editArticle && (\r\n            <>\r\n              <div className=\"d-flex gap-2\" style={{ minHeight: \"300px\" }}>\r\n                <div className=\"w-50\">\r\n                  <Widget\r\n                    src=\"mob.near/widget/MarkdownEditorIframe\"\r\n                    props={{\r\n                      initialText: state.article.body,\r\n                      onChange: (note) => State.update({ note }),\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"w-50\">\r\n                  <Widget\r\n                    src=\"mob.near/widget/SocialMarkdown\"\r\n                    props={{ text: state.note }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          {!state.editArticle && !state.viewHistory && (\r\n            <>\r\n              {!state.isMain && (\r\n                <i\r\n                  className=\"bi bi-arrow-left\"\r\n                  style={{ cursor: \"pointer\", fontSize: \"1.5rem\" }}\r\n                  onClick={() => {\r\n                    handleHeaderClick(0, 0);\r\n                  }}\r\n                ></i>\r\n              )}\r\n              <Markdown text={state.note || state.article.body} />\r\n            </>\r\n          )}\r\n          {/* === VIEW HISTORY === */}\r\n          {state.viewHistory && (\r\n            <div className=\"mt-3 ps-5\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <i\r\n                  className=\"bi bi-arrow-left\"\r\n                  style={{ cursor: \"pointer\", fontSize: \"1.5rem\" }}\r\n                  onClick={() => {\r\n                    State.update({\r\n                      ...state,\r\n                      viewHistory: false,\r\n                    });\r\n                  }}\r\n                ></i>\r\n                <button\r\n                  className=\"btn btn-outline-danger\"\r\n                  onClick={() => {\r\n                    State.update({\r\n                      ...state,\r\n                      viewHistory: false,\r\n                    });\r\n                  }}\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n              <Widget\r\n                src={`${authorForWidget}/widget/Gigs_History.History`}\r\n                props={{\r\n                  articleId: state.article.articleId,\r\n                  resultArticles,\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n          {/* === CREATE COMMENT BUTTON === */}\r\n          {blockHeight !== \"now\" && (\r\n            <div className=\"mt-1 d-flex justify-content-between\">\r\n              <Widget\r\n                src=\"mob.near/widget/CommentButton\"\r\n                props={{\r\n                  onClick: () => State.update({ showReply: !state.showReply }),\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n          {/* === COMPOSE COMMENT === */}\r\n          <div className=\"mt-3 ps-5\">\r\n            {state.showReply && (\r\n              <div className=\"mb-2\">\r\n                <Widget\r\n                  src={`${authorForWidget}/widget/Gigs_Comment.Compose`}\r\n                  props={{\r\n                    notifyAccountId,\r\n                    item,\r\n                    onComment: () => State.update({ showReply: false }),\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            {/* === SHOW COMMENT === */}\r\n            <Widget\r\n              src={`${authorForWidget}/widget/WikiOnSocialDB_Comment.Feed`}\r\n              props={{\r\n                item,\r\n                highlightComment: props.highlightComment,\r\n                limit: props.commentsLimit,\r\n                subscribe,\r\n                raw,\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/Gigs_OneArticle"}