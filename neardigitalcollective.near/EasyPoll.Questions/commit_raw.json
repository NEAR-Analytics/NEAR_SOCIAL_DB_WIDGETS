{"tx_hash": "2Xj1PuVFoyfqN1MSpSy99ukkzcEVZ8ibkMYcZGELyHo3", "action_id_social": "EBsuoemv5QsViEPTSvoHR2njAoshJfnwRwY9VUS8CkQ3-0-widget", "block_id": 93240514, "block_timestamp": "2023-06-01T22:49:17.345Z", "signer_id": "neardigitalcollective.near", "widget_name": "EasyPoll.Questions", "source_code": "let sharedBlockHeight = props.sharedBlockHeight;\nlet whitelist = props.whitelist;\n\nState.init({\n  polls: {},\n  showQuestion: sharedBlockHeight,\n  modalBlockHeight: sharedBlockHeight ?? question.blockHeight,\n});\n\nconst widgetOwner = \"neardigitalcollective.near\";\n\nlet globalAccountId = props.accountId ?? context.accountId;\n\nconst onlyUsersPolls = props.onlyUser ?? false;\n\nconst getFirstSBTToken = (accountId) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: accountId,\n    issuer: \"gooddollar-v1.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst shouldDisplayUserQuestions = (accountId) => {\n  return getFirstSBTToken(accountId) !== undefined || whitelist.includes(accountId)\n}\n\nlet polls = Social.index(\"poll_question\", \"question-v3.1.0\");\n\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\n  State.update({ polls: polls });\n}\n\nif (!polls) {\n  return \"Loading\";\n}\n\npolls = polls.filter((p) => shouldDisplayUserQuestions(p.accountId));\n\nif (onlyUsersPolls) {\n  polls = state.polls.filter((poll) => {\n    if (poll.accountId == globalAccountId) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\npolls = polls.sort((q1, q2) => {\n  const isQ1Finished = q1.value.endTimestamp < Date.now();\n  const isQ2Finished = q2.value.endTimestamp < Date.now();\n  if (isQ1Finished && !isQ2Finished) return 1;\n  if (!isQ1Finished && isQ2Finished) return -1;\n  if (isQ1Finished && isQ2Finished)\n    return q2.value.endTimestamp - q1.value.endTimestamp;\n  return q1.value.endTimestamp - q2.value.endTimestamp;\n});\n\nlet usersMakingQuestions = [];\nfor (let i = 0; i < polls.length; i++) {\n  if (!usersMakingQuestions.includes(polls[i].accountId)) {\n    usersMakingQuestions.push(polls[i].accountId);\n  }\n}\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestion: false });\n  };\n}\n\nconst GridDiv = styled.div`\n  grid-template-columns: repeat(${(props) =>\n    props.onlyUsersPolls ? \"2\" : \"3\"}, 1fr);\n  @media screen and (max-width: 1024px)  {\n      grid-template-columns:repeat(2,1fr);\n  }\n  @media screen and (max-width: 768px)  {\n      grid-template-columns:repeat(1,1fr);\n  }\n  display: grid;\n`;\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestion && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"95%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\" style={{ backgroundColor: \"#FAFAFB\" }}>\n            consol\n            <Widget\n              src={`${widgetOwner}/widget/EasyPoll.Voting`}\n              props={{\n                blockHeight: state.modalBlockHeight,\n                shouldDisplayViewAll: false,\n              }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderPolls = (onlyUsersPolls) => {\n  if (onlyUsersPolls) {\n    return polls.map((poll, index) => {\n      return (\n        <div\n          className=\"mx-1 py-3 px-4 my-2\"\n          style={\n            polls.length == 1\n              ? {\n                  boxSizing: \"border-box\",\n                  boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"1rem\",\n                  cursor: \"pointer\",\n                }\n              : {\n                  boxSizing: \"border-box\",\n                  boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"1rem\",\n                  cursor: \"pointer\",\n                }\n          }\n          onClick={() => {\n            State.update({\n              showQuestion: true,\n              modalBlockHeight: poll.blockHeight,\n            });\n          }}\n        >\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.MinimalistQuestionHeader`}\n            props={{ ...poll }}\n          />\n          <Widget\n            src={`${widgetOwner}/widget/EasyPoll.MinimalistQuestionInfo`}\n            props={{ ...poll }}\n          />\n        </div>\n      );\n    });\n  } else {\n    return (\n      <>\n        {usersMakingQuestions.map((accountId) => {\n          return (\n            <div\n              className=\"mx-1 py-3 px-4 my-2\"\n              style={{\n                boxSizing: \"border-box\",\n                boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n                backgroundColor: \"white\",\n                borderRadius: \"1rem\",\n              }}\n            >\n              <Widget\n                src={`${widgetOwner}/widget/EasyPoll.QuestionHeader`}\n                props={{ allUsersQuestions: polls, accountId }}\n              />\n              <Widget\n                src={`${widgetOwner}/widget/EasyPoll.QuestionsByCreator`}\n                props={{ accountId }}\n              />\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n};\n\nreturn (\n  <div\n    style={{\n      borderRadius: \"3px\",\n      backgroundColor: \"rgb(230, 230, 230)\",\n    }}\n  >\n    <GridDiv onlyUsersPolls={onlyUsersPolls}>\n      {renderPolls(onlyUsersPolls)}\n    </GridDiv>\n    {/*TODO add a page picker instead the infinite scroll?*/}\n    {state.showQuestion && renderModal()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/EasyPoll.Questions", "__row_index": 4}