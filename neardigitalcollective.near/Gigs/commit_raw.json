{"tx_hash": "3ioLjnYGfw2WkGekiWVX2k3S5qf2EPYniMk5pqKjoBLe", "action_id_social": "Baz1QaWKKzxmMg9T2xmDYYx3mVJpoKj7PWCv8raFUMhN-0-widget", "block_id": 91049071, "block_timestamp": "2023-05-04 03:10:58.894", "signer_id": "neardigitalcollective.near", "widget_name": "Gigs", "source_code": "const tabs = {\r\n  ALL_GIGS: {\r\n    id: 0,\r\n    text: \"All Gigs\",\r\n  },\r\n  GIG: {\r\n    id: 1,\r\n    text: \"GIG\",\r\n  },\r\n};\r\n\r\nconst blockHeight = props.blockHeight ?? undefined;\r\n\r\nconst updateGeneralState = props.updateGeneralState;\r\n\r\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.gigs;\r\nconst thisWidgetClassNames = props.allWidgetsClassNames.gigs;\r\n\r\nconst widgetOwner = props.widgetOwner;\r\n\r\nconst widgetName = \"Gigs\";\r\nconst widgetPath = `${widgetOwner}/widget/${widgetName}`;\r\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\r\n\r\nconst urlPrefix = \"https://\";\r\nconst accountId = props.accountId ?? \"*\";\r\n\r\nconst data = Social.index(\"gig\", \"answer\");\r\nif (!data) {\r\n  return \"Loading answers\";\r\n}\r\nconst upvotes = Social.index(\"gig\", \"upvote\");\r\nif (!upvotes) {\r\n  return \"Loading upvotes\";\r\n}\r\n\r\nconst commentAnswers = Social.index(\"gig\", \"commentAnswers\");\r\nif (!commentAnswers) {\r\n  return \"Loading commentAnswers\";\r\n}\r\n\r\nlet sortedData = data.sort((d1, d2) => d2.blockHeight - d1.blockHeight);\r\n\r\nsortedData.forEach((_, i) => {\r\n  sortedData[i].value.comments = [];\r\n  sortedData[i].value.upvotes = 0;\r\n});\r\n\r\nlet upvotesMap = {};\r\nfor (let i = 0; i < upvotes.length; i++) {\r\n  const vote = upvotes[i];\r\n  const upvoteBlockHeight = vote.value.blockHeight;\r\n  if (!upvotesMap[upvoteBlockHeight]) {\r\n    upvotesMap[upvoteBlockHeight] = 0;\r\n  }\r\n  upvotesMap[upvoteBlockHeight] += 1;\r\n}\r\n\r\ncommentAnswers.forEach((c) => {\r\n  const dataIndex = sortedData.findIndex(\r\n    (d) => d.blockHeight == c.value.blockHeight\r\n  );\r\n  if (dataIndex === -1) return;\r\n  sortedData[dataIndex].value.comments.push(c);\r\n});\r\n\r\nupvotes.forEach((upvote) => {\r\n  const dataIndex = sortedData.findIndex(\r\n    (d) => d.blockHeight == upvote.value.blockHeight\r\n  );\r\n  if (dataIndex === -1) return;\r\n  sortedData[dataIndex].value.upvotes += 1;\r\n});\r\n\r\nconst finalData = sortedData;\r\n\r\nconst itemBlockHeightFiltered = finalData.filter(\r\n  (d) => d.blockHeight == blockHeight\r\n);\r\n\r\nconst openGig = itemBlockHeightFiltered[0] ?? {};\r\n\r\nState.init({\r\n  hoveringElement: \"\",\r\n  input: \"\",\r\n  url: \"\",\r\n  onChange: ({ content }) => {\r\n    State.update({ content });\r\n  },\r\n  display: blockHeight ? tabs.GIG.id : tabs.ALL_GIGS.id,\r\n  gigs: openGig,\r\n});\r\n\r\n/* BEGIN Common.componse  */\r\nconst composeData = () => {\r\n  const data = {\r\n    post: {\r\n      main: JSON.stringify(state.content),\r\n    },\r\n    index: {\r\n      post: JSON.stringify({\r\n        key: \"main\",\r\n        value: {\r\n          type: \"md\",\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  const item = {\r\n    type: \"social\",\r\n    path: `${context.accountId}/post/main`,\r\n  };\r\n\r\n  const notifications = state.extractMentionNotifications(\r\n    state.content.text,\r\n    item\r\n  );\r\n\r\n  if (notifications.length) {\r\n    data.index.notify = JSON.stringify(\r\n      notifications.length > 1 ? notifications : notifications[0]\r\n    );\r\n  }\r\n\r\n  const hashtags = state.extractHashtags(state.content.text);\r\n\r\n  if (hashtags.length) {\r\n    data.index.hashtag = JSON.stringify(\r\n      hashtags.map((hashtag) => ({\r\n        key: hashtag,\r\n        value: item,\r\n      }))\r\n    );\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n/* END Common.componse  */\r\n\r\n/* BEGIN CommentButton  */\r\n\r\n/* END CommentButton  */\r\n\r\nconst RenderGigBox = (d, index) => {\r\n  return (\r\n    <Widget\r\n      src={`${widgetOwner}/widget/gigBox`}\r\n      props={{\r\n        tabs,\r\n        oppenedTab: state.display,\r\n        widgetOwner,\r\n        d,\r\n        index,\r\n        upvotes,\r\n        updateGeneralState,\r\n        allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n        allWidgetsClassNames: props.allWidgetsClassNames,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div\r\n    style={thisWidgetInlineStyles.generalContainer}\r\n    className={thisWidgetClassNames.generalContainer}\r\n  >\r\n    <div className={thisWidgetClassNames.selectedTabContainer}>\r\n      <h2 style={thisWidgetInlineStyles.selectedTab}>\r\n        {state.display == tabs.ALL_GIGS.id\r\n          ? tabs.ALL_GIGS.text\r\n          : `${tabs.GIG.text}`}\r\n      </h2>\r\n      {state.display == tabs.GIG.id && (\r\n        <i\r\n          className=\"bi bi-x-lg\"\r\n          style={thisWidgetInlineStyles.closeGigButton}\r\n          onClick={() => {\r\n            State.update({ display: tabs.ALL_GIGS.id, gig: {} });\r\n          }}\r\n        ></i>\r\n      )}\r\n    </div>\r\n\r\n    {state.display == tabs.ALL_S.id && (\r\n      <>\r\n        <p>Gigs to BuiDL Web3 Gov on NEAR.</p>\r\n        <Widget\r\n          src={`${widgetOwner}/widget/Common.Compose`}\r\n          props={{\r\n            id: \"main\",\r\n            textAreaOnly: true,\r\n            onChange: state.onChange,\r\n            onHelper: ({ extractMentionNotifications, extractHashtags }) => {\r\n              State.update({ extractMentionNotifications, extractHashtags });\r\n            },\r\n          }}\r\n        />\r\n\r\n        <div className={thisWidgetClassNames.urlTextareaContainer}>\r\n          <p>Url:</p>\r\n          <textarea\r\n            style={thisWidgetInlineStyles.urlTextarea}\r\n            rows=\"1\"\r\n            value={state.url}\r\n            onChange={(e) => {\r\n              State.update({ url: e.target.value });\r\n            }}\r\n          />\r\n        </div>\r\n        <CommitButton\r\n          style={\r\n            state.hoveringElement == \"commitButton\"\r\n              ? props.allWidgetsInlineStyles.hoveringButtonStyles\r\n              : props.allWidgetsInlineStyles.standardButtonStyles\r\n          }\r\n          data={{\r\n            index: {\r\n              gig: JSON.stringify(\r\n                {\r\n                  key: \"answer\",\r\n                  value: {\r\n                    answer: state.content.text,\r\n                    url: state.url,\r\n                  },\r\n                },\r\n                undefined,\r\n                0\r\n              ),\r\n            },\r\n          }}\r\n          onMouseEnter={() => {\r\n            State.update({ hoveringElement: \"commitButton\" });\r\n          }}\r\n          onMouseLeave={() => {\r\n            State.update({ hoveringElement: \"\" });\r\n          }}\r\n          onCommit={() => {\r\n            State.update({\r\n              reloadData: true,\r\n            });\r\n          }}\r\n        >\r\n          Gigs!\r\n        </CommitButton>\r\n      </>\r\n    )}\r\n\r\n    {state.display == tabs.ALL_GIGS.id && (\r\n      <div className={thisWidgetClassNames.allCardsContainer}>\r\n        {sortedData\r\n          ? sortedData.map((d, index) => {\r\n              return RenderGigBox(d, index);\r\n            })\r\n          : \"Loading...\"}\r\n      </div>\r\n    )}\r\n    {state.display == tabs.GIG.id && RenderGigBox(state.gigs, 0)}\r\n  </div>\r\n);\r\ns;\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/Gigs", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN}