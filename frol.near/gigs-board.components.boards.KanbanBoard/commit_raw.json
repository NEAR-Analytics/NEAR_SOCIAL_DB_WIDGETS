{"tx_hash": "jwmCvcULnzNTUdQVsrG5WYBMjjvT5wPQ3s45QqeQFkm", "action_id_social": "HwYaGRfmy9MMfk8zEyrC4FFBqbTnEgP4pQN5P7154XSq-0-widget", "block_id": 85946262, "block_timestamp": "2023-02-24 14:53:00.161", "signer_id": "frol.near", "widget_name": "gigs-board.components.boards.KanbanBoard", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId = props.nearDevGovGigsContractAccountId || (context.widgetSrc ?? 'devgovgigs.near').split('/', 1)[0];\nconst nearDevGovGigsWidgetsAccountId = props.nearDevGovGigsWidgetsAccountId || (context.widgetSrc ?? 'devgovgigs.near').split('/', 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n  };\n  return <Widget src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`} props={widgetProps} key={key} />;\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps }\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId = props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId = props.nearDevGovGigsWidgetsAccountId;\n  }\n  const linkPropsQuery = Object.entries(linkProps).map(([key, value]) => `${key}=${value}`).join('&');\n  return `#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${linkPropsQuery ? \"?\" : \"\"}${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst requiredLabels = props.requiredLabels ?? [\"near-social\"];\nconst excludedLabels = props.excludedLabels ?? [\"nft\"];\nconst columnLabels = props.columnLabels ?? [\n  \"widget\",\n  \"integration\",\n  \"feature-request\",\n];\n\nconst labelsToIdSet = (labels) => {\n  const ids = labels.map((label) => (\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? []\n  ));\n  const idsFlat = ids.flat(1);\n  return new Set(idsFlat);\n};\n\nconst requiredPostsSet = labelsToIdSet(requiredLabels);\nconst excludedPostsSet = labelsToIdSet(excludedLabels);\n\nconst postsPerLabel = columnLabels.map((cl) => {\n  let allIds = (\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label: cl,\n    }) ?? []\n  ).reverse();\n  if (requiredLabels.length > 0) {\n    return {\n      label: cl,\n      posts: allIds.filter(\n        (i) => requiredPostsSet.has(i) && !excludedPostsSet.has(i)\n      ),\n    };\n  } else {\n    // No extra filtering is required.\n    return { label: cl, posts: allIds };\n  }\n});\n\nreturn (\n  <div>\n    <div class=\"row mb-2\">\n      {props.boardId ? (\n        <div class=\"col\">\n          <small class=\"text-muted\">\n            <a\n              class=\"card-link\"\n              href={href(\"Boards\", { selectedBoardId: props.boardId })}\n              role=\"button\"\n              target=\"_blank\"\n              title=\"Link to this board\"\n            >\n              <div class=\"hstack gap-3\">\n                <div class=\"bi bi-share\"></div>\n                <div>Link to this board</div>\n              </div>\n            </a>\n          </small>\n        </div>\n      ) : null}\n\n      {requiredLabels.length > 0 ? (\n        <div class=\"col\">\n          <small class=\"text-muted\">\n            Required labels:\n            {requiredLabels.map((label) => (\n              <a\n                href={href(\"Feed\", { label })}\n                key={label}\n              >\n                <span class=\"badge text-bg-primary me-1\">{label}</span>\n              </a>\n            ))}\n          </small>\n        </div>\n      ) : null}\n      {excludedLabels.length > 0 ? (\n        <div class=\"col\">\n          <small class=\"text-muted\">\n            Excluded labels:\n            {excludedLabels.map((label) => (\n              <a\n                href={href(\"Feed\", { label })}\n                key={label}\n              >\n                <span class=\"badge text-bg-primary me-1\">{label}</span>\n              </a>\n            ))}\n          </small>\n        </div>\n      ) : null}\n    </div>\n    <div class=\"row\">\n      {postsPerLabel.map((col) => (\n        <div class=\"col-4\" key={col.label}>\n          <div class=\"card\">\n            <div class=\"card-body border-secondary\">\n              <h6 class=\"card-title\">\n                {col.label.toUpperCase()}({col.posts.length})\n              </h6>\n              {col.posts.map((postId) => (\n                widget(\n                  \"components.posts.CompactPost\",\n                  { id: postId },\n                  postId\n                )\n              ))}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frol.near/widget/gigs-board.components.boards.KanbanBoard"}