{"tx_hash": "HkNrcvspBGqBgzXBLRoXV1w1VYGFGEK2HF58DCWitGzo", "action_id_social": "65BakHH9wJ8La3LRBMnThKTy3QdT7VHXkPB7wSVsnKbw-0-widget", "block_id": 85946734, "block_timestamp": "2023-02-24 15:01:51.591", "signer_id": "frol.near", "widget_name": "gigs-board.components.posts.Post", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId = props.nearDevGovGigsContractAccountId || (context.widgetSrc ?? 'devgovgigs.near').split('/', 1)[0];\nconst nearDevGovGigsWidgetsAccountId = props.nearDevGovGigsWidgetsAccountId || (context.widgetSrc ?? 'devgovgigs.near').split('/', 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n  };\n  return <Widget src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`} props={widgetProps} key={key} />;\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps }\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId = props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId = props.nearDevGovGigsWidgetsAccountId;\n  }\n  const linkPropsQuery = Object.entries(linkProps).map(([key, value]) => `${key}=${value}`).join('&');\n  return `#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${linkPropsQuery ? \"?\" : \"\"}${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\nconst post = props.post ?? Near.view(nearDevGovGigsContractAccountId, \"get_post\", { post_id: postId });\nif (!post) {\n  return <div>Loading ...</div>;\n}\nconst referral = props.referral;\n\nconst snapshot = post.snapshot;\n// If this post is displayed under another post. Used to limit the size.\nconst isUnderPost = props.isUnderPost ? true : false;\nconst parentId = Near.view(nearDevGovGigsContractAccountId, \"get_parent_id\", { post_id: postId });\n\nconst childPostIdsUnordered =\n  Near.view(nearDevGovGigsContractAccountId, \"get_children_ids\", {\n    post_id: postId,\n  }) ?? [];\n\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\nconst expandable = props.isPreview ? false : (props.expandable ?? false);\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\n\nfunction readableDate(timestamp) {\n  var a = new Date(timestamp);\n  return a.toDateString() + \" \" + a.toLocaleTimeString();\n}\n\nconst timestamp = readableDate(\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\n);\n\nconst linkToParent =\n  isUnderPost || !parentId ? (<div key=\"link-to-parent\"></div>) : (\n    <div className=\"card-header\" key=\"link-to-parent\">\n      <a\n        href={href(\"Post\", { id: parentId, referral })}\n      >\n        <i class=\"bi bi-arrow-90deg-up\"></i>Go to parent{\" \"}\n      </a>\n    </div>\n  );\n\nconst allowedToEdit =\n  !props.isPreview &&\n  Near.view(nearDevGovGigsContractAccountId, \"is_allowed_to_edit\", {\n    post_id: postId,\n    editor: context.accountId,\n  });\n\nconst btnEditorWidget = (postType, name) => {\n  return (\n    <li>\n      <a\n        class=\"dropdown-item\"\n        data-bs-toggle=\"collapse\"\n        href={`#collapse${postType}Editor${postId}`}\n        role=\"button\"\n        aria-expanded=\"false\"\n        aria-controls={`collapse${postType}Editor${postId}`}\n      >\n        {name}\n      </a>\n    </li>\n  );\n};\n\nconst editControl = allowedToEdit ? (\n  <div class=\"btn-group\" role=\"group\">\n    <a\n      class=\"card-link px-2\"\n      role=\"button\"\n      title=\"Edit post\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n      type=\"button\"\n    >\n      <div class=\"bi bi-pencil-square\"></div>\n    </a>\n    <ul class=\"dropdown-menu\">\n      {btnEditorWidget(\"Idea\", \"Edit as an idea\")}\n      {btnEditorWidget(\"Submission\", \"Edit as a solution\")}\n      {btnEditorWidget(\"Attestation\", \"Edit as an attestation\")}\n      {btnEditorWidget(\"Sponsorship\", \"Edit as a sponsorship\")}\n      {btnEditorWidget(\"Comment\", \"Edit as a comment\")}\n    </ul>\n  </div>\n) : (<div></div>);\n\nconst shareButton = props.isPreview ? (<div></div>) : (\n  <a\n    class=\"card-link\"\n    href={href(\"Post\", { id: postId, referral })}\n    role=\"button\"\n    target=\"_blank\"\n    title=\"Open in new tab\"\n  >\n    <div class=\"bi bi-share\"></div>\n  </a>\n);\n\nconst header = (\n  <div className=\"card-header\" key=\"header\">\n    <small class=\"text-muted\">\n      <div class=\"row justify-content-between\">\n        <div class=\"col-4\">\n          <Widget\n            src={`neardevgov.near/widget/ProfileLine`}\n            props={{ accountId: post.author_id }}\n          />\n        </div>\n        <div class=\"col-5\">\n          <div class=\"d-flex justify-content-end\">\n            {editControl}\n            {timestamp}\n            <div class=\"bi bi-clock-history px-2\"></div>\n            {shareButton}\n          </div>\n        </div>\n      </div>\n    </small>\n  </div>\n);\n\nconst emptyIcons = {\n  Idea: \"bi-lightbulb\",\n  Comment: \"bi-chat\",\n  Submission: \"bi-rocket\",\n  Attestation: \"bi-check-circle\",\n  Sponsorship: \"bi-cash-coin\",\n  Github: \"bi-github\",\n  Like: \"bi-heart\",\n  Reply: \"bi-reply\",\n};\n\nconst fillIcons = {\n  Idea: \"bi-lightbulb-fill\",\n  Comment: \"bi-chat-fill\",\n  Submission: \"bi-rocket-fill\",\n  Attestation: \"bi-check-circle-fill\",\n  Sponsorship: \"bi-cash-coin\",\n  Github: \"bi-github\",\n  Like: \"bi-heart-fill\",\n  Reply: \"bi-reply-fill\",\n};\n\n// Trigger saving this widget.\n\nconst borders = {\n  Idea: \"border-secondary\",\n  Comment: \"border-secondary\",\n  Submission: \"border-secondary\",\n  Attestation: \"border-secondary\",\n  Sponsorship: \"border-secondary\",\n  Github: \"border-secondary\",\n};\n\nconst containsLike = props.isPreview\n  ? false\n  : post.likes.find((l) => l.author_id == context.accountId);\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\nconst onLike = () => {\n  Near.call(\n    nearDevGovGigsContractAccountId,\n    \"add_like\",\n    {\n      post_id: postId,\n    },\n    40_000_000_000_000n,\n    2_000_000_000_000_000_000_000n\n  );\n};\n\nconst btnCreatorWidget = (postType, icon, name) => {\n  return (\n    <li>\n      <a\n        class=\"dropdown-item\"\n        data-bs-toggle=\"collapse\"\n        href={`#collapse${postType}Creator${postId}`}\n        role=\"button\"\n        aria-expanded=\"false\"\n        aria-controls={`collapse${postType}Creator${postId}`}\n      >\n        <i class={`bi ${icon}`}> </i> {name}\n      </a>\n    </li>\n  );\n};\n\nconst buttonsFooter = props.isPreview ? null : (\n  <div class=\"row\" key=\"buttons-footer\">\n    <div class=\"col-8\">\n      <div class=\"btn-group\" role=\"group\" aria-label=\"Basic outlined example\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary\"\n          style={{ border: \"0px\" }}\n          onClick={onLike}\n        >\n          <i class={`bi ${likeBtnClass}`}> </i>\n          Like ({post.likes.length ?? 0})\n        </button>\n        <div class=\"btn-group\" role=\"group\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            style={{ border: \"0px\" }}\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            <i class={`bi ${emptyIcons.Reply}`}> </i> Reply\n          </button>\n          <ul class=\"dropdown-menu\">\n            {btnCreatorWidget(\"Idea\", emptyIcons.Idea, \"Idea\")}\n            {btnCreatorWidget(\"Submission\", emptyIcons.Submission, \"Solution\")}\n            {btnCreatorWidget(\n              \"Attestation\",\n              emptyIcons.Attestation,\n              \"Attestation\"\n            )}\n            {btnCreatorWidget(\n              \"Sponsorship\",\n              emptyIcons.Sponsorship,\n              \"Sponsorship\"\n            )}\n            <li>\n              <hr class=\"dropdown-divider\" />\n            </li>\n            {btnCreatorWidget(\"Comment\", emptyIcons.Comment, \"Comment\")}\n          </ul>\n        </div>\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary\"\n          style={{ border: \"0px\" }}\n          data-bs-toggle=\"collapse\"\n          href={`#collapseChildPosts${postId}`}\n          aria-expanded={defaultExpanded}\n          aria-controls={`collapseChildPosts${postId}`}\n        >\n          <i class=\"bi bi-arrows-expand\"> </i>{\" \"}\n          {`Expand Replies (${childPostIds.length})`}\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nconst CreatorWidget = (postType) => {\n  return (\n    <div\n      class=\"collapse\"\n      id={`collapse${postType}Creator${postId}`}\n      data-bs-parent={`#accordion${postId}`}\n    >\n      {widget(\n        \"components.posts.PostEditor\",\n        {\n          postType,\n          parentId: postId,\n          mode: \"Create\",\n          referral: props.referral,\n        }\n      )}\n    </div>\n  );\n};\n\nconst EditorWidget = (postType) => {\n  return (\n    <div\n      class=\"collapse\"\n      id={`collapse${postType}Editor${postId}`}\n      data-bs-parent={`#accordion${postId}`}\n    >\n      {widget(\n        \"components.posts.PostEditor\",\n        {\n          postType,\n          postId,\n          mode: \"Edit\",\n          author_id: post.author_id,\n          labels: post.snapshot.labels,\n          name: post.snapshot.name,\n          description: post.snapshot.description,\n          amount: post.snapshot.amount,\n          token: post.snapshot.sponsorship_token,\n          supervisor: post.snapshot.supervisor,\n          githubLink: post.snapshot.github_link,\n          referral: props.referral,\n        }\n      )}\n    </div>\n  );\n};\n\nconst editorsFooter = props.isPreview ? null : (\n  <div class=\"row\" id={`accordion${postId}`} key=\"editors-footer\">\n    {CreatorWidget(\"Comment\")}\n    {EditorWidget(\"Comment\")}\n    {CreatorWidget(\"Idea\")}\n    {EditorWidget(\"Idea\")}\n    {CreatorWidget(\"Submission\")}\n    {EditorWidget(\"Submission\")}\n    {CreatorWidget(\"Attestation\")}\n    {EditorWidget(\"Attestation\")}\n    {CreatorWidget(\"Sponsorship\")}\n    {EditorWidget(\"Sponsorship\")}\n    {CreatorWidget(\"Github\")}\n    {EditorWidget(\"Github\")}\n  </div>\n);\n\nconst renamedPostType =\n  snapshot.post_type == \"Submission\" ? \"Solution\" : snapshot.post_type;\n\nconst postLabels = post.snapshot.labels ? (\n  <div class=\"card-title\" key=\"post-labels\">\n    {post.snapshot.labels.map((label) => {\n      return (\n        <a href={href(\"Feed\", { label }, label)}>\n          <span class=\"badge text-bg-primary me-1\">{label}</span>\n        </a>\n      );\n    })}\n  </div>\n) : (<div key=\"post-labels\"></div>);\n\nconst postTitle =\n  snapshot.post_type == \"Comment\" ? (<div key=\"post-title\"></div>) : (\n    <h5 class=\"card-title\" key=\"post-title\">\n      <div className=\"row justify-content-between\">\n        <div class=\"col-9\">\n          <i class={`bi ${emptyIcons[snapshot.post_type]}`}> </i>\n          {renamedPostType}: {snapshot.name}\n        </div>\n      </div>\n    </h5>\n  );\n\nconst postExtra =\n  snapshot.post_type == \"Sponsorship\" ? (\n    <div key=\"post-extra\">\n      <h6 class=\"card-subtitle mb-2 text-muted\">\n        Maximum amount: {snapshot.amount} {snapshot.sponsorship_token}\n      </h6>\n      <h6 class=\"card-subtitle mb-2 text-muted\">\n        Supervisor:{\" \"}\n        <Widget\n          src={`neardevgov.near/widget/ProfileLine`}\n          props={{ accountId: snapshot.supervisor }}\n        />\n      </h6>\n    </div>\n  ) : (<div></div>);\n\nconst postsList =\n  props.isPreview || childPostIds.length == 0 ? (<div key=\"posts-list\"></div>) : (\n    <div class=\"row\" key=\"posts-list\">\n      <div class={`collapse ${defaultExpanded ? \"show\" : \"\"}`} id={`collapseChildPosts${postId}`}>\n        {childPostIds.map((childId) => widget(\n          \"components.posts.Post\",\n          { id: childId, isUnderPost: true, referral: props.referral },\n          `subpost${childId}of${postId}`\n        ))}\n      </div>\n    </div>\n  );\n\nconst Card = styled.div`\n  &:hover {\n    box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;\n  }\n\n`;\n\nconst limitedMarkdown = styled.div`\n      max-height: 20em;\n`;\n\n// Should make sure the posts under the currently top viewed post are limited in size.\nconst descriptionArea = isUnderPost ? (\n  <limitedMarkdown className=\"overflow-auto\" key=\"description-area\">\n    <Markdown class=\"card-text\" text={snapshot.description}></Markdown>\n  </limitedMarkdown>\n) : (\n  <Markdown class=\"card-text\" text={snapshot.description} key=\"description-area\"></Markdown>\n);\n\nreturn (\n  <Card className={`card my-2 ${borders[snapshot.post_type]}`}>\n    {linkToParent}\n    {header}\n    <div className=\"card-body\">\n      {postLabels}\n      {postTitle}\n      {postExtra}\n      {descriptionArea}\n      {buttonsFooter}\n      {editorsFooter}\n      {postsList}\n    </div>\n  </Card>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frol.near/widget/gigs-board.components.posts.Post"}