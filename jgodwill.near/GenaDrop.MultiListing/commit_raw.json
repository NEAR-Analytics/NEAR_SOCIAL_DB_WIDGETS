{"tx_hash": "Fk52xz97qfmR2PQ3WE8fd958NdqdrLDn9v761ZxxYjTq", "action_id_social": "HEoLwp19Fzuae96XmnJojRfjt5pyVbs2u9iroFU5E9Ng-0-widget", "block_id": 93590417, "block_timestamp": "2023-06-06T13:56:30.843Z", "signer_id": "jgodwill.near", "widget_name": "GenaDrop.MultiListing", "source_code": "// add nft transfers here\r\n// NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\r\nconst image = props.image;\r\nconst onChange = props.onChange;\r\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\r\nconst accountId = context.accountId; // add check for context it\r\nconst ownerId = \"minorityprogrammers.near\"; // attribution\r\nconst nft = props.nft ?? {\r\n  contractId: props.contractId,\r\n  tokenId: props.tokenId,\r\n}; // just in case need to pass in a NFT\r\nconst NEAR_NOMINATION_EXP = 24;\r\nconst contractId = \"genadrop-contract.nftgen.near\"; // default nft contract\r\nconst tokenId = \"1679119560198\"; // maybe condtional check if props is eempty // default nft\r\nconst fewfarmarket = \"market.fewandfar.near\";\r\nconst tradeportmarket = \"market.tradeport.near\";\r\n// fewfar link // display button if listed // asking them for format and they are working on a fix // https://fewfar.com/genadrop-single-nft-near/1675689302938/\r\nconst tradeportLink =\r\n  \"https://www.tradeport.xyz/near/collection/\" + contractId + \"/\" + tokenId;\r\n// maybe utilize the helper funciton here\r\n// const fewfarlink =\r\nconst defaultCustomMarket = \"apollo42.near\";\r\nconst mintbasemarket = \"simple.market.mintbase1.near\";\r\nconst default_receiver = \"minorityprogrammers.near\"; // default reciver nft for transfers\r\nconst trpMsg = JSON.stringify({\r\n  price: amount,\r\n  market_type: \"sale\",\r\n  ft_token_id: \"near\",\r\n});\r\n\r\nconst fnfMsg = JSON.stringify({\r\n  sale_conditions: {\r\n    near: amount,\r\n  },\r\n});\r\n// need to find custom market link to work with\r\n\r\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\r\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\r\n  token_id: tokenId,\r\n});\r\nconsole.log(tokenInfo.approved_account_ids);\r\ninitState({\r\n  contractId: contractId,\r\n  tokenId: tokenId,\r\n  amount: amount,\r\n  msg: msg,\r\n  fnfMsg: fnfMsg,\r\n  trpMsg: trpMsg,\r\n  tradeportLink: tradeportLink,\r\n  custom: false,\r\n  customMarketLink: defaultCustomMarket,\r\n  validMarketLink: true,\r\n  nftMetadata: nftMetadata,\r\n  tokenInfo: tokenInfo,\r\n  receiverId: default_receiver,\r\n  validReceiver: true,\r\n  transfer: false, // add checkbox for transfer that shows\r\n  url: image.url,\r\n  nft: image.nft ?? {}, // from santiago\r\n  showAlert: false,\r\n});\r\nfunction ownsNFT() {\r\n  const ownsNFT = context.accountId === state.tokenInfo.owner_id;\r\n  State.update({\r\n    ownsNFT: ownsNFT,\r\n  });\r\n}\r\nownsNFT();\r\nfunction updateTradeportLink() {\r\n  // Function body goes here\r\n  const updatedLink =\r\n    \"https://www.tradeport.xyz/near/collection/\" +\r\n    state.contractId +\r\n    \"/\" +\r\n    state.tokenId;\r\n  State.update({\r\n    tradeportLink: updatedLink,\r\n  });\r\n}\r\nfunction cleanupAmount(amount) {\r\n  return amount.replace(/,/g, \"\").trim();\r\n}\r\nfunction trimLeadingZeroes(value) {\r\n  value = value.replace(/^0+/, \"\");\r\n  if (value === \"\") {\r\n    return \"0\";\r\n  }\r\n  return value;\r\n}\r\nfunction parseNearAmount(amt) {\r\n  if (!amt) {\r\n    return null;\r\n  }\r\n  amt = cleanupAmount(amt);\r\n  const split = amt.split(\".\");\r\n  const wholePart = split[0];\r\n  const fracPart = split[1] || \"\";\r\n  if (split.length > 2 || fracPart.length > NEAR_NOMINATION_EXP) {\r\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\r\n  }\r\n  return trimLeadingZeroes(\r\n    wholePart + fracPart.padEnd(NEAR_NOMINATION_EXP, \"0\")\r\n  );\r\n}\r\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\r\nconst onChangeAmount = (amount) => {\r\n  amount = parseNearAmount(amount);\r\n  console.log(\"parsed amount\", amount);\r\n  const msgConcat = JSON.stringify({\r\n    price: amount,\r\n    market_type: \"sale\",\r\n    ft_token_id: \"near\",\r\n  });\r\n  const fnfMsg = JSON.stringify({\r\n    sale_conditions: {\r\n      near: amount,\r\n    },\r\n  });\r\n  // console.log(bigIntNumber);\r\n  console.log(amount);\r\n  State.update({\r\n    amount,\r\n    msg: msgConcat,\r\n    fnfMsg: fnfMsg,\r\n    trpMsg: msgConcat,\r\n  });\r\n};\r\n\r\nconst onChangeMsg = (msg) => {\r\n  // currently done in the amount\r\n  State.update({\r\n    msg: msg,\r\n  });\r\n};\r\n\r\nconst onChangeReceiver = (receiverId) => {\r\n  const validReceiverLink = isNearAddress(receiverId[0]); // add error message or change button based on this\r\n  State.update({\r\n    receiverId: receiverId[0],\r\n    validReceiver: validReceiverLink,\r\n  });\r\n  console.log(`receiver: ${state.receiverId[0]}`);\r\n};\r\n\r\nconst onChangeContract = (contractId) => {\r\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\r\n  State.update({\r\n    contractId,\r\n    nftMetadata,\r\n  });\r\n  onChangeToken(state.tokenId);\r\n  ownsNFT();\r\n  updateTradeportLink();\r\n};\r\n\r\nconst onChangeToken = (tokenId) => {\r\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\r\n    token_id: tokenId,\r\n  });\r\n  State.update({\r\n    tokenId,\r\n    tokenInfo,\r\n  });\r\n  ownsNFT();\r\n  updateTradeportLink();\r\n};\r\n\r\nconst onChangeCustomMarket = (customMarketLink) => {\r\n  const validMarketLink = isNearAddress(customMarketLink);\r\n  State.update({\r\n    customMarketLink,\r\n    validMarketLink,\r\n  });\r\n};\r\n/* HELPER FUNCTION */\r\nfunction isNearAddress(address) {\r\n  if (typeof address !== \"string\") {\r\n    return false;\r\n  }\r\n  if (!address.endsWith(\".near\")) {\r\n    return false;\r\n  }\r\n  const parts = address.split(\".\");\r\n  if (parts.length !== 2) {\r\n    return false;\r\n  }\r\n  if (parts[0].length < 2 || parts[0].length > 32) {\r\n    return false;\r\n  }\r\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nconst list = () => {\r\n  if (!accountId) {\r\n    console.log(\"Sign in to list\");\r\n    return;\r\n  }\r\n  console.log(state.trpMsg);\r\n  // need to buffer serialize arguments, add helper functions with state arguments\r\n  const gas = 100000000000000; // 100 tGas\r\n  //   const deposit = 1; // exactly 1 yocto\r\n  const deposit = 10000000000000000000000; // 0.01 near\r\n  Near.call(\r\n    [\r\n      state.tradeport\r\n        ? {\r\n            contractName: tradeportmarket,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.tradeport\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: tradeportmarket,\r\n              msg: state.trpMsg,\r\n            },\r\n            gas: gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.fewfar\r\n        ? {\r\n            contractName: fewfarmarket,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.fewfar\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: fewfarmarket,\r\n              msg: state.fnfMsg,\r\n            },\r\n            gas: gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.mintbase\r\n        ? {\r\n            contractName: mintbasemarket,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.mintbase\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: mintbasemarket,\r\n              msg: state.msg, // need to change mesg to conform with mitnbase market // \"{\\\"price\\\":\\\"3900000000000000000000000\\\",\\\"autotransfer\\\":true}\"\r\n            },\r\n            gas: gas,\r\n            deposit: deposit, // may take this out\r\n          }\r\n        : null,\r\n      state.custom\r\n        ? {\r\n            contractName: state.customMarketLink,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.custom\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: state.customMarketLink,\r\n              msg: state.msg, // need to add the variables and buffer seerailize\r\n            },\r\n            gas: gas,\r\n            deposit: deposit, // may take this out\r\n          }\r\n        : null,\r\n    ].filter((entry) => entry !== null)\r\n  );\r\n};\r\nconst transfer = () => {\r\n  if (!accountId) {\r\n    return;\r\n  }\r\n  // need to buffer serialize arguments, add helper functions with state arguments\r\n  const gas = 100000000000000; // 100 tGas\r\n  //   const deposit = 1; // exactly 1 yocto\r\n  const deposit = 1; // 0.01 near // maybe less\r\n  Near.call([\r\n    {\r\n      contractName: state.contractId,\r\n      methodName: \"nft_transfer\",\r\n      args: {\r\n        receiver_id: state.receiverId,\r\n        token_id: state.tokenId,\r\n      },\r\n      gas: gas ?? 200000000000000,\r\n      deposit: deposit ?? 10000000000000000000000,\r\n    },\r\n  ]);\r\n};\r\nconst selectFewFar = () => {\r\n  State.update({\r\n    fewfar: !state.fewfar,\r\n  });\r\n};\r\nconst selectTradeport = () => {\r\n  State.update({\r\n    tradeport: !state.tradeport,\r\n  });\r\n};\r\nconst selectMintbase = () => {\r\n  State.update({\r\n    mintbase: !state.mintbase,\r\n  });\r\n};\r\nif (!accountId) {\r\n  State.update({\r\n    showAlert: true,\r\n    toastMessage: \"Please Sign in to Near wallet to list\",\r\n  });\r\n}\r\nconst selectCustom = () => {\r\n  State.update({\r\n    custom: !state.custom,\r\n  });\r\n}; // need better helper function for checking whether valid NEAR address\r\nreturn (\r\n  <div>\r\n    {state.showAlert && (\r\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\r\n    )}\r\n    <h1 className=\"text-center\"> \ud83d\udecd\ufe0f List NFT to Multiple Marketplaces </h1>\r\n    <div>\r\n      <div\r\n        className=\"p-2 rounded mt-3\"\r\n        style={{\r\n          background: \"#fdfdfd\",\r\n          border: \"solid 1px #dee2e6\",\r\n          borderBottomLeftRadius: \".375rem\",\r\n          borderBottomRightRadius: \".375rem\",\r\n          minHeight: \"9em\",\r\n        }}\r\n      >\r\n        <div>\r\n          <div className=\"mt-2\">\r\n            <Widget\r\n              src={`jgodwill.near/widget/genadrop-nft-selector`}\r\n              props={{\r\n                onChange: ({ contractId, tokenId }) => {\r\n                  State.update({\r\n                    contractId: contractId,\r\n                    tokenId: tokenId,\r\n                  });\r\n                  onChangeToken(tokenId);\r\n                  onChangeContract(contractId);\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    {state.tokenId !== \"1679119560198\" && (\r\n      <>\r\n        <Widget\r\n          src=\"jgodwill.near/widget/NftListingInput\"\r\n          props={{\r\n            state,\r\n            onChangeContract,\r\n            onChangeToken,\r\n            selectTradeport,\r\n            selectFewFar,\r\n            selectCustom,\r\n            selectMintbase,\r\n            onChangeCustomMarket,\r\n            onChangeAmount,\r\n            list,\r\n            onChangeReceiver,\r\n          }}\r\n        />\r\n        {/*<br></br>\r\n        <h1 className=\"text-center\">OR</h1>\r\n        <h2 className=\"text-center\">Transfer</h2>\r\n        <div className=\" mb-2\">\r\n          Receiver Address\r\n          <input\r\n            type=\"text\"\r\n            placeholder={state.receiverId}\r\n            onChange={(e) => onChangeReceiver(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          {state.ownsNFT && state.validReceiver && (\r\n            <button className=\"btn btn-primary mt-3\" onClick={transfer}>\r\n              Transfer\r\n            </button>\r\n          )}\r\n          <div className=\"col-lg-6\"></div>\r\n          {state.ownsNFT && !state.validReceiver && (\r\n            <button className=\"btn btn-warning mt-3\">\r\n              Can't Transfer (Invalid Receiver)\r\n            </button>\r\n          )}\r\n          {!state.ownsNFT && state.validReceiver && (\r\n            <button className=\"btn btn-danger mt-3\">\r\n              Can't Transfer (Don't Own)\r\n            </button>\r\n          )}\r\n        </div>*/}\r\n      </>\r\n    )}\r\n    <h4 className=\"text-center mt-5\">\r\n      \ud83d\udca7\r\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        GenaDrop\r\n      </a>\r\n      <Widget\r\n        src=\"miraclx.near/widget/Attribution\"\r\n        props={{ authors: [ownerId], dep: true }}\r\n      />\r\n    </h4>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/GenaDrop.MultiListing", "__row_index": 1}