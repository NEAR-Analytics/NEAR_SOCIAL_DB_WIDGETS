{"tx_hash": "oHVV29t2Q9GCKDGCs6x3nLK6GzdgbTQvEKfLmUns22J", "action_id_social": "6T3DQG1ygRELe2N5UH7JZ46sNaa75GdM1sMxNU3p3ecf-0-widget", "block_id": 93467419, "block_timestamp": "2023-06-04T22:37:45.411Z", "signer_id": "jgodwill.near", "widget_name": "GenaDropmultichainminter", "source_code": "const auroraCOntract = \"0xe53bC42B6b25a1d548B73636777a0599Fd27fE5c\";\r\nconst polygonContract = \"0x436AEceaEeC57b38a17Ebe71154832fB0fAFF878\";\r\nconst celoContract = \"0xC291846A587cf00a7CC4AF0bc4EEdbC9c3340C36\";\r\nconst avaxContract = \"0x43dBdfcAADD0Ea7aD037e8d35FDD7c353B5B435b\";\r\nconst arbitrumContract = \"0x959a2945185Ec975561Ac0d0b23F03Ed1b267925\";\r\nconst nearContract = \"genadrop.nftgen.near\";\r\nconst ownerId = \"minorityprogrammers.near\"; // attribution\r\nconst mintSingle = [\r\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\r\n];\r\nlet accountId = context.accountId;\r\nconst contractAddresses = {\r\n  137: [polygonContract, \"Polygon\", \"https://polygonscan.com/tx/\"],\r\n  1313161554: [auroraCOntract, \"Aurora\", \"https://explorer.aurora.dev/tx/\"],\r\n  42220: [celoContract, \"Celo\", \"https://explorer.celo.org/mainnet/tx/\"],\r\n  43114: [avaxContract, \"Avalanche\", \"https://snowtrace.io/tx/\"],\r\n  42161: [arbitrumContract, \"Arbitrum\", \"https://arbiscan.io/tx/\"],\r\n  0: [nearContract, \"Near\"],\r\n};\r\nconst chains = [\r\n  {\r\n    id: \"137\",\r\n    name: \"Polygon\",\r\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\r\n  },\r\n  {\r\n    id: \"1313161554\",\r\n    name: \"Aurora\",\r\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\r\n  },\r\n  {\r\n    id: \"42220\",\r\n    name: \"Celo\",\r\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\r\n  },\r\n  {\r\n    id: \"43114\",\r\n    name: \"Avax\",\r\n    url: \"https://ipfs.near.social/ipfs/bafkreifhu5fytsjcmjluarfnu6kcdhaqz4rgdrbbzf6dlsmggqb7oi3w4e\",\r\n  },\r\n  {\r\n    id: \"42161\",\r\n    name: \"Arbitrum\",\r\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\r\n  },\r\n  {\r\n    id: \"0\",\r\n    name: \"Near\",\r\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\r\n  },\r\n];\r\n\r\nconst handleMint = () => {\r\n  console.log(\"it's here\", state.title && state.description && state.image.cid);\r\n  if (!(state.title && state.description && state.image.cid)) {\r\n    return;\r\n  }\r\n  if (state.selectedChain == \"0\") {\r\n    const gas = 200000000000000;\r\n    const deposit = 10000000000000000000000;\r\n    const metadata = {\r\n      name: state.title,\r\n      description: state.description,\r\n      properties: [],\r\n      image: `ipfs://${state.image.cid}`,\r\n    };\r\n    asyncFetch(\"https://ipfs.near.social/add\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n      body: metadata,\r\n    }).then((res) => {\r\n      const cid = res.body.cid;\r\n      const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\r\n      console.log(\"in the promise\", res, Id);\r\n      Near.call([\r\n        {\r\n          contractName: \"genadrop-contract.nftgen.near\",\r\n          methodName: \"nft_mint\",\r\n          args: {\r\n            token_id: `${Date.now()}`,\r\n            metadata: {\r\n              title: state.title,\r\n              description: state.description,\r\n              media: `https://ipfs.io/ipfs/${state.image.cid}`,\r\n              reference: `ipfs://${cid}`,\r\n            },\r\n            receiver_id: accountId,\r\n          },\r\n          gas: gas,\r\n          deposit: deposit,\r\n        },\r\n      ]);\r\n    });\r\n    return;\r\n  }\r\n  console.log(\"passed checks\");\r\n  let networkId = Ethers.provider()._network.chainId;\r\n\r\n  const CA = contractAddresses[state.selectedChain][0] || \"137\";\r\n\r\n  console.log(\"CONTRACT ADD\", CA);\r\n\r\n  const contract = new ethers.Contract(\r\n    CA,\r\n    mintSingle,\r\n    Ethers.provider().getSigner()\r\n  );\r\n  const metadata = {\r\n    name: state.title,\r\n    description: state.description,\r\n    properties: [],\r\n    image: `ipfs://${state.image.cid}`,\r\n  };\r\n  asyncFetch(\"https://ipfs.near.social/add\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    },\r\n    body: metadata,\r\n  }).then((res) => {\r\n    const cid = res.body.cid;\r\n    const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\r\n    console.log(\"in the promse\", res, Id);\r\n    const recipient = Ethers.send(\"eth_requestAccounts\", []);\r\n    contract\r\n      .mint(recipient[0], Id, 1, `ipfs://${cid}`, \"0x\")\r\n      .then((transactionHash) => transactionHash.wait())\r\n      .then((ricit) => {\r\n        console.log(\"receipt::\", ricit);\r\n        State.update({\r\n          link: `${\r\n            contractAddresses[state.selectedChain][2] + ricit.transactionHash\r\n          }`,\r\n        });\r\n      });\r\n  });\r\n};\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  console.log(\"accounts:\", accounts, state.sender);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    Ethers.provider()\r\n      .getNetwork()\r\n      .then((data) => {\r\n        State.update({\r\n          selectedChain: data.chainId,\r\n        });\r\n      });\r\n  }\r\n\r\n  console.log(\"in between\", state.sender);\r\n\r\n  if (accountId) {\r\n    State.update({ sender: accountId });\r\n    State.update({\r\n      selectedChain: \"0\",\r\n    });\r\n  }\r\n}\r\nState.init({\r\n  title: \"\",\r\n  description: \"\",\r\n  showAlert: true,\r\n  toastMessage: \"\",\r\n});\r\nconst onChangeTitle = (title) => {\r\n  State.update({\r\n    title,\r\n  });\r\n};\r\n\r\nconst handleChainChange = (event) => {\r\n  console.log(\r\n    \"get what we doing:\",\r\n    event.target.value || \"no value from event?\",\r\n    event.target.value == \"0\",\r\n    !accountId\r\n  );\r\n  if (event.target.value == \"0\") {\r\n    if (!accountId) {\r\n      console.log(\"not what we thought,:\", accountId);\r\n      State.update({\r\n        showAlert: true,\r\n        toastMessage: \"Please log in before continuing\",\r\n      });\r\n      return;\r\n    }\r\n    State.update({\r\n      selectedChain: event.target.value,\r\n    });\r\n  }\r\n  console.log(\"encts here\", Ethers.send);\r\n  Ethers.send(\"wallet_switchEthereumChain\", [\r\n    {\r\n      chainId: \"0x\" + Number(event.target.value).toString(16),\r\n    },\r\n  ]).then((data) => console.log(\"done!!!\", data));\r\n  console.log(\"what happens after\");\r\n  State.update({\r\n    selectedChain: event.target.value,\r\n  });\r\n  console.log(\"afters\", state.selectedChain);\r\n};\r\n\r\nconst onChangeDesc = (description) => {\r\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\r\n  State.update({\r\n    description,\r\n  });\r\n};\r\n// if (state.sender === undefined) {\r\n//   console.log(\"of course it's undefined\", ethers);\r\n//   const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n//   console.log(\"account\", accounts);\r\n//   if (accounts.length) {\r\n//     State.update({ sender: accounts[0] });\r\n//     console.log(\"set sender\", accounts[0]);\r\n//   }\r\n// }\r\n\r\nconst Heading = styled.p`\r\n  margin: 10px auto 10px auto;\r\n  font-size: 1em;\r\n  color:#0f1d40;\r\n  width:60%;\r\n  text-align: center;\r\n  font-family: \"SF Pro Display\",sans-serif;\r\n`;\r\n\r\nconst ImageUploadCard = styled.div`\r\ndisplay:flex;\r\nflex-flow: column nowrap;\r\nalign-items: center;\r\n  width:80%;\r\n  border: 2px dashed #0d99ff;\r\n  border-radius: 1rem;\r\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\r\n  margin:30px auto;\r\n  padding:1.5rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  display: grid;\r\n  gap: 3rem;\r\n  align-content:center;\r\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\r\n  justify-content: center;\r\n  // background: linear-gradient(180deg,#e4f1fb,hsla(0,0%,85.1%,0));\r\n  margin-top: 20px;\r\n  width:100%;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst Text = styled.p`\r\nfont-size: .9rem;\r\ncolor: #525c76;\r\nline-height:1.rem;\r\nmargin: 3px;\r\n`;\r\n\r\nconst Elipse = styled.div`\r\nbackground-color:#dff3f9;\r\nheight: 100px;\r\nwidth: 100px;\r\nborder-radius: 50%;\r\n`;\r\n\r\nconst Card = styled.div`\r\npadding: 1em;\r\nborder: 1px solid #e5e8eb;\r\ngap: 2em;\r\nmargin: 10px auto;\r\nborder-radius: .7em;\r\n`;\r\n\r\nconst ImageCard = styled.div`\r\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\r\n  height:100%;\r\n  max-height:100%;\r\n  width: 90%;\r\n  max-width: 500px;\r\n  border-radius: 1rem;\r\n  &>img{\r\n  object-fit: cover;\r\n  width: 100%;\r\n  height: 100%;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: block;\r\n  padding:.5em;\r\n  width:100%;\r\n  border: 1px solid #e5e8eb;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  background: #f4f5f6;\r\n  color: #525c76;\r\n  :focus{\r\n    border:1px solid #0d99ff;\r\n  }\r\n  ::placeholder {\r\n    color: palevioletred;\r\n  }\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  display: block;\r\n  padding:.5em;\r\n  width:100%;\r\n  border: 1px solid #e5e8eb;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  background: #f4f5f6;\r\n  color: #525c76;\r\n  :focus{\r\n    border:1px solid #0d99ff;\r\n  }\r\n`;\r\n\r\nconst SelectTag = styled.select`\r\n  height: fit-content;\r\n  width: 300px;\r\n`;\r\n\r\nconst ChainIcon = styled.option`\r\n  display: flex;\r\n  height: 130px;\r\n  padding: 1rem auto;\r\n  &>img{\r\n    height:100px;\r\n    width: 100px;\r\n    object-fit: contain;\r\n  }\r\n`;\r\n\r\nif (!state.sender) {\r\n  console.log(\"Please login\");\r\n  State.update({\r\n    showAlert: true,\r\n    toastMessage: \"Please Sign in or connect a wallet\",\r\n  });\r\n}\r\n\r\nreturn (\r\n  <>\r\n    {state.showAlert && (\r\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\r\n    )}\r\n    <Heading className=\"text-center fs-2 fw-bold\">\r\n      Mint NFT on Multiple chains\r\n    </Heading>\r\n    <Main className=\"container-fluid\">\r\n      {!state.image.cid ? (\r\n        <div className=\"flex-grow-1\">\r\n          <Heading>\r\n            Upload an image to create an NFT any of our supported blockchains\r\n            super fast!\r\n          </Heading>\r\n          <ImageUploadCard className=\"flex-grow-1\">\r\n            <Elipse />\r\n            <IpfsImageUpload\r\n              image={state.image}\r\n              className=\"btn text-decoration-none link-primary pe-auto\"\r\n            />\r\n            <div>\r\n              {\r\n                //   <Heading\r\n                //   onDrop={handleDrop}\r\n                //   onDragOver={(event) => event.preventDefault()}\r\n                // >\r\n                //   Drag and Drop your image file here\r\n                // </Heading>\r\n              }\r\n              <Text>\r\n                We support .jpg, .jpeg, .png, .webp, .gif files and deploy to\r\n                Celo, Algorand, Near, and Polygon\r\n              </Text>\r\n              <Text>Max file size: 20mb</Text>\r\n            </div>\r\n          </ImageUploadCard>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <Card className=\"d-flex flex-column align-items-center w-100\">\r\n            <div>\r\n              <IpfsImageUpload\r\n                image={state.image}\r\n                className=\"btn btn-outline-primary border-0 rounded-3\"\r\n              />\r\n            </div>\r\n            <ImageCard>\r\n              <img\r\n                src={`https://ipfs.io/ipfs/` + state.image.cid}\r\n                alt=\"uploaded image\"\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                className=\"rounded-3\"\r\n              />\r\n            </ImageCard>\r\n          </Card>\r\n          <div>\r\n            <Card>\r\n              {state.sender && Ethers.provider() ? (\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\r\n                  <select\r\n                    className=\"form-select\"\r\n                    value={state.selectedChain}\r\n                    onChange={handleChainChange}\r\n                  >\r\n                    {chains.map((chain) => (\r\n                      <ChainIcon key={chain.id} value={chain.id}>\r\n                        {chain.name}\r\n                      </ChainIcon>\r\n                    ))}\r\n                  </select>\r\n                  {state.link && (\r\n                    <a href={`${state.link}`} target=\"_blank\">\r\n                      View Transaction\r\n                    </a>\r\n                  )}\r\n                </div>\r\n              ) : state.sender ? (\r\n                <div>\r\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\r\n                  <SelectTag\r\n                    className=\"form-select\"\r\n                    value={state.selectedChain}\r\n                    onChange={handleChainChange}\r\n                  >\r\n                    <option disabled selected>\r\n                      Select a Chain\r\n                    </option>\r\n                    {chains.map((chain) => (\r\n                      <ChainIcon key={chain.id} value={chain.id}>\r\n                        <span>{chain.name}</span>\r\n                      </ChainIcon>\r\n                    ))}\r\n                  </SelectTag>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary mt-3\"\r\n                    onClick={handleMint}\r\n                  >\r\n                    Mint to {contractAddresses[state.selectedChain][1]}\r\n                  </button>\r\n                  <div>\r\n                    <Web3Connect\r\n                      className=\"btn mt-3\"\r\n                      connectLabel=\"Connect with Ethereum Wallet\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <Web3Connect\r\n                  className=\"btn mt-3\"\r\n                  connectLabel=\"Connect with Wallet\"\r\n                />\r\n              )}\r\n            </Card>\r\n            <Card>\r\n              <Card>\r\n                Title:\r\n                <Input\r\n                  type=\"text\"\r\n                  value={state.title || \"\"}\r\n                  onChange={(e) => onChangeTitle(e.target.value)}\r\n                />\r\n              </Card>\r\n              <Card>\r\n                Description:\r\n                <TextArea\r\n                  type=\"text\"\r\n                  value={state.description || \"\"}\r\n                  onChange={(e) => onChangeDesc(e.target.value)}\r\n                />\r\n              </Card>\r\n            </Card>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary d-flex flex-column align-items-center mx-auto\"\r\n              onClick={handleMint}\r\n            >\r\n              Mint to {contractAddresses[state.selectedChain][1]}\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Main>\r\n    <h4 className=\"text-center mt-5\">\r\n      \ud83d\udca7\r\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        GenaDrop\r\n      </a>\r\n      <Widget\r\n        src=\"miraclx.near/widget/Attribution\"\r\n        props={{ authors: [ownerId], dep: true }}\r\n      />\r\n    </h4>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/GenaDropmultichainminter", "__row_index": 1}