{"tx_hash": "FnzWi9uQDyTVdgfzBsrLhTrWns7dZCuGEMea5iXvd4qt", "action_id_social": "65wvghn1Y6TjbN7HJ87t3GeSpid8xrdTE4KG5zKdSSED-0-widget", "block_id": 89063099, "block_timestamp": "2023-04-07 23:15:49.965", "signer_id": "jgodwill.near", "widget_name": "genadropMinter", "source_code": "let accountId = context.accountId;\r\n\r\nif (!accountId) {\r\n  return \"Please sign in with NEAR wallet\";\r\n}\r\n\r\nconst profile = socialGetr(`${accountId}/profile`);\r\n\r\nif (profile === null) {\r\n  IpfsImageUpload();\r\n  return \"Loading\";\r\n}\r\n\r\nconst handleMint = () => {\r\n  if (!(state.title && state.description && state.image.cid)) {\r\n    return;\r\n  }\r\n  const metadata = {\r\n    name: state.title,\r\n    description: state.description,\r\n    properties: [],\r\n    image: `ipfs://${state.image.cid}`,\r\n  };\r\n  console.log(\"come\", metadata);\r\n  asyncFetch(\"https://ipfs.near.social/add\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    },\r\n    body: metadata,\r\n  }).then((res) => {\r\n    console.log(\"GO ON SOUN\", res);\r\n    const cid = res.body.cid;\r\n    const gas = 200000000000000;\r\n    const deposit = 10000000000000000000000;\r\n    Near.call([\r\n      {\r\n        contractName: \"genadrop-contract.nftgen.near\",\r\n        methodName: \"nft_mint\",\r\n        args: {\r\n          token_id: `${Date.now()}`,\r\n          metadata: {\r\n            title: state.title,\r\n            description: state.description,\r\n            media: `https://ipfs.io/ipfs/${state.image.cid}`,\r\n            reference: `ipfs://${cid}`,\r\n          },\r\n          receiver_id: accountId,\r\n        },\r\n        gas: gas,\r\n        deposit: deposit,\r\n      },\r\n    ]);\r\n  });\r\n};\r\n\r\ninitState({\r\n  title: \"\",\r\n  description: \"\",\r\n});\r\n\r\nconst onChangeTitle = (title) => {\r\n  State.update({\r\n    title,\r\n  });\r\n};\r\n\r\nconst onChangeDesc = (description) => {\r\n  State.update({\r\n    description,\r\n  });\r\n};\r\n\r\nconst ImageUploadCard = styled.div`\r\ndisplay:flex;\r\nflex-flow: column nowrap;\r\nalign-items: center;\r\n  width:80%;\r\n  border: 2px dashed #0d99ff;\r\n  border-radius: 1rem;\r\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\r\n  margin:30px auto;\r\n  padding:1.5rem;\r\n  text-align: center;\r\n`;\r\nconst Main = styled.div`\r\n  font-family: \"SF Pro Display\",sans-serif;\r\n`;\r\n\r\n// const handleDrop = (event) => {\r\n//   event.preventDefault();\r\n\r\n//   const file = event.dataTransfer.files[0];\r\n//   const reader = new FileReader();\r\n\r\n//   reader.onloadend = () => {\r\n//     this.setState({\r\n//       file: file,\r\n//       previewUrl: reader.result,\r\n//       showPreview: true,\r\n//     });\r\n//   };\r\n\r\n//   reader.readAsDataURL(file);\r\n// };\r\n\r\nconst Heading = styled.p`\r\n  margin: 10px auto 10px auto;\r\n  font-size: 1em;\r\n  color:#0f1d40;\r\n  width:60%;\r\n  text-align: center;\r\n  font-family: \"SF Pro Display\",sans-serif;\r\n`;\r\n\r\nconst Elipse = styled.div`\r\nbackground-color:#eff3f9;\r\nheight: 100px;\r\nwidth: 100px;\r\nborder-radius: 50%;\r\n`;\r\n\r\nconst Text = styled.p`\r\nfont-size: .9rem;\r\ncolor: #525c76;\r\nline-height:1.rem;\r\nmargin: 3px;\r\n`;\r\n\r\nconst Card = styled.div`\r\npadding: 1em;\r\nborder: 1px solid #e5e8eb;\r\ngap: 2em;\r\nmargin: 10px auto;\r\nborder-radius: .7em;\r\n`;\r\n\r\nconst ImageCard = styled.div`\r\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\r\n  max-width: 500px;\r\n  height:500px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: block;\r\n  padding:.5em;\r\n  width:100%;\r\n  border: 1px solid #e5e8eb;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  background: #f4f5f6;\r\n  color: #525c76;\r\n  :focus{\r\n    border:1px solid #0d99ff;\r\n  }\r\n  ::placeholder {\r\n    color: palevioletred;\r\n  }\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  display: block;\r\n  padding:.5em;\r\n  width:100%;\r\n  border: 1px solid #e5e8eb;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  background: #f4f5f6;\r\n  color: #525c76;\r\n  :focus{\r\n    border:1px solid #0d99ff;\r\n  }\r\n  ::placeholder {\r\n    color: palevioletred;\r\n  }\r\n`;\r\nreturn (\r\n  <Main className=\"vh-100 overflow-scroll\">\r\n    {state.image.cid ? (\r\n      <div>\r\n        <Heading className=\"text-center fs-2\">Mint NFT on genadrop</Heading>\r\n        <Card className=\"d-flex flex-column align-items-center\">\r\n          <ImageCard>\r\n            <img\r\n              src={`https://ipfs.io/ipfs/` + state.image.cid}\r\n              alt=\"uploaded image\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              className=\"rounded-3\"\r\n            />\r\n          </ImageCard>\r\n          <div>\r\n            <IpfsImageUpload\r\n              image={state.image}\r\n              className=\"btn btn-outline-primary border-0 rounded-3\"\r\n            />\r\n          </div>\r\n        </Card>\r\n        <Card>\r\n          <h5>Asset Detials</h5>\r\n          <Card>\r\n            Title:\r\n            <Input\r\n              type=\"text\"\r\n              required\r\n              onChange={(e) => onChangeTitle(e.target.value)}\r\n            />\r\n          </Card>\r\n          <Card>\r\n            Description:\r\n            <TextArea\r\n              type=\"text\"\r\n              required\r\n              onChange={(e) => onChangeDesc(e.target.value)}\r\n            />\r\n          </Card>\r\n        </Card>\r\n        <div className=\"d-flex justify-content-center mb-2\">\r\n          <button onClick={handleMint}>Mint</button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <Heading>\r\n          Upload an image to create NFTs on any of our supported blockchains\r\n          super fast!\r\n        </Heading>\r\n        <ImageUploadCard className=\"flex-grow-1\">\r\n          <Elipse />\r\n          <IpfsImageUpload\r\n            image={state.image}\r\n            className=\"btn text-decoration-none link-primary pe-auto\"\r\n          />\r\n          <div>\r\n            {\r\n              //   <Heading\r\n              //   onDrop={handleDrop}\r\n              //   onDragOver={(event) => event.preventDefault()}\r\n              // >\r\n              //   Drag and Drop your image file here\r\n              // </Heading>\r\n            }\r\n            <Text>\r\n              We support .jpg, .jpeg, .png, .webp, .gif files and deploy to Near\r\n            </Text>\r\n            <Text>Max file size: 20mb</Text>\r\n          </div>\r\n        </ImageUploadCard>\r\n      </div>\r\n    )}\r\n  </Main>\r\n);\r\n", "metadata": NaN, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/genadropMinter", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.genadrop": NaN, "metadata.tags.ipfs": NaN, "metadata.tags.mint": NaN, "metadata.tags.nft": NaN, "metadata.tags.mintbase": NaN, "metadata.tags.nft-minter": NaN, "metadata.tags.onboard": NaN, "metadata.tags.onboard-dao": NaN, "metadata.tags.onboarddao": NaN, "metadata.tags.dapp": NaN, "branch.draft.": NaN, "branch.draft": NaN}