{"tx_hash": "2MfU2fhnaRMszahsFMtsNUWW3rTQHuTFppow22asL9KV", "action_id_social": "6bhkbc3CaSpBqpYPSCH3Eji3M2uzZ4ikmJWAWFWQnuH8-0-widget", "block_id": 89122284, "block_timestamp": "2023-04-08 17:45:46.817", "signer_id": "jgodwill.near", "widget_name": "genadropMinter", "source_code": "let accountId = context.accountId;\n\n// if (!accountId) {\n//   return \"Please sign in with NEAR wallet\";\n// }\n\nconst profile = socialGetr(`${accountId}/profile`);\n\nif (profile === null) {\n  IpfsImageUpload();\n  return \"Loading\";\n}\n\nconst handleMint = () => {\n  if (!state.image.cid) {\n    return;\n  }\n  if (!accountId) {\n    console.log(\"Please login\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please log in before continuing\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.title) {\n    console.log(\"Please Enter title\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title before continuing\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    console.log(\"Please Enter desc\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description before continuing\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n    console.log(\"come\", metadata);\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      console.log(\"GO ON SOUN\", res);\n      const cid = res.body.cid;\n      const gas = 200000000000000;\n      const deposit = 10000000000000000000000;\n      Near.call([\n        {\n          contractName: \"genadrop-contract.nftgen.near\",\n          methodName: \"nft_mint\",\n          args: {\n            token_id: `${Date.now()}`,\n            metadata: {\n              title: state.title,\n              description: state.description,\n              media: `https://ipfs.io/ipfs/${state.image.cid}`,\n              reference: `ipfs://${cid}`,\n            },\n            receiver_id: accountId,\n          },\n          gas: gas,\n          deposit: deposit,\n        },\n      ]);\n    });\n  }\n};\n\ninitState({\n  title: \"\",\n  description: \"\",\n  showAlert: false,\n  toastMessage: \"\",\n});\n\nconst onChangeTitle = (title) => {\n  State.update({\n    title,\n  });\n};\n\nconst onChangeDesc = (description) => {\n  State.update({\n    description,\n  });\n};\n\nconst ImageUploadCard = styled.div`\ndisplay:flex;\nflex-flow: column nowrap;\nalign-items: center;\n  width:80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\n  margin:30px auto;\n  padding:1.5rem;\n  text-align: center;\n`;\nconst Main = styled.div`\nposition:relative;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\n// const handleDrop = (event) => {\n//   event.preventDefault();\n\n//   const file = event.dataTransfer.files[0];\n//   const reader = new FileReader();\n\n//   reader.onloadend = () => {\n//     this.setState({\n//       file: file,\n//       previewUrl: reader.result,\n//       showPreview: true,\n//     });\n//   };\n\n//   reader.readAsDataURL(file);\n// };\n\nconst Heading = styled.p`\n  margin: 10px auto 10px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst Toast = styled.div`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-conten: center;\n  bottom: 60px;\n  right: 20px;\n  background-color: red;\n  color: #fff;\n  padding: 16px;\n  border-radius: 8px;\n  z-index: 100;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  line-height:1;\n`;\n\nconst Elipse = styled.div`\nbackground-color:#eff3f9;\nheight: 100px;\nwidth: 100px;\nborder-radius: 50%;\n`;\n\nconst Text = styled.p`\nfont-size: .9rem;\ncolor: #525c76;\nline-height:1.rem;\nmargin: 3px;\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n`;\n\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height:fit-content;\n  max-height:500px;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  &>img{\n  object-fit: contain;\n  }\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n`;\nreturn (\n  <Main className=\"container-fluid\">\n    {!accountId && <p>Please sign in with NEAR wallet</p>}\n    <Heading className=\"text-center fs-2 fw-bold\">Mint NFT on genadrop</Heading>\n    {state.image.cid ? (\n      <div>\n        <Card className=\"d-flex flex-column align-items-center\">\n          <ImageCard>\n            <img\n              src={`https://ipfs.io/ipfs/` + state.image.cid}\n              alt=\"uploaded image\"\n              width=\"100%\"\n              height=\"100%\"\n              className=\"rounded-3\"\n            />\n          </ImageCard>\n          <div>\n            <IpfsImageUpload\n              image={state.image}\n              className=\"btn btn-outline-primary border-0 rounded-3\"\n            />\n          </div>\n        </Card>\n        <Card>\n          <h5>Asset Detials</h5>\n          <Card>\n            Title:\n            <Input\n              type=\"text\"\n              onChange={(e) => onChangeTitle(e.target.value)}\n            />\n          </Card>\n          <Card>\n            Description:\n            <TextArea\n              type=\"text\"\n              onChange={(e) => onChangeDesc(e.target.value)}\n            />\n          </Card>\n        </Card>\n        <div className=\"d-flex justify-content-center mb-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={handleMint}\n          >\n            Mint\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div>\n        <Heading>Upload an image to create an NFT on NEAR</Heading>\n        <ImageUploadCard className=\"flex-grow-1\">\n          <Elipse />\n          <IpfsImageUpload\n            image={state.image}\n            className=\"btn text-decoration-none link-primary pe-auto\"\n          />\n          <div>\n            {\n              //   <Heading\n              //   onDrop={handleDrop}\n              //   onDragOver={(event) => event.preventDefault()}\n              // >\n              //   Drag and Drop your image file here\n              // </Heading>\n            }\n            <Text>\n              We support .jpg, .jpeg, .png, .webp, .gif files and deploy to Near\n            </Text>\n            <Text>Max file size: 20mb</Text>\n          </div>\n        </ImageUploadCard>\n      </div>\n    )}\n    {state.showAlert && (\n      <Toast>\n        <p>{state.toastMessage}</p>\n      </Toast>\n    )}\n  </Main>\n);\n", "metadata": NaN, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/genadropMinter", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.genadrop": NaN, "metadata.tags.ipfs": NaN, "metadata.tags.mint": NaN, "metadata.tags.nft": NaN, "metadata.tags.mintbase": NaN, "metadata.tags.nft-minter": NaN, "metadata.tags.onboard": NaN, "metadata.tags.onboard-dao": NaN, "metadata.tags.onboarddao": NaN, "metadata.tags.dapp": NaN, "branch.draft.": NaN, "branch.draft": NaN}