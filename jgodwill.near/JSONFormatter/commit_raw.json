{"tx_hash": "G7dmDZjzbTp5WzQgzorQr33ePMmQtWL6EWs3TfBFGKRF", "action_id_social": "2jKH8i5ERnB84JdMZ6Y6sWUzqdbhD8bj28fjhvoxSmDV-0-widget", "block_id": 87738212, "block_timestamp": "2023-03-20 18:26:54.740", "signer_id": "jgodwill.near", "widget_name": "JSONFormatter", "source_code": "async function formatClickHandler() {\r\n  let formattedJsonStr = \"\";\r\n  let fixedErrors = \"\";\r\n  try {\r\n    // Validate input as JSON according to RFC 8259\r\n    const jsonObj = JSON.parse(jsonStr);\r\n    // Stringify the JSON object with indentation and sorting keys\r\n    formattedJsonStr = JSON.stringify(jsonObj, null, 4);\r\n  } catch (error) {\r\n    // If parsing fails, try to fix common errors in the JSON string\r\n    let fixedJsonStr = jsonStr\r\n      // Fix missing quotes around property names\r\n      .replace(/([{,]\\s*)([a-zA-Z0-9_$]+)\\s*:/g, (match, p1, p2) => {\r\n        fixedErrors += `Missing quotes around \"${p2}\"\\n`;\r\n        return `${p1}\"${p2}\":`;\r\n      })\r\n      // Fix trailing commas in arrays and objects\r\n      .replace(/,(?=\\s*([}\\]]))/g, (match) => {\r\n        fixedErrors += `Trailing comma removed\\n`;\r\n        return \"\";\r\n      })\r\n      // Fix single quotes around property names and string values\r\n      .replace(/'/g, (match) => {\r\n        fixedErrors += `Single quotes replaced with double quotes\\n`;\r\n        return '\"';\r\n      })\r\n      // Fix unquoted property values\r\n      .replace(\r\n        /([{,]\\s*)([a-zA-Z0-9_$]+)\\s*:\\s*([a-zA-Z0-9_$]+)\\s*(?=([,}]))/g,\r\n        (match, p1, p2, p3, p4) => {\r\n          fixedErrors += `Unquoted value \"${p3}\" surrounded with quotes\\n`;\r\n          return `${p1}\"${p2}\":\"${p3}\"${p4}`;\r\n        }\r\n      )\r\n      // Fix invalid escape sequences in string values\r\n      .replace(/\\\\([^\"\\\\/bfnrtu])/g, (match, p1) => {\r\n        fixedErrors += `Invalid escape sequence \"\\\\${p1}\" removed\\n`;\r\n        return \"\";\r\n      });\r\n    try {\r\n      // Try to parse the fixed JSON string\r\n      const jsonObj = JSON.parse(fixedJsonStr);\r\n      // Stringify the JSON object with indentation and sorting keys\r\n      formattedJsonStr = JSON.stringify(jsonObj, null, 4);\r\n    } catch (error) {\r\n      // If parsing still fails, return an error message\r\n      formattedJsonStr = `Error: ${error.message}`;\r\n    }\r\n  }\r\n  setPrettifiedJson(formattedJsonStr);\r\n  setFixedErrors(fixedErrors);\r\n}\r\n\r\nasync function dragAndDropHandler(event) {\r\n  event.preventDefault();\r\n  const file = event.dataTransfer.files[0];\r\n  const fileReader = new FileReader();\r\n  fileReader.onload = function () {\r\n    const fileData = fileReader.result;\r\n    setJsonStr(fileData);\r\n    setPrettifiedJson(\"\");\r\n    setFixedErrors(\"\");\r\n  };\r\n  fileReader.readAsText(file);\r\n}\r\n\r\nasync function fileUploadHandler(event) {\r\n  const file = event.target.files[0];\r\n  const fileReader = new FileReader();\r\n  fileReader.onload = function () {\r\n    const fileData = fileReader.result;\r\n    setJsonStr(fileData);\r\n    setPrettifiedJson(\"\");\r\n    setFixedErrors(\"\");\r\n  };\r\n  fileReader.readAsText(file);\r\n}\r\n\r\nasync function urlInputHandler(event) {\r\n  const url = event.target.value;\r\n  try {\r\n    const response = await fetch(url);\r\n    const jsonData = await response.json();\r\n    const jsonStr = JSON.stringify(jsonData, null, 4);\r\n    setJsonStr(jsonStr);\r\n    setPrettifiedJson(\"\");\r\n    setFixedErrors(\"\");\r\n  } catch (error) {\r\n    console.error(error);\r\n    setJsonStr(\"\");\r\n    setPrettifiedJson(\"Error: Failed to fetch JSON data from URL\");\r\n    setFixedErrors(\"\");\r\n  }\r\n}\r\n\r\nconst clickCopyHandler = () => {\r\n  navigator.clipboard.writeText(prettifiedJson);\r\n};\r\n\r\nconst fileDownloadHandler = () => {\r\n  const element = document.createElement(\"a\");\r\n  const file = new Blob([prettifiedJson], { type: \"text/plain\" });\r\n  element.href = URL.createObjectURL(file);\r\n  element.download = \"formatted.json\";\r\n  document.body.appendChild(element);\r\n  element.click();\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <div class=\"container-fluid\">\r\n      <h3 class=\"text-center\">Input JSON data</h3>\r\n      <textarea\r\n        class=\"container-fluid\"\r\n        rows=\"10\"\r\n        value={jsonStr}\r\n        onChange={(e) => setJsonStr(e.target.value)}\r\n        onDrop={dragAndDropHandler}\r\n        onDragOver={(e) => e.preventDefault()}\r\n        placeholder=\"Enter or drag and drop JSON data here...\"\r\n      />\r\n      <div className=\"input-actions\">\r\n        <input type=\"file\" accept=\".json\" onChange={fileUploadHandler} />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter URL to fetch JSON data\"\r\n          onBlur={urlInputHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n    <button onClick={formatClickHandler}>Format JSON</button>\r\n    {prettifiedJson && (\r\n      <>\r\n        <div class=\"output-container\">\r\n          <h3>Formatted JSON data</h3>\r\n          {fixedErrors && (\r\n            <div class=\"border\">\r\n              <h3>Fixed errors</h3>\r\n              <pre>{fixedErrors}</pre>\r\n            </div>\r\n          )}\r\n          <textarea\r\n            class=\"container-fluid\"\r\n            rows=\"10\"\r\n            value={prettifiedJson}\r\n            readOnly\r\n          />\r\n        </div>\r\n\r\n        <div class=\"output-actions\">\r\n          <button onClick={clickCopyHandler}>Copy to clipboard</button>\r\n          <button onClick={fileDownloadHandler}>Download as file</button>\r\n        </div>\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/JSONFormatter", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.json": NaN, "metadata.tags.minorityprogrammers": NaN, "metadata.tags.onboard-dao": NaN, "metadata.tags.app": NaN}