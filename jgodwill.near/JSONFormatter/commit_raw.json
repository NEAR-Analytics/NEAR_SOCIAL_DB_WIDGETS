{"tx_hash": "54YEQciDsb5V6eDW7nDCzb3eZFCR5HnyL1H72jewLfdm", "action_id_social": "9iDqyhtUuR9yHknDBQcPjBzHZWZgxNXn5M3HMtEfGmzU-0-widget", "block_id": 87850286, "block_timestamp": "2023-03-22 06:10:09.607", "signer_id": "jgodwill.near", "widget_name": "JSONFormatter", "source_code": "State.init({\n  jsonStr: \"\",\n  prettifiedJson: \"\",\n  fiexedJsonErrors: \"\",\n});\nasync function formatClickHandler() {\n  let formattedJsonStr = \"\";\n  let fixedErrors = \"\";\n\n  try {\n    // Validate input as JSON according to RFC 8259\n    const jsonObj = JSON.parse(state.jsonStr);\n    // Stringify the JSON object with indentation and sorting keys\n    formattedJsonStr = JSON.stringify(jsonObj, null, 4);\n  } catch (error) {\n    // If parsing fails, try to fix common errors in the JSON string\n    let fixedJsonStr = jsonStr\n      // Fix missing quotes around property names\n      .replace(/([{,]\\s*)([a-zA-Z0-9_$]+)\\s*:/g, (match, p1, p2) => {\n        fixedErrors += `Missing quotes around \"${p2}\"\\n`;\n        return `${p1}\"${p2}\":`;\n      })\n      // Fix trailing commas in arrays and objects\n      .replace(/,(?=\\s*([}\\]]))/g, (match) => {\n        fixedErrors += `Trailing comma removed\\n`;\n        return \"\";\n      })\n      // Fix single quotes around property names and string values\n      .replace(/'/g, (match) => {\n        fixedErrors += `Single quotes replaced with double quotes\\n`;\n        return '\"';\n      })\n      // Fix unquoted property values\n      .replace(\n        /([{,]\\s*)([a-zA-Z0-9_$]+)\\s*:\\s*([a-zA-Z0-9_$]+)\\s*(?=([,}]))/g,\n        (match, p1, p2, p3, p4) => {\n          fixedErrors += `Unquoted value \"${p3}\" surrounded with quotes\\n`;\n          return `${p1}\"${p2}\":\"${p3}\"${p4}`;\n        }\n      )\n      // Fix invalid escape sequences in string values\n      .replace(/\\\\([^\"\\\\/bfnrtu])/g, (match, p1) => {\n        fixedErrors += `Invalid escape sequence \"\\\\${p1}\" removed\\n`;\n        return \"\";\n      });\n    try {\n      // Try to parse the fixed JSON string\n      const jsonObj = JSON.parse(fixedJsonStr);\n      // Stringify the JSON object with indentation and sorting keys\n      formattedJsonStr = JSON.stringify(jsonObj, null, 4);\n    } catch (error) {\n      // If parsing still fails, return an error message\n      formattedJsonStr = `Error: ${error.message}`;\n    }\n  }\n  State.update({ prettifiedJson: formattedJsonStr });\n  State.update({ fiexedJsonErrors: fixedErrors });\n}\n\nasync function dragAndDropHandler(event) {\n  event.preventDefault();\n  const file = event.dataTransfer.files[0];\n  const fileReader = new FileReader();\n  fileReader.onload = function () {\n    const fileData = fileReader.result;\n    State.update({ jsonStr: fileData });\n    State.update({ prettifiedJson: \"\" });\n    State.update({ fiexedJsonErrors: \"\" });\n  };\n  fileReader.readAsText(file);\n}\n\nasync function fileUploadHandler({ target }) {\n  const file = target.files[0];\n  const fileReader = new FileReader();\n  fileReader.onload = function () {\n    const fileData = fileReader.result;\n    State.update({ jsonStr: fileData });\n    State.update({ prettifiedJson: \"\" });\n    State.update({ fiexedJsonErrors: \"\" });\n  };\n  fileReader.readAsText(file);\n}\n\nasync function urlInputHandler(event) {\n  const url = event.target.value;\n  try {\n    const response = await fetch(url);\n    const jsonData = await response.json();\n    const newJsonStr = JSON.stringify(jsonData, null, 4);\n    State.update({ jsonStr: newJsonStr });\n    State.update({ prettifiedJson: \"\" });\n    State.update({ fiexedJsonErrors: \"\" });\n  } catch (error) {\n    console.error(error);\n    State.update({ jsonStr: \"\" });\n    State.update({\n      prettifiedJson: \"Error: Failed to fetch JSON data from URL\",\n    });\n    State.update({ fiexedJsonErrors: \"\" });\n  }\n}\n\nconst clickCopyHandler = () => {\n  navigator.clipboard.writeText(prettifiedJson);\n};\n\nconst fileDownloadHandler = () => {\n  const element = document.createElement(\"a\");\n  const file = new Blob([prettifiedJson], { type: \"text/plain\" });\n  element.href = URL.createObjectURL(file);\n  element.download = \"formatted.json\";\n  document.body.appendChild(element);\n  element.click();\n};\n\nconst changeHandler = ({ target }) => {\n  State.update({ jsonStr: target.value });\n};\n\nreturn (\n  <div>\n    <div class=\"container-fluid\">\n      <h3 class=\"text-center\">Input JSON data</h3>\n      <textarea\n        class=\"container-fluid\"\n        rows=\"10\"\n        value={state.jsonStr}\n        onChange={changeHandler}\n        onDrop={dragAndDropHandler}\n        onDragOver={(e) => e.preventDefault()}\n        placeholder=\"Enter or drag and drop JSON data here...\"\n      />\n      <div className=\"input-actions\">\n        <input type=\"file\" accept=\".json\" onChange={fileUploadHandler} />\n        <input\n          type=\"text\"\n          placeholder=\"Enter URL to fetch JSON data\"\n          onBlur={urlInputHandler}\n        />\n      </div>\n    </div>\n    <button onClick={formatClickHandler}>Format JSON</button>\n    {state.prettifiedJson && (\n      <>\n        <div class=\"output-container\">\n          <h3>Formatted JSON data</h3>\n          {state.fiexedJsonErrors && (\n            <div class=\"border\">\n              <h3>Fixed errors</h3>\n              <pre>{state.fiexedJsonErrors}</pre>\n            </div>\n          )}\n          <textarea\n            class=\"container-fluid\"\n            rows=\"10\"\n            value={state.prettifiedJson}\n            readOnly\n          />\n        </div>\n\n        <div class=\"output-actions\">\n          <button onClick={clickCopyHandler}>Copy to clipboard</button>\n          <button onClick={fileDownloadHandler}>Download as file</button>\n        </div>\n      </>\n    )}\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/JSONFormatter", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.json": NaN, "metadata.tags.minorityprogrammers": NaN, "metadata.tags.onboard-dao": NaN, "metadata.tags.app": NaN}