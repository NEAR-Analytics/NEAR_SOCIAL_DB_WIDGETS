{"tx_hash": "6s8yRLiLDn1H9xcm53HbbkG4ajr7wdb7H1hMujKeECv2", "action_id_social": "C8pvCMoDKgYdAkchee4WT4WtHc84mcXLVE1vSiCc4Tf-0-widget", "block_id": 93602579, "block_timestamp": "2023-06-06T17:56:29.900Z", "signer_id": "jgodwill.near", "widget_name": "GenaDrop.MultiChainMinter", "source_code": "const auroraCOntract = \"0xe53bC42B6b25a1d548B73636777a0599Fd27fE5c\";\nconst polygonContract = \"0x436AEceaEeC57b38a17Ebe71154832fB0fAFF878\";\nconst celoContract = \"0xC291846A587cf00a7CC4AF0bc4EEdbC9c3340C36\";\nconst avaxContract = \"0x43dBdfcAADD0Ea7aD037e8d35FDD7c353B5B435b\";\nconst arbitrumContract = \"0x959a2945185Ec975561Ac0d0b23F03Ed1b267925\";\nconst nearContract = \"nft.genadrop.near\";\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst mintSingle = [\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\n];\nlet accountId = context.accountId;\nconst contractAddresses = {\n  137: [polygonContract, \"Polygon\", \"https://polygonscan.com/tx/\"],\n  1313161554: [auroraCOntract, \"Aurora\", \"https://explorer.aurora.dev/tx/\"],\n  42220: [celoContract, \"Celo\", \"https://explorer.celo.org/mainnet/tx/\"],\n  43114: [avaxContract, \"Avalanche\", \"https://snowtrace.io/tx/\"],\n  42161: [arbitrumContract, \"Arbitrum\", \"https://arbiscan.io/tx/\"],\n  0: [nearContract, \"Near\"],\n};\nconst chains = [\n  {\n    id: \"137\",\n    name: \"Polygon\",\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\n  },\n  {\n    id: \"42220\",\n    name: \"Celo\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\n  },\n  {\n    id: \"43114\",\n    name: \"Avax\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifhu5fytsjcmjluarfnu6kcdhaqz4rgdrbbzf6dlsmggqb7oi3w4e\",\n  },\n  {\n    id: \"42161\",\n    name: \"Arbitrum\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\n\nconst handleMint = () => {\n  console.log(\"it's here\", state.title && state.description && state.image.cid);\n  if (!state.image.cid) {\n    return;\n  }\n  if (!state.title) {\n    console.log(\"Please Enter title\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    if (state.selectedChain == \"0\") {\n      const gas = 200000000000000;\n      const deposit = 10000000000000000000000;\n      const metadata = {\n        name: state.title,\n        description: state.description,\n        properties: [],\n        image: `ipfs://${state.image.cid}`,\n      };\n      asyncFetch(\"https://ipfs.near.social/add\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n        },\n        body: metadata,\n      }).then((res) => {\n        const cid = res.body.cid;\n        const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n        console.log(\"in the promise\", res, Id);\n        Near.call([\n          {\n            contractName: \"genadrop-contract.nftgen.near\",\n            methodName: \"nft_mint\",\n            args: {\n              token_id: `${Date.now()}`,\n              metadata: {\n                title: state.title,\n                description: state.description,\n                media: `https://ipfs.io/ipfs/${state.image.cid}`,\n                reference: `ipfs://${cid}`,\n              },\n              receiver_id: state.recipient || accountId,\n            },\n            gas: gas,\n            deposit: deposit,\n          },\n        ]);\n      });\n      return;\n    }\n    console.log(\"passed checks\");\n    let networkId = Ethers.provider()._network.chainId;\n\n    const CA = contractAddresses[state.selectedChain][0] || \"137\";\n\n    console.log(\"CONTRACT ADD\", CA);\n\n    const contract = new ethers.Contract(\n      CA,\n      mintSingle,\n      Ethers.provider().getSigner()\n    );\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      const cid = res.body.cid;\n      const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n      console.log(\"in the promse\", res, Id);\n      const recipient = Ethers.send(\"eth_requestAccounts\", []);\n      contract\n        .mint(state.recipient || recipient[0], Id, 1, `ipfs://${cid}`, \"0x\")\n        .then((transactionHash) => transactionHash.wait())\n        .then((ricit) => {\n          console.log(\"receipt::\", ricit);\n          State.update({\n            link: `${\n              contractAddresses[state.selectedChain][2] + ricit.transactionHash\n            }`,\n          });\n        });\n    });\n  }\n};\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  console.log(\"accounts:\", accounts, state.sender);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    Ethers.provider()\n      .getNetwork()\n      .then((data) => {\n        State.update({\n          selectedChain: data.chainId,\n        });\n      });\n  }\n\n  console.log(\"in between\", state.sender);\n\n  State.update({\n    selectedChain: \"0\",\n  });\n}\nState.init({\n  title: \"\",\n  description: \"\",\n  recipient: \"\",\n  showAlert: false,\n  toastMessage: \"\",\n});\nconst onChangeTitle = (title) => {\n  console.log(\"go daddy\", state.recipient);\n  State.update({\n    title,\n  });\n};\n\nconst data = Social.keys(\"*/profile\", \"final\");\n\nif (!data) {\n  return \"Loading\";\n}\n\nconst accounts = Object.entries(data);\n\nconst allWidgets = [];\n\nfor (let i = 0; i < accounts.length; ++i) {\n  const accountId = accounts[i][0];\n  allWidgets.push(accountId);\n}\n\nconst onChangeRecipient = (recipient) => {\n  State.update({\n    recipient: recipient[0],\n  });\n};\n\nconst handleChainChange = (event) => {\n  console.log(\n    \"get what we doing:\",\n    event.target.value || \"no value from event?\",\n    event.target.value == \"0\",\n    !accountId\n  );\n  if (event.target.value == \"0\") {\n    if (!accountId) {\n      console.log(\"not what we thought,:\", accountId);\n      State.update({\n        showAlert: true,\n        toastMessage: \"Please log in before continuing\",\n      });\n      return;\n    }\n    State.update({\n      selectedChain: event.target.value,\n    });\n  }\n  console.log(\"encts here\", Ethers.send);\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0x\" + Number(event.target.value).toString(16),\n    },\n  ]).then((data) => console.log(\"done!!!\", data));\n  console.log(\"what happens after\");\n  State.update({\n    selectedChain: event.target.value,\n  });\n  console.log(\"afters\", state.selectedChain);\n};\n\nconst onChangeDesc = (description) => {\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\n  State.update({\n    description,\n  });\n};\n// if (state.sender === undefined) {\n//   console.log(\"of course it's undefined\", ethers);\n//   const accounts = Ethers.send(\"eth_requestAccounts\", []);\n//   console.log(\"account\", accounts);\n//   if (accounts.length) {\n//     State.update({ sender: accounts[0] });\n//     console.log(\"set sender\", accounts[0]);\n//   }\n// }\n\nconst Heading = styled.p`\n  margin: 3px auto 3px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  line-height:2.1rem;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst ImageUploadCard = styled.div`\ndisplay:flex;\nflex-flow: column nowrap;\nalign-items: center;\n  width:80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\n  margin:30px auto;\n  padding:1.5rem;\n  text-align: center;\n`;\n\nconst Main = styled.div`\n  display: grid;\n  gap: 3rem;\n  align-content:center;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  // background: linear-gradient(180deg,#e4f1fb,hsla(0,0%,85.1%,0));\n  margin-top: 5px;\n  width:100%;\n  padding: 1rem;\n`;\n\nconst Text = styled.p`\nfont-size: .9rem;\ncolor: #525c76;\nline-height:1.rem;\nmargin: 3px;\n`;\n\nconst Elipse = styled.div`\nbackground-color:#dff3f9;\nheight: 100px;\nwidth: 100px;\nborder-radius: 50%;\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n& input{\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n  box-shadow:none;\n    border:1px solid #0d99ff;\n  }\n  &::placeholder {\n    color: palevioletred;\n  }\n  }\n`;\n\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height:100%;\n  max-height:100%;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  &>img{\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  }\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n`;\n\nconst SelectTag = styled.select`\n  height: fit-content;\n  width: 300px;\n`;\n\nconst ChainIcon = styled.option`\n  display: flex;\n  height: 130px;\n  padding: 1rem auto;\n  &>img{\n    height:100px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\n\nif (!(state.sender || accountId)) {\n  console.log(\"Please login here now\");\n  State.update({\n    showAlert: true,\n    toastMessage: \"Please Sign in or connect a wallet\",\n  });\n}\n\nreturn (\n  <>\n    {state.showAlert && (\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n    )}\n    <Heading className=\"text-center fs-2 fw-bold\">\n      Mint NFT on Multiple chains\n    </Heading>\n    <Main className=\"container-fluid\">\n      {!state.image.cid ? (\n        <div className=\"flex-grow-1\">\n          <Heading>\n            Upload an image to create an NFT any of our supported blockchains\n            super fast!\n          </Heading>\n          <ImageUploadCard className=\"flex-grow-1\">\n            <Elipse />\n            <IpfsImageUpload\n              image={state.image}\n              className=\"btn text-decoration-none link-primary pe-auto\"\n            />\n            <div>\n              {\n                //   <Heading\n                //   onDrop={handleDrop}\n                //   onDragOver={(event) => event.preventDefault()}\n                // >\n                //   Drag and Drop your image file here\n                // </Heading>\n              }\n              <Text>\n                We support .jpg, .jpeg, .png, .webp, .gif files and deploy to\n                Celo, Algorand, Near, and Polygon\n              </Text>\n              <Text>Max file size: 20mb</Text>\n            </div>\n          </ImageUploadCard>\n        </div>\n      ) : (\n        <>\n          <Card className=\"d-flex flex-column align-items-center w-100\">\n            <div>\n              <IpfsImageUpload\n                image={state.image}\n                className=\"btn btn-outline-primary border-0 rounded-3\"\n              />\n            </div>\n            <ImageCard>\n              <img\n                src={`https://ipfs.io/ipfs/` + state.image.cid}\n                alt=\"uploaded image\"\n                width=\"100%\"\n                height=\"100%\"\n                className=\"rounded-3\"\n              />\n            </ImageCard>\n          </Card>\n          <div>\n            <Card>\n              {state.sender && Ethers.provider() ? (\n                <div className=\"form-group\">\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\n                  <select\n                    className=\"form-select\"\n                    value={state.selectedChain}\n                    onChange={handleChainChange}\n                  >\n                    {chains.map((chain) => (\n                      <ChainIcon key={chain.id} value={chain.id}>\n                        {chain.name}\n                      </ChainIcon>\n                    ))}\n                  </select>\n                  {state.link && (\n                    <a href={`${state.link}`} target=\"_blank\">\n                      View Transaction\n                    </a>\n                  )}\n                </div>\n              ) : state.sender ? (\n                <div>\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\n                  <SelectTag\n                    className=\"form-select\"\n                    value={state.selectedChain}\n                    onChange={handleChainChange}\n                  >\n                    <option disabled selected>\n                      Select a Chain\n                    </option>\n                    {chains.map((chain) => (\n                      <ChainIcon key={chain.id} value={chain.id}>\n                        <span>{chain.name}</span>\n                      </ChainIcon>\n                    ))}\n                  </SelectTag>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary mt-3\"\n                    onClick={handleMint}\n                  >\n                    Mint to {contractAddresses[state.selectedChain][1]}\n                  </button>\n                  <div>\n                    <Web3Connect\n                      className=\"btn mt-3\"\n                      connectLabel=\"Connect with Ethereum Wallet\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <Web3Connect\n                  className=\"btn mt-3\"\n                  connectLabel=\"Connect with Wallet\"\n                />\n              )}\n            </Card>\n            <Card>\n              <Card>\n                Title:\n                <Input\n                  type=\"text\"\n                  value={state.title || \"\"}\n                  onChange={(e) => onChangeTitle(e.target.value)}\n                />\n              </Card>\n              <Card>\n                Description:\n                <TextArea\n                  type=\"text\"\n                  value={state.description || \"\"}\n                  onChange={(e) => onChangeDesc(e.target.value)}\n                />\n              </Card>\n              <Card>\n                Mint To:\n                {/*<Input\n                  type=\"text\"\n                  placeholder={\n                    state.selectedChain == \"0\" ? accountId : state.sender\n                  }\n                  value={state.recipient}\n                  onChange={(e) => onChangeRecipient(e.target.value)}\n                />*/}\n                <Typeahead\n                  id=\"async-example\"\n                  className=\"type-ahead\"\n                  isLoading={isLoading}\n                  labelKey=\"search\"\n                  minLength={1}\n                  options={allWidgets}\n                  onChange={(value) => props.onChangeRecipient(value)}\n                  placeholder={\n                    state.selectedChain == \"0\" ? accountId : state.sender\n                  }\n                  // renderMenuItemChildren={(option: accountId) => (\n                  //   <div className=\"mb-2\">\n                  //     <Widget\n                  //       src=\"mob.near/widget/Profile\"\n                  //       props={{ accountId }}\n                  //     />\n                  //   </div>\n                  // )}\n                />\n              </Card>\n            </Card>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary d-flex flex-column align-items-center mx-auto\"\n              onClick={handleMint}\n            >\n              Mint to {contractAddresses[state.selectedChain][1]}\n            </button>\n          </div>\n        </>\n      )}\n    </Main>\n    <h4 className=\"text-center mt-5\">\n      \ud83d\udca7\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n        GenaDrop\n      </a>\n      <Widget\n        src=\"miraclx.near/widget/Attribution\"\n        props={{ authors: [ownerId], dep: true }}\n      />\n    </h4>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgodwill.near/widget/GenaDrop.MultiChainMinter", "__row_index": 6}