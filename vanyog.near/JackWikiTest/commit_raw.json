{"tx_hash": "G1GMrVN2FcPWCHwZ4uhcrddtSVfHR2zwxoDa8XwZibd5", "action_id_social": "CEeDiW2r9q7oS4iv9hkgUqx932NVUWvvWz72Y2Qtyn5x-0-widget", "block_id": 83102627, "block_timestamp": "2023-01-16 19:35:05.033", "signer_id": "vanyog.near", "widget_name": "JackWikiTest", "source_code": "const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\n\nconst profile = props.profile ?? Social.getr(`${accountId}/profile`);\n\nif (profile === null) {\n  return \"Loading\";\n}\n\nconst articles = Social.get(`${accountId}/wiki/article`);\n\nconsole.log(\"wikiArticle\", JSON.parse(articles));\n\nState.init({ articles: articles || [] });\nconsole.log(\"state.\", state);\n\nconst initialBody = `# Markdown heading level 1\n\nThis is a markdown paragraph. So, here are a few examples of markdown syntax and what it looks like.\n\n1. markdown\n2. ordered\n3. list`;\n\nconst errTextNoBody = \"ERROR: no article Body\",\n  errTextNoId = \"ERROR: no article Id\",\n  errTextDublicatedId = \"ERROR: there is article with such name\";\n\nconst initialState = {\n  articleId: \"\",\n  articleBody: initialBody,\n  errorId: \"\",\n  errorBody: \"\",\n};\n\nState.init(initialState);\n\nconst getArticleData = () => {\n  const args = {\n    articleId: state.articleId,\n    author: accountId,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    timeCreate: Date.now(),\n    body: state.articleBody,\n    version: 0,\n    navigation_id: null,\n  };\n  return args;\n};\n\n// === SAVE HANDLER ===\nconst saveHandler = (e) => {\n  State.update({ ...state, errorId: \"\", errorBody: \"\" });\n  if (state.articleId && state.articleBody) {\n    const articles = Near.view(\"testwiki.near\", \"get_article_ids_paged\", {\n      from_index: 0,\n      limit: 250,\n    });\n    const isArticleIdDublicated =\n      articles &&\n      articles.some(\n        (articleId) => articleId.toLowerCase() === state.articleId.toLowerCase()\n      );\n\n    if (!isArticleIdDublicated) {\n      console.log(\"SAVE ARTICLE\");\n      const newArticle = {\n        articleId: state.articleId,\n        author: accountId,\n        lastEditor: accountId,\n        timeLastEdit: Date.now(),\n        timeCreate: Date.now(),\n        body: state.articleBody,\n        version: 0,\n        navigation_id: null,\n      };\n      console.log(\"articles\", [newArticle]);\n\n      Social.set({ articles: JSON.stringify([newArticle]) });\n    } else {\n      State.update({ ...state, errorId: errTextDublicatedId });\n    }\n  } else {\n    if (!state.articleId) {\n      State.update({ ...state, errorId: errTextNoId });\n    }\n    if (!state.articleBody) {\n      State.update({ ...state, errorBody: errTextNoBody });\n    }\n  }\n};\n\n// === CANCEL HANDLER ===\nconst cancelHandler = () => {\n  State.update({\n    articleId: \"\",\n    articleBody: \"\",\n    errorId: null,\n    errorBody: null,\n  });\n};\n\n// === RETURN ===\nreturn (\n  <div>\n    <div>\n      <button type=\"submit\" className=\"btn btn-success\" onClick={saveHandler}>\n        Save Article\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        onClick={() => cancelHandler()}\n      >\n        Cancel / Clear\n      </button>\n    </div>\n    <div class=\"d-flex flex-column pt-3\">\n      <label for=\"inputArticleId\">\n        Input article id (case-sensitive, without spaces):\n      </label>\n      <label for=\"inputArticleId\" class=\"small text-danger\">\n        {state.errorId}\n      </label>\n      <input\n        className=\"form-control mt-2\"\n        id=\"inputArticleId\"\n        value={state.articleId}\n        onChange={(e) => {\n          State.update({\n            ...state,\n            articleId: e.target.value.replace(/\\s+/g, \"\"),\n          });\n        }}\n      />\n    </div>\n    <div class=\"d-flex flex-column pt-3\">\n      <label for=\"textareaArticleBody\">\n        Input article body (in makrdown format):\n      </label>\n      <label for=\"textareaArticleBody\" class=\"small text-danger\">\n        {state.errorBody}\n      </label>\n      <textarea\n        id=\"textareaArticleBody\"\n        type=\"text\"\n        value={state.articleBody}\n        rows={10}\n        className=\"form-control mt-2\"\n        onChange={(e) => {\n          State.update({ ...state, articleBody: e.target.value });\n        }}\n      />\n    </div>\n    <div class=\"pt-3\">\n      Article preview:\n      <Markdown text={state.articleBody} />\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vanyog.near/widget/JackWikiTest"}