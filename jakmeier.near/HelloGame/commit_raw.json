{"tx_hash": "pGgrdeR28qHCtxi2ztGbqNC2ZnR4ugjBhxVMMHQ8e7K", "action_id_social": "9XtPhte3QcoW9p8EVHKzHtLM8ZuSaDXppRyEkHDaMzvF-0-widget", "block_id": 80706872, "block_timestamp": "2022-12-15 13:14:07.785", "signer_id": "jakmeier.near", "widget_name": "HelloGame", "source_code": "// hackathon project building a small interactive game\n\nconst MAP_TILES = 12;\nconst VIEW_OFFSET_X = 0;\nconst VIEW_OFFSET_Y = 0;\nconst MAP_SIZE = \"480px\";\nconst TILE_SIZE = \"40px\";\nconst TILE_INNER_SIZE = \"40px\";\n\nconst Tile = {\n  Empty: \"\u25fb\",\n  Full: \"\u25fc\",\n  Ghost: \"\ud83d\udc7b\",\n};\n\n// Select a view of the map, store it as 2D array of tiles and insert pixels.\nconst mapView = (start_x, start_y, width, height, pixels) => {\n  const map = Array.from(Array(width), () =>\n    new Array(height).fill(Tile.Empty)\n  );\n\n  pixels.forEach((pixel) => {\n    // apply view offset\n    const x = pixel.x - start_x;\n    const y = pixel.y - start_y;\n    if (map[x] && map[x][y]) {\n      map[x][y] = Tile.Full;\n    }\n  });\n\n  const updates = state.updates ?? [];\n  console.log(\"drawing with updates\", updates);\n  updates.forEach((pixel) => {\n    // apply view offset\n    const x = pixel.x - start_x;\n    const y = pixel.y - start_y;\n    if (map[x]) {\n      if (map[x][y] === Tile.Full) {\n        map[x][y] = Tile.Empty;\n      } else {\n        map[x][y] = Tile.Full;\n      }\n    }\n  });\n\n  return map;\n};\n\nconst stateObject = (pixels, updates) => {\n  if (!state) {\n    state = {};\n  }\n  return {\n    playerPos: state.playerPos ?? { x: 0, y: 0 },\n    pixels,\n    updates,\n    currentView: mapView(\n      pos.x - VIEW_OFFSET_X,\n      pos.y - VIEW_OFFSET_Y,\n      MAP_TILES,\n      MAP_TILES,\n      pixels\n    ),\n    otherPlayer: state.otherPlayer ?? \"other.near\", // TODO: don't hard code name\n  };\n};\n\n// convert 2D array of tiles (stored in state.currentView) into HTML\nconst renderMap = (playerPos) => {\n  // make a deep copy of map so we can modify it\n  const map = JSON.parse(JSON.stringify(state.currentView));\n  map[playerPos.x][playerPos.y] = Tile.Ghost;\n  const html = map\n    .map((row) =>\n      row.map((tile) => (\n        <div\n          style={{\n            fontSize: TILE_INNER_SIZE,\n            width: TILE_SIZE,\n            height: TILE_SIZE,\n          }}\n        >\n          {tile}\n        </div>\n      ))\n    )\n    .flat();\n  return html;\n};\n\n// instantly moves the player to the given coordinate unless the path is blocked\nconst movePlayer = (x, y) => {\n  // collision check and/or boundary check\n  if (\n    tileInCurrentView(x, y) === Tile.Empty ||\n    tileInCurrentView(x, y) === Tile.Full\n  ) {\n    setPlayerPos(x, y);\n  }\n};\n\n// update player position without checks\nconst setPlayerPos = (x, y) => {\n  state.playerPos.x = x;\n  state.playerPos.y = y;\n  state.currentView = mapView(\n    //x - VIEW_OFFSET_X,\n    //y - VIEW_OFFSET_Y,\n    -VIEW_OFFSET_X,\n    -VIEW_OFFSET_Y,\n    MAP_TILES,\n    MAP_TILES,\n    state.pixels\n  );\n  // trigger a re-render with the new state\n  State.update();\n};\n\nconst tileInCurrentView = (x, y) => {\n  // move view and keep  player in center\n  //const projected_x = x - state.playerPos.x + VIEW_OFFSET_X;\n  // const projected_y = y - state.playerPos.y + VIEW_OFFSET_Y;\n  // return state.currentView[projected_x][projected_y];\n  // move player biut keep view static\n  return state.currentView[x][y];\n};\n\nconst drawPixel = (x, y) => {\n  state.updates.push({ x, y });\n};\n\nconst keyDownHandler = (e) => {\n  // apparently switch is not supported, using if-else instead\n  if (e.key == \"ArrowLeft\") {\n    movePlayer(state.playerPos.x - 1, state.playerPos.y);\n  } else if (e.key == \"ArrowRight\") {\n    movePlayer(state.playerPos.x + 1, state.playerPos.y);\n  } else if (e.key == \"ArrowUp\") {\n    movePlayer(state.playerPos.x, state.playerPos.y - 1);\n  } else if (e.key == \"ArrowDown\") {\n    movePlayer(state.playerPos.x, state.playerPos.y + 1);\n  } else if (e.key == \"Enter\") {\n    // reset to origin\n    setPlayerPos(0, 0);\n  } else if (e.key == \" \") {\n    drawPixel(state.playerPos.x, state.playerPos.y);\n  } else {\n    console.log(e);\n  }\n};\n\n// handler for gameboy input\nconst buttonDownHandler = (button) => {\n  // apparently switch is not supported, using if-else instead\n  if (button == \"left\") {\n    movePlayer(state.playerPos.x - 1, state.playerPos.y);\n  } else if (button == \"right\") {\n    movePlayer(state.playerPos.x + 1, state.playerPos.y);\n  } else if (button == \"up\") {\n    movePlayer(state.playerPos.x, state.playerPos.y - 1);\n  } else if (button == \"down\") {\n    movePlayer(state.playerPos.x, state.playerPos.y + 1);\n  } else if (button == \"b\") {\n    setPlayerPos(0, 0);\n  } else if (button == \"a\") {\n    drawPixel(state.playerPos.x, state.playerPos.y);\n  } else {\n    console.log(e);\n  }\n};\n\n/*\nconst receiver = \"gmilescu.near\";\nconst commitMessage = {\n  index: {\n    graph: JSON.stringify({\n      key: \"poke\",\n      value: {\n        accountId: receiver,\n      },\n    }),\n    notify: JSON.stringify({\n      key: receiver,\n      value: {\n        type: \"poke\",\n      },\n    }),\n  },\n};\n*/\n\nconst onlineState = Social.index(\"helloGame\", \"pixels\", {\n  order: \"desc\",\n  limit: 1, // we only want the latest version\n  subscribe: true, // refresh once in 5s\n});\n\nif (onlineState === null || onlineState === undefined) {\n  return \"Loading\";\n}\n\nif (onlineState.length > 0) {\n  if (state && onlineState[0].value.activePlayer !== context.accountId) {\n    state.updates = [];\n  }\n  const pixels = onlineState[0].value.pixels ?? [];\n  const updates = state.updates ?? [];\n  const newState = stateObject(pixels, updates);\n  State.init(newState);\n  if (JSON.stringify(state) != JSON.stringify(newState)) {\n    State.update(newState);\n  }\n} else {\n  const pixels = state.pixels ?? [];\n  const updates = state.updates ?? [];\n  State.init(stateObject(pixels, updates));\n}\n\nconst commitMessage = {\n  index: {\n    helloGame: JSON.stringify({\n      key: \"pixels\",\n      value: {\n        pixels: state.pixels.concat(state.updates),\n        activePlayer: state.otherPlayer,\n      },\n    }),\n  },\n};\n\nreturn (\n  <div>\n    <Widget\n      src=\"jakmeier.near/widget/KeyInput\"\n      props={{ keyDownHandler, width: MAP_SIZE, margin: \"20px 0\" }}\n    />\n    <div\n      style={{\n        display: \"grid\",\n        gridAutoFlow: \"column\",\n        gridTemplateRows: `repeat(${MAP_TILES},${TILE_SIZE})`,\n        width: MAP_SIZE,\n        height: MAP_SIZE,\n      }}\n    >\n      {renderMap(state.playerPos)}\n    </div>\n    <CommitButton data={commitMessage}>Submit</CommitButton>\n    <Widget\n      src=\"jakmeier.near/widget/GameBoyInput\"\n      props={{\n        buttonDownHandler,\n        width: MAP_SIZE,\n        margin: \"20px 0\",\n        dPadWidth: \"150px\",\n        roundButtonSize: \"60px\",\n        squareButtonSize: \"70px\",\n      }}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jakmeier.near/widget/HelloGame"}