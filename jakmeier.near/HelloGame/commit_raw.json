{"tx_hash": "Cdn2HJZ9iysFXPL2Syk4dkzE3toZ3Bp22HHNtwSFVAnh", "action_id_social": "4MZEbWAPBsLf7t9pyL6jsmMxwnA4qzw6VkHY5TtKwMdA-0-widget", "block_id": 80696753, "block_timestamp": "2022-12-15 09:57:27.057", "signer_id": "jakmeier.near", "widget_name": "HelloGame", "source_code": "// hackathon project building a small interactive game\n\nconst MAP_SIZE = \"480px\";\nconst TILE_SIZE = \"40px\";\nconst TILE_INNER_SIZE = \"40px\";\n\nconst Tile = {\n  Empty: \"\u25fb\",\n  Ghost: \"\ud83d\udc7b\",\n  Tree: \"\ud83c\udf32\",\n  Pagoda: \"\ud83c\udfef\",\n  Shinto: \"\u26e9\",\n  Camp: \"\ud83c\udfd5\",\n};\n\nconst staticDemoMap = [\n  // Pagdoa castle\n  { x: 0, y: -4, obj: Tile.Pagoda },\n  { x: 1, y: -4, obj: Tile.Shinto },\n  { x: -1, y: -4, obj: Tile.Shinto },\n\n  // hidden camp\n  { x: -42, y: 42, obj: Tile.Tree },\n  { x: -43, y: 42, obj: Tile.Tree },\n  { x: -43, y: 41, obj: Tile.Camp },\n  { x: -43, y: 40, obj: Tile.Tree },\n  { x: -43, y: 39, obj: Tile.Tree },\n  { x: -44, y: 41, obj: Tile.Tree },\n  { x: -44, y: 42, obj: Tile.Tree },\n  { x: -44, y: 40, obj: Tile.Tree },\n  { x: -41, y: 43, obj: Tile.Tree },\n  { x: -42, y: 43, obj: Tile.Tree },\n  { x: -43, y: 43, obj: Tile.Tree },\n\n  // some random trees\n  { x: 1, y: 1, obj: Tile.Tree },\n  { x: 3, y: 5, obj: Tile.Tree },\n  { x: -27, y: 4, obj: Tile.Tree },\n  { x: 20, y: 17, obj: Tile.Tree },\n  { x: 11, y: 21, obj: Tile.Tree },\n  { x: -26, y: 22, obj: Tile.Tree },\n  { x: 26, y: 18, obj: Tile.Tree },\n  { x: -15, y: -30, obj: Tile.Tree },\n  { x: -16, y: 15, obj: Tile.Tree },\n  { x: 2, y: -19, obj: Tile.Tree },\n  { x: -10, y: -25, obj: Tile.Tree },\n  { x: 12, y: 28, obj: Tile.Tree },\n  { x: 9, y: -3, obj: Tile.Tree },\n  { x: -36, y: -27, obj: Tile.Tree },\n  { x: -29, y: 1, obj: Tile.Tree },\n  { x: 25, y: 7, obj: Tile.Tree },\n  { x: -38, y: -10, obj: Tile.Tree },\n  { x: -43, y: -41, obj: Tile.Tree },\n  { x: 18, y: 40, obj: Tile.Tree },\n  { x: -37, y: 37, obj: Tile.Tree },\n  { x: 43, y: -45, obj: Tile.Tree },\n  { x: -22, y: 28, obj: Tile.Tree },\n  { x: 17, y: -2, obj: Tile.Tree },\n  { x: -15, y: 11, obj: Tile.Tree },\n  { x: -7, y: -3, obj: Tile.Tree },\n  { x: 18, y: 6, obj: Tile.Tree },\n  { x: 17, y: -11, obj: Tile.Tree },\n  { x: 11, y: -5, obj: Tile.Tree },\n  { x: -18, y: -19, obj: Tile.Tree },\n  { x: -3, y: -10, obj: Tile.Tree },\n  { x: -15, y: 20, obj: Tile.Tree },\n  { x: 20, y: 3, obj: Tile.Tree },\n  { x: 5, y: 19, obj: Tile.Tree },\n  { x: 12, y: 5, obj: Tile.Tree },\n  { x: -7, y: -19, obj: Tile.Tree },\n  { x: -6, y: 20, obj: Tile.Tree },\n  { x: -9, y: 18, obj: Tile.Tree },\n  { x: 4, y: 19, obj: Tile.Tree },\n  { x: -3, y: -17, obj: Tile.Tree },\n  { x: 4, y: 1, obj: Tile.Tree },\n  { x: 6, y: 12, obj: Tile.Tree },\n  { x: 15, y: 4, obj: Tile.Tree },\n  { x: -5, y: -2, obj: Tile.Tree },\n  { x: -19, y: 4, obj: Tile.Tree },\n  { x: 16, y: 9, obj: Tile.Tree },\n  { x: 3, y: -19, obj: Tile.Tree },\n  { x: -17, y: -2, obj: Tile.Tree },\n  { x: 4, y: -4, obj: Tile.Tree },\n  { x: 6, y: -9, obj: Tile.Tree },\n  { x: -11, y: -11, obj: Tile.Tree },\n  { x: 15, y: 8, obj: Tile.Tree },\n  { x: 9, y: -6, obj: Tile.Tree },\n];\n\n// Select a view of the map and store it as 2D array of tiles.\nconst mapView = (start_x, start_y, width, height) => {\n  const map = Array.from(Array(width), () =>\n    new Array(height).fill(Tile.Empty)\n  );\n  staticDemoMap.forEach((tile) => {\n    // apply view offset\n    const x = tile.x - start_x;\n    const y = tile.y - start_y;\n    if (map[x] && map[x][y]) {\n      map[x][y] = tile.obj;\n    }\n  });\n  return map;\n};\n\n// convert 2D array of tiles (stored in state.currentView) into HTML\nconst renderMap = () => {\n  // make a deep copy of map so we can modify it\n  const map = JSON.parse(JSON.stringify(state.currentView));\n  // render player at the center\n  map[5][5] = Tile.Ghost;\n  const html = map\n    .map((row) =>\n      row.map((tile) => (\n        <div\n          style={{\n            fontSize: TILE_INNER_SIZE,\n            width: TILE_SIZE,\n            height: TILE_SIZE,\n          }}\n        >\n          {tile}{\" \"}\n        </div>\n      ))\n    )\n    .flat();\n  return html;\n};\n\n// instantly moves the player to the given coordinate unless the path is blocked\nconst movePlayer = (x, y) => {\n  if (tileInCurrentView(x, y) === Tile.Empty) {\n    setPlayerPos(x, y);\n  }\n};\n\n// update player position without checks\nconst setPlayerPos = (x, y) => {\n  state.playerPos.x = x;\n  state.playerPos.y = y;\n  state.currentView = mapView(x - 5, y - 5, 11, 11);\n  // trigger a re-render with the new state\n  State.update();\n};\n\nconst tileInCurrentView = (x, y) => {\n  const projected_x = x - state.playerPos.x + 5;\n  const projected_y = y - state.playerPos.y + 5;\n  return state.currentView[projected_x][projected_y];\n};\n\nconst keyDownHandler = (e) => {\n  // apparently switch is not supported, using if-else instead\n  if (e.key == \"ArrowLeft\") {\n    movePlayer(state.playerPos.x - 1, state.playerPos.y);\n  } else if (e.key == \"ArrowRight\") {\n    movePlayer(state.playerPos.x + 1, state.playerPos.y);\n  } else if (e.key == \"ArrowUp\") {\n    movePlayer(state.playerPos.x, state.playerPos.y - 1);\n  } else if (e.key == \"ArrowDown\") {\n    movePlayer(state.playerPos.x, state.playerPos.y + 1);\n  } else if (e.key == \" \") {\n    // reset to origin on space key\n    setPlayerPos(0, 0);\n  } else {\n    console.log(e);\n  }\n};\n\n// handler for gameboy input\nconst buttonDownHandler = (button) => {\n  // apparently switch is not supported, using if-else instead\n  if (button == \"left\") {\n    movePlayer(state.playerPos.x - 1, state.playerPos.y);\n  } else if (button == \"right\") {\n    movePlayer(state.playerPos.x + 1, state.playerPos.y);\n  } else if (button == \"up\") {\n    movePlayer(state.playerPos.x, state.playerPos.y - 1);\n  } else if (button == \"down\") {\n    movePlayer(state.playerPos.x, state.playerPos.y + 1);\n  } else if (button == \"b\") {\n    setPlayerPos(0, 0);\n  } else {\n    console.log(e);\n  }\n};\n\n/*\nconst receiver = \"gmilescu.near\";\nconst commitMessage = {\n  index: {\n    graph: JSON.stringify({\n      key: \"poke\",\n      value: {\n        accountId: receiver,\n      },\n    }),\n    notify: JSON.stringify({\n      key: receiver,\n      value: {\n        type: \"poke\",\n      },\n    }),\n  },\n};\n*/\n\nconst onlineState = Social.index(\"helloGame\", \"pos\", {\n  order: \"desc\",\n  limit: 1,\n  subscribe: true, // refresh once in 5s\n});\n\nif (onlineState === null || onlineState === undefined) {\n  return \"Loading\";\n}\n\nif (onlineState.length > 0) {\n  const pos = onlineState[0].value;\n  State.init({\n    playerPos: pos,\n    currentView: mapView(pos.x - 5, pos.y - 5, 11, 11),\n  });\n} else {\n  State.init({\n    playerPos: { x: 0, y: 0 },\n    currentView: mapView(-5, -5, 11, 11),\n  });\n}\n\nconst commitMessage = {\n  index: {\n    helloGame: JSON.stringify({\n      key: \"pos\",\n      value: state.playerPos,\n    }),\n  },\n};\n\nreturn (\n  <div>\n    <Widget\n      src=\"jakmeier.near/widget/KeyInput\"\n      props={{ keyDownHandler, width: MAP_SIZE, margin: \"20px 0\" }}\n    />\n    <div\n      style={{\n        display: \"grid\",\n        gridAutoFlow: \"column\",\n        gridTemplateRows: `repeat(11,${TILE_SIZE})`,\n        width: MAP_SIZE,\n        height: MAP_SIZE,\n      }}\n    >\n      {renderMap(state)}\n    </div>\n    <CommitButton data={commitMessage}>Save Position</CommitButton>\n    <Widget\n      src=\"jakmeier.near/widget/GameBoyInput\"\n      props={{\n        buttonDownHandler,\n        width: MAP_SIZE,\n        margin: \"20px 0\",\n        dPadWidth: \"150px\",\n        roundButtonSize: \"60px\",\n        squareButtonSize: \"70px\",\n      }}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jakmeier.near/widget/HelloGame"}