{"tx_hash": "9hQYyKNb9ktEZuQzK5sMvU5AeAArvBXZP629qhvogbfL", "action_id_social": "5nj9JJTqm5fUGtDUcUorpDZaYt6yJFwgtpp7geH2tNkv-0-widget", "block_id": 80634398, "block_timestamp": "2022-12-14 13:33:24.059", "signer_id": "jakmeier.near", "widget_name": "HelloGame", "source_code": "// very hacky PoC for an interactive widget\n\nState.init({ playerPos: { x: 0, y: 0 } });\n\nconst Tile = {\n  Empty: \"\u25fb\",\n  Ghost: \"\ud83d\udc7b\",\n  Tree: \"\ud83c\udf32\",\n};\n\nconst staticDemoMap = [\n  { x: 1, y: 1, obj: Tile.Tree },\n  { x: 3, y: 5, obj: Tile.Tree },\n  { x: -27, y: 4, obj: Tile.Tree },\n  { x: 20, y: 17, obj: Tile.Tree },\n  { x: 11, y: 21, obj: Tile.Tree },\n  { x: -26, y: 22, obj: Tile.Tree },\n  { x: 26, y: 18, obj: Tile.Tree },\n  { x: -15, y: -30, obj: Tile.Tree },\n  { x: -16, y: 15, obj: Tile.Tree },\n  { x: 2, y: -19, obj: Tile.Tree },\n  { x: -10, y: -25, obj: Tile.Tree },\n  { x: 12, y: 28, obj: Tile.Tree },\n  { x: 9, y: -3, obj: Tile.Tree },\n  { x: -36, y: -27, obj: Tile.Tree },\n  { x: -29, y: 1, obj: Tile.Tree },\n  { x: 25, y: 7, obj: Tile.Tree },\n  { x: -38, y: -10, obj: Tile.Tree },\n  { x: -43, y: -41, obj: Tile.Tree },\n  { x: 18, y: 40, obj: Tile.Tree },\n  { x: -37, y: 37, obj: Tile.Tree },\n  { x: 43, y: -45, obj: Tile.Tree },\n  { x: -22, y: 28, obj: Tile.Tree },\n  { x: 17, y: -2, obj: Tile.Tree },\n  { x: -15, y: 11, obj: Tile.Tree },\n  { x: -7, y: -3, obj: Tile.Tree },\n  { x: 18, y: 6, obj: Tile.Tree },\n  { x: 17, y: -11, obj: Tile.Tree },\n  { x: 11, y: -5, obj: Tile.Tree },\n  { x: -18, y: -19, obj: Tile.Tree },\n  { x: -3, y: -10, obj: Tile.Tree },\n  { x: -15, y: 20, obj: Tile.Tree },\n  { x: 20, y: 3, obj: Tile.Tree },\n  { x: 5, y: 19, obj: Tile.Tree },\n  { x: 12, y: 5, obj: Tile.Tree },\n  { x: -7, y: -19, obj: Tile.Tree },\n  { x: -6, y: 20, obj: Tile.Tree },\n  { x: -9, y: 18, obj: Tile.Tree },\n  { x: 4, y: 19, obj: Tile.Tree },\n  { x: -3, y: -17, obj: Tile.Tree },\n  { x: 4, y: 1, obj: Tile.Tree },\n  { x: 6, y: 12, obj: Tile.Tree },\n  { x: 15, y: 4, obj: Tile.Tree },\n  { x: -5, y: -2, obj: Tile.Tree },\n  { x: -19, y: 4, obj: Tile.Tree },\n  { x: 16, y: 9, obj: Tile.Tree },\n  { x: 3, y: -19, obj: Tile.Tree },\n  { x: -17, y: -2, obj: Tile.Tree },\n  { x: 4, y: -4, obj: Tile.Tree },\n  { x: 6, y: -9, obj: Tile.Tree },\n  { x: -11, y: -11, obj: Tile.Tree },\n  { x: 15, y: 8, obj: Tile.Tree },\n  { x: 9, y: -6, obj: Tile.Tree },\n];\n\nconst renderMap = (playerPos) => {\n  const map = Array.from(Array(11), () => new Array(11).fill(Tile.Empty));\n  // apply view offset\n  const dx = playerPos.x - 5;\n  const dy = playerPos.y - 5;\n  staticDemoMap.forEach((def) => {\n    const x = def.x - dx;\n    const y = def.y - dy;\n    if (map[x] && map[x][y]) {\n      map[x][y] = def.obj;\n    }\n  });\n  // player at the center\n  map[5][5] = Tile.Ghost;\n  const html = map\n    .map((row) => row.map((tile) => <div style={{ size: \"20px\" }}>{tile}</div>))\n    .flat();\n  return html;\n};\n\nfunction keyDownHandler(e) {\n  // apparently switch is not supported, using if-else instead\n  if (e.key == \"ArrowLeft\") {\n    state.playerPos.x -= 1;\n  } else if (e.key == \"ArrowRight\") {\n    state.playerPos.x += 1;\n  } else if (e.key == \"ArrowUp\") {\n    state.playerPos.y -= 1;\n  } else if (e.key == \"ArrowDown\") {\n    state.playerPos.y += 1;\n  } else if (e.key == \" \") {\n    state.playerPos.x = 0;\n    state.playerPos.y = 0;\n  } else {\n    console.log(e);\n  }\n  State.update();\n}\n\n// Component that forwards key inputs to provided callback.\n//\n// Right now, I don't know of a better way than abusing an input field,\n// because global even listeners seem not to be supported :(\nconst KeyInput = (props) => {\n  return (\n    <div style={{ width: props.width, margin: \"20px 0\" }}>\n      Click inside the text input and use arrow keys to move!\n      <input type=\"text\" onKeyDown={props.keyDownHandler} />\n    </div>\n  );\n};\n\nreturn (\n  <div>\n    {KeyInput({ width: \"240px\", keyDownHandler })}\n    <div\n      style={{\n        display: \"grid\",\n        gridAutoFlow: \"column\",\n        gridTemplateRows: \"repeat(11,20px)\",\n        width: \"240px\",\n      }}\n    >\n      {renderMap(state.playerPos)}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jakmeier.near/widget/HelloGame"}