{"tx_hash": "FHrBwYZp5SDVkM4dj3Ma3gVGSMdnRVzVrorX7Cw86BuG", "action_id_social": "6Kd4SUUPQU9PTHoD5Lw6LtSQ2usMdqeo4zvzLRcbuQex-0-widget", "block_id": 82066334, "block_timestamp": "2023-01-03 00:29:54.540", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newPollQuestionInterface", "source_code": "State.init({\n  pollTitle: \"\",\n  pollDescription: \"\",\n  pollDiscussionLink: \"\",\n  pollStartDate: \"\",\n  startTime: \"\",\n  pollEndDate: \"\",\n  endTime: \"\",\n  question: \"\",\n  // Treated as a number throws an error\n  pollType: \"0\",\n  choices: [],\n  amountOfChoices: 1,\n  expandOptions: false,\n  showErrorsInForm: false,\n  showPreview: false,\n  showSendFeedback: false,\n  sectionShown: \"mainInfo\",\n  hoveringElement: \"\",\n});\n\nconst pollTypes = {\n  TEXT: { id: \"0\", value: \"Text\" },\n  MULTIPLE_CHOICE: { id: \"1\", value: \"Multiple choice\" },\n};\n\nconst getPublicationParams = (isDraft) => {\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"question-v3.0.1\",\n          value: {\n            isDraft,\n            title: state.pollTitle,\n            description: state.pollDescription,\n            tgLink: state.pollDiscussionLink,\n            startTimestamp: getTimestamp(state.pollStartDate, state.startTime),\n            endTimestamp: getTimestamp(state.pollEndDate, state.endTime),\n            questionType: state.pollType,\n            question: state.question,\n            choicesOptions: state.choices.filter((c) => c != \"\"),\n            timestamp: Date.now(),\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n};\n\nconst getTimestamp = (date, time) => new Date(`${date} ${time}`).getTime();\n\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nconst isValidInput = () => {\n  // TODO validate date and link types\n  let result =\n    (state.pollType == pollTypes.MULTIPLE_CHOICE.id &&\n      state.choices.filter((c) => c != \"\").length >= 2) ||\n    state.pollType != pollTypes.MULTIPLE_CHOICE.id;\n  result = result && state.pollTitle != \"\";\n  result = result && state.pollDescription != \"\";\n  result = result && isValidTelegramLink();\n  result = result && state.pollStartDate != \"\";\n  result = result && state.startTime != \"\";\n  result = result && state.pollEndDate != \"\";\n  result = result && state.endTime != \"\";\n  result = result && state.question != \"\";\n  result =\n    result &&\n    getTimestamp(state.pollStartDate, state.startTime) <\n      getTimestamp(state.pollEndDate, state.endTime);\n  // result = result && !state.pollDiscussionLink.includes(\"https://t.me/\");\n  return result;\n};\n\nfunction getStyles(inputData) {\n  return !inputData && state.showErrorsInForm\n    ? {\n        backgroundColor: \"white\",\n        padding: \"0.5rem 1.5rem\",\n        borderRadius: \"0.8rem\",\n        color: \"#474D55\",\n        letterSpacing: \"-0.01em\",\n        width: \"100%\",\n        border: \"1px solid #dc3545\",\n        borderOpacity: \"1\",\n      }\n    : {\n        border: \"1.5px solid #E1E9F0\",\n        backgroundColor: \"white\",\n        padding: \"0.5rem 1.5rem\",\n        borderRadius: \"0.8rem\",\n        color: \"#474D55\",\n        letterSpacing: \"-0.01em\",\n        width: \"100%\",\n      };\n}\n\nconst widgetOwner = \"silkking.near\";\n\nconst renderModal = (whatModal) => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        (state.showPreview || state.showSendFeedback) && {\n          display: \"block\",\n          backgroundColor: \"#7e7e7e70\",\n        }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={(e) => {\n        if (e.target.id == \"modal\" && state.showSendFeedback) {\n          State.update({\n            pollTitle: \"\",\n            pollDescription: \"\",\n            pollDiscussionLink: \"\",\n            pollStartDate: \"\",\n            startTime: \"\",\n            pollEndDate: \"\",\n            endTime: \"\",\n            question: \"\",\n            pollType: \"0\",\n            choices: [],\n            amountOfChoices: 1,\n            expandOptions: false,\n            showSendFeedback: false,\n          });\n        } else if (e.target.id == \"modal\") {\n          State.update({ showPreview: false });\n        }\n      }}\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"80%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={\n            state.showSendFeedback\n              ? { backgroundColor: \"rgb(230, 230, 230)\", marginTop: \"30vh\" }\n              : { backgroundColor: \"rgb(230, 230, 230)\" }\n          }\n        >\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Preview</h5>\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => {\n                if (state.showSendFeedback) {\n                  State.update({\n                    pollTitle: \"\",\n                    pollDescription: \"\",\n                    pollDiscussionLink: \"\",\n                    pollStartDate: \"\",\n                    startTime: \"\",\n                    pollEndDate: \"\",\n                    endTime: \"\",\n                    question: \"\",\n                    pollType: \"0\",\n                    choices: [],\n                    amountOfChoices: 1,\n                    expandOptions: false,\n                    showSendFeedback: false,\n                  });\n                } else {\n                  State.update({ showPreview: false });\n                }\n              }}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              backgroundColor: \"white\",\n              margin: \"0 auto\",\n            }}\n          >\n            {whatModal == \"preview\" ? (\n              <Widget\n                src={`${widgetOwner}/widget/newVotingInterface`}\n                props={{\n                  isPreview: true,\n                  previewInfo: {\n                    accountId: context.accountId,\n                    blockHeight: undefined,\n                    value: {\n                      tgLink: state.pollDiscussionLink,\n                      isDraft,\n                      title: state.pollTitle,\n                      description: state.pollDescription,\n                      startTimestamp: getTimestamp(\n                        state.pollStartDate,\n                        state.startTime\n                      ),\n                      endTimestamp: getTimestamp(\n                        state.pollEndDate,\n                        state.endTime\n                      ),\n                      questionType: state.pollType,\n                      question: state.question,\n                      choicesOptions: state.choices.filter((c) => c != \"\"),\n                      timestamp: Date.now(),\n                    },\n                  },\n                }}\n              />\n            ) : (\n              whatModal == \"sendFeedback\" && (\n                <p styles={{ textAling: \"center\" }}>\n                  Poll created succesfully!\n                </p>\n              )\n            )}\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              onClick={() => {\n                if (state.showSendFeedback) {\n                  State.update({\n                    pollTitle: \"\",\n                    pollDescription: \"\",\n                    pollDiscussionLink: \"\",\n                    pollStartDate: \"\",\n                    startTime: \"\",\n                    pollEndDate: \"\",\n                    endTime: \"\",\n                    question: \"\",\n                    pollType: \"0\",\n                    choices: [],\n                    amountOfChoices: 1,\n                    expandOptions: false,\n                    showSendFeedback: false,\n                  });\n                } else {\n                  State.update({ showPreview: false });\n                }\n              }}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderTextInputsForChoices = (typeOfQuestion) => {\n  let choices = [];\n\n  for (let i = 0; i < state.amountOfChoices; i++) {\n    choices.push(i);\n  }\n\n  return (\n    <>\n      {choices.map((choiceIndex) => {\n        return (\n          <div className=\"mb-2\" key={`choice-input-${choiceIndex}`}>\n            <div style={{ position: \"relative\" }}>\n              <input\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"0.5rem 1.5rem\",\n                  borderRadius: \"0.8rem\",\n                  border: \"1.5px solid #E1E9F0\",\n                  color: \"#474D55\",\n                  letterSpacing: \"-0.01em\",\n                  width: \"100%\",\n                }}\n                type=\"text\"\n                className={\n                  !state.question && state.showErrorsInForm\n                    ? \"border border-danger mb-2\"\n                    : \"mb-2\"\n                }\n                id=\"question\"\n                value={state.question}\n                onChange={(e) => {\n                  State.update({ question: e.target.value });\n                }}\n              />\n              <i\n                className=\"bi bi-x\"\n                style={{\n                  color: \"#767B8E\",\n                  cursor: \"pointer\",\n                  position: \"absolute\",\n                  right: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n                onClick={deleteChoiceHandler(choiceIndex)}\n              ></i>\n            </div>\n          </div>\n        );\n      })}\n      <div\n        className=\"d-flex align-items-center\"\n        style={{ cursor: \"pointer\" }}\n        onClick={addChoicesHandler}\n      >\n        <i\n          className=\"bi bi-plus-lg\"\n          style={{ color: \"#4B516A\", marginRight: \"0.7rem\" }}\n        ></i>\n        <span\n          style={{\n            color: \"#4B516A\",\n            fontSize: \"0.8rem\",\n            dontWeight: \"500\",\n            letterSpacing: \"0.01em\",\n          }}\n        >\n          Add another option\n        </span>\n      </div>\n    </>\n  );\n};\n\nconst renderOptions = () => {\n  return (\n    <div style={{ width: \"max-content\" }}>\n      <input\n        style={{\n          cursor: \"pointer\",\n          backgroundColor: \"rgb(230, 230, 230)\",\n          borderRadius: \"0px\",\n          position: \"absolute\",\n          top: \"100%\",\n          minWidth: \"max-content\",\n          width: \"152px\",\n        }}\n        type=\"text\"\n        value=\"Text\"\n        readonly\n        onClick={() => {\n          State.update({ pollType: \"0\", expandOptions: !state.expandOptions });\n        }}\n      />\n\n      <input\n        style={{\n          cursor: \"pointer\",\n          backgroundColor: \"rgb(230, 230, 230)\",\n          borderRadius: \"0px\",\n          position: \"absolute\",\n          top: \"200%\",\n          minWidth: \"max-content\",\n          width: \"152px\",\n        }}\n        type=\"text\"\n        value=\"Multiple choice\"\n        readonly\n        onClick={() => {\n          State.update({ pollType: \"1\", expandOptions: !state.expandOptions });\n        }}\n      />\n    </div>\n  );\n};\n\nfunction handleWriteChoiceInputChange(choiceIndex) {\n  return (event) => {\n    const newChoices = state.choices;\n\n    newChoices[Number(choiceIndex)] = event.target.value;\n\n    State.update({\n      choices: newChoices,\n    });\n  };\n}\n\nfunction deleteChoiceHandler(choiceIndex) {\n  return () => {\n    let choices = state.choices;\n    let newChoices = [];\n    for (let i = 0; i < choices.length; i++) {\n      if (i != choiceIndex) {\n        newChoices.push(choices[i]);\n      }\n    }\n\n    State.update({\n      amountOfChoices: Number(state.amountOfChoices) - 1,\n      choices: newChoices,\n    });\n  };\n}\n\nfunction addChoicesHandler() {\n  let choices = state.choices;\n  choices.push(\"\");\n  State.update({\n    amountOfChoices: Number(state.amountOfChoices) + 1,\n    choices: choices,\n  });\n}\n\nfunction isValidTelegramLink() {\n  if (!state.pollDiscussionLink) return true;\n  return state.pollDiscussionLink.startsWith(\"https://t.me\");\n}\n\nfunction getTypeOfQuestionSelectionStyles(typeOfQuestion) {\n  if (state.pollType == typeOfQuestion) {\n    return {\n      padding: \"1rem\",\n      borderRadius: \"1rem\",\n      cursor: \"pointer\",\n      border: \"1.5px solid #353A40\",\n      position: \"relative\",\n    };\n  } else {\n    return {\n      padding: \"1rem\",\n      borderRadius: \"1rem\",\n      cursor: \"pointer\",\n      border: \"1.5px solid #E1E9F0\",\n    };\n  }\n}\n\nreturn (\n  <div\n    className=\"pt-4\"\n    style={{\n      borderRadius: \"0.375rem\",\n      backgroundColor: \"white\",\n      margin: \"0 auto\",\n    }}\n  >\n    <div style={{ margin: \"0 auto\" }}>\n      <span\n        style={\n          state.sectionShown == \"mainInfo\"\n            ? {\n                color: \"#353A40\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n                marginRight: \"1rem\",\n              }\n            : {\n                color: \"#767B8E\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n                marginRight: \"1rem\",\n              }\n        }\n        onClick={() => {\n          State.update({ sectionShown: \"mainInfo\" });\n        }}\n      >\n        <i className=\"bi bi-square-fill\"></i> Main information\n      </span>\n      <span\n        style={\n          state.sectionShown == \"questions\"\n            ? {\n                color: \"#353A40\",\n                fontSize: \"0.8rem\",\n                position: \"relative\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n              }\n            : {\n                color: \"#767B8E\",\n                fontSize: \"0.8rem\",\n                position: \"relative\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n              }\n        }\n        onClick={() => {\n          State.update({ sectionShown: \"questions\" });\n        }}\n      >\n        <i className=\"bi bi-square-fill\"></i> Questions{\" \"}\n        <span\n          style={{\n            fontSize: \"0.7rem\",\n            position: \"absolute\",\n            top: \"-8%\",\n            left: \"103%\",\n            userSelect: \"none\",\n            cursor: \"pointer\",\n          }}\n        >\n          {\"{0}\"}\n        </span>\n      </span>\n    </div>\n    <div className=\"pt-4\">\n      <div className=\"mb-3\" style={{ maxHeight: \"50vh\", overflowY: \"scroll\" }}>\n        {state.sectionShown == \"mainInfo\" && (\n          <div\n            className=\"d-flex flex-column justify-content-center\"\n            style={{ margin: \"0 auto\" }}\n          >\n            <label\n              for=\"pollTitle\"\n              style={{\n                fontSize: \"0.8rem\",\n                letterSpacing: \"-0.01em\",\n                color: \"#474D55\",\n                marginBottom: \"0.3rem\",\n              }}\n            >\n              Title*\n            </label>\n            <div style={{ position: \"relative\" }}>\n              <input\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"0.5rem 1.5rem\",\n                  borderRadius: \"0.8rem\",\n                  border: \"1.5px solid #E1E9F0\",\n                  color: \"#474D55\",\n                  letterSpacing: \"-0.01em\",\n                  width: \"100%\",\n                }}\n                type=\"text\"\n                className={\n                  !state.pollTitle && state.showErrorsInForm\n                    ? \"border border-danger mb-2\"\n                    : \"mb-2\"\n                }\n                id=\"pollTitle\"\n                value={state.pollTitle}\n                onChange={(e) => {\n                  State.update({ pollTitle: e.target.value });\n                }}\n              />\n              <i\n                className=\"bi bi-x-circle-fill\"\n                style={{\n                  color: \"#E1E9F0\",\n                  cursor: \"pointer\",\n                  position: \"absolute\",\n                  right: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n                onClick={() => {\n                  State.update({ pollTitle: \"\" });\n                }}\n              ></i>\n            </div>\n            {!state.pollTitle && state.showErrorsInForm && (\n              <p className=\"text-danger\">Title cannot be empty</p>\n            )}\n\n            <label\n              for=\"pollDescription\"\n              className=\"mt-2\"\n              style={{\n                fontSize: \"0.8rem\",\n                letterSpacing: \"-0.01em\",\n                color: \"#474D55\",\n                marginBottom: \"0.3rem\",\n              }}\n            >\n              Description*\n            </label>\n            <textarea\n              id=\"pollDescription\"\n              style={{\n                backgroundColor: \"white\",\n                padding: \"0.5rem 1.5rem\",\n                borderRadius: \"0.8rem\",\n                border: \"1.5px solid #E1E9F0\",\n                color: \"#474D55\",\n                letterSpacing: \"-0.01em\",\n                width: \"100%\",\n              }}\n              rows=\"3\"\n              className={\n                !state.pollDescription &&\n                state.showErrorsInForm &&\n                \"border border-danger\"\n              }\n              value={state.pollDescription}\n              onChange={(e) => {\n                State.update({ pollDescription: e.target.value });\n              }}\n            ></textarea>\n            {!state.pollDescription && state.showErrorsInForm && (\n              <p className=\"text-danger\">Description cannot be empty</p>\n            )}\n\n            <label\n              for=\"pollDiscussionLink\"\n              className=\"mt-3\"\n              style={{\n                fontSize: \"0.8rem\",\n                letterSpacing: \"-0.01em\",\n                color: \"#474D55\",\n                marginBottom: \"0.3rem\",\n              }}\n            >\n              Discussion link (optional)\n            </label>\n            <div style={{ position: \"relative\" }}>\n              <i\n                className=\"bi bi-people\"\n                style={{\n                  color: \"#767B8E\",\n                  position: \"absolute\",\n                  left: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n              ></i>\n              <input\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"0.5rem 1.5rem 0.5rem 2.2rem\",\n                  borderRadius: \"0.8rem\",\n                  border: \"1.5px solid #E1E9F0\",\n                  color: \"#474D55\",\n                  letterSpacing: \"-0.01em\",\n                  width: \"100%\",\n                }}\n                type=\"text\"\n                className={\n                  !isValidTelegramLink() && state.showErrorsInForm\n                    ? \"border border-danger mb-2\"\n                    : \"mb-2\"\n                }\n                id=\"pollDiscussionLink\"\n                value={state.pollDiscussionLink}\n                onChange={(e) => {\n                  State.update({ pollDiscussionLink: e.target.value });\n                }}\n              />\n              <i\n                className=\"bi bi-x-circle-fill\"\n                style={{\n                  color: \"#E1E9F0\",\n                  cursor: \"pointer\",\n                  position: \"absolute\",\n                  right: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n                onClick={() => {\n                  State.update({ pollDiscussionLink: \"\" });\n                }}\n              ></i>\n            </div>\n            {!isValidTelegramLink() && state.showErrorsInForm && (\n              <p className=\"text-danger\">Not a valid link</p>\n            )}\n\n            <div\n              className=\"d-flex justify-content-between flex-wrap mb-3\"\n              style={{ maxWidth: \"100%\" }}\n            >\n              <div className=\"d-flex flex-column\" style={{ width: \"48%\" }}>\n                <label\n                  for=\"pollStartDate\"\n                  style={{\n                    fontSize: \"0.8rem\",\n                    letterSpacing: \"-0.01em\",\n                    color: \"#474D55\",\n                    marginBottom: \"0.3rem\",\n                  }}\n                >\n                  Start date*\n                </label>\n                {/*You have min and max properties on dates input*/}\n                <input\n                  style={getStyles(state.pollStartDate)}\n                  type=\"datetime-local\"\n                  id=\"pollStartDate\"\n                  value={state.pollStartDate}\n                  onChange={(e) => {\n                    State.update({ pollStartDate: e.target.value });\n                  }}\n                />\n                {!state.pollStartDate && state.showErrorsInForm && (\n                  <p className=\"text-danger\">Start date cannot be empty</p>\n                )}\n              </div>\n              <div className=\"d-flex flex-column\" style={{ width: \"48%\" }}>\n                <label\n                  for=\"pollEndDate\"\n                  style={{\n                    fontSize: \"0.8rem\",\n                    letterSpacing: \"-0.01em\",\n                    color: \"#474D55\",\n                    marginBottom: \"0.3rem\",\n                  }}\n                >\n                  End date*\n                </label>\n                <input\n                  style={getStyles(state.pollEndDate)}\n                  type=\"datetime-local\"\n                  id=\"pollStartDate\"\n                  value={state.pollEndDate}\n                  onChange={(e) => {\n                    State.update({ pollEndDate: e.target.value });\n                  }}\n                />\n                {!state.pollEndDate && state.showErrorsInForm && (\n                  <p className=\"text-danger\">End date cannot be empty</p>\n                )}\n              </div>\n            </div>\n            {getTimestamp(state.pollStartDate, state.startTime) >=\n              getTimestamp(state.pollEndDate, state.endTime) &&\n              state.showErrorsInForm && (\n                <div>\n                  <p className=\"text-danger\">\n                    Poll should start before it ends\n                  </p>\n                </div>\n              )}\n          </div>\n        )}\n\n        {state.sectionShown == \"questions\" && (\n          <>\n            <div\n              className=\"d-flex flex-column justify-content-center\"\n              style={{\n                border: \"1.5px solid #E1E9F0\",\n                padding: \"1.5rem 1rem\",\n                borderRadius: \"1.2rem\",\n                margin: \"0 auto\",\n              }}\n            >\n              <label\n                for=\"question\"\n                style={{\n                  fontSize: \"0.8rem\",\n                  letterSpacing: \"-0.01em\",\n                  color: \"#474D55\",\n                  marginBottom: \"0.3rem\",\n                }}\n              >\n                Question*\n              </label>\n              <div style={{ position: \"relative\" }}>\n                <input\n                  style={{\n                    backgroundColor: \"white\",\n                    padding: \"0.5rem 1.5rem\",\n                    borderRadius: \"0.8rem\",\n                    border: \"1.5px solid #E1E9F0\",\n                    color: \"#474D55\",\n                    letterSpacing: \"-0.01em\",\n                    width: \"100%\",\n                  }}\n                  type=\"text\"\n                  className={\n                    !state.question && state.showErrorsInForm\n                      ? \"border border-danger mb-2\"\n                      : \"mb-2\"\n                  }\n                  id=\"question\"\n                  value={state.question}\n                  onChange={(e) => {\n                    State.update({ question: e.target.value });\n                  }}\n                />\n                <i\n                  className=\"bi bi-x-circle-fill\"\n                  style={{\n                    color: \"#E1E9F0\",\n                    cursor: \"pointer\",\n                    position: \"absolute\",\n                    right: \"1rem\",\n                    top: \"0.55rem\",\n                  }}\n                  onClick={() => {\n                    State.update({ question: \"\" });\n                  }}\n                ></i>\n              </div>\n\n              <label\n                className=\"mt-3\"\n                for=\"pollType\"\n                style={{\n                  fontSize: \"0.8rem\",\n                  letterSpacing: \"-0.01em\",\n                  color: \"#474D55\",\n                  marginBottom: \"0.3rem\",\n                }}\n              >\n                Type of question\n              </label>\n              <div className=\"d-flex justify-content-between\">\n                <div\n                  style={getTypeOfQuestionSelectionStyles(\"0\")}\n                  onClick={() => {\n                    State.update({ pollType: \"0\" });\n                  }}\n                >\n                  {state.pollType == \"0\" && (\n                    <i\n                      className=\"bi bi-check2-circle\"\n                      style={{\n                        position: \"absolute\",\n                        top: \"-0.5rem\",\n                        right: \"-0.2rem\",\n                        color: \"rgb(53, 58, 64)\",\n                        backgroundColor: \"white\",\n                        borderRadius: \"100px\",\n                      }}\n                    ></i>\n                  )}\n                  <p\n                    style={{\n                      letterSpacing: \"-0.01em\",\n                      fontWeight: \"500\",\n                      color: \"#010A2D\",\n                      fontSize: \"0.8rem\",\n                      userSelect: \"none\",\n                    }}\n                  >\n                    Yes or No\n                  </p>\n                  <div className=\"d-flex mb-1\">\n                    <input\n                      style={{\n                        appearance: \"auto\",\n                        width: \"16px\",\n                        marginRight: \"0.2rem\",\n                      }}\n                      type=\"radio\"\n                      disabled\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"16px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                  <div className=\"d-flex\">\n                    <input\n                      className=\"form-check-input\"\n                      style={{\n                        appearance: \"auto\",\n                        width: \"16px\",\n                        marginRight: \"0.2rem\",\n                        backgroundColor: \"black\",\n                      }}\n                      type=\"radio\"\n                      disabled\n                      checked\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"16px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div\n                  style={getTypeOfQuestionSelectionStyles(\"1\")}\n                  onClick={() => {\n                    State.update({ pollType: \"1\" });\n                  }}\n                >\n                  {state.pollType == \"1\" && (\n                    <i\n                      className=\"bi bi-check2-circle\"\n                      style={{\n                        position: \"absolute\",\n                        top: \"-0.5rem\",\n                        right: \"-0.2rem\",\n                        color: \"rgb(53, 58, 64)\",\n                        backgroundColor: \"white\",\n                        borderRadius: \"100px\",\n                      }}\n                    ></i>\n                  )}\n                  <p\n                    style={{\n                      letterSpacing: \"-0.01em\",\n                      fontWeight: \"500\",\n                      color: \"#010A2D\",\n                      fontSize: \"0.8rem\",\n                      userSelect: \"none\",\n                    }}\n                  >\n                    Single Answer\n                  </p>\n                  <div className=\"d-flex mb-1\">\n                    <input\n                      style={{\n                        appearance: \"auto\",\n                        width: \"12px\",\n                        marginRight: \"0.2rem\",\n                      }}\n                      type=\"radio\"\n                      disabled\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"12px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                  <div className=\"d-flex mb-1\">\n                    <input\n                      style={{\n                        appearance: \"auto\",\n                        width: \"12px\",\n                        marginRight: \"0.2rem\",\n                      }}\n                      type=\"radio\"\n                      disabled\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"12px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center\">\n                    <input\n                      className=\"form-check-input\"\n                      style={{\n                        appearance: \"auto\",\n                        width: \"12px\",\n                        marginTop: \"0\",\n                        marginRight: \"0.2rem\",\n                        backgroundColor: \"black\",\n                      }}\n                      type=\"radio\"\n                      disabled\n                      checked\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"12px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div\n                  style={getTypeOfQuestionSelectionStyles(\"2\")}\n                  onClick={() => {\n                    State.update({ pollType: \"2\" });\n                  }}\n                >\n                  {state.pollType == \"2\" && (\n                    <i\n                      className=\"bi bi-check2-circle\"\n                      style={{\n                        position: \"absolute\",\n                        top: \"-0.5rem\",\n                        right: \"-0.2rem\",\n                        color: \"rgb(53, 58, 64)\",\n                        backgroundColor: \"white\",\n                        borderRadius: \"100px\",\n                      }}\n                    ></i>\n                  )}\n                  <p\n                    style={{\n                      letterSpacing: \"-0.01em\",\n                      fontWeight: \"500\",\n                      color: \"#010A2D\",\n                      fontSize: \"0.8rem\",\n                      userSelect: \"none\",\n                    }}\n                  >\n                    Multiselect\n                  </p>\n                  <div className=\"d-flex mb-1\">\n                    <input\n                      style={{\n                        appearance: \"auto\",\n                        width: \"12px\",\n                        marginRight: \"0.2rem\",\n                      }}\n                      type=\"checkbox\"\n                      disabled\n                      checked\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"12px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                  <div className=\"d-flex mb-1\">\n                    <input\n                      style={{\n                        appearance: \"auto\",\n                        width: \"12px\",\n                        marginRight: \"0.2rem\",\n                      }}\n                      type=\"checkbox\"\n                      disabled\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"12px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center\">\n                    <input\n                      className=\"form-check-input\"\n                      style={{\n                        appearance: \"auto\",\n                        width: \"12px\",\n                        marginTop: \"0\",\n                        marginRight: \"0.2rem\",\n                        backgroundColor: \"black\",\n                      }}\n                      type=\"checkbox\"\n                      disabled\n                      checked\n                    />\n                    <input\n                      style={{\n                        padding: \"0\",\n                        border: \"none\",\n                        borderRadius: \"30px\",\n                        height: \"12px\",\n                      }}\n                      type=\"text\"\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div\n                  style={getTypeOfQuestionSelectionStyles(\"3\")}\n                  onClick={() => {\n                    State.update({ pollType: \"3\" });\n                  }}\n                >\n                  {state.pollType == \"3\" && (\n                    <i\n                      className=\"bi bi-check2-circle\"\n                      style={{\n                        position: \"absolute\",\n                        top: \"-0.5rem\",\n                        right: \"-0.2rem\",\n                        color: \"rgb(53, 58, 64)\",\n                        backgroundColor: \"white\",\n                        borderRadius: \"100px\",\n                      }}\n                    ></i>\n                  )}\n                  <p\n                    style={{\n                      letterSpacing: \"-0.01em\",\n                      fontWeight: \"500\",\n                      color: \"#010A2D\",\n                      fontSize: \"0.8rem\",\n                      userSelect: \"none\",\n                    }}\n                  >\n                    Text Answer\n                  </p>\n                  <input\n                    style={{\n                      marginBottom: \"0.5rem\",\n                      padding: \"0\",\n                      border: \"none\",\n                      borderRadius: \"30px\",\n                      height: \"12px\",\n                      width: \"100%\",\n                    }}\n                    type=\"text\"\n                    disabled\n                  />\n                  <input\n                    style={{\n                      marginBottom: \"0.5rem\",\n                      padding: \"0\",\n                      border: \"none\",\n                      borderRadius: \"30px\",\n                      height: \"12px\",\n                      width: \"90%\",\n                    }}\n                    type=\"text\"\n                    disabled\n                  />\n                  <input\n                    style={{\n                      padding: \"0\",\n                      border: \"none\",\n                      borderRadius: \"30px\",\n                      height: \"12px\",\n                      width: \"100%\",\n                    }}\n                    type=\"text\"\n                    disabled\n                  />\n                </div>\n              </div>\n              {(state.pollType == \"1\" || state.pollType == \"2\") && (\n                <>\n                  <label\n                    className=\"mt-3\"\n                    for=\"pollType\"\n                    style={{\n                      fontSize: \"0.8rem\",\n                      letterSpacing: \"-0.01em\",\n                      color: \"#474D55\",\n                      marginBottom: \"0.3rem\",\n                    }}\n                  >\n                    Answer options\n                  </label>\n                  {renderTextInputsForChoices(state.pollType)}\n                </>\n              )}\n              {state.showErrorsInForm &&\n                state.pollType == pollTypes.MULTIPLE_CHOICE.id &&\n                state.choices.filter((c) => c != \"\").length < 2 && (\n                  <p className=\"text-danger\">Should have at least 2 options</p>\n                )}\n            </div>\n            <button\n              className=\"d-flex justify-content-center align-items-center py-3 w-100\"\n              style={{\n                margin: \"1rem auto\",\n                backgroundColor: \"#F2F6FA\",\n                borderColor: \"transparent\",\n                borderRadius: \"20px\",\n              }}\n              onClick={() => {}}\n            >\n              <i\n                className=\"bi bi-plus-lg\"\n                style={{ color: \"#010A2D\", marginRight: \"0.7rem\" }}\n              ></i>\n              <span\n                style={{\n                  color: \"#010A2D\",\n                  fontSize: \"1rem\",\n                  dontWeight: \"700\",\n                }}\n              >\n                Add question\n              </span>\n            </button>\n          </>\n        )}\n      </div>\n\n      <div className=\"d-flex flex-row-reverse\">\n        {/*<button\n          className=\"my-2 btn btn-outline-primary\"\n          onClick={() => State.update({ showPreview: true })}\n        >\n          Preview\n        </button>*/}\n\n        {isValidInput() ? (\n          <CommitButton\n            style={\n              state.hoveringElement == \"createPollButton\"\n                ? {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n                : {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n            }\n            data={getPublicationParams(false)}\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"createPollButton\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onMouse\n            onClick={() => {\n              State.update({\n                showSendFeedback: true,\n              });\n            }}\n          >\n            Create\n          </CommitButton>\n        ) : (\n          <button\n            style={\n              state.hoveringElement == \"createPollButton\"\n                ? {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n                : {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n            }\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"createPollButton\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => State.update({ showErrorsInForm: true })}\n          >\n            Create\n          </button>\n        )}\n      </div>\n\n      {state.showPreview && renderModal(\"preview\")}\n      {state.showSendFeedback && renderModal(\"sendFeedback\")}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newPollQuestionInterface"}