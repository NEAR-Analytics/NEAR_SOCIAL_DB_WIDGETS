{"tx_hash": "8M6dwKKH9asoL2AdBPLCJpKMg6LfCGjaUt4E6pnpb5S5", "action_id_social": "5YX7SDJaTTfdLiE3UzQDnJePXP8g5ywCMLczuR9dx6Bq-0-widget", "block_id": 82229653, "block_timestamp": "2023-01-05 04:35:16.883", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newPollQuestionInterface", "source_code": "State.init({\r\n  pollTitle: \"\",\r\n  pollDescription: \"\",\r\n  pollDiscussionLink: \"\",\r\n  pollStartDate: \"\",\r\n  pollEndDate: \"\",\r\n  amountOfQuestions: 1,\r\n  questions: [\"\"],\r\n  // Treated as a number throws an error\r\n  pollTypes: [\"0\"],\r\n  choices: [[\"\"]],\r\n  amountOfChoices: [1],\r\n  showErrorsInForm: false,\r\n  showPreview: false,\r\n  showSendFeedback: false,\r\n  sectionShown: \"mainInfo\",\r\n  hoveringElement: \"\",\r\n});\r\n\r\nconst pollTypes = {\r\n  TEXT: { id: \"0\", value: \"Text\" },\r\n  SINGLE_ANSWER: { id: \"1\", value: \"Single answer\" },\r\n  MULTISELECT: { id: \"2\", value: \"Multiselect\" },\r\n  YES_OR_NO: { id: \"3\", value: \"Yes or No\" },\r\n};\r\n\r\nconst getPublicationParams = (isDraft) => {\r\n  let paramQuestions = [];\r\n\r\n  for (let i = 0; i < state.questions.length; i++) {\r\n    paramQuestions.push({\r\n      question: state.questions[i],\r\n      questionType: state.pollTypes[i],\r\n      choicesOptions: state.choices[i].filter((c) => c != \"\"),\r\n    });\r\n  }\r\n\r\n  return {\r\n    index: {\r\n      poll_question: JSON.stringify(\r\n        {\r\n          key: \"question-v3.0.1\",\r\n          value: {\r\n            isDraft,\r\n            title: state.pollTitle,\r\n            description: state.pollDescription,\r\n            tgLink: state.pollDiscussionLink,\r\n            startTimestamp: getTimestamp(state.pollStartDate),\r\n            endTimestamp: getTimestamp(state.pollEndDate),\r\n            questions: paramQuestions,\r\n            timestamp: Date.now(),\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nconst getTimestamp = (date) => new Date(`${date}`).getTime();\r\n\r\nfunction isValidHttpUrl(string) {\r\n  let url;\r\n  try {\r\n    url = new URL(string);\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\r\n}\r\n\r\nconst isValidInput = (quesitonNumber) => {\r\n  // TODO validate date and link types\r\n  let result = result && state.pollTitle != \"\";\r\n  result = result && state.pollDescription != \"\";\r\n  result = result && isValidTelegramLink();\r\n  result = result && state.pollStartDate != \"\";\r\n  result = result && state.pollEndDate != \"\";\r\n  result = result && state.questions[quesitonNumber] != \"\";\r\n  result =\r\n    result &&\r\n    getTimestamp(state.pollStartDate) < getTimestamp(state.pollEndDate);\r\n  // result = result && !state.pollDiscussionLink.includes(\"https://t.me/\");\r\n  return result;\r\n};\r\n\r\nfunction getStyles(inputData) {\r\n  return !inputData && state.showErrorsInForm\r\n    ? {\r\n        backgroundColor: \"white\",\r\n        padding: \"0.5rem 1.5rem\",\r\n        borderRadius: \"0.8rem\",\r\n        color: \"#474D55\",\r\n        letterSpacing: \"-0.01em\",\r\n        width: \"100%\",\r\n        border: \"1px solid #dc3545\",\r\n        borderOpacity: \"1\",\r\n      }\r\n    : {\r\n        border: \"1.5px solid #E1E9F0\",\r\n        backgroundColor: \"white\",\r\n        padding: \"0.5rem 1.5rem\",\r\n        borderRadius: \"0.8rem\",\r\n        color: \"#474D55\",\r\n        letterSpacing: \"-0.01em\",\r\n        width: \"100%\",\r\n      };\r\n}\r\n\r\nconst widgetOwner = \"silkking.near\";\r\n\r\nconst renderModal = (whatModal) => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        (state.showPreview || state.showSendFeedback) && {\r\n          display: \"block\",\r\n          backgroundColor: \"#7e7e7e70\",\r\n        }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={(e) => {\r\n        if (e.target.id == \"modal\" && state.showSendFeedback) {\r\n          State.update({\r\n            pollTitle: \"\",\r\n            pollDescription: \"\",\r\n            pollDiscussionLink: \"\",\r\n            pollStartDate: \"\",\r\n            pollEndDate: \"\",\r\n            amountOfQuestions: 1,\r\n            questions: [\"\"],\r\n            pollTypes: [\"0\"],\r\n            choices: [[\"\"]],\r\n            amountOfChoices: [1],\r\n            showSendFeedback: false,\r\n          });\r\n        } else if (e.target.id == \"modal\") {\r\n          State.update({ showPreview: false });\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"modal-dialog\" style={{ maxWidth: \"80%\" }} role=\"document\">\r\n        <div\r\n          className=\"modal-content\"\r\n          style={\r\n            state.showSendFeedback\r\n              ? { backgroundColor: \"rgb(230, 230, 230)\", marginTop: \"30vh\" }\r\n              : { backgroundColor: \"rgb(230, 230, 230)\" }\r\n          }\r\n        >\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">Preview</h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => {\r\n                if (state.showSendFeedback) {\r\n                  State.update({\r\n                    pollTitle: \"\",\r\n                    pollDescription: \"\",\r\n                    pollDiscussionLink: \"\",\r\n                    pollStartDate: \"\",\r\n                    pollEndDate: \"\",\r\n                    amountOfQuestions: 1,\r\n                    questions: [\"\"],\r\n                    pollTypes: [\"0\"],\r\n                    choices: [[\"\"]],\r\n                    amountOfChoices: [1],\r\n                    showSendFeedback: false,\r\n                  });\r\n                } else {\r\n                  State.update({ showPreview: false });\r\n                }\r\n              }}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              backgroundColor: \"white\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          >\r\n            {whatModal == \"preview\" ? (\r\n              <Widget\r\n                src={`${widgetOwner}/widget/newVotingInterface`}\r\n                props={{\r\n                  isPreview: true,\r\n                  previewInfo: {\r\n                    accountId: context.accountId,\r\n                    blockHeight: undefined,\r\n                    value: {\r\n                      tgLink: state.pollDiscussionLink,\r\n                      isDraft,\r\n                      title: state.pollTitle,\r\n                      description: state.pollDescription,\r\n                      startTimestamp: getTimestamp(state.pollStartDate),\r\n                      endTimestamp: getTimestamp(state.pollEndDate),\r\n                      questions: state.questions,\r\n                      questionTypes: state.pollTypes,\r\n                      choicesOptions: state.choices.forEach((questionChoices) =>\r\n                        questionChoices.filter((c) => c != \"\")\r\n                      ),\r\n                      timestamp: Date.now(),\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            ) : (\r\n              whatModal == \"sendFeedback\" && (\r\n                <p styles={{ textAling: \"center\" }}>\r\n                  Poll created succesfully!\r\n                </p>\r\n              )\r\n            )}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              onClick={() => {\r\n                if (state.showSendFeedback) {\r\n                  State.update({\r\n                    pollTitle: \"\",\r\n                    pollDescription: \"\",\r\n                    pollDiscussionLink: \"\",\r\n                    pollStartDate: \"\",\r\n                    pollEndDate: \"\",\r\n                    amountOfQuestions: 1,\r\n                    questions: [\"\"],\r\n                    pollTypes: [\"0\"],\r\n                    choices: [[\"\"]],\r\n                    amountOfChoices: [1],\r\n                    showSendFeedback: false,\r\n                  });\r\n                } else {\r\n                  State.update({ showPreview: false });\r\n                }\r\n              }}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderTextInputsForChoices = (questionNumber) => {\r\n  let thisQuestionChoices = [];\r\n\r\n  for (let i = 0; i < state.amountOfChoices[questionNumber]; i++) {\r\n    thisQuestionChoices.push(i);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {thisQuestionChoices.map((choiceNumber) => {\r\n        return (\r\n          <div className=\"mb-2\">\r\n            <div style={{ position: \"relative\" }}>\r\n              <input\r\n                style={{\r\n                  backgroundColor: \"white\",\r\n                  padding: \"0.5rem 1.5rem\",\r\n                  borderRadius: \"0.8rem\",\r\n                  border: \"1.5px solid #E1E9F0\",\r\n                  color: \"#474D55\",\r\n                  letterSpacing: \"-0.01em\",\r\n                  width: \"100%\",\r\n                }}\r\n                type=\"text\"\r\n                className={\r\n                  !state.choices[questionNumber][choiceNumber] &&\r\n                  state.showErrorsInForm\r\n                    ? \"border border-danger mb-2\"\r\n                    : \"mb-2\"\r\n                }\r\n                id={`question-${questionNumber}-${choiceNumber}`}\r\n                value={state.choices[questionNumber][choiceNumber]}\r\n                onChange={(e) => {\r\n                  let newChoices = state.choices;\r\n                  newChoices[questionNumber][choiceNumber] = e.target.value;\r\n\r\n                  State.update({ choices: newChoices });\r\n                }}\r\n              />\r\n              <i\r\n                className=\"bi bi-x\"\r\n                style={{\r\n                  color: \"#767B8E\",\r\n                  cursor: \"pointer\",\r\n                  position: \"absolute\",\r\n                  right: \"1rem\",\r\n                  top: \"0.55rem\",\r\n                }}\r\n                onClick={() =>\r\n                  deleteChoiceHandler(questionNumber, choiceNumber)\r\n                }\r\n              ></i>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      <div\r\n        className=\"d-flex align-items-center\"\r\n        style={{ cursor: \"pointer\", maxWidth: \"max-content\" }}\r\n        onClick={() => addChoicesHandler(questionNumber)}\r\n      >\r\n        <i\r\n          className=\"bi bi-plus-lg\"\r\n          style={{ color: \"#4B516A\", marginRight: \"0.7rem\" }}\r\n        ></i>\r\n        <span\r\n          style={{\r\n            color: \"#4B516A\",\r\n            fontSize: \"0.8rem\",\r\n            dontWeight: \"500\",\r\n            letterSpacing: \"0.01em\",\r\n          }}\r\n        >\r\n          Add another option\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// const renderOptions = (questionNumber) => {\r\n//   function changeQuestionType(questionType) {\r\n//     let newPollTypes = state.pollTypes;\r\n//     newPollTypes[questionNumber] = questionType;\r\n//   }\r\n\r\n//   return (\r\n//     <div style={{ width: \"max-content\" }}>\r\n//       <input\r\n//         style={{\r\n//           cursor: \"pointer\",\r\n//           backgroundColor: \"rgb(230, 230, 230)\",\r\n//           borderRadius: \"0px\",\r\n//           position: \"absolute\",\r\n//           top: \"100%\",\r\n//           minWidth: \"max-content\",\r\n//           width: \"152px\",\r\n//         }}\r\n//         type=\"text\"\r\n//         value=\"Text\"\r\n//         readonly\r\n//         onClick={() => {\r\n//           State.update({\r\n//             pollTypes: changeQuestionType(\"0\"),\r\n//           });\r\n//         }}\r\n//       />\r\n\r\n//       <input\r\n//         style={{\r\n//           cursor: \"pointer\",\r\n//           backgroundColor: \"rgb(230, 230, 230)\",\r\n//           borderRadius: \"0px\",\r\n//           position: \"absolute\",\r\n//           top: \"200%\",\r\n//           minWidth: \"max-content\",\r\n//           width: \"152px\",\r\n//         }}\r\n//         type=\"text\"\r\n//         value=\"Multiple choice\"\r\n//         readonly\r\n//         onClick={() => {\r\n//           State.update({\r\n//             pollTypes: changeQuestionType(\"1\"),\r\n//           });\r\n//         }}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// function handleWriteChoiceInputChange(questionNumber, choiceIndex) {\r\n//   return (event) => {\r\n//     const newChoices = state.choices;\r\n//     newChoices[questionNumber][Number(choiceIndex)] = event.target.value;\r\n\r\n//     State.update({\r\n//       choices: newChoices,\r\n//     });\r\n//   };\r\n// }\r\n\r\nfunction deleteChoiceHandler(questionNumber, choiceNumber) {\r\n  if (state.amountOfChoices[questionNumber] > 1) {\r\n    let thisQuestionChoices = state.choices[questionNumber];\r\n\r\n    let newThisQuestionChoices = [];\r\n\r\n    for (let i = 0; i < thisQuestionChoices.length; i++) {\r\n      if (i != choiceNumber) {\r\n        newThisQuestionChoices.push(thisQuestionChoices[i]);\r\n      }\r\n    }\r\n\r\n    let newChoices = state.choices;\r\n    newChoices[questionNumber] = newThisQuestionChoices;\r\n\r\n    let newAmountOfChoices = state.amountOfChoices;\r\n    newAmountOfChoices[questionNumber] =\r\n      Number(newAmountOfChoices[questionNumber]) - 1;\r\n\r\n    State.update({\r\n      amountOfChoices: newAmountOfChoices,\r\n      choices: newChoices,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addChoicesHandler(questionNumber) {\r\n  let newchoices = state.choices;\r\n  newchoices[questionNumber].push(\"\");\r\n\r\n  let newAmountOfChoices = state.amountOfChoices;\r\n  newAmountOfChoices[questionNumber] =\r\n    Number(newAmountOfChoices[questionNumber]) + 1;\r\n\r\n  State.update({\r\n    amountOfChoices: newAmountOfChoices,\r\n    choices: newchoices,\r\n  });\r\n}\r\n\r\nfunction isValidTelegramLink() {\r\n  if (!state.pollDiscussionLink) return true;\r\n  return state.pollDiscussionLink.startsWith(\"https://t.me\");\r\n}\r\n\r\nfunction getTypeOfQuestionSelectionStyles(questionNumber, typeOfQuestion) {\r\n  if (state.pollTypes[questionNumber] == typeOfQuestion) {\r\n    return {\r\n      padding: \"1rem\",\r\n      borderRadius: \"1rem\",\r\n      cursor: \"pointer\",\r\n      border: \"1.5px solid #353A40\",\r\n      position: \"relative\",\r\n    };\r\n  } else {\r\n    return {\r\n      padding: \"1rem\",\r\n      borderRadius: \"1rem\",\r\n      cursor: \"pointer\",\r\n      border: \"1.5px solid #E1E9F0\",\r\n    };\r\n  }\r\n}\r\n\r\nfunction getDangerClassIfNeeded(tab) {\r\n  let normalStyles = true;\r\n  if (state.showErrorsInForm) {\r\n    for (let i = 0; i < state.amountOfQuestions; i++) {\r\n      if (tab == \"MainInformation\") {\r\n        normalStyles = normalStyles && state.pollTitle != \"\";\r\n        normalStyles = normalStyles && state.pollDescription != \"\";\r\n        normalStyles = normalStyles && isValidTelegramLink();\r\n        normalStyles = normalStyles && state.pollStartDate != \"\";\r\n        normalStyles = normalStyles && state.pollEndDate != \"\";\r\n        normalStyles =\r\n          normalStyles &&\r\n          getTimestamp(state.pollStartDate) < getTimestamp(state.pollEndDate);\r\n      } else {\r\n        if (\r\n          state.pollTypes[i] == pollTypes.SINGLE_ANSWER.id ||\r\n          state.pollTypes[i] == pollTypes.MULTISELECT.id\r\n        ) {\r\n          normalStyles =\r\n            normalStyles &&\r\n            !(state.choices[i].filter((c) => c != \"\").length < 2);\r\n        }\r\n        normalStyles = normalStyles && state.questions[i] != \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.showErrorsInForm) {\r\n    return !normalStyles && \"text-danger\";\r\n  }\r\n  return \"\";\r\n}\r\na;\r\n\r\nlet amountOfQuestions = [];\r\nfor (let i = 0; i < state.amountOfQuestions; i++) {\r\n  amountOfQuestions.push(i);\r\n}\r\n\r\nreturn (\r\n  <div\r\n    className=\"pt-4\"\r\n    style={{\r\n      borderRadius: \"0.375rem\",\r\n      backgroundColor: \"white\",\r\n      margin: \"0 auto\",\r\n    }}\r\n  >\r\n    <div style={{ margin: \"0 auto\" }}>\r\n      <span\r\n        className={getDangerClassIfNeeded(\"MainInformation\")}\r\n        style={\r\n          state.sectionShown == \"mainInfo\"\r\n            ? {\r\n                color: \"#353A40\",\r\n                fontSize: \"0.8rem\",\r\n                userSelect: \"none\",\r\n                cursor: \"pointer\",\r\n                marginRight: \"1rem\",\r\n              }\r\n            : {\r\n                color: \"#767B8E\",\r\n                fontSize: \"0.8rem\",\r\n                userSelect: \"none\",\r\n                cursor: \"pointer\",\r\n                marginRight: \"1rem\",\r\n              }\r\n        }\r\n        onClick={() => {\r\n          State.update({ sectionShown: \"mainInfo\" });\r\n        }}\r\n      >\r\n        <i className=\"bi bi-square-fill\"></i> Main information\r\n      </span>\r\n      <span\r\n        className={getDangerClassIfNeeded(\"Questions\")}\r\n        style={\r\n          state.sectionShown == \"questions\"\r\n            ? {\r\n                color: \"#353A40\",\r\n                fontSize: \"0.8rem\",\r\n                position: \"relative\",\r\n                userSelect: \"none\",\r\n                cursor: \"pointer\",\r\n              }\r\n            : {\r\n                color: \"#767B8E\",\r\n                fontSize: \"0.8rem\",\r\n                position: \"relative\",\r\n                userSelect: \"none\",\r\n                cursor: \"pointer\",\r\n              }\r\n        }\r\n        onClick={() => {\r\n          State.update({ sectionShown: \"questions\" });\r\n        }}\r\n      >\r\n        <i className=\"bi bi-square-fill\"></i>\r\n        Questions\r\n        <span\r\n          style={{\r\n            fontSize: \"0.7rem\",\r\n            position: \"absolute\",\r\n            top: \"-8%\",\r\n            left: \"103%\",\r\n            userSelect: \"none\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          {state.amountOfQuestions + \"\"}\r\n        </span>\r\n      </span>\r\n    </div>\r\n    <div className=\"pt-4\">\r\n      <div className=\"mb-3\" style={{ maxHeight: \"50vh\", overflowY: \"scroll\" }}>\r\n        {state.sectionShown == \"mainInfo\" && (\r\n          <div\r\n            className=\"d-flex flex-column justify-content-center\"\r\n            style={{ margin: \"0 auto\" }}\r\n          >\r\n            <label\r\n              for=\"pollTitle\"\r\n              style={{\r\n                fontSize: \"0.8rem\",\r\n                letterSpacing: \"-0.01em\",\r\n                color: \"#474D55\",\r\n                marginBottom: \"0.3rem\",\r\n              }}\r\n            >\r\n              Title*\r\n            </label>\r\n            <div style={{ position: \"relative\" }}>\r\n              <input\r\n                style={{\r\n                  backgroundColor: \"white\",\r\n                  padding: \"0.5rem 1.5rem\",\r\n                  borderRadius: \"0.8rem\",\r\n                  border: \"1.5px solid #E1E9F0\",\r\n                  color: \"#474D55\",\r\n                  letterSpacing: \"-0.01em\",\r\n                  width: \"100%\",\r\n                }}\r\n                type=\"text\"\r\n                className={\r\n                  !state.pollTitle && state.showErrorsInForm\r\n                    ? \"border border-danger mb-2\"\r\n                    : \"mb-2\"\r\n                }\r\n                id=\"pollTitle\"\r\n                value={state.pollTitle}\r\n                onChange={(e) => {\r\n                  State.update({ pollTitle: e.target.value });\r\n                }}\r\n              />\r\n              <i\r\n                className=\"bi bi-x-circle-fill\"\r\n                style={{\r\n                  color: \"#E1E9F0\",\r\n                  cursor: \"pointer\",\r\n                  position: \"absolute\",\r\n                  right: \"1rem\",\r\n                  top: \"0.55rem\",\r\n                }}\r\n                onClick={() => {\r\n                  State.update({ pollTitle: \"\" });\r\n                }}\r\n              ></i>\r\n            </div>\r\n            {!state.pollTitle && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">Title cannot be empty</p>\r\n            )}\r\n\r\n            <label\r\n              for=\"pollDescription\"\r\n              className=\"mt-2\"\r\n              style={{\r\n                fontSize: \"0.8rem\",\r\n                letterSpacing: \"-0.01em\",\r\n                color: \"#474D55\",\r\n                marginBottom: \"0.3rem\",\r\n              }}\r\n            >\r\n              Description*\r\n            </label>\r\n            <textarea\r\n              id=\"pollDescription\"\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                padding: \"0.5rem 1.5rem\",\r\n                borderRadius: \"0.8rem\",\r\n                border: \"1.5px solid #E1E9F0\",\r\n                color: \"#474D55\",\r\n                letterSpacing: \"-0.01em\",\r\n                width: \"100%\",\r\n              }}\r\n              rows=\"3\"\r\n              className={\r\n                !state.pollDescription &&\r\n                state.showErrorsInForm &&\r\n                \"border border-danger\"\r\n              }\r\n              value={state.pollDescription}\r\n              onChange={(e) => {\r\n                State.update({ pollDescription: e.target.value });\r\n              }}\r\n            ></textarea>\r\n            {!state.pollDescription && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">Description cannot be empty</p>\r\n            )}\r\n\r\n            <label\r\n              for=\"pollDiscussionLink\"\r\n              className=\"mt-3\"\r\n              style={{\r\n                fontSize: \"0.8rem\",\r\n                letterSpacing: \"-0.01em\",\r\n                color: \"#474D55\",\r\n                marginBottom: \"0.3rem\",\r\n              }}\r\n            >\r\n              Discussion link (optional)\r\n            </label>\r\n            <div style={{ position: \"relative\" }}>\r\n              <i\r\n                className=\"bi bi-people\"\r\n                style={{\r\n                  color: \"#767B8E\",\r\n                  position: \"absolute\",\r\n                  left: \"1rem\",\r\n                  top: \"0.55rem\",\r\n                }}\r\n              ></i>\r\n              <input\r\n                style={{\r\n                  backgroundColor: \"white\",\r\n                  padding: \"0.5rem 1.5rem 0.5rem 2.2rem\",\r\n                  borderRadius: \"0.8rem\",\r\n                  border: \"1.5px solid #E1E9F0\",\r\n                  color: \"#474D55\",\r\n                  letterSpacing: \"-0.01em\",\r\n                  width: \"100%\",\r\n                }}\r\n                type=\"text\"\r\n                className={\r\n                  !isValidTelegramLink() && state.showErrorsInForm\r\n                    ? \"border border-danger mb-2\"\r\n                    : \"mb-2\"\r\n                }\r\n                id=\"pollDiscussionLink\"\r\n                value={state.pollDiscussionLink}\r\n                onChange={(e) => {\r\n                  State.update({ pollDiscussionLink: e.target.value });\r\n                }}\r\n              />\r\n              <i\r\n                className=\"bi bi-x-circle-fill\"\r\n                style={{\r\n                  color: \"#E1E9F0\",\r\n                  cursor: \"pointer\",\r\n                  position: \"absolute\",\r\n                  right: \"1rem\",\r\n                  top: \"0.55rem\",\r\n                }}\r\n                onClick={() => {\r\n                  State.update({ pollDiscussionLink: \"\" });\r\n                }}\r\n              ></i>\r\n            </div>\r\n            {!isValidTelegramLink() && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">Not a valid link</p>\r\n            )}\r\n\r\n            <div\r\n              className=\"d-flex justify-content-between flex-wrap mb-3\"\r\n              style={{ maxWidth: \"100%\" }}\r\n            >\r\n              <div className=\"d-flex flex-column\" style={{ width: \"48%\" }}>\r\n                <label\r\n                  for=\"pollStartDate\"\r\n                  style={{\r\n                    fontSize: \"0.8rem\",\r\n                    letterSpacing: \"-0.01em\",\r\n                    color: \"#474D55\",\r\n                    marginBottom: \"0.3rem\",\r\n                  }}\r\n                >\r\n                  Start date*\r\n                </label>\r\n                {/*You have min and max properties on dates input*/}\r\n                <input\r\n                  style={getStyles(state.pollStartDate)}\r\n                  type=\"datetime-local\"\r\n                  id=\"pollStartDate\"\r\n                  value={state.pollStartDate}\r\n                  onChange={(e) => {\r\n                    State.update({ pollStartDate: e.target.value });\r\n                  }}\r\n                />\r\n                {!state.pollStartDate && state.showErrorsInForm && (\r\n                  <p className=\"text-danger\">Start date cannot be empty</p>\r\n                )}\r\n              </div>\r\n              <div className=\"d-flex flex-column\" style={{ width: \"48%\" }}>\r\n                <label\r\n                  for=\"pollEndDate\"\r\n                  style={{\r\n                    fontSize: \"0.8rem\",\r\n                    letterSpacing: \"-0.01em\",\r\n                    color: \"#474D55\",\r\n                    marginBottom: \"0.3rem\",\r\n                  }}\r\n                >\r\n                  End date*\r\n                </label>\r\n                <input\r\n                  style={getStyles(state.pollEndDate)}\r\n                  type=\"datetime-local\"\r\n                  id=\"pollStartDate\"\r\n                  value={state.pollEndDate}\r\n                  onChange={(e) => {\r\n                    State.update({ pollEndDate: e.target.value });\r\n                  }}\r\n                />\r\n                {!state.pollEndDate && state.showErrorsInForm && (\r\n                  <p className=\"text-danger\">End date cannot be empty</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n            {getTimestamp(state.pollStartDate) >=\r\n              getTimestamp(state.pollEndDate) &&\r\n              state.showErrorsInForm && (\r\n                <div>\r\n                  <p className=\"text-danger\">\r\n                    Poll should start before it ends\r\n                  </p>\r\n                </div>\r\n              )}\r\n          </div>\r\n        )}\r\n\r\n        {state.sectionShown == \"questions\" &&\r\n          amountOfQuestions.map((questionNumber) => {\r\n            return (\r\n              <>\r\n                <div\r\n                  className=\"d-flex flex-column justify-content-center\"\r\n                  style={{\r\n                    border: \"1.5px solid #E1E9F0\",\r\n                    padding: \"1.5rem 1rem\",\r\n                    borderRadius: \"1.2rem\",\r\n                    margin: \"1rem auto\",\r\n                  }}\r\n                >\r\n                  <label\r\n                    for=\"question\"\r\n                    style={{\r\n                      fontSize: \"0.8rem\",\r\n                      letterSpacing: \"-0.01em\",\r\n                      color: \"#474D55\",\r\n                      marginBottom: \"0.3rem\",\r\n                    }}\r\n                  >\r\n                    Question*\r\n                  </label>\r\n                  <div style={{ position: \"relative\" }}>\r\n                    <input\r\n                      style={{\r\n                        backgroundColor: \"white\",\r\n                        padding: \"0.5rem 1.5rem\",\r\n                        borderRadius: \"0.8rem\",\r\n                        border: \"1.5px solid #E1E9F0\",\r\n                        color: \"#474D55\",\r\n                        letterSpacing: \"-0.01em\",\r\n                        width: \"100%\",\r\n                      }}\r\n                      type=\"text\"\r\n                      className={\r\n                        !state.questions[questionNumber] &&\r\n                        state.showErrorsInForm\r\n                          ? \"border border-danger mb-2\"\r\n                          : \"mb-2\"\r\n                      }\r\n                      id={`question${questionNumber}`}\r\n                      value={state.questions[questionNumber]}\r\n                      onChange={(e) => {\r\n                        let newQuestions = state.questions;\r\n                        newQuestions[questionNumber] = e.target.value;\r\n\r\n                        State.update({ questions: newQuestions });\r\n                      }}\r\n                    />\r\n                    <i\r\n                      className=\"bi bi-x-circle-fill\"\r\n                      style={{\r\n                        color: \"#E1E9F0\",\r\n                        cursor: \"pointer\",\r\n                        position: \"absolute\",\r\n                        right: \"1rem\",\r\n                        top: \"0.55rem\",\r\n                      }}\r\n                      onClick={() => {\r\n                        let newQuestions = state.questions;\r\n                        newQuestions[questionNumber] = \"\";\r\n\r\n                        State.update({ question: newQuestions });\r\n                      }}\r\n                    ></i>\r\n                  </div>\r\n                  {!state.questions[questionNumber] &&\r\n                    state.showErrorsInForm && (\r\n                      <p className=\"text-danger\">Question cannot be empty</p>\r\n                    )}\r\n\r\n                  <label\r\n                    className=\"mt-3\"\r\n                    for=\"pollType\"\r\n                    style={{\r\n                      fontSize: \"0.8rem\",\r\n                      letterSpacing: \"-0.01em\",\r\n                      color: \"#474D55\",\r\n                      marginBottom: \"0.3rem\",\r\n                    }}\r\n                  >\r\n                    Type of question\r\n                  </label>\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <div\r\n                      style={getTypeOfQuestionSelectionStyles(\r\n                        questionNumber,\r\n                        \"0\"\r\n                      )}\r\n                      onClick={() => {\r\n                        let newPollTypes = state.pollTypes;\r\n                        newPollTypes[questionNumber] = \"0\";\r\n\r\n                        State.update({ pollTypes: newPollTypes });\r\n                      }}\r\n                    >\r\n                      {state.pollTypes[questionNumber] == \"0\" && (\r\n                        <i\r\n                          className=\"bi bi-check2-circle\"\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: \"-0.5rem\",\r\n                            right: \"-0.2rem\",\r\n                            color: \"rgb(53, 58, 64)\",\r\n                            backgroundColor: \"white\",\r\n                            borderRadius: \"100px\",\r\n                          }}\r\n                        ></i>\r\n                      )}\r\n                      <p\r\n                        style={{\r\n                          letterSpacing: \"-0.01em\",\r\n                          fontWeight: \"500\",\r\n                          color: \"#010A2D\",\r\n                          fontSize: \"0.8rem\",\r\n                          userSelect: \"none\",\r\n                        }}\r\n                      >\r\n                        Yes or No\r\n                      </p>\r\n                      <div className=\"d-flex mb-1\">\r\n                        <input\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"16px\",\r\n                            marginRight: \"0.2rem\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"radio\"\r\n                          disabled\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"16px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                      <div className=\"d-flex\">\r\n                        <input\r\n                          className=\"form-check-input\"\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"16px\",\r\n                            marginRight: \"0.2rem\",\r\n                            backgroundColor: \"black\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"radio\"\r\n                          disabled\r\n                          checked\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"16px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={getTypeOfQuestionSelectionStyles(\r\n                        questionNumber,\r\n                        \"1\"\r\n                      )}\r\n                      onClick={() => {\r\n                        let newPollTypes = state.pollTypes;\r\n                        newPollTypes[questionNumber] = \"1\";\r\n\r\n                        State.update({ pollTypes: newPollTypes });\r\n                      }}\r\n                    >\r\n                      {state.pollTypes[questionNumber] == \"1\" && (\r\n                        <i\r\n                          className=\"bi bi-check2-circle\"\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: \"-0.5rem\",\r\n                            right: \"-0.2rem\",\r\n                            color: \"rgb(53, 58, 64)\",\r\n                            backgroundColor: \"white\",\r\n                            borderRadius: \"100px\",\r\n                          }}\r\n                        ></i>\r\n                      )}\r\n                      <p\r\n                        style={{\r\n                          letterSpacing: \"-0.01em\",\r\n                          fontWeight: \"500\",\r\n                          color: \"#010A2D\",\r\n                          fontSize: \"0.8rem\",\r\n                          userSelect: \"none\",\r\n                        }}\r\n                      >\r\n                        Single Answer\r\n                      </p>\r\n                      <div className=\"d-flex mb-1\">\r\n                        <input\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"12px\",\r\n                            marginRight: \"0.2rem\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"radio\"\r\n                          disabled\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"12px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                      <div className=\"d-flex mb-1\">\r\n                        <input\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"12px\",\r\n                            marginRight: \"0.2rem\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"radio\"\r\n                          disabled\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"12px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <input\r\n                          className=\"form-check-input\"\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"12px\",\r\n                            marginTop: \"0\",\r\n                            marginRight: \"0.2rem\",\r\n                            backgroundColor: \"black\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"radio\"\r\n                          disabled\r\n                          checked\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"12px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={getTypeOfQuestionSelectionStyles(\r\n                        questionNumber,\r\n                        \"2\"\r\n                      )}\r\n                      onClick={() => {\r\n                        let newPollTypes = state.pollTypes;\r\n                        newPollTypes[questionNumber] = \"2\";\r\n\r\n                        State.update({ pollTypes: newPollTypes });\r\n                      }}\r\n                    >\r\n                      {state.pollTypes[questionNumber] == \"2\" && (\r\n                        <i\r\n                          className=\"bi bi-check2-circle\"\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: \"-0.5rem\",\r\n                            right: \"-0.2rem\",\r\n                            color: \"rgb(53, 58, 64)\",\r\n                            backgroundColor: \"white\",\r\n                            borderRadius: \"100px\",\r\n                          }}\r\n                        ></i>\r\n                      )}\r\n                      <p\r\n                        style={{\r\n                          letterSpacing: \"-0.01em\",\r\n                          fontWeight: \"500\",\r\n                          color: \"#010A2D\",\r\n                          fontSize: \"0.8rem\",\r\n                          userSelect: \"none\",\r\n                        }}\r\n                      >\r\n                        Multiselect\r\n                      </p>\r\n                      <div className=\"d-flex mb-1\">\r\n                        <input\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"12px\",\r\n                            marginRight: \"0.2rem\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"checkbox\"\r\n                          disabled\r\n                          checked\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"12px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                      <div className=\"d-flex mb-1\">\r\n                        <input\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"12px\",\r\n                            marginRight: \"0.2rem\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"checkbox\"\r\n                          disabled\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"12px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <input\r\n                          className=\"form-check-input\"\r\n                          style={{\r\n                            appearance: \"auto\",\r\n                            width: \"12px\",\r\n                            marginTop: \"0\",\r\n                            marginRight: \"0.2rem\",\r\n                            backgroundColor: \"black\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"checkbox\"\r\n                          disabled\r\n                          checked\r\n                        />\r\n                        <input\r\n                          style={{\r\n                            padding: \"0\",\r\n                            border: \"none\",\r\n                            borderRadius: \"30px\",\r\n                            height: \"12px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          type=\"text\"\r\n                          disabled\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={getTypeOfQuestionSelectionStyles(\r\n                        questionNumber,\r\n                        \"3\"\r\n                      )}\r\n                      onClick={() => {\r\n                        let newPollTypes = state.pollTypes;\r\n                        newPollTypes[questionNumber] = \"3\";\r\n\r\n                        State.update({ pollTypes: newPollTypes });\r\n                      }}\r\n                    >\r\n                      {state.pollTypes[questionNumber] == \"3\" && (\r\n                        <i\r\n                          className=\"bi bi-check2-circle\"\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: \"-0.5rem\",\r\n                            right: \"-0.2rem\",\r\n                            color: \"rgb(53, 58, 64)\",\r\n                            backgroundColor: \"white\",\r\n                            borderRadius: \"100px\",\r\n                          }}\r\n                        ></i>\r\n                      )}\r\n                      <p\r\n                        style={{\r\n                          letterSpacing: \"-0.01em\",\r\n                          fontWeight: \"500\",\r\n                          color: \"#010A2D\",\r\n                          fontSize: \"0.8rem\",\r\n                          userSelect: \"none\",\r\n                        }}\r\n                      >\r\n                        Text Answer\r\n                      </p>\r\n                      <input\r\n                        style={{\r\n                          marginBottom: \"0.5rem\",\r\n                          padding: \"0\",\r\n                          border: \"none\",\r\n                          borderRadius: \"30px\",\r\n                          height: \"12px\",\r\n                          width: \"100%\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        type=\"text\"\r\n                        disabled\r\n                      />\r\n                      <input\r\n                        style={{\r\n                          marginBottom: \"0.5rem\",\r\n                          padding: \"0\",\r\n                          border: \"none\",\r\n                          borderRadius: \"30px\",\r\n                          height: \"12px\",\r\n                          width: \"90%\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        type=\"text\"\r\n                        disabled\r\n                      />\r\n                      <input\r\n                        style={{\r\n                          padding: \"0\",\r\n                          border: \"none\",\r\n                          borderRadius: \"30px\",\r\n                          height: \"12px\",\r\n                          width: \"100%\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        type=\"text\"\r\n                        disabled\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {(state.pollTypes[questionNumber] == \"1\" ||\r\n                    state.pollTypes[questionNumber] == \"2\") && (\r\n                    <>\r\n                      <label\r\n                        className=\"mt-3\"\r\n                        for=\"pollType\"\r\n                        style={{\r\n                          fontSize: \"0.8rem\",\r\n                          letterSpacing: \"-0.01em\",\r\n                          color: \"#474D55\",\r\n                          marginBottom: \"0.3rem\",\r\n                        }}\r\n                      >\r\n                        Answer options\r\n                      </label>\r\n                      {renderTextInputsForChoices(questionNumber)}\r\n                    </>\r\n                  )}\r\n                  {state.showErrorsInForm &&\r\n                    (state.pollTypes[questionNumber] ==\r\n                      pollTypes.SINGLE_ANSWER.id ||\r\n                      state.pollTypes[questionNumber] ==\r\n                        pollTypes.MULTISELECT.id) &&\r\n                    state.choices[questionNumber].filter((c) => c != \"\")\r\n                      .length < 2 && (\r\n                      <p className=\"text-danger\">\r\n                        Should have at least 2 options\r\n                      </p>\r\n                    )}\r\n                </div>\r\n              </>\r\n            );\r\n          })}\r\n        {state.sectionShown == \"questions\" && (\r\n          <button\r\n            className=\"d-flex justify-content-center align-items-center py-3 w-100\"\r\n            style={{\r\n              margin: \"1rem auto\",\r\n              backgroundColor: \"#F2F6FA\",\r\n              borderColor: \"transparent\",\r\n              borderRadius: \"20px\",\r\n            }}\r\n            onClick={() => {\r\n              let oldPollTypes = state.PollTypes;\r\n              let newPollTypes = [];\r\n\r\n              for (let i = 0; i < oldPollTypes.length; i++) {\r\n                newPollTypes.push(oldPollTypes[i]);\r\n              }\r\n              newPollTypes.push(\"\");\r\n\r\n              let oldChoices = state.choices;\r\n              let newChoices = [];\r\n\r\n              for (let i = 0; i < oldChoices.length; i++) {\r\n                newChoices.push(oldChoices[i]);\r\n              }\r\n              newChoices.push([\"\"]);\r\n\r\n              let oldAmountOfChoices = state.amountOfChoices;\r\n              let newAmountOfChoices = [];\r\n\r\n              for (let i = 0; i < oldAmountOfChoices.length; i++) {\r\n                newChoices.push(oldAmountOfChoices[i]);\r\n              }\r\n              newAmountOfChoices.push([\"\"]);\r\n\r\n              State.update({\r\n                amountOfQuestions: state.amountOfQuestions + 1,\r\n                pollTypes: newPollTypes,\r\n                choices: newChoices,\r\n                amountOfChoices: newAmountOfChoices,\r\n              });\r\n            }}\r\n          >\r\n            <i\r\n              className=\"bi bi-plus-lg\"\r\n              style={{ color: \"#010A2D\", marginRight: \"0.7rem\" }}\r\n            ></i>\r\n            <span\r\n              style={{\r\n                color: \"#010A2D\",\r\n                fontSize: \"1rem\",\r\n                dontWeight: \"700\",\r\n              }}\r\n            >\r\n              Add question\r\n            </span>\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row-reverse\">\r\n        {/*<button\r\n          className=\"my-2 btn btn-outline-primary\"\r\n          onClick={() => State.update({ showPreview: true })}\r\n        >\r\n          Preview\r\n        </button>*/}\r\n\r\n        {isValidInput() ? (\r\n          <CommitButton\r\n            style={\r\n              state.hoveringElement == \"createPollButton\"\r\n                ? {\r\n                    border: \"2px solid black\",\r\n                    color: \"black\",\r\n                    backgroundColor: \"white\",\r\n                    fontWeight: \"500\",\r\n                    fontSize: \"1rem\",\r\n                    margin: \"0\",\r\n                    padding: \"0.3rem 1.5rem\",\r\n                    borderRadius: \"12px\",\r\n                  }\r\n                : {\r\n                    border: \"2px solid transparent\",\r\n                    fontWeight: \"500\",\r\n                    fontSize: \"1rem\",\r\n                    margin: \"0\",\r\n                    padding: \"0.3rem 1.5rem\",\r\n                    backgroundColor: \"#010A2D\",\r\n                    borderRadius: \"12px\",\r\n                    color: \"white\",\r\n                  }\r\n            }\r\n            data={getPublicationParams(false)}\r\n            onMouseEnter={() => {\r\n              State.update({ hoveringElement: \"createPollButton\" });\r\n            }}\r\n            onMouseLeave={() => {\r\n              State.update({ hoveringElement: \"\" });\r\n            }}\r\n            onMouse\r\n            onClick={() => {\r\n              State.update({\r\n                showSendFeedback: true,\r\n              });\r\n            }}\r\n          >\r\n            Create\r\n          </CommitButton>\r\n        ) : (\r\n          <button\r\n            style={\r\n              state.hoveringElement == \"createPollButton\"\r\n                ? {\r\n                    border: \"2px solid black\",\r\n                    color: \"black\",\r\n                    backgroundColor: \"white\",\r\n                    fontWeight: \"500\",\r\n                    fontSize: \"1rem\",\r\n                    margin: \"0\",\r\n                    padding: \"0.3rem 1.5rem\",\r\n                    borderRadius: \"12px\",\r\n                  }\r\n                : {\r\n                    border: \"2px solid transparent\",\r\n                    fontWeight: \"500\",\r\n                    fontSize: \"1rem\",\r\n                    margin: \"0\",\r\n                    padding: \"0.3rem 1.5rem\",\r\n                    backgroundColor: \"#010A2D\",\r\n                    borderRadius: \"12px\",\r\n                    color: \"white\",\r\n                  }\r\n            }\r\n            onMouseEnter={() => {\r\n              State.update({ hoveringElement: \"createPollButton\" });\r\n            }}\r\n            onMouseLeave={() => {\r\n              State.update({ hoveringElement: \"\" });\r\n            }}\r\n            onClick={() => State.update({ showErrorsInForm: true })}\r\n          >\r\n            Create\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {state.showPreview && renderModal(\"preview\")}\r\n      {state.showSendFeedback && renderModal(\"sendFeedback\")}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newPollQuestionInterface"}