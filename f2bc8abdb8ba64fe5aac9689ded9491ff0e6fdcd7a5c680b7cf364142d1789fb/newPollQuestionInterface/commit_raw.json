{"tx_hash": "Go63gC3wXES6ZpcjH3xpQA9A5Pufo72wmKRyXGsvpVsd", "action_id_social": "AMtvg6ShqhbVaK19Z1t8dncUNN2qdjmyuWbwsEY2fh8w-0-widget", "block_id": 83722459, "block_timestamp": "2023-01-25 00:13:15.527", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newPollQuestionInterface", "source_code": "/********** Start validations ************/\n\n/********** End validations ************/\n\n/********** Start initialization ************/\n\nState.init({\n  pollTitle: \"\",\n  pollDescription: \"\",\n  pollDiscussionLink: \"\",\n  pollStartDate: \"\",\n  pollEndDate: \"\",\n  amountOfQuestions: 1,\n  questions: [\"\"],\n  //Next 3 are setted with those values so theres a default value for pollTypes\n  // Treated as a number throws an error\n  pollTypes: [\"0\"],\n  choices: [[\"Yes\", \"No\"]],\n  amountOfChoices: [2],\n  showErrorsInForm: false,\n  showPreview: false,\n  showSendFeedback: false,\n  sectionShown: \"mainInfo\",\n  hoveringElement: \"\",\n});\n\nlet amountOfQuestions = [];\nfor (let i = 0; i < state.amountOfQuestions; i++) {\n  amountOfQuestions.push(i);\n}\n/********** End initialization ************/\n\n/********** Start constants ************/\n\nconst pollTypes = {\n  TEXT: { id: \"0\", value: \"Text\" },\n  SINGLE_ANSWER: { id: \"1\", value: \"Single answer\" },\n  MULTISELECT: { id: \"2\", value: \"Multiselect\" },\n  YES_OR_NO: { id: \"3\", value: \"Yes or No\" },\n};\n\nconst widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\n\nconst MODAL_TYPES = {\n  PREVIEW: {\n    id: 0,\n    text: \"preview\",\n  },\n  SEND_FEEDBACK: {\n    id: 1,\n    text: \"sendFeedback\",\n  },\n};\n\nconst QUESTION_TYPE_DISPLAY = {\n  YES_NO: {\n    id: 0,\n    text: \"Yes or no\",\n    type: \"radio\",\n    length: 2,\n  },\n  SINGLE_ANSWER: {\n    id: 1,\n    text: \"Single Answer\",\n    type: \"radio\",\n    length: 3,\n  },\n  MULTISELECT: {\n    id: 2,\n    text: \"Multiselect\",\n    type: \"checkbox\",\n    length: 3,\n  },\n  TEXT_ANSWER: {\n    id: 3,\n    text: \"Text Answer\",\n    type: null,\n    length: 3,\n  },\n};\n\n/********** End constants ************/\n\n/********** Start styles ************/\n\nconst styleUnderline = {\n  backgroundImage: \"linear-gradient(black 0 0)\",\n  backgroundPosition: \"bottom center\",\n  backgroundSize:\n    \"60% 2px\" /*Adjust the background size to control length and height*/,\n  backgroundRepeat: \"no-repeat\",\n  paddingBottom: \"4px\" /* this can also control the position */,\n};\n\nfunction getStyles(inputData) {\n  return !inputData && state.showErrorsInForm\n    ? {\n        backgroundColor: \"white\",\n        padding: \"0.5rem 1.5rem\",\n        borderRadius: \"0.8rem\",\n        color: \"#474D55\",\n        letterSpacing: \"-0.01em\",\n        width: \"100%\",\n        border: \"1px solid #dc3545\",\n        borderOpacity: \"1\",\n      }\n    : {\n        border: \"1.5px solid #E1E9F0\",\n        backgroundColor: \"white\",\n        padding: \"0.5rem 1.5rem\",\n        borderRadius: \"0.8rem\",\n        color: \"#474D55\",\n        letterSpacing: \"-0.01em\",\n        width: \"100%\",\n      };\n}\n\nfunction getTypeOfQuestionSelectionStyles(questionNumber, typeOfQuestion) {\n  let style = {\n    padding: \"1rem\",\n    borderRadius: \"1rem\",\n    cursor: \"pointer\",\n  };\n  if (state.pollTypes[questionNumber] == typeOfQuestion) {\n    return {\n      ...style,\n      border: \"1.5px solid #353A40\",\n      position: \"relative\",\n    };\n  } else {\n    return {\n      ...style,\n      border: \"1.5px solid #E1E9F0\",\n    };\n  }\n}\n\n// TODO compare with function isValidInput and use it\nfunction getDangerClassIfNeeded(tab) {\n  let shouldDisplayNormalStyles = true;\n  if (state.showErrorsInForm) {\n    for (let i = 0; i < state.amountOfQuestions; i++) {\n      if (tab == \"MainInformation\") {\n        shouldDisplayNormalStyles =\n          shouldDisplayNormalStyles && state.pollTitle != \"\";\n        shouldDisplayNormalStyles =\n          shouldDisplayNormalStyles && state.pollDescription != \"\";\n        shouldDisplayNormalStyles = shouldDisplayNormalStyles && isValidLink();\n        shouldDisplayNormalStyles =\n          shouldDisplayNormalStyles && state.pollStartDate != \"\";\n        shouldDisplayNormalStyles =\n          shouldDisplayNormalStyles && state.pollEndDate != \"\";\n        shouldDisplayNormalStyles =\n          shouldDisplayNormalStyles &&\n          getTimestamp(state.pollStartDate) < getTimestamp(state.pollEndDate);\n      } else if (state.sectionShown == \"questions\") {\n        if (\n          state.pollTypes[i] == pollTypes.SINGLE_ANSWER.id ||\n          state.pollTypes[i] == pollTypes.MULTISELECT.id\n        ) {\n          shouldDisplayNormalStyles =\n            shouldDisplayNormalStyles &&\n            !(state.choices[i].filter((c) => c != \"\").length < 2);\n        }\n        shouldDisplayNormalStyles =\n          shouldDisplayNormalStyles && state.questions[i] != \"\";\n      }\n    }\n  }\n\n  if (state.showErrorsInForm) {\n    return !shouldDisplayNormalStyles && \"text-danger\";\n  }\n  return \"\";\n}\n\n/********** End styles ************/\n\n/********** Start functions ************/\n\nfunction getPublicationParams(isDraft) {\n  let paramQuestions = [];\n\n  for (let i = 0; i < state.questions.length; i++) {\n    paramQuestions.push({\n      question: state.questions[i],\n      questionType: state.pollTypes[i],\n      choicesOptions: state.choices[i].filter((c) => c != \"\"),\n    });\n  }\n\n  return {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: \"question-v3.1.0\",\n          value: {\n            isDraft,\n            title: state.pollTitle,\n            description: state.pollDescription,\n            tgLink: state.pollDiscussionLink,\n            startTimestamp: getTimestamp(state.pollStartDate),\n            endTimestamp: getTimestamp(state.pollEndDate),\n            questions: paramQuestions,\n            timestamp: Date.now(),\n          },\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n}\n\nfunction getTimestamp(date) {\n  return new Date(`${date}`).getTime();\n}\n\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nfunction validateOptionsSettedProperly() {\n  let allQuestionsValid = true;\n  for (let i = 0; i < amountOfQuestions.length; i++) {\n    if (\n      state.pollTypes[i] == pollTypes.SINGLE_ANSWER.id ||\n      state.pollTypes[i] == pollTypes.MULTISELECT.id\n    ) {\n      allQuestionsValid =\n        allQuestionsValid &&\n        state.choices[i].filter((c) => c != \"\").length >= 2;\n    }\n  }\n  return allQuestionsValid;\n}\n\nfunction validateQuestionsSettedProperly() {\n  let allQuestionsValid = true;\n  for (let i = 0; i < amountOfQuestions.length; i++) {\n    allQuestionsValid = allQuestionsValid && state.questions[i] != \"\";\n  }\n  return allQuestionsValid;\n}\n\nfunction isValidInput(validateQuestions) {\n  let result = true;\n  result = result && state.pollTitle != \"\";\n  result = result && state.pollDescription != \"\";\n  result = result && isValidLink();\n  result = result && state.pollStartDate != \"\";\n  result = result && state.pollEndDate != \"\";\n  if (validateQuestions) {\n    result = result && validateQuestionsSettedProperly();\n  }\n  result =\n    result &&\n    getTimestamp(state.pollStartDate) < getTimestamp(state.pollEndDate);\n  result = result && validateOptionsSettedProperly();\n  return result;\n}\n\nfunction deleteChoiceHandler(questionNumber, choiceNumber) {\n  if (state.amountOfChoices[questionNumber] > 1) {\n    let thisQuestionChoices = state.choices[questionNumber];\n\n    let newThisQuestionChoices = [];\n\n    for (let i = 0; i < thisQuestionChoices.length; i++) {\n      if (i != choiceNumber) {\n        newThisQuestionChoices.push(thisQuestionChoices[i]);\n      }\n    }\n\n    let newChoices = state.choices;\n    newChoices[questionNumber] = newThisQuestionChoices;\n\n    let newAmountOfChoices = state.amountOfChoices;\n    newAmountOfChoices[questionNumber] =\n      Number(newAmountOfChoices[questionNumber]) - 1;\n\n    State.update({\n      amountOfChoices: newAmountOfChoices,\n      choices: newChoices,\n    });\n  }\n}\n\nfunction addChoicesHandler(questionNumber) {\n  let newchoices = state.choices;\n  newchoices[questionNumber].push(\"\");\n\n  let newAmountOfChoices = state.amountOfChoices;\n  newAmountOfChoices[questionNumber] =\n    Number(newAmountOfChoices[questionNumber]) + 1;\n\n  State.update({\n    amountOfChoices: newAmountOfChoices,\n    choices: newchoices,\n  });\n}\n\nfunction isValidLink() {\n  if (!state.pollDiscussionLink) return true;\n  return (\n    state.pollDiscussionLink.startsWith(\"https://t.me\") ||\n    state.pollDiscussionLink.startsWith(\"https://miro.com/\") ||\n    state.pollDiscussionLink.startsWith(\"https://docs.google.com/\") ||\n    state.pollDiscussionLink.startsWith(\"https://gov.near.org/\") ||\n    state.pollDiscussionLink.startsWith(\"https://discord.gg/\")\n  );\n}\n\n/********** End functions ************/\n\n/********** Start components ************/\n\nconst renderModal = (modalType) => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        (state.showPreview || state.showSendFeedback) && {\n          display: \"block\",\n          backgroundColor: \"#7e7e7e70\",\n        }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={(e) => {\n        if (e.target.id == \"modal\" && state.showSendFeedback) {\n          State.update({\n            pollTitle: \"\",\n            pollDescription: \"\",\n            pollDiscussionLink: \"\",\n            pollStartDate: \"\",\n            pollEndDate: \"\",\n            amountOfQuestions: 1,\n            questions: [\"\"],\n            pollTypes: [\"0\"],\n            choices: [[\"\"]],\n            amountOfChoices: [1],\n            showSendFeedback: false,\n          });\n        } else if (e.target.id == \"modal\") {\n          State.update({ showPreview: false });\n        }\n      }}\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"80%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={\n            state.showSendFeedback\n              ? { backgroundColor: \"rgb(230, 230, 230)\", marginTop: \"30vh\" }\n              : { backgroundColor: \"rgb(230, 230, 230)\" }\n          }\n        >\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Preview</h5>\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => {\n                if (state.showSendFeedback) {\n                  State.update({\n                    pollTitle: \"\",\n                    pollDescription: \"\",\n                    pollDiscussionLink: \"\",\n                    pollStartDate: \"\",\n                    pollEndDate: \"\",\n                    amountOfQuestions: 1,\n                    questions: [\"\"],\n                    pollTypes: [\"0\"],\n                    choices: [[\"\"]],\n                    amountOfChoices: [1],\n                    showSendFeedback: false,\n                  });\n                } else {\n                  State.update({ showPreview: false });\n                }\n              }}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              backgroundColor: \"white\",\n              margin: \"0 auto\",\n            }}\n          >\n            {modalType == MODAL_TYPES.PREVIEW ? (\n              <Widget\n                src={`${widgetOwner}/widget/newVotingInterface`}\n                props={{\n                  isPreview: true,\n                  previewInfo: {\n                    accountId: context.accountId,\n                    blockHeight: undefined,\n                    value: {\n                      tgLink: state.pollDiscussionLink,\n                      isDraft,\n                      title: state.pollTitle,\n                      description: state.pollDescription,\n                      startTimestamp: getTimestamp(state.pollStartDate),\n                      endTimestamp: getTimestamp(state.pollEndDate),\n                      questions: state.questions,\n                      questionTypes: state.pollTypes,\n                      choicesOptions: state.choices.forEach((questionChoices) =>\n                        questionChoices.filter((c) => c != \"\")\n                      ),\n                      timestamp: Date.now(),\n                    },\n                  },\n                }}\n              />\n            ) : (\n              modalType == MODAL_TYPES.SEND_FEEDBACK && (\n                <p styles={{ textAling: \"center\" }}>\n                  Poll created succesfully!\n                </p>\n              )\n            )}\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              onClick={() => {\n                if (state.showSendFeedback) {\n                  State.update({\n                    pollTitle: \"\",\n                    pollDescription: \"\",\n                    pollDiscussionLink: \"\",\n                    pollStartDate: \"\",\n                    pollEndDate: \"\",\n                    amountOfQuestions: 1,\n                    questions: [\"\"],\n                    pollTypes: [\"0\"],\n                    choices: [[\"\"]],\n                    amountOfChoices: [1],\n                    showSendFeedback: false,\n                  });\n                } else {\n                  State.update({ showPreview: false });\n                }\n              }}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderTextInputsForChoices = (questionNumber) => {\n  let thisQuestionChoices = [];\n\n  for (let i = 0; i < state.amountOfChoices[questionNumber]; i++) {\n    thisQuestionChoices.push(i);\n  }\n\n  return (\n    <>\n      {thisQuestionChoices.map((choiceNumber) => {\n        return (\n          <div className=\"mb-2\">\n            <div style={{ position: \"relative\" }}>\n              <input\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"0.5rem 1.5rem\",\n                  borderRadius: \"0.8rem\",\n                  border: \"1.5px solid #E1E9F0\",\n                  color: \"#474D55\",\n                  letterSpacing: \"-0.01em\",\n                  width: \"100%\",\n                }}\n                type=\"text\"\n                className={\n                  !state.choices[questionNumber][choiceNumber] &&\n                  state.showErrorsInForm\n                    ? \"border border-danger mb-2\"\n                    : \"mb-2\"\n                }\n                id={`question-${questionNumber}-${choiceNumber}`}\n                value={state.choices[questionNumber][choiceNumber]}\n                onChange={(e) => {\n                  let newChoices = state.choices;\n                  newChoices[questionNumber][choiceNumber] = e.target.value;\n\n                  State.update({ choices: newChoices });\n                }}\n              />\n              <i\n                className=\"bi bi-x\"\n                style={{\n                  color: \"#767B8E\",\n                  cursor: \"pointer\",\n                  position: \"absolute\",\n                  right: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n                onClick={() =>\n                  deleteChoiceHandler(questionNumber, choiceNumber)\n                }\n              ></i>\n            </div>\n          </div>\n        );\n      })}\n      <div\n        className=\"d-flex align-items-center\"\n        style={{ cursor: \"pointer\", maxWidth: \"max-content\" }}\n        onClick={() => addChoicesHandler(questionNumber)}\n      >\n        <i\n          className=\"bi bi-plus-lg\"\n          style={{ color: \"#4B516A\", marginRight: \"0.7rem\" }}\n        ></i>\n        <span\n          style={{\n            color: \"#4B516A\",\n            fontSize: \"0.8rem\",\n            dontWeight: \"500\",\n            letterSpacing: \"0.01em\",\n          }}\n        >\n          Add another option\n        </span>\n      </div>\n    </>\n  );\n};\n\n/********** End components ************/\n\n/********** Start rendering ************/\n\nreturn (\n  <div\n    className=\"pt-4\"\n    style={{\n      borderRadius: \"0.375rem\",\n      backgroundColor: \"white\",\n      margin: \"0 auto\",\n    }}\n  >\n    <div style={{ margin: \"0 auto\" }}>\n      <span\n        className={getDangerClassIfNeeded(\"MainInformation\")}\n        style={\n          state.sectionShown == \"mainInfo\"\n            ? {\n                ...styleUnderline,\n                color: \"#353A40\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n                marginRight: \"1rem\",\n              }\n            : {\n                color: \"#767B8E\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n                marginRight: \"1rem\",\n              }\n        }\n        onClick={() => {\n          State.update({ sectionShown: \"mainInfo\" });\n        }}\n      >\n        <i className=\"bi bi-square-fill\"></i> Main information\n      </span>\n\n      <span\n        className={getDangerClassIfNeeded(\"Questions\")}\n        style={\n          state.sectionShown == \"questions\"\n            ? {\n                ...styleUnderline,\n                color: \"#353A40\",\n                fontSize: \"0.8rem\",\n                userSelect: \"none\",\n                position: \"relative\",\n                cursor: \"pointer\",\n              }\n            : {\n                color: \"#767B8E\",\n                fontSize: \"0.8rem\",\n                position: \"relative\",\n                userSelect: \"none\",\n                cursor: \"pointer\",\n              }\n        }\n        onClick={() => {\n          isValidInput(false) && State.update({ sectionShown: \"questions\" });\n        }}\n      >\n        <i className=\"bi bi-square-fill\"></i>\n        Questions\n        <span\n          style={\n            isValidInput(false)\n              ? {\n                  fontSize: \"0.7rem\",\n                  position: \"absolute\",\n                  top: \"-8%\",\n                  left: \"103%\",\n                  userSelect: \"none\",\n                }\n              : {\n                  fontSize: \"0.7rem\",\n                  position: \"absolute\",\n                  top: \"-8%\",\n                  left: \"103%\",\n                  userSelect: \"none\",\n                  cursor: \"pointer\",\n                }\n          }\n        >\n          {state.amountOfQuestions + \"\"}\n        </span>\n      </span>\n    </div>\n    <div className=\"pt-4\">\n      <div className=\"mb-3\" style={{ maxHeight: \"50vh\", overflowY: \"scroll\" }}>\n        {state.sectionShown == \"mainInfo\" && (\n          <div\n            className=\"d-flex flex-column justify-content-center\"\n            style={{ margin: \"0 auto\" }}\n          >\n            <label\n              for=\"pollTitle\"\n              style={{\n                fontSize: \"0.8rem\",\n                letterSpacing: \"-0.01em\",\n                color: \"#474D55\",\n                marginBottom: \"0.3rem\",\n              }}\n            >\n              Title*\n            </label>\n            <div style={{ position: \"relative\" }}>\n              <input\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"0.5rem 1.5rem\",\n                  borderRadius: \"0.8rem\",\n                  border: \"1.5px solid #E1E9F0\",\n                  color: \"#474D55\",\n                  letterSpacing: \"-0.01em\",\n                  width: \"100%\",\n                }}\n                type=\"text\"\n                className={\n                  !state.pollTitle && state.showErrorsInForm\n                    ? \"border border-danger mb-2\"\n                    : \"mb-2\"\n                }\n                id=\"pollTitle\"\n                value={state.pollTitle}\n                onChange={(e) => {\n                  State.update({ pollTitle: e.target.value });\n                }}\n              />\n              <i\n                className=\"bi bi-x-circle-fill\"\n                style={{\n                  color: \"#E1E9F0\",\n                  cursor: \"pointer\",\n                  position: \"absolute\",\n                  right: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n                onClick={() => {\n                  State.update({ pollTitle: \"\" });\n                }}\n              ></i>\n            </div>\n            {!state.pollTitle && state.showErrorsInForm && (\n              <p className=\"text-danger\">Title cannot be empty</p>\n            )}\n\n            <label\n              for=\"pollDescription\"\n              className=\"mt-2\"\n              style={{\n                fontSize: \"0.8rem\",\n                letterSpacing: \"-0.01em\",\n                color: \"#474D55\",\n                marginBottom: \"0.3rem\",\n              }}\n            >\n              Description*\n            </label>\n            <textarea\n              id=\"pollDescription\"\n              style={{\n                backgroundColor: \"white\",\n                padding: \"0.5rem 1.5rem\",\n                borderRadius: \"0.8rem\",\n                border: \"1.5px solid #E1E9F0\",\n                color: \"#474D55\",\n                letterSpacing: \"-0.01em\",\n                width: \"100%\",\n              }}\n              rows=\"3\"\n              className={\n                !state.pollDescription &&\n                state.showErrorsInForm &&\n                \"border border-danger\"\n              }\n              value={state.pollDescription}\n              onChange={(e) => {\n                State.update({ pollDescription: e.target.value });\n              }}\n            ></textarea>\n            {!state.pollDescription && state.showErrorsInForm && (\n              <p className=\"text-danger\">Description cannot be empty</p>\n            )}\n\n            <label\n              for=\"pollDiscussionLink\"\n              className=\"mt-3\"\n              style={{\n                fontSize: \"0.8rem\",\n                letterSpacing: \"-0.01em\",\n                color: \"#474D55\",\n                marginBottom: \"0.3rem\",\n              }}\n            >\n              Discussion link (optional)\n            </label>\n            <div style={{ position: \"relative\" }}>\n              <i\n                className=\"bi bi-people\"\n                style={{\n                  color: \"#767B8E\",\n                  position: \"absolute\",\n                  left: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n              ></i>\n              <input\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"0.5rem 1.5rem 0.5rem 2.2rem\",\n                  borderRadius: \"0.8rem\",\n                  border: \"1.5px solid #E1E9F0\",\n                  color: \"#474D55\",\n                  letterSpacing: \"-0.01em\",\n                  width: \"100%\",\n                }}\n                type=\"text\"\n                className={\n                  !isValidLink() && state.showErrorsInForm\n                    ? \"border border-danger mb-2\"\n                    : \"mb-2\"\n                }\n                id=\"pollDiscussionLink\"\n                value={state.pollDiscussionLink}\n                onChange={(e) => {\n                  State.update({ pollDiscussionLink: e.target.value });\n                }}\n              />\n              <i\n                className=\"bi bi-x-circle-fill\"\n                style={{\n                  color: \"#E1E9F0\",\n                  cursor: \"pointer\",\n                  position: \"absolute\",\n                  right: \"1rem\",\n                  top: \"0.55rem\",\n                }}\n                onClick={() => {\n                  State.update({ pollDiscussionLink: \"\" });\n                }}\n              ></i>\n            </div>\n            {!isValidLink() && state.showErrorsInForm && (\n              <p className=\"text-danger\">Not a valid link</p>\n            )}\n\n            <div\n              className=\"d-flex justify-content-between flex-wrap mb-3\"\n              style={{ maxWidth: \"100%\" }}\n            >\n              <div className=\"d-flex flex-column\" style={{ width: \"48%\" }}>\n                <label\n                  for=\"pollStartDate\"\n                  style={{\n                    fontSize: \"0.8rem\",\n                    letterSpacing: \"-0.01em\",\n                    color: \"#474D55\",\n                    marginBottom: \"0.3rem\",\n                  }}\n                >\n                  Start date*\n                </label>\n                {/*You have min and max properties on dates input*/}\n                <input\n                  style={getStyles(state.pollStartDate)}\n                  type=\"datetime-local\"\n                  id=\"pollStartDate\"\n                  value={state.pollStartDate}\n                  onChange={(e) => {\n                    State.update({ pollStartDate: e.target.value });\n                  }}\n                />\n                {!state.pollStartDate && state.showErrorsInForm && (\n                  <p className=\"text-danger\">Start date cannot be empty</p>\n                )}\n              </div>\n              <div className=\"d-flex flex-column\" style={{ width: \"48%\" }}>\n                <label\n                  for=\"pollEndDate\"\n                  style={{\n                    fontSize: \"0.8rem\",\n                    letterSpacing: \"-0.01em\",\n                    color: \"#474D55\",\n                    marginBottom: \"0.3rem\",\n                  }}\n                >\n                  End date*\n                </label>\n                <input\n                  style={getStyles(state.pollEndDate)}\n                  type=\"datetime-local\"\n                  id=\"pollStartDate\"\n                  value={state.pollEndDate}\n                  onChange={(e) => {\n                    State.update({ pollEndDate: e.target.value });\n                  }}\n                />\n                {!state.pollEndDate && state.showErrorsInForm && (\n                  <p className=\"text-danger\">End date cannot be empty</p>\n                )}\n              </div>\n            </div>\n            {getTimestamp(state.pollStartDate) >=\n              getTimestamp(state.pollEndDate) &&\n              state.showErrorsInForm && (\n                <div>\n                  <p className=\"text-danger\">\n                    Poll should start before it ends\n                  </p>\n                </div>\n              )}\n          </div>\n        )}\n\n        {state.sectionShown == \"questions\" &&\n          amountOfQuestions.map((questionNumber) => {\n            return (\n              <>\n                <div\n                  className=\"d-flex flex-column justify-content-center\"\n                  style={{\n                    border: \"1.5px solid #E1E9F0\",\n                    padding: \"1.5rem 1rem\",\n                    borderRadius: \"1.2rem\",\n                    margin: \"1rem auto\",\n                  }}\n                >\n                  <label\n                    for=\"question\"\n                    style={{\n                      fontSize: \"0.8rem\",\n                      letterSpacing: \"-0.01em\",\n                      color: \"#474D55\",\n                      marginBottom: \"0.3rem\",\n                    }}\n                  >\n                    Question*\n                  </label>\n                  <div style={{ position: \"relative\" }}>\n                    <input\n                      style={{\n                        backgroundColor: \"white\",\n                        padding: \"0.5rem 1.5rem\",\n                        borderRadius: \"0.8rem\",\n                        border: \"1.5px solid #E1E9F0\",\n                        color: \"#474D55\",\n                        letterSpacing: \"-0.01em\",\n                        width: \"100%\",\n                      }}\n                      type=\"text\"\n                      className={\n                        !state.questions[questionNumber] &&\n                        state.showErrorsInForm\n                          ? \"border border-danger mb-2\"\n                          : \"mb-2\"\n                      }\n                      id={`question${questionNumber}`}\n                      value={state.questions[questionNumber]}\n                      onChange={(e) => {\n                        let newQuestions = state.questions;\n                        newQuestions[questionNumber] = e.target.value;\n\n                        State.update({ questions: newQuestions });\n                      }}\n                    />\n                    <i\n                      className=\"bi bi-x-circle-fill\"\n                      style={{\n                        color: \"#E1E9F0\",\n                        cursor: \"pointer\",\n                        position: \"absolute\",\n                        right: \"1rem\",\n                        top: \"0.55rem\",\n                      }}\n                      onClick={() => {\n                        let newQuestions = state.questions;\n                        newQuestions[questionNumber] = \"\";\n\n                        State.update({ question: newQuestions });\n                      }}\n                    ></i>\n                  </div>\n                  {!state.questions[questionNumber] &&\n                    state.showErrorsInForm && (\n                      <p className=\"text-danger\">Question cannot be empty</p>\n                    )}\n\n                  <label\n                    className=\"mt-3\"\n                    for=\"pollType\"\n                    style={{\n                      fontSize: \"0.8rem\",\n                      letterSpacing: \"-0.01em\",\n                      color: \"#474D55\",\n                      marginBottom: \"0.3rem\",\n                    }}\n                  >\n                    Type of question\n                  </label>\n                  <div className=\"d-flex justify-content-between\">\n                    <div\n                      style={getTypeOfQuestionSelectionStyles(\n                        questionNumber,\n                        \"0\"\n                      )}\n                      onClick={() => {\n                        let newPollTypes = state.pollTypes;\n                        newPollTypes[questionNumber] = \"0\";\n\n                        let newChoices = state.choices;\n                        newChoices[questionNumber] = [\"Yes\", \"No\"];\n\n                        let newAmountOfChoices = state.amountOfChoices;\n                        newAmountOfChoices[questionNumber] = 2;\n\n                        State.update({\n                          pollTypes: newPollTypes,\n                          choices: newChoices,\n                          amountOfChoices: newAmountOfChoices,\n                        });\n                      }}\n                    >\n                      {state.pollTypes[questionNumber] == \"0\" && (\n                        <i\n                          className=\"bi bi-check2-circle\"\n                          style={{\n                            position: \"absolute\",\n                            top: \"-0.5rem\",\n                            right: \"-0.2rem\",\n                            color: \"rgb(53, 58, 64)\",\n                            backgroundColor: \"white\",\n                            borderRadius: \"100px\",\n                          }}\n                        ></i>\n                      )}\n                      <p\n                        style={{\n                          letterSpacing: \"-0.01em\",\n                          fontWeight: \"500\",\n                          color: \"#010A2D\",\n                          fontSize: \"0.8rem\",\n                          userSelect: \"none\",\n                        }}\n                      >\n                        Yes or No\n                      </p>\n                      <div className=\"d-flex mb-1\">\n                        <input\n                          style={{\n                            appearance: \"auto\",\n                            width: \"16px\",\n                            marginRight: \"0.2rem\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"radio\"\n                          disabled\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"16px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                      <div className=\"d-flex\">\n                        <input\n                          className=\"form-check-input\"\n                          style={{\n                            appearance: \"auto\",\n                            width: \"16px\",\n                            marginRight: \"0.2rem\",\n                            backgroundColor: \"black\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"radio\"\n                          disabled\n                          checked\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"16px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                    </div>\n                    <div\n                      style={getTypeOfQuestionSelectionStyles(\n                        questionNumber,\n                        \"1\"\n                      )}\n                      onClick={() => {\n                        let newPollTypes = state.pollTypes;\n                        newPollTypes[questionNumber] = \"1\";\n\n                        State.update({ pollTypes: newPollTypes });\n                      }}\n                    >\n                      {state.pollTypes[questionNumber] == \"1\" && (\n                        <i\n                          className=\"bi bi-check2-circle\"\n                          style={{\n                            position: \"absolute\",\n                            top: \"-0.5rem\",\n                            right: \"-0.2rem\",\n                            color: \"rgb(53, 58, 64)\",\n                            backgroundColor: \"white\",\n                            borderRadius: \"100px\",\n                          }}\n                        ></i>\n                      )}\n                      <p\n                        style={{\n                          letterSpacing: \"-0.01em\",\n                          fontWeight: \"500\",\n                          color: \"#010A2D\",\n                          fontSize: \"0.8rem\",\n                          userSelect: \"none\",\n                        }}\n                      >\n                        Single Answer\n                      </p>\n                      <div className=\"d-flex mb-1\">\n                        <input\n                          style={{\n                            appearance: \"auto\",\n                            width: \"12px\",\n                            marginRight: \"0.2rem\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"radio\"\n                          disabled\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"12px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                      <div className=\"d-flex mb-1\">\n                        <input\n                          style={{\n                            appearance: \"auto\",\n                            width: \"12px\",\n                            marginRight: \"0.2rem\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"radio\"\n                          disabled\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"12px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                      <div className=\"d-flex align-items-center\">\n                        <input\n                          className=\"form-check-input\"\n                          style={{\n                            appearance: \"auto\",\n                            width: \"12px\",\n                            marginTop: \"0\",\n                            marginRight: \"0.2rem\",\n                            backgroundColor: \"black\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"radio\"\n                          disabled\n                          checked\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"12px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                    </div>\n                    <div\n                      style={getTypeOfQuestionSelectionStyles(\n                        questionNumber,\n                        \"2\"\n                      )}\n                      onClick={() => {\n                        let newPollTypes = state.pollTypes;\n                        newPollTypes[questionNumber] = \"2\";\n\n                        State.update({ pollTypes: newPollTypes });\n                      }}\n                    >\n                      {state.pollTypes[questionNumber] == \"2\" && (\n                        <i\n                          className=\"bi bi-check2-circle\"\n                          style={{\n                            position: \"absolute\",\n                            top: \"-0.5rem\",\n                            right: \"-0.2rem\",\n                            color: \"rgb(53, 58, 64)\",\n                            backgroundColor: \"white\",\n                            borderRadius: \"100px\",\n                          }}\n                        ></i>\n                      )}\n                      <p\n                        style={{\n                          letterSpacing: \"-0.01em\",\n                          fontWeight: \"500\",\n                          color: \"#010A2D\",\n                          fontSize: \"0.8rem\",\n                          userSelect: \"none\",\n                        }}\n                      >\n                        Multiselect\n                      </p>\n                      <div className=\"d-flex mb-1\">\n                        <input\n                          style={{\n                            appearance: \"auto\",\n                            width: \"12px\",\n                            marginRight: \"0.2rem\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"checkbox\"\n                          disabled\n                          checked\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"12px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                      <div className=\"d-flex mb-1\">\n                        <input\n                          style={{\n                            appearance: \"auto\",\n                            width: \"12px\",\n                            marginRight: \"0.2rem\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"checkbox\"\n                          disabled\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"12px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                      <div className=\"d-flex align-items-center\">\n                        <input\n                          className=\"form-check-input\"\n                          style={{\n                            appearance: \"auto\",\n                            width: \"12px\",\n                            marginTop: \"0\",\n                            marginRight: \"0.2rem\",\n                            backgroundColor: \"black\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"checkbox\"\n                          disabled\n                          checked\n                        />\n                        <input\n                          style={{\n                            padding: \"0\",\n                            border: \"none\",\n                            borderRadius: \"30px\",\n                            height: \"12px\",\n                            cursor: \"pointer\",\n                          }}\n                          type=\"text\"\n                          disabled\n                        />\n                      </div>\n                    </div>\n                    <div\n                      style={getTypeOfQuestionSelectionStyles(\n                        questionNumber,\n                        \"3\"\n                      )}\n                      onClick={() => {\n                        let newPollTypes = state.pollTypes;\n                        newPollTypes[questionNumber] = \"3\";\n\n                        let newChoices = state.choices;\n                        newChoices[questionNumber] = [\"\"];\n\n                        let newAmountOfChoices = state.amountOfChoices;\n                        newAmountOfChoices[questionNumber] = 1;\n\n                        State.update({\n                          pollTypes: newPollTypes,\n                          choices: newChoices,\n                          newAmountOfChoices: newAmountOfChoices,\n                        });\n                      }}\n                    >\n                      {state.pollTypes[questionNumber] == \"3\" && (\n                        <i\n                          className=\"bi bi-check2-circle\"\n                          style={{\n                            position: \"absolute\",\n                            top: \"-0.5rem\",\n                            right: \"-0.2rem\",\n                            color: \"rgb(53, 58, 64)\",\n                            backgroundColor: \"white\",\n                            borderRadius: \"100px\",\n                          }}\n                        ></i>\n                      )}\n                      <p\n                        style={{\n                          letterSpacing: \"-0.01em\",\n                          fontWeight: \"500\",\n                          color: \"#010A2D\",\n                          fontSize: \"0.8rem\",\n                          userSelect: \"none\",\n                        }}\n                      >\n                        Text Answer\n                      </p>\n                      <input\n                        style={{\n                          marginBottom: \"0.5rem\",\n                          padding: \"0\",\n                          border: \"none\",\n                          borderRadius: \"30px\",\n                          height: \"12px\",\n                          width: \"100%\",\n                          cursor: \"pointer\",\n                        }}\n                        type=\"text\"\n                        disabled\n                      />\n                      <input\n                        style={{\n                          marginBottom: \"0.5rem\",\n                          padding: \"0\",\n                          border: \"none\",\n                          borderRadius: \"30px\",\n                          height: \"12px\",\n                          width: \"90%\",\n                          cursor: \"pointer\",\n                        }}\n                        type=\"text\"\n                        disabled\n                      />\n                      <input\n                        style={{\n                          padding: \"0\",\n                          border: \"none\",\n                          borderRadius: \"30px\",\n                          height: \"12px\",\n                          width: \"100%\",\n                          cursor: \"pointer\",\n                        }}\n                        type=\"text\"\n                        disabled\n                      />\n                    </div>\n                  </div>\n                  {(state.pollTypes[questionNumber] ==\n                    pollTypes.SINGLE_ANSWER.id ||\n                    state.pollTypes[questionNumber] ==\n                      pollTypes.MULTISELECT.id) && (\n                    <div>\n                      <label\n                        className=\"mt-3\"\n                        for=\"pollType\"\n                        style={{\n                          fontSize: \"0.8rem\",\n                          letterSpacing: \"-0.01em\",\n                          color: \"#474D55\",\n                          marginBottom: \"0.3rem\",\n                        }}\n                      >\n                        Answer options\n                      </label>\n                      {renderTextInputsForChoices(questionNumber)}\n                    </div>\n                  )}\n                  {state.showErrorsInForm &&\n                    (state.pollTypes[questionNumber] ==\n                      pollTypes.SINGLE_ANSWER.id ||\n                      state.pollTypes[questionNumber] ==\n                        pollTypes.MULTISELECT.id) &&\n                    state.choices[questionNumber].filter((c) => c != \"\")\n                      .length < 2 && (\n                      <p className=\"text-danger\">\n                        Should have at least 2 options\n                      </p>\n                    )}\n                </div>\n              </>\n            );\n          })}\n        {state.sectionShown == \"questions\" && (\n          <button\n            className=\"d-flex justify-content-center align-items-center py-3 w-100\"\n            style={{\n              margin: \"1rem auto\",\n              backgroundColor: \"#F2F6FA\",\n              borderColor: \"transparent\",\n              borderRadius: \"20px\",\n            }}\n            onClick={() => {\n              let oldPollTypes = state.pollTypes;\n              let newPollTypes = [];\n\n              for (let i = 0; i < oldPollTypes.length; i++) {\n                newPollTypes.push(oldPollTypes[i]);\n              }\n              newPollTypes.push(\"0\");\n\n              let oldChoices = state.choices;\n              let newChoices = [];\n\n              for (let i = 0; i < oldChoices.length; i++) {\n                newChoices.push(oldChoices[i]);\n              }\n              newChoices.push([\"\"]);\n\n              let oldAmountOfChoices = state.amountOfChoices;\n              let newAmountOfChoices = [];\n\n              for (let i = 0; i < oldAmountOfChoices.length; i++) {\n                newAmountOfChoices.push(oldAmountOfChoices[i]);\n              }\n              newAmountOfChoices.push(1);\n\n              let oldQuestions = state.questions;\n              let newQuestions = [];\n              for (let i = 0; i < oldQuestions.length; i++) {\n                newQuestions.push(oldQuestions[i]);\n              }\n              newQuestions.push(\"\");\n\n              State.update({\n                questions: newQuestions,\n                amountOfQuestions: state.amountOfQuestions + 1,\n                pollTypes: newPollTypes,\n                choices: newChoices,\n                amountOfChoices: newAmountOfChoices,\n              });\n            }}\n          >\n            <i\n              className=\"bi bi-plus-lg\"\n              style={{ color: \"#010A2D\", marginRight: \"0.7rem\" }}\n            ></i>\n            <span\n              style={{\n                color: \"#010A2D\",\n                fontSize: \"1rem\",\n                dontWeight: \"700\",\n              }}\n            >\n              Add question\n            </span>\n          </button>\n        )}\n      </div>\n\n      <div className=\"d-flex flex-row-reverse\">\n        {/*<button\n          className=\"my-2 btn btn-outline-primary\"\n          onClick={() => State.update({ showPreview: true })}\n        >\n          Preview\n        </button>*/}\n\n        {state.sectionShown == \"mainInfo\" ? (\n          <button\n            style={\n              state.hoveringElement == \"continueButton\"\n                ? {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n                : {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n            }\n            data={getPublicationParams(false)}\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"continueButton\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => {\n              console.log(\"Click on continue\");\n              isValidInput(false)\n                ? State.update({\n                    showErrorsInForm: false,\n                    sectionShown: \"questions\",\n                  })\n                : State.update({ showErrorsInForm: true });\n            }}\n          >\n            Continue\n          </button>\n        ) : isValidInput(true) ? (\n          <CommitButton\n            style={\n              state.hoveringElement == \"createPollButton\"\n                ? {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n                : {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n            }\n            data={getPublicationParams(false)}\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"createPollButton\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => {\n              State.update({\n                showSendFeedback: true,\n              });\n            }}\n          >\n            Create\n          </CommitButton>\n        ) : (\n          <button\n            style={\n              state.hoveringElement == \"createPollButton\"\n                ? {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n                : {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    margin: \"0\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                  }\n            }\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"createPollButton\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            onClick={() => State.update({ showErrorsInForm: true })}\n          >\n            Create\n          </button>\n        )}\n      </div>\n\n      {state.showPreview && renderModal(MODAL_TYPES.PREVIEW)}\n      {state.showSendFeedback && renderModal(MODAL_TYPES.SEND_FEEDBACK)}\n    </div>\n  </div>\n);\n/********** End rendering ************/\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newPollQuestionInterface"}