{"tx_hash": "AsYawG2nQPTfG9Fq7L7yxmy8CqkaMYgoWHbVG1hdahcp", "action_id_social": "5oz1YvMLJ1SLd4RPoSqB8QL33TrsQPRctoNchDk8Hv78-0-widget", "block_id": 80505728, "block_timestamp": "2022-12-12 19:46:07.903", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newPollQuestionInterface", "source_code": "State.init({\r\n  pollTitle: \"\",\r\n  pollDescription: \"\",\r\n  pollDiscussionLink: \"\",\r\n  pollStartDate: \"\",\r\n  startTime: \"\",\r\n  pollEndDate: \"\",\r\n  endTime: \"\",\r\n  question: \"\",\r\n  // Treated as a number throws an error\r\n  pollType: \"0\",\r\n  choices: [],\r\n  amountOfChoices: 1,\r\n  expandOptions: false,\r\n  showErrorsInForm: false,\r\n  showPreview: false,\r\n});\r\n\r\nconst pollTypes = {\r\n  TEXT: { id: \"0\", value: \"Text\" },\r\n  MULTIPLE_CHOICE: { id: \"1\", value: \"Multiple choice\" },\r\n};\r\n\r\nconst getPublicationParams = (isDraft) => {\r\n  return {\r\n    index: {\r\n      poll_question: JSON.stringify(\r\n        {\r\n          key: \"question-v3.0.1\",\r\n          value: {\r\n            isDraft,\r\n            title: state.pollTitle,\r\n            description: state.pollDescription,\r\n            startTimestamp: getTimestamp(state.pollStartDate, state.startTime),\r\n            endTimestamp: getTimestamp(state.pollEndDate, state.endTime),\r\n            questionType: state.pollType,\r\n            question: state.question,\r\n            choicesOptions: state.choices.filter((c) => c != \"\"),\r\n            timestamp: Date.now(),\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nconst getTimestamp = (date, time) => new Date(`${date} ${time}`).getTime();\r\n\r\nconst isValidInput = () => {\r\n  // TODO validate date and link types\r\n  let result =\r\n    (state.pollType == pollTypes.MULTIPLE_CHOICE.id &&\r\n      state.choices.filter((c) => c != \"\").length >= 2) ||\r\n    state.pollType != pollTypes.MULTIPLE_CHOICE.id;\r\n  result = result && state.pollTitle != \"\";\r\n  result = result && state.pollDescription != \"\";\r\n  result = result && state.pollStartDate != \"\";\r\n  result = result && state.startTime != \"\";\r\n  result = result && state.pollEndDate != \"\";\r\n  result = result && state.endTime != \"\";\r\n  result = result && state.question != \"\";\r\n  return result;\r\n};\r\n\r\nfunction getStyles(inputData) {\r\n  return !inputData && state.showErrorsInForm\r\n    ? {\r\n        border: \"1px solid #dc3545\",\r\n        borderOpacity: \"1\",\r\n      }\r\n    : { backgroundColor: \"rgb(230, 230, 230)\" };\r\n}\r\n\r\nconst renderPreview = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      style={\r\n        state.showPreview && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n    >\r\n      <div className=\"modal-dialog\" style={{ maxWidth: \"80%\" }} role=\"document\">\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">Preview</h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => {\r\n                State.update({ showPreview: false });\r\n              }}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              backgroundColor: \"white\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          >\r\n            <Widget\r\n              src={`${context.accountId}/widget/newVotingInterface`}\r\n              props={{\r\n                isPreview: true,\r\n                previewInfo: {\r\n                  accountId: context.accountId,\r\n                  blockHeight: undefined,\r\n                  value: {\r\n                    isDraft,\r\n                    title: state.pollTitle,\r\n                    description: state.pollDescription,\r\n                    startTimestamp: getTimestamp(\r\n                      state.pollStartDate,\r\n                      state.startTime\r\n                    ),\r\n                    endTimestamp: getTimestamp(\r\n                      state.pollEndDate,\r\n                      state.endTime\r\n                    ),\r\n                    questionType: state.pollType,\r\n                    question: state.question,\r\n                    choicesOptions: state.choices.filter((c) => c != \"\"),\r\n                    timestamp: Date.now(),\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              onClick={() => {\r\n                State.update({ showPreview: false });\r\n              }}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderTextInputsForChoices = () => {\r\n  let choices = [];\r\n\r\n  for (let i = 0; i < state.amountOfChoices; i++) {\r\n    choices.push(i);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {choices.map((choiceIndex) => {\r\n        return (\r\n          <div className=\"my-3\" key={`choice-input-${choiceIndex}`}>\r\n            <label>Answer option {choiceIndex + 1}</label>\r\n            <div className=\"d-flex\">\r\n              <input\r\n                style={\r\n                  state.choices[choiceIndex] == \"\" && state.showErrorsInForm\r\n                    ? {\r\n                        border: \"1px solid #dc3545\",\r\n                        borderOpacity: \"1\",\r\n                        borderRadius: \"0.375rem\",\r\n                      }\r\n                    : {\r\n                        backgroundColor: \"rgb(230, 230, 230)\",\r\n                        border: \"1px solid #ced4da\",\r\n                        borderRadius: \"0.375rem\",\r\n                      }\r\n                }\r\n                type=\"text\"\r\n                className=\"w-100 mx-2\"\r\n                value={state.choices[choiceIndex]}\r\n                onChange={handleWriteChoiceInputChange(choiceIndex)}\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-danger\"\r\n                onClick={deleteChoiceHandler(choiceIndex)}\r\n              >\r\n                <i className=\"bi bi-x-octagon\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-primary d-flex\"\r\n        style={{ margin: \"0 auto\" }}\r\n        onClick={addChoicesHandler}\r\n      >\r\n        <i className=\"bi bi-plus-lg\"></i>\r\n        <span>Add option</span>\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst renderOptions = () => {\r\n  return (\r\n    <div style={{ width: \"max-content\" }}>\r\n      <input\r\n        style={{\r\n          cursor: \"pointer\",\r\n          backgroundColor: \"rgb(230, 230, 230)\",\r\n          borderRadius: \"0px\",\r\n          position: \"absolute\",\r\n          top: \"100%\",\r\n          minWidth: \"max-content\",\r\n          width: \"152px\",\r\n        }}\r\n        type=\"text\"\r\n        value=\"Text\"\r\n        readonly\r\n        onClick={() => {\r\n          State.update({ pollType: \"0\", expandOptions: !state.expandOptions });\r\n        }}\r\n      />\r\n\r\n      <input\r\n        style={{\r\n          cursor: \"pointer\",\r\n          backgroundColor: \"rgb(230, 230, 230)\",\r\n          borderRadius: \"0px\",\r\n          position: \"absolute\",\r\n          top: \"200%\",\r\n          minWidth: \"max-content\",\r\n          width: \"152px\",\r\n        }}\r\n        type=\"text\"\r\n        value=\"Multiple choice\"\r\n        readonly\r\n        onClick={() => {\r\n          State.update({ pollType: \"1\", expandOptions: !state.expandOptions });\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction handleWriteChoiceInputChange(choiceIndex) {\r\n  return (event) => {\r\n    const newChoices = state.choices;\r\n\r\n    newChoices[Number(choiceIndex)] = event.target.value;\r\n\r\n    State.update({\r\n      choices: newChoices,\r\n    });\r\n  };\r\n}\r\n\r\nfunction deleteChoiceHandler(choiceIndex) {\r\n  return () => {\r\n    let choices = state.choices;\r\n    let newChoices = [];\r\n    for (let i = 0; i < choices.length; i++) {\r\n      if (i != choiceIndex) {\r\n        newChoices.push(choices[i]);\r\n      }\r\n    }\r\n\r\n    State.update({\r\n      amountOfChoices: Number(state.amountOfChoices) - 1,\r\n      choices: newChoices,\r\n    });\r\n  };\r\n}\r\n\r\nfunction addChoicesHandler() {\r\n  let choices = state.choices;\r\n  choices.push(\"\");\r\n  State.update({\r\n    amountOfChoices: Number(state.amountOfChoices) + 1,\r\n    choices: choices,\r\n  });\r\n}\r\n\r\nreturn (\r\n  <div\r\n    className=\"d-flex align-items-start justify-content-around pt-4\"\r\n    style={{ borderRadius: \"0.375rem\", height: \"100vh\" }}\r\n  >\r\n    <div className=\"d-flex flex-column w-75 justify-content-around\">\r\n      <label for=\"pollTitle\">Title</label>\r\n      <input\r\n        style={{\r\n          backgroundColor: \"rgb(230, 230, 230)\",\r\n          border: \"1px solid #ced4da\",\r\n          borderRadius: \"0.375rem\",\r\n        }}\r\n        type=\"text\"\r\n        className={\r\n          !state.pollTitle && state.showErrorsInForm\r\n            ? \"border border-danger mb-2\"\r\n            : \"mb-2\"\r\n        }\r\n        id=\"pollTitle\"\r\n        value={state.pollTitle}\r\n        onChange={(e) => {\r\n          State.update({ pollTitle: e.target.value });\r\n        }}\r\n      />\r\n      {!state.pollTitle && state.showErrorsInForm && (\r\n        <p className=\"text-danger\">Title cannot be empty</p>\r\n      )}\r\n\r\n      <label for=\"pollDescription\" className=\"mt-2\">\r\n        Description\r\n      </label>\r\n      <textarea\r\n        id=\"pollDescription\"\r\n        style={{\r\n          backgroundColor: \"rgb(230, 230, 230)\",\r\n          border: \"1px solid #ced4da\",\r\n          borderRadius: \"0.375rem\",\r\n        }}\r\n        rows=\"3\"\r\n        className={\r\n          !state.pollDescription &&\r\n          state.showErrorsInForm &&\r\n          \"border border-danger\"\r\n        }\r\n        value={state.pollDescription}\r\n        onChange={(e) => {\r\n          State.update({ pollDescription: e.target.value });\r\n        }}\r\n      ></textarea>\r\n      {!state.pollDescription && state.showErrorsInForm && (\r\n        <p className=\"text-danger\">Description cannot be empty</p>\r\n      )}\r\n\r\n      <label for=\"pollDiscussionLink\" className=\"mt-3\">\r\n        Discussion link (optional)\r\n      </label>\r\n      <input\r\n        style={{\r\n          backgroundColor: \"rgb(230, 230, 230)\",\r\n          border: \"1px solid #ced4da\",\r\n          borderRadius: \"0.375rem\",\r\n        }}\r\n        type=\"text\"\r\n        className=\"mb-2\"\r\n        id=\"pollDiscussionLink\"\r\n        value={state.pollDiscussionLink}\r\n        onChange={(e) => {\r\n          State.update({ pollDiscussionLink: e.target.value });\r\n        }}\r\n      />\r\n\r\n      <div\r\n        className=\"d-flex justify-content-around flex-wrap\"\r\n        style={{ maxWidth: \"100%\" }}\r\n      >\r\n        <div className=\"d-flex flex-row\">\r\n          <div className=\"d-flex flex-column mx-2\">\r\n            <label for=\"pollStartDate\">Start date</label>\r\n            {/*You have min and max properties on dates input*/}\r\n            <input\r\n              style={getStyles(state.pollStartDate)}\r\n              type=\"date\"\r\n              id=\"pollStartDate\"\r\n              value={state.pollStartDate}\r\n              onChange={(e) => {\r\n                State.update({ pollStartDate: e.target.value });\r\n              }}\r\n            />\r\n            {!state.pollStartDate && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">Start date cannot be empty</p>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <div>Start time</div>\r\n            <input\r\n              type=\"time\"\r\n              style={getStyles(state.startTime)}\r\n              onChange={(e) => {\r\n                State.update({ startTime: e.target.value });\r\n              }}\r\n            />\r\n            {!state.pollStartDate && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">Start time cannot be empty</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex flex-row\">\r\n          <div className=\"d-flex flex-column mx-2\">\r\n            <label for=\"pollEndDate\">End date</label>\r\n            <input\r\n              style={getStyles(state.pollEndDate)}\r\n              type=\"date\"\r\n              id=\"pollStartDate\"\r\n              value={state.pollEndDate}\r\n              onChange={(e) => {\r\n                State.update({ pollEndDate: e.target.value });\r\n              }}\r\n            />\r\n            {!state.pollEndDate && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">End date cannot be empty</p>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <div>End time</div>\r\n            <input\r\n              type=\"time\"\r\n              style={getStyles(state.endTime)}\r\n              value={state.endTime}\r\n              onChange={(e) => {\r\n                State.update({ endTime: e.target.value });\r\n              }}\r\n            />\r\n            {!state.pollEndDate && state.showErrorsInForm && (\r\n              <p className=\"text-danger\">End time cannot be empty</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\r\n        className=\"p-3 my-3\"\r\n      >\r\n        <label for=\"question\">Question</label>\r\n        <input\r\n          style={\r\n            !state.question && state.showErrorsInForm\r\n              ? {\r\n                  border: \"1px solid #dc3545\",\r\n                  borderOpacity: \"1\",\r\n                  borderRadius: \"0.375rem\",\r\n                }\r\n              : { backgroundColor: \"rgb(230, 230, 230)\" }\r\n          }\r\n          type=\"text\"\r\n          id=\"question\"\r\n          value={state.question}\r\n          onChange={(e) => {\r\n            State.update({ question: e.target.value });\r\n          }}\r\n        />\r\n        {!state.question && state.showErrorsInForm && (\r\n          <p className=\"text-danger\">Question cannot be empty</p>\r\n        )}\r\n        <label className=\"mt-3\" for=\"pollType\">\r\n          Pool type\r\n        </label>\r\n        <div className=\"dropdown\">\r\n          <button\r\n            style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n            className=\"btn dropdown-toggle\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              State.update({ expandOptions: !state.expandOptions });\r\n            }}\r\n          >\r\n            {state.pollType == \"0\"\r\n              ? \"Text\"\r\n              : state.pollType == \"1\"\r\n              ? \"Multiple choice\"\r\n              : undefined}\r\n          </button>\r\n\r\n          {state.expandOptions && renderOptions()}\r\n        </div>\r\n        {state.pollType == \"1\" && renderTextInputsForChoices()}\r\n        {state.showErrorsInForm &&\r\n          state.pollType == pollTypes.MULTIPLE_CHOICE.id &&\r\n          state.choices.filter((c) => c != \"\").length < 2 && (\r\n            <p className=\"text-danger\">Should have at least 2 options</p>\r\n          )}\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\r\n      className=\"p-3 d-flex flex-column justify-content-center\"\r\n    >\r\n      <button\r\n        className=\"my-2 btn btn-outline-primary\"\r\n        onClick={() => State.update({ showPreview: true })}\r\n      >\r\n        Preview\r\n      </button>\r\n\r\n      {isValidInput() ? (\r\n        <CommitButton\r\n          className=\"my-2 btn btn-primary\"\r\n          data={getPublicationParams(false)}\r\n        >\r\n          Create poll\r\n        </CommitButton>\r\n      ) : (\r\n        <button\r\n          className=\"my-2 btn btn-primary\"\r\n          onClick={() => State.update({ showErrorsInForm: true })}\r\n        >\r\n          Create poll\r\n        </button>\r\n      )}\r\n    </div>\r\n\r\n    {state.showPreview && renderPreview()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newPollQuestionInterface"}