{"tx_hash": "CTdBGypezRcii68Ai1mSDmKrCyKPwtE4YCARnucwGwyw", "action_id_social": "4vtWwiy5eWGyudg3Bg9hnqy5m54LjFrJwwpxxPkyvjqH-0-widget", "block_id": 86203302, "block_timestamp": "2023-02-28 01:05:43.454", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Instance_time_edit", "source_code": "const data = Social.index(\"Instance_time\", \"schedule\");\nif (!data) {\n  return \"Loading datas\";\n}\nvar sortedData = data.sort((d1, d2) => d1.blockHeight - d2.blockHeight);\nvar finalData = {};\n\nconst widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  const flag1 = data.indexOf(0);\n  if (flag) temp.push(0, 168);\n  var sortedTimeData = temp.sort((d2, d1) => d2 - d1);\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) {\n      if (\n        !(\n          (flag1 && sortedTimeData[k] == 0) ||\n          (flag1 && sortedTimeData[k] == 168)\n        )\n      )\n        final.push(sortedTimeData[k]);\n    }\n  }\n  return final;\n};\n\nfor (let i = 0; i < sortedData.length; i++) {\n  if (sortedData[i].accountId == context.accountId) {\n    var time_zone = sortedData[i].value._time_zone ?? \"(UTC+00:00) UTC\";\n    var zone = time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\n    var hour = parseInt(zone[0]);\n    var utc_offset = hour + (parseInt(zone[1]) / 60) * ((hour > 0) * 2 - 1);\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew = final.sort((d2, d1) => d2 - d1);\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n    finalData = {\n      schedule: weeklyData,\n      time_zone: time_zone,\n      is_on: sortedData[i].value._is_on,\n    };\n  }\n}\nconsole.log(\"finalData: \", finalData);\n\nconst time_zones = [\n  \"(UTC-11:00) Samoa\",\n  \"(UTC-10:00) Hawaii\",\n  \"(UTC-09:00) Alaska\",\n  \"(UTC-08:00) Pacific Time\",\n  \"(UTC-07:00) Arizona\",\n  \"(UTC-06:00) Central America\",\n  \"(UTC-06:00) Saskatchewan\",\n  \"(UTC-05:00) Eastern Time\",\n  \"(UTC-04:00) Atlantic Time\",\n  \"(UTC-04:30) Caracas\",\n  \"(UTC-04:00) Santiago\",\n  \"(UTC-03:30) Newfoundland\",\n  \"(UTC-03:00) Brasilia\",\n  \"(UTC-02:00) Mid-Atlantic\",\n  \"(UTC-01:00) Azores\",\n  \"(UTC+00:00) UTC\",\n  \"(UTC+01:00) Amsterdam\",\n  \"(UTC+02:00) Athens\",\n  \"(UTC+03:00) Baghdad\",\n  \"(UTC+04:00) Abu Dhabi\",\n  \"(UTC+04:30) Kabul\",\n  \"(UTC+05:00) Islamabad\",\n  \"(UTC+05:30) Chennai\",\n  \"(UTC+05:45) Kathmandu\",\n  \"(UTC+06:00) Almaty\",\n  \"(UTC+06:30) Rangoon\",\n  \"(UTC+07:00) Bangkok\",\n  \"(UTC+08:00) Beijing\",\n  \"(UTC+09:00) Irkutsk\",\n  \"(UTC+09:00) Seoul\",\n  \"(UTC+09:00) Tokyo\",\n  \"(UTC+09:30) Adelaide\",\n  \"(UTC+10:00) Guam\",\n  \"(UTC+11:00) Vladivostok\",\n  \"(UTC+12:00) Auckland\",\n  \"(UTC+13:00) Nuku'alofa\",\n];\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  let formated = `${hours}:${mins == 0 ? \"00\" : mins}`;\n\n  return formated;\n};\nState.init({\n  hoveringElement: \"\",\n  _account: \"All\",\n  _time_zone: finalData.time_zone ?? \"(UTC+00:00) UTC\",\n});\n\nconst profile = Social.getr(`${context.accountId}/profile`);\nconst flex_column = {\n  display: \"flex\",\n  flexDirection: \"column\",\n};\nconst comboBox = {\n  background: \"rgb(230, 230, 230)\",\n  color: \"black\",\n  borderRadius: \"1rem\",\n  padding: \"1rem\",\n  fontWeight: \"500\",\n  fontSize: \"1rem\",\n};\nconst set_schedule = () => {\n  State.update({ _time_zone: finalData.time_zone ?? \"(UTC+00:00) UTC\" });\n};\nreturn (\n  <div>\n    <div className=\"d-flex flex-column\">\n      <div className=\"d-flex justify-content-between\">\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"1rem\",\n            color: \"black\",\n            borderRadius: \"2rem\",\n            fontWeight: 600,\n            fontSize: \"x-large\",\n          }}\n        >\n          Weekly Schedule\n        </div>\n        <div class=\"d-flex flex-column\">\n          <div>{profile.name}</div>\n          <div>@{context.accountId}</div>\n          <div>\n            {`(UTC ${getFormatedTime(\n              new Date().getTimezoneOffset() / 60\n            )}) ${new Date()\n              .toLocaleDateString(undefined, {\n                day: \"2-digit\",\n                timeZoneName: \"long\",\n              })\n              .substring(4)}`}\n          </div>\n        </div>\n      </div>\n      <div className=\"w-100 d-flex flex-row justify-content-between align-items-center\">\n        <div>\n          <select\n            style={comboBox}\n            name=\"zones\"\n            id=\"zones\"\n            value={state._time_zone}\n            onChange={(e) => {\n              State.update({ _time_zone: e.target.value });\n            }}\n          >\n            {time_zones.map((zone) => (\n              <option value={zone}>{zone}</option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <a\n            href={`https://near.social/#/${widgetOwner}/widget/Instance_time`}\n            onMouseEnter={() => {\n              State.update({ hoveringElement: \"create\" });\n            }}\n            onMouseLeave={() => {\n              State.update({ hoveringElement: \"\" });\n            }}\n            style={\n              state.hoveringElement == \"create\"\n                ? {\n                    border: \"2px solid transparent\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    padding: \"0.3rem 1.5rem\",\n                    backgroundColor: \"#010A2D\",\n                    borderRadius: \"12px\",\n                    color: \"white\",\n                    textDecoration: \"none\",\n                  }\n                : {\n                    border: \"2px solid black\",\n                    color: \"black\",\n                    backgroundColor: \"white\",\n                    fontWeight: \"500\",\n                    fontSize: \"1rem\",\n                    padding: \"0.3rem 1.5rem\",\n                    borderRadius: \"12px\",\n                  }\n            }\n          >\n            View Schedules\n          </a>\n        </div>\n      </div>\n    </div>\n    <div className=\"align-items-center pt-3\">\n      <Widget\n        src={`${widgetOwner}/widget/Instance_time_setting`}\n        props={{\n          data: {\n            schedule: finalData.schedule,\n            time_zone: state._time_zone,\n          },\n          style: { width: \"100%\", height: \"1.5em\" },\n        }}\n        rawCode={show}\n      />\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Instance_time_edit"}