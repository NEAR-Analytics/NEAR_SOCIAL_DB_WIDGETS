{"tx_hash": "D2KX5yLyBxCXMwTdnwYWYJCrqKZUiBK5mEn9wDKMr22C", "action_id_social": "EAS56z5vFxRpUtuG3cAq9r4SH2MS4p1SoRoENTJf8eoq-0-widget", "block_id": 88829929, "block_timestamp": "2023-04-04 21:59:14.338", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Instance_time_card", "source_code": "const data = props.data ?? Social.index(\"Instance_time\", \"schedule\");\r\n\r\nif (!data) {\r\n  return \"Loading datas\";\r\n}\r\n\r\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.instance_time_card;\r\nconst thisWidgetClassNames = props.allWidgetsClassNames.instance_time_card;\r\n\r\nconst accountId = props.accountId ?? context.accountId;\r\nconst updateInstanceTimeState = props.updateInstanceTimeState;\r\nconst tabs = props.tabs;\r\nconst style = props.style ?? \"large\";\r\nconst font_small = style == \"small\" ? \"0.8rem\" : \"0.9rem\";\r\nconst font_big = style == \"small\" ? \"0.8rem\" : \"1rem\";\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n\r\nState.init({\r\n  is_on: false,\r\n});\r\n\r\nvar sortedData =\r\n  data && data.length\r\n    ? data.sort((d1, d2) => d1.blockHeight - d2.blockHeight)\r\n    : [];\r\nvar finalData = {\r\n  accountId: \"\",\r\n  time_zone: \"(UTC-04:00) Atlantic Time\",\r\n  value: {\r\n    _data: [\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n      {\r\n        on_off: \"off\",\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst sortAndRemoveRepeated = (flag, data) => {\r\n  var temp = data;\r\n  const flag1 = data.indexOf(0);\r\n  if (flag) temp.push(0, 168);\r\n  var sortedTimeData =\r\n    temp && temp.length ? temp.sort((d2, d1) => d2 - d1) : [];\r\n\r\n  var final = [];\r\n  for (var k = 0; k < sortedTimeData.length; k++) {\r\n    var repeated = false;\r\n    for (var l = 0; l < sortedTimeData.length; l++) {\r\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\r\n        repeated = true;\r\n      }\r\n    }\r\n    if (!repeated) {\r\n      if (\r\n        !(\r\n          (flag1 && sortedTimeData[k] == 0) ||\r\n          (flag1 && sortedTimeData[k] == 168)\r\n        )\r\n      )\r\n        final.push(sortedTimeData[k]);\r\n    }\r\n  }\r\n\r\n  return final;\r\n};\r\n\r\nconst getFormatedTime = (time) => {\r\n  const hours = parseInt(time);\r\n  const mins = (time - hours) * 60;\r\n  let formated =\r\n    hours > 12\r\n      ? `${hours - 12}:${mins == 0 ? \"00\" : mins} PM`\r\n      : `${hours}:${mins == 0 ? \"00\" : mins} AM`;\r\n  return formated;\r\n};\r\n\r\nvar date = new Date();\r\nvar utc_offset = -date.getTimezoneOffset() / 60;\r\nfor (let i = 0; i < sortedData.length; i++) {\r\n  if (sortedData[i].accountId == accountId) {\r\n    var times = sortedData[i].value._data;\r\n    var temp = [];\r\n    var flag = false;\r\n    for (var j = 0; j < times.length; j++) {\r\n      const time = times[j] + utc_offset;\r\n      if (time > 168) {\r\n        temp.push(time - 168);\r\n        flag = true;\r\n      } else if (time < 0) {\r\n        temp.push(time + 168);\r\n        flag = true;\r\n      } else temp.push(time);\r\n    }\r\n    const final = sortAndRemoveRepeated(flag, temp);\r\n    for (var m = 0; m < final.length - 1; m += 2) {\r\n      const _from = final[m];\r\n      const _to = final[m + 1];\r\n      for (var o = 1; o < 7; o++) {\r\n        if (o * 24 > _from && o * 24 < _to) {\r\n          final.push(o * 24, o * 24);\r\n        }\r\n      }\r\n    }\r\n    var sortedTimeDataNew =\r\n      final && final.length ? final.sort((d2, d1) => d2 - d1) : [];\r\n    var weeklyData = [];\r\n    for (var t = 0; t < 7; t++) {\r\n      var dailyData = [];\r\n      var exist = false;\r\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\r\n        var _from = sortedTimeDataNew[p];\r\n        var _to = sortedTimeDataNew[p + 1];\r\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\r\n          dailyData.push({\r\n            _from: _from - t * 24,\r\n            _to: _to - t * 24,\r\n          });\r\n          exist = true;\r\n        }\r\n      }\r\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\r\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\r\n    }\r\n    finalData = {\r\n      accountId: sortedData[i].accountId,\r\n      is_on: sortedData[i].value._is_on,\r\n      time_zone: sortedData[i].value._time_zone,\r\n      value: {\r\n        _data: weeklyData,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nfunction sliceString(string, newStringLength) {\r\n  if (string.length > newStringLength) {\r\n    return string.slice(0, newStringLength) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nconst code = `\r\n<script>\r\n    window.addEventListener(\"message\", (event) => {\r\n        setInterval(() => event.source.postMessage(\"ping\", \"*\"), event.data.timeout);\r\n    });\r\n</script>\r\n`;\r\n\r\nfunction onInterval() {\r\n  const day = new Date().getDay() == 0 ? 6 : new Date().getDay() - 1;\r\n  const hours = new Date().getHours();\r\n  const mins = new Date().getMinutes();\r\n  const now = hours + mins / 60;\r\n  var is_on = false;\r\n  var temp = finalData.value._data[day];\r\n  if (temp.on_off == \"on\") {\r\n    for (var j = 0; j < temp.data.length; j++) {\r\n      if (now >= temp.data[j]._from && now < temp.data[j]._to) {\r\n        is_on = true;\r\n      }\r\n    }\r\n  }\r\n  State.update({ is_on: is_on });\r\n}\r\n\r\nreturn (\r\n  <div>\r\n    <iframe\r\n      style={{ height: \"0px\" }}\r\n      srcDoc={code}\r\n      message={{ timeout: 1000 }}\r\n      onMessage={onInterval}\r\n    />\r\n\r\n    <div className={thisWidgetClassNames.widgetGeneralContainer}>\r\n      <div style={thisWidgetInlineStyles.generalContainer}>\r\n        <div className={thisWidgetClassNames.widgetHeaderContainer}>\r\n          <h2 style={thisWidgetInlineStyles.widgetTitle}>\r\n            {tabs.OPEN_SCHEDULE.text}\r\n          </h2>\r\n          <i\r\n            className={thisWidgetClassNames.closeIcon}\r\n            style={thisWidgetInlineStyles.closeIcon}\r\n            onClick={() => {\r\n              updateInstanceTimeState({\r\n                tab: props.prevTab,\r\n              });\r\n            }}\r\n          ></i>\r\n        </div>\r\n        <div className={thisWidgetClassNames.widgetBodyContainer}>\r\n          <div className={thisWidgetClassNames.userInfoContainer}>\r\n            <Widget\r\n              src=\"mob.near/widget/ProfileImage\"\r\n              props={{\r\n                accountId,\r\n                className: \"float-start d-inline-block me-2\",\r\n                style: {\r\n                  width: style == \"small\" ? \"2.5rem\" : \"3.5rem\",\r\n                  height: style == \"small\" ? \"2.5rem\" : \"3.5rem\",\r\n                  aspectRatio: \"1\",\r\n                  marginLeft: font_small,\r\n                  borderRadius: \"100%\",\r\n                  overflow: \"hidden\",\r\n                },\r\n              }}\r\n            />\r\n            <div>\r\n              <p style={thisWidgetInlineStyles.shceduleOfText}>Schedule of</p>\r\n              <p style={thisWidgetInlineStyles.showAccountId}>\r\n                {sliceString(accountId, 18)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className={thisWidgetClassNames.sheculeStatusContainer}>\r\n            <span\r\n              style={\r\n                state.is_on\r\n                  ? thisWidgetInlineStyles.scheduleStatusOn\r\n                  : thisWidgetInlineStyles.scheduleStatusOff\r\n              }\r\n            >\r\n              {state.is_on ? \"on\" : \"off\"}\r\n            </span>\r\n            {accountId == context.accountId && (\r\n              <button\r\n                onClick={updateInstanceTimeState({\r\n                  tab: tabs.NEW_SCHEDULE.id,\r\n                  prevTab: tabs.OPEN_SCHEDULE.id,\r\n                })}\r\n                onMouseEnter={() => {\r\n                  State.update({ hoveringElement: \"edit\" });\r\n                }}\r\n                onMouseLeave={() => {\r\n                  State.update({ hoveringElement: \"\" });\r\n                }}\r\n                style={\r\n                  state.hoveringElement == \"edit\"\r\n                    ? thisWidgetInlineStyles.editScheduleButtonHovering\r\n                    : thisWidgetInlineStyles.editScheduleButton\r\n                }\r\n              >\r\n                Edit Schedules\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={thisWidgetClassNames.instanceTimeTextContainer}>\r\n          <div style={thisWidgetInlineStyles.instanceTimeTextDecorativeDiv}>\r\n            {/*Decorative div, do not delete*/}\r\n          </div>\r\n          <h2 style={thisWidgetInlineStyles.instanceTimeText}>Instance Time</h2>\r\n        </div>\r\n        <div style={thisWidgetInlineStyles.otherWidgetsContainer}>\r\n          <div style={thisWidgetInlineStyles.instanceTimeShareGeneralContainer}>\r\n            <div style={thisWidgetInlineStyles.instanceTimeShareContainer}>\r\n              <Widget\r\n                src={`${widgetOwner}/widget/Instance_time_share`}\r\n                props={{\r\n                  accountId,\r\n                  allWidgetsClassNames: props.allWidgetsClassNames,\r\n                  allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div style={thisWidgetInlineStyles.showCurrentTimecontainer}>\r\n            <Widget\r\n              src={`${widgetOwner}/widget/ShowCurrentTime`}\r\n              props={{\r\n                allWidgetsClassNames: props.allWidgetsClassNames,\r\n                allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n                time_zone: finalData.time_zone,\r\n                style: {\r\n                  display: \"flex\",\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Widget\r\n          src={`${widgetOwner}/widget/Instance_time_schedule_card`}\r\n          props={{\r\n            allWidgetsClassNames: props.allWidgetsClassNames,\r\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n            schedule_data: finalData,\r\n            style: {\r\n              display: \"flex\",\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Instance_time_card"}