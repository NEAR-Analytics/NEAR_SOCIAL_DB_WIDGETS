{"tx_hash": "GNVqqt7NKN6gfQeAj8FExzHF565E59nMCQQ7LHPLeurk", "action_id_social": "3C1VUkEiRnTAiEB6ENAGm1xD1eh6MxBjNGoL6RpSeFzj-0-widget", "block_id": 89898279, "block_timestamp": "2023-04-18 22:54:31.738", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Instance_time", "source_code": "const data = Social.index(\"Instance_time\", \"schedule\");\r\nif (!data) {\r\n  return \"Loading datas\";\r\n}\r\n\r\nconst profile = Social.getr(`${context.accountId}/profile`);\r\nif (!profile) {\r\n  return \"Loading profile\";\r\n}\r\n\r\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.instance_time;\r\nconst thisWidgetClassNames = props.allWidgetsClassNames.instance_time;\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n\r\nvar sortedData =\r\n  data && data.length\r\n    ? data.sort((d1, d2) => d2.blockHeight - d1.blockHeight)\r\n    : [];\r\n\r\nvar accountIds = [\"All\"];\r\nvar finalData = undefined;\r\nfor (let i = 0; i < sortedData.length; i++) {\r\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\r\n    accountIds.push(sortedData[i].accountId);\r\n    if (sortedData[i].accountId == context.accountId) {\r\n      finalData = sortedData[i];\r\n    }\r\n  }\r\n}\r\n\r\nconst tabs = {\r\n  MY_SCHEDULE: { id: 1, text: \"My Schedule\" },\r\n  ALL_SCHEDULE: { id: 2, text: \"All Schedules\" },\r\n  NEW_SCHEDULE: {\r\n    id: 3,\r\n    text: finalData ? \"Edit Schedule\" : \"Create Schedule\",\r\n  },\r\n  OPEN_SCHEDULE: {\r\n    id: 4,\r\n    text: \"\",\r\n  },\r\n};\r\n\r\nState.init({\r\n  tab: tabs.ALL_SCHEDULE.id,\r\n  prevTab: tabs.ALL_SCHEDULE.id,\r\n  hoveringElement: \"\",\r\n  showAbortScheduleCreation: false,\r\n  abortThroughAllExistingSchedule: false,\r\n  userScheduleShown: \"\",\r\n});\r\n\r\nlet prevTab = state.prevTab;\r\n\r\nfunction makeStringShorter(string, length) {\r\n  if (string.length > length) {\r\n    return string.slice(0, length) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  return (e) => {\r\n    e.target.id == \"modal\" &&\r\n      State.update({ showAbortScheduleCreation: false });\r\n  };\r\n}\r\n\r\nconst renderAbortPollCreationModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        state.showAbortScheduleCreation &&\r\n        thisWidgetInlineStyles.renderAbortPollCreationModal.generalContainer\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div\r\n        className={\r\n          thisWidgetClassNames.renderAbortPollCreationModal.modalDialogContainer\r\n        }\r\n        style={\r\n          thisWidgetInlineStyles.renderAbortPollCreationModal\r\n            .modalDialogContainer\r\n        }\r\n        role=\"document\"\r\n      >\r\n        <div\r\n          className={\r\n            thisWidgetClassNames.renderAbortPollCreationModal\r\n              .modalContentContainer\r\n          }\r\n          style={\r\n            thisWidgetInlineStyles.renderAbortPollCreationModal\r\n              .modalContentContainer\r\n          }\r\n        >\r\n          <div\r\n            className={\r\n              thisWidgetClassNames.renderAbortPollCreationModal.modalHeader\r\n            }\r\n            style={\r\n              thisWidgetInlineStyles.renderAbortPollCreationModal.modalHeader\r\n            }\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className={\r\n                thisWidgetClassNames.renderAbortPollCreationModal.closeButton\r\n              }\r\n              style={\r\n                thisWidgetInlineStyles.renderAbortPollCreationModal.closeButton\r\n              }\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => State.update({ showAbortScheduleCreation: false })}\r\n            >\r\n              <i\r\n                className={\r\n                  thisWidgetClassNames.renderAbortPollCreationModal.closeIcon\r\n                }\r\n              ></i>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className={\r\n              thisWidgetClassNames.renderAbortPollCreationModal.modalBody\r\n            }\r\n            style={\r\n              thisWidgetInlineStyles.renderAbortPollCreationModal.modalBody\r\n            }\r\n          >\r\n            <h3\r\n              style={\r\n                thisWidgetInlineStyles.renderAbortPollCreationModal\r\n                  .discardChangesTitle\r\n              }\r\n            >\r\n              Discard changes\r\n            </h3>\r\n            <p\r\n              style={\r\n                thisWidgetInlineStyles.renderAbortPollCreationModal\r\n                  .discardChangesText\r\n              }\r\n            >\r\n              If you leave now, you will lose all your changes\r\n            </p>\r\n          </div>\r\n          <div\r\n            className={\r\n              thisWidgetClassNames.renderAbortPollCreationModal.modalFooter\r\n            }\r\n            style={\r\n              thisWidgetInlineStyles.renderAbortPollCreationModal.modalFooter\r\n            }\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              style={\r\n                thisWidgetInlineStyles.renderAbortPollCreationModal\r\n                  .continueEditingButton\r\n              }\r\n              onClick={() => State.update({ showAbortScheduleCreation: false })}\r\n            >\r\n              Continue editing\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              style={\r\n                thisWidgetInlineStyles.renderAbortPollCreationModal\r\n                  .discardChangesButton\r\n              }\r\n              onClick={() => {\r\n                if (state.abortThroughAllExistingSchedule) {\r\n                  State.update({\r\n                    tab: tabs.ALL_SCHEDULE.id,\r\n                    abortThroughAllExistingSchedule: false,\r\n                    hoveringElement: \"\",\r\n                    showAbortScheduleCreation: false,\r\n                  });\r\n                } else {\r\n                  State.update({\r\n                    tab: tabs.ALL_SCHEDULE.id,\r\n                    hoveringElement: \"\",\r\n                    showAbortScheduleCreation: false,\r\n                  });\r\n                }\r\n              }}\r\n            >\r\n              Discard changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst updateInstanceTimeState = (object) => {\r\n  State.update(object);\r\n};\r\n\r\nreturn (\r\n  <div className=\"pb-5\" style={thisWidgetInlineStyles.generalContainer}>\r\n    <div className={thisWidgetClassNames.siteHeaderContainer}>\r\n      <div\r\n        className={thisWidgetClassNames.siteHeader}\r\n        style={thisWidgetInlineStyles.siteHeader}\r\n      >\r\n        <div className={thisWidgetClassNames.instanceTimeLogoContainer}>\r\n          <i className={thisWidgetClassNames.logoIcon}></i>\r\n          <h3 style={thisWidgetInlineStyles.logoTitle}>WeeklySchedule</h3>\r\n        </div>\r\n        {state.tab != tabs.OPEN_SCHEDULE.id && (\r\n          <div\r\n            className={thisWidgetClassNames.openScheduleGeneralContainer}\r\n            style={thisWidgetInlineStyles.openScheduleGeneralContainer}\r\n          >\r\n            <div style={thisWidgetInlineStyles.openScheduleContainer}>\r\n              <div className={thisWidgetClassNames.tabsContainer}>\r\n                {Object.keys(tabs).map((tabKey) => {\r\n                  const tab = tabs[tabKey];\r\n                  if (tabKey == \"ALL_SCHEDULE\" || tabKey == \"MY_SCHEDULE\") {\r\n                    return (\r\n                      <div style={thisWidgetInlineStyles.tabContainer}>\r\n                        <p\r\n                          ariaCurrent=\"page\"\r\n                          onMouseEnter={() => {\r\n                            State.update({ hoveringElement: tab.id });\r\n                          }}\r\n                          onMouseLeave={() => {\r\n                            State.update({ hoveringElement: \"\" });\r\n                          }}\r\n                          onClick={() => {\r\n                            state.tab == tabs.ALL_SCHEDULE.id ||\r\n                            state.tab == tabs.MY_SCHEDULE.id\r\n                              ? State.update({ tab: tab.id })\r\n                              : tab.id == tabs.ALL_SCHEDULE.id\r\n                              ? State.update({\r\n                                  showAbortScheduleCreation: true,\r\n                                  abortThroughAllExistingSchedule: true,\r\n                                })\r\n                              : State.update({\r\n                                  showAbortScheduleCreation: true,\r\n                                });\r\n                          }}\r\n                          style={thisWidgetInlineStyles.tabText}\r\n                        >\r\n                          {tab.text}\r\n                        </p>\r\n                        {(state.hoveringElement == tab.id ||\r\n                          state.tab == tab.id) && (\r\n                          <div\r\n                            style={\r\n                              thisWidgetInlineStyles.decorativeTabUnderline\r\n                            }\r\n                          >\r\n                            {/*Decorative Div, do not delete*/}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  }\r\n                })}\r\n              </div>\r\n            </div>\r\n            <button\r\n              onMouseEnter={() => {\r\n                State.update({ hoveringElement: tabs.NEW_SCHEDULE.id });\r\n              }}\r\n              onMouseLeave={() => {\r\n                State.update({ hoveringElement: \"\" });\r\n              }}\r\n              onClick={() => {\r\n                State.update({ tab: tabs.NEW_SCHEDULE.id });\r\n              }}\r\n              style={\r\n                state.hoveringElement == tabs.NEW_SCHEDULE.id ||\r\n                state.tab == tabs.NEW_SCHEDULE.id\r\n                  ? thisWidgetInlineStyles.newScheduleButtonHovering\r\n                  : thisWidgetInlineStyles.newScheduleButton\r\n              }\r\n            >\r\n              <i\r\n                className={thisWidgetClassNames.newScheduleButtonInnerIcon}\r\n                style={\r\n                  state.hoveringElement == tabs.NEW_SCHEDULE.id ||\r\n                  state.tab == tabs.NEW_SCHEDULE.id\r\n                    ? thisWidgetInlineStyles.newScheduleButtonInnerIconHovered\r\n                    : thisWidgetInlineStyles.newScheduleButtonInnerIcon\r\n                }\r\n              ></i>\r\n              {tabs.NEW_SCHEDULE.text}\r\n            </button>\r\n          </div>\r\n        )}\r\n        <div className={thisWidgetClassNames.showUserInfoInHeader}>\r\n          <p\r\n            className=\"m-0\"\r\n            style={thisWidgetInlineStyles.userInfoInHeaderText}\r\n            title={profile.name}\r\n          >\r\n            {makeStringShorter(profile.name, 12)}\r\n          </p>\r\n          <p\r\n            className=\"m-0\"\r\n            style={thisWidgetInlineStyles.userInfoInHeaderText}\r\n            title={context.accountId}\r\n          >\r\n            @{makeStringShorter(context.accountId, 12)}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className={thisWidgetClassNames.decorativeDivInHeader}></div>\r\n\r\n      <div style={thisWidgetInlineStyles.newShceduleButtonInMobileContainer}>\r\n        <button\r\n          className={thisWidgetClassNames.newShceduleButtonInMobile}\r\n          onMouseEnter={() => {\r\n            State.update({ hoveringElement: tabs.NEW_SCHEDULE.id });\r\n          }}\r\n          onMouseLeave={() => {\r\n            State.update({ hoveringElement: \"\" });\r\n          }}\r\n          onClick={() => {\r\n            State.update({ tab: tabs.NEW_SCHEDULE.id });\r\n          }}\r\n          style={\r\n            state.hoveringElement == tabs.NEW_SCHEDULE.id ||\r\n            state.tab == tabs.NEW_SCHEDULE.id\r\n              ? thisWidgetInlineStyles.newScheduleButtonHovering\r\n              : thisWidgetInlineStyles.newScheduleButton\r\n          }\r\n        >\r\n          <i\r\n            className={thisWidgetClassNames.newScheduleButtonInnerIcon}\r\n            style={\r\n              state.hoveringElement == tabs.NEW_SCHEDULE.id ||\r\n              state.tab == tabs.NEW_SCHEDULE.id\r\n                ? thisWidgetInlineStyles.newScheduleButtonInnerIconHovered\r\n                : thisWidgetInlineStyles.newScheduleButtonInnerIcon\r\n            }\r\n          ></i>\r\n          {tabs.NEW_SCHEDULE.text}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div className={thisWidgetClassNames.bodyContainer}>\r\n      {state.tab == tabs.OPEN_SCHEDULE.id ? (\r\n        <Widget\r\n          src={`${widgetOwner}/widget/Instance_time_card`}\r\n          props={{\r\n            allWidgetsClassNames: props.allWidgetsClassNames,\r\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n            accountId: state.userScheduleShown,\r\n            tabs,\r\n            prevTab,\r\n            updateInstanceTimeState,\r\n            data,\r\n          }}\r\n        />\r\n      ) : state.tab != tabs.NEW_SCHEDULE.id ? (\r\n        <Widget\r\n          src={`${widgetOwner}/widget/Instance_time_review`}\r\n          props={{\r\n            allWidgetsClassNames: props.allWidgetsClassNames,\r\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n            accountId:\r\n              state.tab == tabs.ALL_SCHEDULE.id ? \"All\" : context.accountId,\r\n            text:\r\n              state.tab == tabs.ALL_SCHEDULE.id\r\n                ? tabs.ALL_SCHEDULE.text\r\n                : tabs.MY_SCHEDULE.text,\r\n            className: \"d-inline-block\",\r\n            style: { width: \"100%\", height: \"1.5em\" },\r\n            updateInstanceTimeState,\r\n            tabs,\r\n            data,\r\n          }}\r\n        />\r\n      ) : (\r\n        <Widget\r\n          src={`${widgetOwner}/widget/Instance_time_edit`}\r\n          props={{\r\n            updateInstanceTimeState,\r\n            tabs,\r\n            data,\r\n            prevTab,\r\n            allWidgetsClassNames: props.allWidgetsClassNames,\r\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n    {state.showAbortScheduleCreation && renderAbortPollCreationModal()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Instance_time"}