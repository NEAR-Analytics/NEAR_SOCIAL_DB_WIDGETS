{"tx_hash": "88JTBkLkrKtHthwEYv1MCHvFwPZw9RSzKgNrDJBpuH7k", "action_id_social": "EA1QgPyicyMTzELmAEAzHkfWr32KadGVCddsHppvyXKy-0-widget", "block_id": 89899327, "block_timestamp": "2023-04-18 23:14:26.549", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Instance_time", "source_code": "const data = Social.index(\"Instance_time\", \"schedule\");\nif (!data) {\n  return \"Loading datas\";\n}\n\nconst profile = Social.getr(`${context.accountId}/profile`);\nif (!profile) {\n  return \"Loading profile\";\n}\n\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.instance_time;\nconst thisWidgetClassNames = props.allWidgetsClassNames.instance_time;\n\nconst widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\n\nvar sortedData =\n  data && data.length\n    ? data.sort((d1, d2) => d2.blockHeight - d1.blockHeight)\n    : [];\n\nvar accountIds = [\"All\"];\nvar finalData = undefined;\nfor (let i = 0; i < sortedData.length; i++) {\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\n    accountIds.push(sortedData[i].accountId);\n    if (sortedData[i].accountId == context.accountId) {\n      finalData = sortedData[i];\n    }\n  }\n}\n\nconst tabs = {\n  MY_SCHEDULE: { id: 1, text: \"My Schedule\" },\n  ALL_SCHEDULE: { id: 2, text: \"All Schedules\" },\n  NEW_SCHEDULE: {\n    id: 3,\n    text: finalData ? \"Edit Schedule\" : \"Create Schedule\",\n  },\n  OPEN_SCHEDULE: {\n    id: 4,\n    text: \"\",\n  },\n};\n\nState.init({\n  tab: tabs.ALL_SCHEDULE.id,\n  prevTab: tabs.ALL_SCHEDULE.id,\n  hoveringElement: \"\",\n  showAbortScheduleCreation: false,\n  abortThroughAllExistingSchedule: false,\n  userScheduleShown: \"\",\n});\n\nlet prevTab = state.prevTab;\n\nfunction makeStringShorter(string, length) {\n  if (string.length > length) {\n    return string.slice(0, length) + \"...\";\n  }\n  return string;\n}\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" &&\n      State.update({ showAbortScheduleCreation: false });\n  };\n}\n\nconst renderAbortPollCreationModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showAbortScheduleCreation &&\n        thisWidgetInlineStyles.renderAbortPollCreationModal.generalContainer\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div\n        className={\n          thisWidgetClassNames.renderAbortPollCreationModal.modalDialogContainer\n        }\n        style={\n          thisWidgetInlineStyles.renderAbortPollCreationModal\n            .modalDialogContainer\n        }\n        role=\"document\"\n      >\n        <div\n          className={\n            thisWidgetClassNames.renderAbortPollCreationModal\n              .modalContentContainer\n          }\n          style={\n            thisWidgetInlineStyles.renderAbortPollCreationModal\n              .modalContentContainer\n          }\n        >\n          <div\n            className={\n              thisWidgetClassNames.renderAbortPollCreationModal.modalHeader\n            }\n            style={\n              thisWidgetInlineStyles.renderAbortPollCreationModal.modalHeader\n            }\n          >\n            <button\n              type=\"button\"\n              className={\n                thisWidgetClassNames.renderAbortPollCreationModal.closeButton\n              }\n              style={\n                thisWidgetInlineStyles.renderAbortPollCreationModal.closeButton\n              }\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showAbortScheduleCreation: false })}\n            >\n              <i\n                className={\n                  thisWidgetClassNames.renderAbortPollCreationModal.closeIcon\n                }\n              ></i>\n            </button>\n          </div>\n          <div\n            className={\n              thisWidgetClassNames.renderAbortPollCreationModal.modalBody\n            }\n            style={\n              thisWidgetInlineStyles.renderAbortPollCreationModal.modalBody\n            }\n          >\n            <h3\n              style={\n                thisWidgetInlineStyles.renderAbortPollCreationModal\n                  .discardChangesTitle\n              }\n            >\n              Discard changes\n            </h3>\n            <p\n              style={\n                thisWidgetInlineStyles.renderAbortPollCreationModal\n                  .discardChangesText\n              }\n            >\n              If you leave now, you will lose all your changes\n            </p>\n          </div>\n          <div\n            className={\n              thisWidgetClassNames.renderAbortPollCreationModal.modalFooter\n            }\n            style={\n              thisWidgetInlineStyles.renderAbortPollCreationModal.modalFooter\n            }\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              style={\n                thisWidgetInlineStyles.renderAbortPollCreationModal\n                  .continueEditingButton\n              }\n              onClick={() => State.update({ showAbortScheduleCreation: false })}\n            >\n              Continue editing\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              style={\n                thisWidgetInlineStyles.renderAbortPollCreationModal\n                  .discardChangesButton\n              }\n              onClick={() => {\n                if (state.abortThroughAllExistingSchedule) {\n                  State.update({\n                    tab: tabs.ALL_SCHEDULE.id,\n                    abortThroughAllExistingSchedule: false,\n                    hoveringElement: \"\",\n                    showAbortScheduleCreation: false,\n                  });\n                } else {\n                  State.update({\n                    tab: tabs.ALL_SCHEDULE.id,\n                    hoveringElement: \"\",\n                    showAbortScheduleCreation: false,\n                  });\n                }\n              }}\n            >\n              Discard changes\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst updateInstanceTimeState = (object) => {\n  State.update(object);\n};\n\nreturn (\n  <div className=\"pb-5\" style={thisWidgetInlineStyles.generalContainer}>\n    <div className={thisWidgetClassNames.siteHeaderContainer}>\n      <div\n        className={thisWidgetClassNames.siteHeader}\n        style={thisWidgetInlineStyles.siteHeader}\n      >\n        <div className={thisWidgetClassNames.instanceTimeLogoContainer}>\n          <i className={thisWidgetClassNames.logoIcon}></i>\n          <h3 style={thisWidgetInlineStyles.logoTitle}>WeeklySchedule</h3>\n        </div>\n        {state.tab != tabs.OPEN_SCHEDULE.id && (\n          <div\n            className={thisWidgetClassNames.openScheduleGeneralContainer}\n            style={thisWidgetInlineStyles.openScheduleGeneralContainer}\n          >\n            <div style={thisWidgetInlineStyles.openScheduleContainer}>\n              <div className={thisWidgetClassNames.tabsContainer}>\n                {Object.keys(tabs).map((tabKey) => {\n                  const tab = tabs[tabKey];\n                  if (tabKey == \"ALL_SCHEDULE\" || tabKey == \"MY_SCHEDULE\") {\n                    return (\n                      <div style={thisWidgetInlineStyles.tabContainer}>\n                        <p\n                          ariaCurrent=\"page\"\n                          onMouseEnter={() => {\n                            State.update({ hoveringElement: tab.id });\n                          }}\n                          onMouseLeave={() => {\n                            State.update({ hoveringElement: \"\" });\n                          }}\n                          onClick={() => {\n                            state.tab == tabs.ALL_SCHEDULE.id ||\n                            state.tab == tabs.MY_SCHEDULE.id\n                              ? State.update({ tab: tab.id })\n                              : tab.id == tabs.ALL_SCHEDULE.id\n                              ? State.update({\n                                  showAbortScheduleCreation: true,\n                                  abortThroughAllExistingSchedule: true,\n                                })\n                              : State.update({\n                                  showAbortScheduleCreation: true,\n                                });\n                          }}\n                          style={thisWidgetInlineStyles.tabText}\n                        >\n                          {tab.text}\n                        </p>\n                        {(state.hoveringElement == tab.id ||\n                          state.tab == tab.id) && (\n                          <div\n                            style={\n                              thisWidgetInlineStyles.decorativeTabUnderline\n                            }\n                          >\n                            {/*Decorative Div, do not delete*/}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  }\n                })}\n              </div>\n            </div>\n            <button\n              onMouseEnter={() => {\n                State.update({ hoveringElement: tabs.NEW_SCHEDULE.id });\n              }}\n              onMouseLeave={() => {\n                State.update({ hoveringElement: \"\" });\n              }}\n              onClick={() => {\n                State.update({ tab: tabs.NEW_SCHEDULE.id });\n              }}\n              style={\n                state.hoveringElement == tabs.NEW_SCHEDULE.id ||\n                state.tab == tabs.NEW_SCHEDULE.id\n                  ? thisWidgetInlineStyles.newScheduleButtonHovering\n                  : thisWidgetInlineStyles.newScheduleButton\n              }\n            >\n              <i\n                className={thisWidgetClassNames.newScheduleButtonInnerIcon}\n                style={\n                  state.hoveringElement == tabs.NEW_SCHEDULE.id ||\n                  state.tab == tabs.NEW_SCHEDULE.id\n                    ? thisWidgetInlineStyles.newScheduleButtonInnerIconHovered\n                    : thisWidgetInlineStyles.newScheduleButtonInnerIcon\n                }\n              ></i>\n              {tabs.NEW_SCHEDULE.text}\n            </button>\n          </div>\n        )}\n        <div className={thisWidgetClassNames.showUserInfoInHeader}>\n          <p className=\"m-0\" title={profile.name}>\n            {makeStringShorter(profile.name, 12)}\n          </p>\n          <p className=\"m-0\" title={context.accountId}>\n            @{makeStringShorter(context.accountId, 12)}\n          </p>\n        </div>\n      </div>\n      <div className={thisWidgetClassNames.decorativeDivInHeader}></div>\n\n      <div style={thisWidgetInlineStyles.newShceduleButtonInMobileContainer}>\n        <button\n          className={thisWidgetClassNames.newShceduleButtonInMobile}\n          onMouseEnter={() => {\n            State.update({ hoveringElement: tabs.NEW_SCHEDULE.id });\n          }}\n          onMouseLeave={() => {\n            State.update({ hoveringElement: \"\" });\n          }}\n          onClick={() => {\n            State.update({ tab: tabs.NEW_SCHEDULE.id });\n          }}\n          style={\n            state.hoveringElement == tabs.NEW_SCHEDULE.id ||\n            state.tab == tabs.NEW_SCHEDULE.id\n              ? thisWidgetInlineStyles.newScheduleButtonHovering\n              : thisWidgetInlineStyles.newScheduleButton\n          }\n        >\n          <i\n            className={thisWidgetClassNames.newScheduleButtonInnerIcon}\n            style={\n              state.hoveringElement == tabs.NEW_SCHEDULE.id ||\n              state.tab == tabs.NEW_SCHEDULE.id\n                ? thisWidgetInlineStyles.newScheduleButtonInnerIconHovered\n                : thisWidgetInlineStyles.newScheduleButtonInnerIcon\n            }\n          ></i>\n          {tabs.NEW_SCHEDULE.text}\n        </button>\n      </div>\n    </div>\n\n    <div className={thisWidgetClassNames.bodyContainer}>\n      {state.tab == tabs.OPEN_SCHEDULE.id ? (\n        <Widget\n          src={`${widgetOwner}/widget/Instance_time_card`}\n          props={{\n            allWidgetsClassNames: props.allWidgetsClassNames,\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\n            accountId: state.userScheduleShown,\n            tabs,\n            prevTab,\n            updateInstanceTimeState,\n            data,\n          }}\n        />\n      ) : state.tab != tabs.NEW_SCHEDULE.id ? (\n        <Widget\n          src={`${widgetOwner}/widget/Instance_time_review`}\n          props={{\n            allWidgetsClassNames: props.allWidgetsClassNames,\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\n            accountId:\n              state.tab == tabs.MY_SCHEDULE.id ? context.accountId : \"All\",\n            text:\n              state.tab == tabs.ALL_SCHEDULE.id\n                ? tabs.ALL_SCHEDULE.text\n                : tabs.MY_SCHEDULE.text,\n            className: \"d-inline-block\",\n            style: { width: \"100%\", height: \"1.5em\" },\n            updateInstanceTimeState,\n            tabs,\n            data,\n          }}\n        />\n      ) : (\n        <Widget\n          src={`${widgetOwner}/widget/Instance_time_edit`}\n          props={{\n            updateInstanceTimeState,\n            tabs,\n            data,\n            prevTab,\n            allWidgetsClassNames: props.allWidgetsClassNames,\n            allWidgetsInlineStyles: props.allWidgetsInlineStyles,\n          }}\n        />\n      )}\n    </div>\n    {state.showAbortScheduleCreation && renderAbortPollCreationModal()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Instance_time"}