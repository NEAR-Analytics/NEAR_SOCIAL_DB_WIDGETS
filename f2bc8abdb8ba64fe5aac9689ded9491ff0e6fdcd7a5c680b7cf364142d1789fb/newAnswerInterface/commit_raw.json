{"tx_hash": "CU4AEzp58GUL8dA82ZVzGpjtUHA5srx7ZT2mLKFXg2Ci", "action_id_social": "F2Qs9oQetjEZtQZ8jnMcpjj3bbg9wjkeSUyi3aUU6ydM-0-widget", "block_id": 83789546, "block_timestamp": "2023-01-25 21:33:47.613", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newAnswerInterface", "source_code": "let question = props.question ?? {\r\n  title: \"Multiple choice test\",\r\n  tgLink: \"\",\r\n  accountId: \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n  choicesOptions: [\"a\", \"b\", \"c\"],\r\n  question: \"Testing multiple choice\",\r\n  description: \"This is a simple test\",\r\n  questionBlockHeight: 79932918,\r\n  startDate: Date.now(),\r\n  endDate: Date.now() + 10000000,\r\n  storingTimestamp: Date.now(),\r\n  questionType: \"1\",\r\n  answers: [\r\n    {\r\n      accountId:\r\n        \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n      answer: \"0\",\r\n      timeStamp: Date.now(),\r\n    },\r\n  ],\r\n};\r\n\r\nlet profile = Social.getr(`${question.accountId}/profile`);\r\n\r\n//TODO\r\nlet questionsByThisCreator = [{}];\r\n\r\nlet thisUserVote = 0;\r\nfunction userHaveVoted() {\r\n  //TODO validate this to return boolean and if it's true set value to thisUserVote\r\n  return false;\r\n}\r\n\r\nfunction sliceString(string, newStringLenght) {\r\n  if (string.length > newStringLenght) {\r\n    return string.slice(0, newStringLenght) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\n//TODO get this data\r\nlet otherQuestionsFromThisUser = [{}];\r\n\r\n//TODO get this data\r\nlet countVotes = [1, 0, 0];\r\n\r\nState.init({\r\n  vote: \"\",\r\n});\r\n\r\nfunction calculatePercentage(votesToThisOption) {\r\n  return (votesToThisOption / question.answers.length) * 100;\r\n}\r\n\r\nfunction transformDateFormat(date) {\r\n  //TODO\r\n  return date;\r\n}\r\n\r\nconst renderOptions = () => {\r\n  return question.choicesOptions.map((option, index) => {\r\n    let styles = userHaveVoted()\r\n      ? { color: \"#000\", width: \"90%\" }\r\n      : { color: \"#000\", width: \"100%\" };\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <div style={styles}>\r\n          {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\r\n          <div\r\n            style={{\r\n              margin: \"0.3rem 0px\",\r\n              content: \"\",\r\n              display: \"table\",\r\n              clear: \"both\",\r\n              padding: \"0.01em 16px\",\r\n              display: \"inline-block\",\r\n              width: `${\r\n                userHaveVoted() ? calculatePercentage(countVotes[index]) : 100\r\n              }%`,\r\n              textAlign: \"center\",\r\n              overflow: \"visible\",\r\n              whiteSpace: \"nowrap\",\r\n              textAlign: \"left\",\r\n              backgroundColor: `${\r\n                (userHaveVoted() && thisUserVote == index) ||\r\n                state.vote == index + \"\"\r\n                  ? \"rgb(153, 255, 153)\"\r\n                  : \"lightgray\"\r\n              }`,\r\n            }}\r\n            onClick={() => !userHaveVoted && State.update({ vote: index + \"\" })}\r\n          >\r\n            <span style={{ overflow: \"visible\", fontWeight: \"500\" }}>\r\n              {option}\r\n              {userHaveVoted() && (\r\n                <span\r\n                  className=\"text-secondary\"\r\n                  style={{ marginLeft: \"1rem\", fontWeight: \"400\" }}\r\n                >\r\n                  ({question.answers.length} votes)\r\n                </span>\r\n              )}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        {userHaveVoted() && (\r\n          <span\r\n            style={{\r\n              minWidth: \"max-content\",\r\n              margin: \"0.3rem 0px 0.3rem 0.3rem\",\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            {calculatePercentage(countVotes[index])}%\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nconst renderOtherQuestions = () => {\r\n  return questionsByThisCreator.map((questionByCreator, index) => {\r\n    let divStyle = index == 0 ? {} : { borderTop: \"1px solid #ced4da\" };\r\n    return (\r\n      <div style={divStyle}>\r\n        <p style={{ fontWeight: \"500\" }}>\r\n          {sliceString(questionByCreator.title, 12)}\r\n        </p>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary\">\r\n          <span>End date</span>\r\n          <span>{transformDateFormat(questionByCreator.endDate)}</span>\r\n        </div>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary\">\r\n          <span>Votes</span>\r\n          <span>({questionByCreator.answers.length})</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nfunction calculateTimeLeft() {\r\n  //TODO\r\n  return Date.now() - Number(endDate);\r\n}\r\n\r\nreturn (\r\n  <div\r\n    className=\"d-flex content-align-start justify-content-between\"\r\n    style={{ borderRadius: \"3px\", padding: \"2rem 3rem\" }}\r\n  >\r\n    <div style={{ width: \"75%\", marginRight: \"2rem\" }}>\r\n      <div className=\"d-flex\">\r\n        <span\r\n          style={{\r\n            backgroundColor:\r\n              question.startDate < Date.now() && question.endDate > Date.now()\r\n                ? \"rgb(153, 255, 153)\"\r\n                : \"rgb(255, 128, 128)\",\r\n\r\n            height: \"max-content\",\r\n            width: \"6rem\",\r\n            border: \"1px solid rgb(0, 82, 204)\",\r\n            textAlign: \"center\",\r\n            borderRadius: \"80px\",\r\n            marginRight: \"1rem\",\r\n          }}\r\n        >\r\n          {question.startDate < Date.now() && question.endDate > Date.now()\r\n            ? \"Active\"\r\n            : \"Closed\"}\r\n        </span>\r\n\r\n        <span\r\n          style={{\r\n            paddingLeft: \"1.5rem\",\r\n            borderLeft: \"2px solid #ced4da\",\r\n          }}\r\n        >\r\n          End in {calculateTimeLeft()}\r\n        </span>\r\n      </div>\r\n\r\n      <h2>{question.title}</h2>\r\n\r\n      <div className=\"d-flex\">\r\n        <span className=\"mr-3\" style={{ fontWeight: \"500\" }}>\r\n          Created by\r\n        </span>\r\n\r\n        <Widget\r\n          src=\"mob.near/widget/ProfileImage\"\r\n          props={{\r\n            profile,\r\n            accountId,\r\n            className: \"float-start d-inline-block me-2\",\r\n            style: {\r\n              width: \"1.5rem\",\r\n              marginLeft: \"1rem\",\r\n            },\r\n          }}\r\n        />\r\n\r\n        <span style={{ fontWeigth: \"500\" }}>\r\n          {sliceString(question.accountId, 12)}\r\n        </span>\r\n      </div>\r\n\r\n      <p>{question.description}</p>\r\n\r\n      {question.tgLink != \"\" && (\r\n        <h4>\r\n          Discussion link: <a href={question.tgLink}>{question.tgLink}</a>\r\n        </h4>\r\n      )}\r\n\r\n      <div\r\n        style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\r\n        className=\"p-3 my-3\"\r\n      >\r\n        <h4>{question.question}</h4>\r\n\r\n        {renderOptions()}\r\n\r\n        {userHaveVoted() ? (\r\n          <p\r\n            className=\"text-primary\"\r\n            style={{ textAlign: \"center\", fontWeight: \"500\" }}\r\n          >\r\n            Voted\r\n          </p>\r\n        ) : (\r\n          <>{/*TODO replace with commit button*/}</>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n    <div style={{ minWidth: \"17rem\" }}>\r\n      <h5>Information</h5>\r\n      <div\r\n        className=\"mb-2\"\r\n        style={{\r\n          border: \"1px solid #ced4da\",\r\n          borderRadius: \"0.375rem\",\r\n          fontWeight: \"500\",\r\n          padding: \"0.5rem 1rem\",\r\n        }}\r\n      >\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Status</span>\r\n          <span>\r\n            {question.startDate < Date.now() && question.endDate > Date.now()\r\n              ? \"Active\"\r\n              : \"Closed\"}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Start date</span>\r\n          <span>{transformDateFormat(question.startDate)}</span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>End date</span>\r\n          <span>{transformDateFormat(question.endDate)}</span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Creator</span>\r\n          <span>{sliceString(question.accountId, 8)}</span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Polls by creator</span>\r\n          <span>{/*TODO*/}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex\">\r\n        <h5>Poll by creator</h5>\r\n        <h5 style={{ marginLeft: \"0.5rem\" }}>\r\n          ({questionsByThisCreator.length})\r\n        </h5>\r\n      </div>\r\n\r\n      {questionByCreator.length != 0 && (\r\n        <div\r\n          style={{\r\n            border: \"1px solid #ced4da\",\r\n            borderRadius: \"0.375rem\",\r\n            padding: \"0.5rem 1rem\",\r\n          }}\r\n        >\r\n          {renderOtherQuestions()}\r\n          {/*TODO add view all button*/}\r\n        </div>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newAnswerInterface"}