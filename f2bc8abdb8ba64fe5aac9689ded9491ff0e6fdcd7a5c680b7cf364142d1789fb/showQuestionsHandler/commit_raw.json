{"tx_hash": "5JVXdu5ix7cXC6149GFWgjQ52kes7NfWhBuM4QEzQ4zq", "action_id_social": "JDnAUUnXfXy2N5Uc3WvAXy5naGiMrqaxqrDvhz1Pjft5-0-widget", "block_id": 82051199, "block_timestamp": "2023-01-02 19:44:43.626", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "showQuestionsHandler", "source_code": "State.init({\n  questions: {},\n  showQuestion: false,\n  modalBlockHeight: question.blockHeight,\n});\n\n//TODO considering this new prop use te context accoutId to filter the questions\nconst onlyUsersPolls = props.onlyUser ?? false;\n\nconst displayAnswerWidgetNames = [\n  \"newTextAnswerInterface\",\n  \"newMiniMultipleChoiceInterface\",\n];\n\nlet questions = Social.index(\"poll_question\", \"question-v3.0.1\");\n\nif (!questions) {\n  return \"Loading\";\n}\n\nquestions = questions.sort((q1, q2) => {\n  const isQ1Finished = q1.value.endTimestamp < Date.now();\n  const isQ2Finished = q2.value.endTimestamp < Date.now();\n  if (isQ1Finished && !isQ2Finished) return 1;\n  if (!isQ1Finished && isQ2Finished) return -1;\n  if (isQ1Finished && isQ2Finished)\n    return q2.value.endTimestamp - q1.value.endTimestamp;\n  return q1.value.endTimestamp - q2.value.endTimestamp;\n});\n\n//TODO review this\nlet usersMakingQuestions = [];\nfor (let i = 0; i < questions.length; i++) {\n  if (!usersMakingQuestions.includes(questions[i].accountId)) {\n    usersMakingQuestions.push(questions[i].accountId);\n  }\n}\n\nif (JSON.stringify(questions) != JSON.stringify(state.questions)) {\n  State.update({ questions: questions });\n}\n\nconst widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestion: false });\n  };\n}\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestion && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"95%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              backgroundColor: \"white\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/newVotingInterface`}\n              props={{\n                blockHeight: state.modalBlockHeight,\n                shouldDisplayViewAll: false,\n              }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderQuestions = (onlyUsersPolls) => {\n  if (onlyUsersPolls) {\n    return questions.map((question, index) => {\n      return (\n        <div\n          className=\"mx-1 py-3 px-4 my-2\"\n          style={{\n            boxSizing: \"border-box\",\n            boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n            backgroundColor: \"white\",\n            borderRadius: \"1rem\",\n            cursor: \"pointer\",\n          }}\n          onClick={() => {\n            State.update({\n              showQuestion: true,\n              modalBlockHeight: question.blockHeight,\n            });\n          }}\n        >\n          <Widget\n            src={\n              \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/minimalistQuestionHeader\"\n            }\n            props={{ ...question }}\n          />\n          <Widget\n            src={\n              \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/minimalistQuestionGeneralInfo\"\n            }\n            props={{ ...question }}\n          />\n        </div>\n      );\n    });\n  } else {\n    return (\n      <>\n        {usersMakingQuestions.map((accountId, index) => {\n          return (\n            <div\n              className=\"mx-1 py-3 px-4 my-2\"\n              style={{\n                boxSizing: \"border-box\",\n                boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\n                backgroundColor: \"white\",\n                borderRadius: \"1rem\",\n              }}\n            >\n              <Widget\n                src={`${widgetOwner}/widget/displayQuestionHeader`}\n                props={{ allUsersQuestions: questions, accountId }}\n              />\n              <Widget\n                src={`${widgetOwner}/widget/questionsByCreator`}\n                props={{ accountId }}\n              />\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n};\n\nreturn (\n  <div\n    style={{\n      borderRadius: \"3px\",\n      backgroundColor: \"rgb(230, 230, 230)\",\n    }}\n  >\n    <div\n      style={\n        onlyUsersPolls\n          ? {\n              display: \"grid\",\n              gridTemplateColumns: \"auto auto auto\",\n              justifyContent: \"space-between\",\n            }\n          : {\n              display: \"grid\",\n              gridTemplateColumns: \"auto auto\",\n              justifyContent: \"space-between\",\n            }\n      }\n    >\n      {renderQuestions(onlyUsersPolls)}\n    </div>\n    {/*TODO add a page picker instead the infinite scroll?*/}\n    {state.showQuestion && renderModal()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/showQuestionsHandler"}