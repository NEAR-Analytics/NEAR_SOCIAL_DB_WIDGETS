{"tx_hash": "Do1xshsAhVp8iZa9WLidZcdvJjZjttuwchP4X5BmPBmE", "action_id_social": "7uqNSj4gQn1hsBCCHPRTRa1Vup7JWFfuYQGYcg3rTnAE-0-widget", "block_id": 81607458, "block_timestamp": "2022-12-27 23:31:22.764", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "showQuestionsHandler", "source_code": "State.init({ showQuestion: false, modalBlockHeight: 0, questions: {} });\n\nconst displayAnswerWidgetNames = [\n  \"newTextAnswerInterface\",\n  \"newMiniMultipleChoiceInterface\",\n];\n\nlet questions = Social.index(\"poll_question\", \"question-v3.0.1\", {\n  accountId: props.accountId,\n});\n\nif (!questions) {\n  return \"Loading\";\n}\n\nquestions = questions.sort((q1, q2) => {\n  const isQ1Finished = q1.value.endTimestamp < Date.now();\n  const isQ2Finished = q2.value.endTimestamp < Date.now();\n  if (isQ1Finished && !isQ2Finished) return 1;\n  if (!isQ1Finished && isQ2Finished) return -1;\n  if (isQ1Finished && isQ2Finished)\n    return q2.value.endTimestamp - q1.value.endTimestamp;\n  return q1.value.endTimestamp - q2.value.endTimestamp;\n});\n\nif (JSON.stringify(questions) != JSON.stringify(state.questions)) {\n  State.update({ questions: questions });\n}\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestion: false });\n  };\n}\n\nconst widgetOwner = \"silkking.near\";\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestion && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"95%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              backgroundColor: \"white\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/newVotingInterface`}\n              props={{\n                blockHeight: state.modalBlockHeight,\n                shouldDisplayViewAll: props.accountId == undefined,\n              }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderQuestions = () => {\n  return questions.map((question) => {\n    return (\n      <div\n        className=\"my-5 py-3 px-4\"\n        style={{\n          backgroundColor: \"white\",\n          borderRadius: \"1rem\",\n          cursor: \"pointer\",\n        }}\n        onClick={() => {\n          State.update({\n            showQuestion: true,\n            modalBlockHeight: question.blockHeight,\n          });\n        }}\n      >\n        <Widget\n          src={`${widgetOwner}/widget/answersHeader`}\n          props={{ ...question }}\n        />\n        <Widget\n          src={`${widgetOwner}/widget/${\n            displayAnswerWidgetNames[question.value.questionType]\n          }`}\n          props={{ ...question }}\n        />\n      </div>\n    );\n  });\n};\n\nreturn (\n  <div\n    style={{\n      borderRadius: \"3px\",\n      padding: \"0px 2%\",\n      backgroundColor: \"rgb(230, 230, 230)\",\n    }}\n  >\n    {renderQuestions()}\n    {state.showQuestion && renderModal()}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/showQuestionsHandler"}