{"tx_hash": "2iyeHh6bM4SLxmWWo1dG3fbtbwbBi55QfGNB9iyimQw8", "action_id_social": "HrUtNgEUPLjrb1H4uZGNHqD4UBDUGaSkWP6u9mnqsuB7-0-widget", "block_id": 78522201, "block_timestamp": "2022-11-15 20:41:27.987", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "AddMeme", "source_code": "console.log(\"props: \", props);\n\nconst accountId = props.accountId;\nconst currentAccountId = context.accountId;\n\nconst profile = Social.getr(`${accountId}/profile`);\n\n// You can use this code to know the blockheights of your question in case you need to test. Just use one blockheight in the props.\nconst testBlockHeights = Social.keys(\n  `${accountId}/post/poll_question/question/question`,\n  \"final\",\n  {\n    return_type: \"History\",\n  }\n);\nconsole.log(\"testBlockHeights: \", testBlockHeights);\n\nconst questionBlockHeight = props.questionBlockHeight;\n// console.log(\"questionBlockHeight: \", questionBlockHeight);\n\nconst question = Social.get(\n  `${accountId}/post/poll_question/question/question`,\n  questionBlockHeight\n);\n\n// console.log(\"question: \", question);\n\nconst questionTimestamp = Social.get(\n  `${accountId}/post/poll_question/question/questionTimestamp`,\n  questionBlockHeight\n);\n\nconst profileLink = (c) => (\n  <a\n    className=\"text-decoration-none link-dark\"\n    href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n  >\n    {c}\n  </a>\n);\n\nconst blockHeightsOfAllAnswers = Social.keys(\n  `*/post/${questionBlockHeight}`,\n  \"final\",\n  {\n    return_type: \"History\",\n  }\n);\n\nlet mapped = Object.keys(blockHeightsOfAllAnswers).map((key) => {\n  return {\n    accountId: key,\n    blockHeightArray: blockHeightsOfAllAnswers[key].post.test[0],\n  };\n});\n\n// console.log(\"mpd\", mapped);\n\nconst haveThisUserAlreadyVoted = () => {\n  if (mapped.length == 0) {\n    return false;\n  }\n  for (let i = 0; i < mapped.length; i++) {\n    return mapped[i].accountId == currentAccountId;\n  }\n};\n\nlet countVotes = mapped.reduce(\n  (acc, curr) => {\n    let answer = Social.get(\n      `${curr.accountId}/post/${questionBlockHeight}`,\n      curr.blockHeightArray\n    );\n    return answer == 1 ? [acc[0] + 1, acc[1]] : [acc[0], acc[1] + 1];\n  },\n  [0, 0]\n);\n\nState.init({ vote: \"\", currentAnswer: \"\" });\n// console.log(\"input vote value: \", state.vote, \"textarea value: \", state.currentAnswer);\n\nconst getForm = () => (\n  <div\n    style={{\n      border: \"1px solid #e9e9e9\",\n      borderRadius: \"20px\",\n      padding: \"1rem\",\n    }}\n  >\n    <h5>Give your opinion</h5>\n    <p style={{ marginBottom: \"0\" }}>Vote:</p>\n    <div className=\"form-check\">\n      <input\n        key={state.vote}\n        disabled={haveThisUserAlreadyVoted()}\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"flexRadioDefault\"\n        id=\"voteYes\"\n        value=\"1\"\n        onChange={onValueChange}\n        checked={state.vote == \"1\"}\n      />\n      <label className=\"form-check-label\" for=\"voteYes\">\n        Yes\n      </label>\n    </div>\n    <div className=\"form-check\">\n      <input\n        key={state.vote}\n        disabled={haveThisUserAlreadyVoted()}\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"flexRadioDefault\"\n        id=\"voteNo\"\n        value=\"0\"\n        onChange={onValueChange}\n        checked={state.vote == \"0\"}\n      />\n      <label className=\"form-check-label\" for=\"voteNo\">\n        No\n      </label>\n    </div>\n    {haveThisUserAlreadyVoted() && (\n      <p className=\"text-danger\">You can only vote once</p>\n    )}\n\n    <div className=\"form-group\">\n      <label for=\"answer\" className=\"font-weight-bold\">\n        Write answer:\n      </label>\n      <textarea\n        className=\"form-control mb-1\"\n        id=\"answer\"\n        rows=\"3\"\n        value={state.currentAnswer}\n        onChange={(e) => {\n          const currentAnswer = e.target.value;\n          State.update({ currentAnswer });\n        }}\n      ></textarea>\n    </div>\n    <CommitButton\n      data={{\n        post: {\n          [questionBlockHeight]: {\n            userVote: state.vote == \"\" ? answer.userVote : state.vote,\n            userVoting: currentAccountId,\n            userAnswers: currentAnswer,\n            answerTimestamps: Date.now(),\n          },\n        },\n      }}\n    >\n      Confirm\n    </CommitButton>\n  </div>\n);\n\nfunction onValueChange(e) {\n  const vote = e.target.value;\n\n  State.update({ vote });\n}\n\nconst timeAgo = (diffSec) =>\n  diffSec < 60000\n    ? `${(diffSec / 1000) | 0} seconds ago`\n    : diffSec < 3600000\n    ? `${(diffSec / 60000) | 0} minutes ago`\n    : diffSec < 86400000\n    ? `${(diffSec / 3600000) | 0} hours ago`\n    : `${(diffSec / 86400000) | 0} days ago`;\n\nreturn (\n  <div style={{ maxWidth: \"40em\" }}>\n    <div\n      className=\"d-flex align-items-start\"\n      style={{\n        padding: \"1.5rem 0\",\n        borderBottom: \"1px solid #e9e9e9\",\n      }}\n    >\n      <div>\n        {profileLink(\n          <Widget src=\"mob.near/widget/ProfileImage\" props={{ accountId }} />\n        )}\n      </div>\n      <div className=\"ms-2 flex-grow-1\" style={{ minWidth: 0 }}>\n        <div className=\"d-flex justify-content-start\">\n          <div className=\"flex-grow-1 me-1 text-truncate\">\n            {profileLink(\n              <>\n                <span className=\"fw-bold\">{profile.name}</span>\n                <span className=\"text-secondary\">@{accountId}</span>\n              </>\n            )}\n          </div>\n          <div>\n            <small className=\"ps-1 text-nowrap text-muted ms-auto\">\n              <i className=\"bi bi-clock me-1\"></i>\n              {timeAgo(Date.now() - questionTimestamp ?? 0)}\n            </small>\n          </div>\n        </div>\n        <div>{question}</div>\n        <div className=\"d-flex align-items-start\">\n          <i\n            className=\"bi bi-check-circle-fill\"\n            style={{ padding: \"0 0.3rem\" }}\n          ></i>\n          <p className=\"text-secondary\">{countVotes[1]}</p>\n          <i\n            className=\"bi bi-x-octagon-fill\"\n            style={{ padding: \"0 0.5rem 0 1rem\" }}\n          ></i>\n          <p className=\"text-secondary\">{countVotes[0]}</p>\n        </div>\n        <>{getForm()}</>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/AddMeme", "metadata.name": NaN, "metadata.tags.meme": NaN}