{"tx_hash": "EgHVP7KRG66XsfNyFHs1unoTjksNM9mHQQ2Jfu4wjnni", "action_id_social": "7FogTtLnRnerb7e1cnuFvvRZJFuCp5XufAzTzVRCYkKf-0-widget", "block_id": 93616270, "block_timestamp": "2023-06-06T22:14:51.902Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "general_neardigitalcollective_card", "source_code": "const widgetOwner =\r\n  props.widgetOwner ??\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n\r\nconst handlerStateUpdate = props.handlerStateUpdate;\r\nconst navegateTo = props.navegateTo;\r\n\r\nconst cardData = props.cardData ?? {\r\n  accountId: \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n  blockHeight: 83806538,\r\n  value: {\r\n    isDraft: false,\r\n    title: \"Last test?\",\r\n    description: \"Is this the last test?\",\r\n    tgLink: \"\",\r\n    startTimestamp: 1674701520000,\r\n    endTimestamp: 1674787920000,\r\n    questions: [\r\n      {\r\n        question: \"What do you think?\",\r\n        questionType: \"0\",\r\n        choicesOptions: [\"Yes\", \"No\"],\r\n      },\r\n      {\r\n        question: \"Why?\",\r\n        questionType: \"1\",\r\n        choicesOptions: [\r\n          \"Because it can't be other way\",\r\n          \"Because i'm sure\",\r\n          \"Why not?\",\r\n        ],\r\n      },\r\n      {\r\n        question: \"Multiselect?\",\r\n        questionType: \"2\",\r\n        choicesOptions: [\"1\", \"2\", \"3\"],\r\n      },\r\n      {\r\n        question: \"Give me a feedback\",\r\n        questionType: \"3\",\r\n        choicesOptions: [],\r\n      },\r\n    ],\r\n    timestamp: 1674701636048,\r\n  },\r\n};\r\n\r\nconst formatCard = props.formatCard ?? {\r\n  row1: {\r\n    rowType: \"markdown\",\r\n    contentData: \"data\",\r\n  },\r\n  row2: {\r\n    rowType: \"text\",\r\n    contentData: \"data2\",\r\n  },\r\n  row3: {\r\n    rowType: \"flex\",\r\n    flexClassName: \"justify-content-between border rounded p-3\",\r\n    contentData: [\r\n      {\r\n        type: \"flex\",\r\n        flexClassName:\r\n          \"flex-column justify-content-start align-items-center border-right\",\r\n        style: { width: \"33%\" },\r\n        content: [\r\n          {\r\n            type: \"text\",\r\n            value: \"Created by\",\r\n          },\r\n          {\r\n            type: \"key\",\r\n            value: \"accountId\",\r\n            style: {\r\n              maxWidth: \"100%\",\r\n              textOverflow: \"ellipsis\",\r\n              overflow: \"hidden\",\r\n              textWrap: \"nowrap\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        type: \"flex\",\r\n        flexClassName:\r\n          \"flex-column justify-content-start align-items-center border-right\",\r\n        style: { width: \"33%\" },\r\n        content: [\r\n          {\r\n            type: \"text\",\r\n            value: \"Started\",\r\n          },\r\n          {\r\n            type: \"timeStampKey\",\r\n            value: \"startTimestamp\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        type: \"flex\",\r\n        flexClassName:\r\n          \"flex-column justify-content-start align-items-center border-right\",\r\n        style: {\r\n          width: \"33%\",\r\n        },\r\n        content: [\r\n          {\r\n            type: \"text\",\r\n            value: \"Ended\",\r\n          },\r\n          {\r\n            type: \"timeStampKey\",\r\n            value: \"endTimestamp\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nreturn (\r\n  <div className=\"col-sm-12 col-lg-6 col-2xl-4 gy-3\">\r\n    <div\r\n      className=\"card h-100\"\r\n      onClick={\r\n        navegateTo\r\n          ? () =>\r\n              handlerStateUpdate({\r\n                tab: navegateTo,\r\n                postBlockHeight: cardData.blockHeight,\r\n              })\r\n          : () => {}\r\n      }\r\n      style={navegateTo ? { cursor: \"pointer\" } : {}}\r\n    >\r\n      <Widget\r\n        src={`${widgetOwner}/widget/${headerWidgetName}`}\r\n        props={{ ...cardData }}\r\n      />\r\n      <div className=\"card-body\">\r\n        {Object.keys(formatCard).map((rowKey) => {\r\n          let rowData = formatCard[rowKey];\r\n          if (rowData.rowType == \"markdown\") {\r\n            return <Markdown text={rowData.contentData} />;\r\n          } else if (rowData.rowType == \"text\") {\r\n            return (\r\n              <p style={rowData.style ? rowData.style : {}}>\r\n                {rowData.contentData}\r\n              </p>\r\n            );\r\n          } else if (rowData.rowType == \"timeStampKey\") {\r\n            return (\r\n              <p style={rowData.style ? rowData.style : {}}>\r\n                {new Date(cardData.value[secondItem.value]).toLocaleDateString(\r\n                  [],\r\n                  dateFormatOptions\r\n                )}\r\n              </p>\r\n            );\r\n          } else if (rowData.rowType == \"flex\") {\r\n            return (\r\n              <div\r\n                className={`d-flex ${rowData.flexClassName}`}\r\n                style={rowData.style ? rowData.style : {}}\r\n              >\r\n                {rowData.contentData.map((item) => {\r\n                  if (item.type == \"markdown\") {\r\n                    return <Markdown text={item.content} />;\r\n                  } else if (item.type == \"text\") {\r\n                    return (\r\n                      <p style={item.style ? item.style : {}}>{item.content}</p>\r\n                    );\r\n                  } else if (item.type == \"flex\") {\r\n                    return (\r\n                      <div\r\n                        className={`d-flex ${item.flexClassName}`}\r\n                        style={item.style ? item.style : {}}\r\n                      >\r\n                        {item.content.map((secondItem) => {\r\n                          console.log(secondItem);\r\n                          if (secondItem.type == \"markdown\") {\r\n                            return <Markdown text={secondItem.value} />;\r\n                          } else if (secondItem.type == \"text\") {\r\n                            return (\r\n                              <p\r\n                                style={secondItem.style ? secondItem.style : {}}\r\n                              >\r\n                                {secondItem.value}\r\n                              </p>\r\n                            );\r\n                          } else if (secondItem.type == \"timeStampKey\") {\r\n                            return (\r\n                              <p\r\n                                style={secondItem.style ? secondItem.style : {}}\r\n                              >\r\n                                {new Date(\r\n                                  cardData.value[secondItem.value]\r\n                                ).toLocaleDateString([], dateFormatOptions)}\r\n                              </p>\r\n                            );\r\n                          } else if (secondItem.type == \"key\") {\r\n                            return (\r\n                              <p\r\n                                style={secondItem.style ? secondItem.style : {}}\r\n                              >\r\n                                {cardData[secondItem.value]}\r\n                              </p>\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              <p className=\"text-danger\">Error passing data</p>\r\n                            );\r\n                          }\r\n                        })}\r\n                      </div>\r\n                    );\r\n                  } else {\r\n                    return <p className=\"text-danger\">Error passing data</p>;\r\n                  }\r\n                })}\r\n              </div>\r\n            );\r\n          } else if (rowData.rowType == \"timeStampKey\") {\r\n            return (\r\n              <p style={rowData.style ? rowData.style : {}}>\r\n                {new Date(cardData[rowData.value]).toLocaleDateString(\r\n                  [],\r\n                  dateFormatOptions\r\n                )}\r\n              </p>\r\n            );\r\n          } else {\r\n            return <p className=\"text-danger\">Error passing data</p>;\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/general_neardigitalcollective_card", "__row_index": 5}