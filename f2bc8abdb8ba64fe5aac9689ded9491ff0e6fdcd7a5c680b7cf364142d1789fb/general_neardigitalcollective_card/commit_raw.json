{"tx_hash": "9FcwZyhojza3cY96yRBbS3JFEs5GuWRAU9MGQgHmsZja", "action_id_social": "B2DKK9PV5e5Lg9ueu6W6s4fSw5bnbfPQN5qmTxsiaUSz-0-widget", "block_id": 93338456, "block_timestamp": "2023-06-03T05:39:05.299Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "general_neardigitalcollective_card", "source_code": "const cardData = props.cardData ?? {\r\n  accountId: \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\",\r\n  blockHeight: 83806538,\r\n  value: {\r\n    isDraft: false,\r\n    title: \"Last test?\",\r\n    description: \"Is this the last test?\",\r\n    tgLink: \"\",\r\n    startTimestamp: 1674701520000,\r\n    endTimestamp: 1674787920000,\r\n    questions: [\r\n      {\r\n        question: \"What do you think?\",\r\n        questionType: \"0\",\r\n        choicesOptions: [\"Yes\", \"No\"],\r\n      },\r\n      {\r\n        question: \"Why?\",\r\n        questionType: \"1\",\r\n        choicesOptions: [\r\n          \"Because it can't be other way\",\r\n          \"Because i'm sure\",\r\n          \"Why not?\",\r\n        ],\r\n      },\r\n      {\r\n        question: \"Multiselect?\",\r\n        questionType: \"2\",\r\n        choicesOptions: [\"1\", \"2\", \"3\"],\r\n      },\r\n      {\r\n        question: \"Give me a feedback\",\r\n        questionType: \"3\",\r\n        choicesOptions: [],\r\n      },\r\n    ],\r\n    timestamp: 1674701636048,\r\n  },\r\n};\r\n\r\nconst formatCard = props.formatCard ?? {\r\n  row1: {\r\n    rowType: \"markdown\",\r\n    contentData: \"data\",\r\n  },\r\n  row2: {\r\n    rowType: \"text\",\r\n    contentData: \"data2\",\r\n  },\r\n  row3: {\r\n    rowType: \"flex\",\r\n    flexClassName: \"justify-content-between\",\r\n    contentData: [\r\n      {\r\n        type: \"flex\",\r\n        flexClassName: \"flex-column justify-content-start align-items-start\",\r\n        content: [\r\n          { type: \"text\", value: \"Created by\" },\r\n          { type: \"key\", value: \"accountId\" },\r\n        ],\r\n      },\r\n      {\r\n        type: \"flex\",\r\n        flexClassName: \"flex-column justify-content-start align-items-start\",\r\n        content: [\r\n          { type: \"text\", value: \"Started\" },\r\n          { type: \"timeStampKey\", value: \"startTimestamp\" },\r\n        ],\r\n      },\r\n      {\r\n        type: \"flex\",\r\n        flexClassName: \"flex-column justify-content-start align-items-start\",\r\n        content: [\r\n          { type: \"text\", value: \"Ended\" },\r\n          { type: \"timeStampKey\", value: \"endTimestamp\" },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\nreturn (\r\n  <div>\r\n    {Object.keys(formatCard).map((rowKey) => {\r\n      let rowData = formatCard[rowKey];\r\n      if (rowData.rowType == \"markdown\") {\r\n        return <Markdown text={rowData.contentData} />;\r\n      } else if (rowData.rowType == \"text\") {\r\n        return <p>{rowData.contentData}</p>;\r\n      } else if (rowData.rowType == \"timeStampKey\") {\r\n        return (\r\n          <p>\r\n            {new Date(cardData.value[secondItem.value]).toLocaleDateString(\r\n              [],\r\n              dateFormatOptions\r\n            )}\r\n          </p>\r\n        );\r\n      } else if (rowData.rowType == \"flex\") {\r\n        return (\r\n          <div className={rowData.flexClassName}>\r\n            {rowData.contentData.map((item) => {\r\n              if (item.type == \"markdown\") {\r\n                return <Markdown text={item.content} />;\r\n              } else if (item.type == \"text\") {\r\n                return <p>{item.content}</p>;\r\n              } else if (item.type == \"flex\") {\r\n                return (\r\n                  <div className={item.flexClassName}>\r\n                    {item.content.map((secondItem) => {\r\n                      if (secondItem.type == \"markdown\") {\r\n                        return <Markdown text={secondItem.content} />;\r\n                      } else if (secondItem.type == \"text\") {\r\n                        return <p>{secondItem.content}</p>;\r\n                      } else if (secondItem.type == \"timeStampKey\") {\r\n                        console.log(\"cardData: \", cardData);\r\n                        console.log(\"item: \", item);\r\n                        console.log(\"secondItem: \", secondItem);\r\n                        return (\r\n                          <p>\r\n                            {new Date(\r\n                              cardData.value[secondItem.value]\r\n                            ).toLocaleDateString([], dateFormatOptions)}\r\n                          </p>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <p className=\"text-danger\">Error passing data</p>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </div>\r\n                );\r\n              } else {\r\n                return <p className=\"text-danger\">Error passing data</p>;\r\n              }\r\n            })}\r\n          </div>\r\n        );\r\n      } else if (rowData.rowType == \"timeStampKey\") {\r\n        return (\r\n          <p>\r\n            {new Date(cardData[rowData.value]).toLocaleDateString(\r\n              [],\r\n              dateFormatOptions\r\n            )}\r\n          </p>\r\n        );\r\n      } else {\r\n        return <p className=\"text-danger\">Error passing data</p>;\r\n      }\r\n    })}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/general_neardigitalcollective_card", "__row_index": 1}