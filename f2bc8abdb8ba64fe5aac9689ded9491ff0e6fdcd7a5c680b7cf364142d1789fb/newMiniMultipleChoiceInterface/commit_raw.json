{"tx_hash": "E8RpMXrkYVG8dG3DTrWyC5FdQv1X7uGymfRqY8dnK74", "action_id_social": "2g814SZgrduykwpfZGFjt1ehGLip1eNs9XrAkR3XXfBs-0-widget", "block_id": 80572999, "block_timestamp": "2022-12-13 17:41:57.907", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newMiniMultipleChoiceInterface", "source_code": "if (!props.blockHeight) {\n  return \"Property blockHeight not set\";\n}\n\nconst questionBlockHeight = Number(props.blockHeight);\nconst questions = Social.index(\"poll_question\", \"question-v3.0.1\");\nconst questionParams = questions.find(\n  (q) => q.blockHeight == questionBlockHeight\n);\nState.init({ vote: \"\", showErrorsInForm: false });\n\nconst answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\nconst answersToThisQuestion = answers.filter(\n  (a) => a.value.questionBlockHeight == questionBlockHeight\n);\nlet usersWithAnswersToThisQuestion = [];\nconst validAnswersToThisQuestion = answersToThisQuestion.filter((a) => {\n  const didUserAlreadyAnswered = usersWithAnswersToThisQuestion.includes(\n    a.accountId\n  );\n  if (!didUserAlreadyAnswered) {\n    usersWithAnswersToThisQuestion.push(a.accountId);\n  }\n  return !didUserAlreadyAnswered;\n});\n\nconsole.log(1, validAnswersToThisQuestion);\n\nfunction calculatePercentage(votesToThisOption) {\n  if (validAnswersToThisQuestion.length == 0) return 0;\n  return (votesToThisOption / validAnswersToThisQuestion.length) * 100;\n}\n\nconst countVotes = answersToThisQuestion.reduce((acc, curr) => {\n  const ans = curr.value.answer;\n  const isValidAnswer =\n    !isNaN(ans) &&\n    Number(ans) >= 0 &&\n    Number(ans) < questionParams.value.choicesOptions.length;\n  if (isValidAnswer) {\n    acc[Number(ans)] += 1;\n    return acc;\n  } else {\n    return acc;\n  }\n}, new Array(questionParams.value.choicesOptions.length).fill(0));\n\nconsole.log(1, countVotes);\n\nfunction displayableOptionName(option) {\n  if (option.length > 12) {\n    return option.slice(0, 12) + \"...\";\n  }\n  return option;\n}\n\nconst renderOption = (option, index) => {\n  return (\n    <div className=\"d-flex\">\n      <div style={{ color: \"#000\", width: \"90%\" }}>\n        {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\n        <div\n          style={{\n            margin: \"0.3rem 0px\",\n            content: \"\",\n            display: \"table\",\n            clear: \"both\",\n            padding: \"0.01em 16px\",\n            display: \"inline-block\",\n            width: `${calculatePercentage(countVotes[index])}%`,\n            textAlign: \"center\",\n            overflow: \"visible\",\n            whiteSpace: \"nowrap\",\n            textAlign: \"left\",\n            backgroundColor: \"lightgray\",\n          }}\n        >\n          <span style={{ overflow: \"visible\", fontWeight: \"500\" }}>\n            {displayableOptionName(option)}\n            <span\n              className=\"text-secondary\"\n              style={{ marginLeft: \"1rem\", fontWeight: \"400\" }}\n            >\n              ({countVotes[index]} votes)\n            </span>\n          </span>\n        </div>\n      </div>\n      <span\n        style={{\n          minWidth: \"max-content\",\n          marginLeft: \"0.3rem\",\n          fontWeight: \"500\",\n        }}\n      >\n        {calculatePercentage(countVotes[index])}%\n      </span>\n    </div>\n  );\n};\n\nreturn (\n  <div className=\"m-2\">\n    {questionParams.value.choicesOptions.map((option, index) => {\n      return renderOption(option, index);\n    })}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newMiniMultipleChoiceInterface"}