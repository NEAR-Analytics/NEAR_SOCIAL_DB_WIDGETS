{"tx_hash": "9EZxT6RcEpkMnM7m5XEwpS1gjrHWBzVZAonjb37XzXfE", "action_id_social": "9C3NvCcVHRnfPq7LpvZH4JjjEDseZ93wVRv26od5KLte-0-widget", "block_id": 83789538, "block_timestamp": "2023-01-25 21:33:37.672", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newMiniMultipleChoiceInterface", "source_code": "if (!props.blockHeight) {\r\n  return \"Property blockHeight not set\";\r\n}\r\n\r\nState.init({ vote: \"\", showErrorsInForm: false, questions: {}, answers: {} });\r\n\r\n// Utility function. Consider moving it to an utility widget\r\nfunction getBlockTimestamp(blockHeight) {\r\n  // It is stored in nanoseconds which is 1e-6 miliseconds\r\n  return Near.block(blockHeight).header.timestamp / 1e6;\r\n}\r\n\r\n// Discards answers that were posted after question's end date. Consider moving to utility widget\r\nfunction getTimeRelatedValidAnswers(answers) {\r\n  let low = 0;\r\n  let high = answers.length - 1;\r\n  const questionEndTimestamp = questionParams.value.endTimestamp;\r\n  let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\r\n  if (endBlockTimestamp < questionEndTimestamp) return answers;\r\n  // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\r\n  let tries = 50;\r\n  while (high - low > 1 && tries > 0) {\r\n    tries--;\r\n    let curr = Math.floor((high - low) / 2) + low;\r\n    let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\r\n    if (currBlockTimestamp < questionEndTimestamp) {\r\n      low = curr;\r\n    } else {\r\n      high = curr;\r\n    }\r\n  }\r\n  // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\r\n  return answers.slice(0, high);\r\n}\r\n\r\nconst questionBlockHeight = Number(props.blockHeight);\r\nconst questions = Social.index(\"poll_question\", \"question-v3.1.1\");\r\n\r\nif (JSON.stringify(questions) != JSON.stringify(state.questions)) {\r\n  State.update({ questions: questions });\r\n}\r\n\r\nif (!questions) {\r\n  return \"Loading\";\r\n}\r\nconst questionParams = questions.find(\r\n  (q) => q.blockHeight == questionBlockHeight\r\n);\r\n\r\nconst answers = Social.index(\"poll_question\", \"answer-v3.1.1\");\r\n\r\nif (JSON.stringify(questions) != JSON.stringify(state.questions)) {\r\n  State.update({ questions: questions });\r\n}\r\n\r\nif (!answers) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst answersToThisQuestion = answers.filter(\r\n  (a) => a.value.questionBlockHeight == questionBlockHeight\r\n);\r\n\r\nlet usersWithAnswersToThisQuestion = [];\r\nlet validAnswersToThisQuestion = answersToThisQuestion.filter((a) => {\r\n  const didUserAlreadyAnswered = usersWithAnswersToThisQuestion.includes(\r\n    a.accountId\r\n  );\r\n  if (!didUserAlreadyAnswered) {\r\n    usersWithAnswersToThisQuestion.push(a.accountId);\r\n  }\r\n  return !didUserAlreadyAnswered;\r\n});\r\n\r\nvalidAnswersToThisQuestion = getTimeRelatedValidAnswers(\r\n  validAnswersToThisQuestion\r\n);\r\n\r\nfunction calculatePercentage(votesToThisOption) {\r\n  if (validAnswersToThisQuestion.length == 0) return 100;\r\n  return (\r\n    (votesToThisOption / validAnswersToThisQuestion.length) *\r\n    100\r\n  ).toFixed(2);\r\n}\r\n\r\nconst currAccId = context.accountId ?? \"\";\r\nconst userHasVoted = validAnswersToThisQuestion.find(\r\n  (a) => a.accountId == currAccId\r\n);\r\nconst isQuestionOpen =\r\n  questionParams.value.startTimestamp < Date.now() &&\r\n  Date.now() < questionParams.value.endTimestamp;\r\nconst displayAnswers = userHasVoted || !isQuestionOpen;\r\n\r\nlet countVotes = new Array(questionParams.value.choicesOptions.length).fill(0);\r\ncountVotes = !displayAnswers\r\n  ? countVotes\r\n  : validAnswersToThisQuestion.reduce((acc, curr) => {\r\n      const ans = curr.value.answer;\r\n      const isValidAnswer =\r\n        !isNaN(ans) &&\r\n        Number(ans) >= 0 &&\r\n        Number(ans) < questionParams.value.choicesOptions.length;\r\n      if (isValidAnswer) {\r\n        acc[Number(ans)] += 1;\r\n        return acc;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, countVotes);\r\n\r\nfunction displayableOptionName(option) {\r\n  if (option.length > 20) {\r\n    return option.slice(0, 20) + \"...\";\r\n  }\r\n  return option;\r\n}\r\n\r\nconst renderOption = (option, index) => {\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <div style={{ color: \"#000\", width: \"90%\" }}>\r\n        {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\r\n        <div\r\n          style={{\r\n            margin: \"0.3rem 0px\",\r\n            content: \"\",\r\n            display: \"table\",\r\n            clear: \"both\",\r\n            padding: \"0.01em 16px\",\r\n            display: \"inline-block\",\r\n            width: `${\r\n              displayAnswers ? calculatePercentage(countVotes[index]) : 100\r\n            }%`,\r\n            textAlign: \"center\",\r\n            overflow: \"visible\",\r\n            whiteSpace: \"nowrap\",\r\n            textAlign: \"left\",\r\n            backgroundColor: \"lightgray\",\r\n          }}\r\n        >\r\n          <span style={{ overflow: \"visible\", fontWeight: \"500\" }}>\r\n            {displayableOptionName(option)}\r\n            <span\r\n              className=\"text-secondary\"\r\n              style={{ marginLeft: \"1rem\", fontWeight: \"400\" }}\r\n            >\r\n              {displayAnswers && `(${countVotes[index]} votes)`}\r\n            </span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <span\r\n        style={{\r\n          minWidth: \"max-content\",\r\n          marginLeft: \"0.3rem\",\r\n          fontWeight: \"500\",\r\n        }}\r\n      >\r\n        {displayAnswers && `${calculatePercentage(countVotes[index])}%`}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div className=\"m-2\">\r\n    {questionParams.value.choicesOptions.map((option, index) => {\r\n      return renderOption(option, index);\r\n    })}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newMiniMultipleChoiceInterface"}