{"tx_hash": "4EuR1VEW7X7iMrhHuQu8HE8eRkzRMsLVJA5Vas7nDuif", "action_id_social": "BLrDU5z53BvGpipg2Ao6k1x15q296TvfbztGGyStJJVd-0-widget", "block_id": 86358586, "block_timestamp": "2023-03-02 03:01:16.673", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Test", "source_code": "// Returns the account Id from the logged person\r\nconst accountId = context.accountId;\r\n\r\n// Returns JSON with profile data from the accountId\r\nconst profile = Social.getr(`${accountId}/profile`);\r\n\r\n// Returns the widgets contents (not committed data) from the user in accountId\r\nconst widgets = Social.get(`${accountId}/widget/*`);\r\n\r\n// Returns the Test widget contents (not committed data) from the user in accountId\r\nconst testWidget = Social.getr(`${accountId}/widget/Test`);\r\n\r\n// Returns a JSON object with only one key that is accountId\r\n// After that, contains many keys, containing an array of blockHeights. Examples for silkking.near are \"widgets\", \"post\", \"profile\", \"test\"\r\nconst allBlockHeightsObject = Social.keys(\r\n  `${accountId}/widget/showQuestionsHandler`,\r\n  \"final\",\r\n  {\r\n    return_type: \"History\",\r\n  }\r\n);\r\n\r\nlet allBlockHeightsArray =\r\n  allBlockHeightsObject\r\n    .f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb.widget\r\n    .showQuestionsHandler;\r\nlet blockHeightIWanted = allBlockHeightsArray[allBlockHeightsArray.length - 1];\r\n\r\n// Returns a JSON object with only one key that is accountId\r\n// That key will only contain one key names test and the blockHeights associated\r\nconst testBlockHeights = Social.keys(`${accountId}/post/test`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\n\r\n//Returns Object with user account containing only the key post. At the same time post contains the key test.\r\n//test value is boolean\r\nconst existentObjectsFromAccountId = Social.keys(`${accountId}/post/test`);\r\n\r\n//Returns the text you have posted with the commitButton. Documentation says\r\n//that it will return the lastest blockheigt of that key\r\nconst valueFromGivenKeys = Social.get(`${accountId}/post/test`);\r\n\r\nconst blockHeight = testBlockHeights[accountId].post.test;\r\n\r\n// Brings the value from key accountId, then post and finally test that is located in the blockHeight provided\r\nconst valueFromGivenKeysInGivenBlockHeight = Social.get(\r\n  `${accountId}/widget/showQuestionsHandler`,\r\n  blockHeightIWanted\r\n);\r\n\r\nconsole.log(valueFromGivenKeysInGivenBlockHeight);\r\n\r\n//You can access to all post/test blockheights of all users\r\nconst blockHeightsInGivenKeys = Social.keys(`*/post/test`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\n\r\nlet mapped = Object.keys(blockHeightsInGivenKeys).map((key) => {\r\n  return {\r\n    accountId: key,\r\n    blockHeightArray: blockHeightsInGivenKeys[key].post.test[0],\r\n  };\r\n});\r\nmapped.reduce(\r\n  (acc, curr) => {\r\n    let answer = Social.get(\r\n      `${curr.accountId}/post/test`,\r\n      curr.blockHeightArray\r\n    );\r\n    return answer == 1 ? [acc[0] + 1, acc[1]] : [acc[0], acc[1] + 1];\r\n  },\r\n  [0, 0]\r\n);\r\n\r\nState.init({\r\n  a: \"palabra\",\r\n});\r\n\r\nconst updateState = (string) => {\r\n  State.update({ a: string });\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <p>{state.a}</p>\r\n    <Widget\r\n      src={`f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Test2`}\r\n      props={{ fx: updateState }}\r\n    />\r\n    <div className=\"d-lg-none\">Dani es jur\u00edo</div>\r\n    <div className=\"d-none d-lg-block\">Dani usa lentes</div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Test"}