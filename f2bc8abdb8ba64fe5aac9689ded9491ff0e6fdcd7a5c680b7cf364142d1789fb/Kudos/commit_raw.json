{"tx_hash": "GKMayvmuQRGrfUAEJmQyWc4eLkorsHPPjxkQyskjt4Ln", "action_id_social": "9DCdza7hYotep7rFjdUiTTGg2qpGwCzBFiGqT2kMhFCD-0-widget", "block_id": 88112513, "block_timestamp": "2023-03-25 20:47:40.104", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Kudos", "source_code": "State.init({\n  hoveringElement: \"\",\n  input: \"\",\n  url: \"\",\n  onChange: ({ content }) => {\n    State.update({ content });\n  },\n});\n\nconst updateGeneralState = props.updateGeneralState;\n\nconst thisWidgetStyledComponentsStyles = props.allStyledComponentsStyles;\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.kudos;\nconst thisWidgetClassNames = props.allWidgetsClassNames.kudos;\n\nconst widgetOwner = props.widgetOwner;\n\nconst widgetName = \"Kudos\";\nconst widgetPath = `webuidl.near/widget/${widgetName}`;\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\n\nconst urlPrefix = \"https://\";\nconst accountId = props.accountId ?? \"*\";\n\nconst data = Social.index(\"kudo\", \"answer\");\nif (!data) {\n  return \"Loading answers\";\n}\nconst upvotes = Social.index(\"kudo\", \"upvote\");\nif (!upvotes) {\n  return \"Loading upvotes\";\n}\n\nconst commentAnswers = Social.index(\"kudo\", \"commentAnswers\");\nif (!commentAnswers) {\n  return \"Loading commentAnswers\";\n}\n\nconst blackList = [\"webuidl.near\"];\nconst whiteListData = data.filter((d) => !blackList.includes(d.accountId));\nconst whiteListComments = commentAnswers.filter(\n  (d) => !blackList.includes(d.accountId)\n);\nlet sortedData = whiteListData.sort(\n  (d1, d2) => d2.blockHeight - d1.blockHeight\n);\n\nsortedData.forEach((_, i) => {\n  sortedData[i].value.comments = [];\n  sortedData[i].value.upvotes = 0;\n});\n\nlet upvotesMap = {};\nfor (let i = 0; i < upvotes.length; i++) {\n  const vote = upvotes[i];\n  const upvoteBlockHeight = vote.value.blockHeight;\n  if (!upvotesMap[upvoteBlockHeight]) {\n    upvotesMap[upvoteBlockHeight] = 0;\n  }\n  upvotesMap[upvoteBlockHeight] += 1;\n}\n\nwhiteListComments.forEach((c) => {\n  const dataIndex = sortedData.findIndex(\n    (d) => d.blockHeight == c.value.blockHeight\n  );\n  if (dataIndex === -1) return;\n  sortedData[dataIndex].value.comments.push(c);\n});\n\nupvotes.forEach((upvote) => {\n  const dataIndex = sortedData.findIndex(\n    (d) => d.blockHeight == upvote.value.blockHeight\n  );\n  if (dataIndex === -1) return;\n  sortedData[dataIndex].value.upvotes += 1;\n});\n\nconst finalData = sortedData;\n\n/* BEGIN Common.componse  */\nconst composeData = () => {\n  const data = {\n    post: {\n      main: JSON.stringify(state.content),\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const item = {\n    type: \"social\",\n    path: `${context.accountId}/post/main`,\n  };\n\n  const notifications = state.extractMentionNotifications(\n    state.content.text,\n    item\n  );\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  const hashtags = state.extractHashtags(state.content.text);\n\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n\n  return data;\n};\n\n/* END Common.componse  */\n\n/* BEGIN CommentButton  */\n\n/* END CommentButton  */\n\n/* START CommentBox */\nconst RenderAllCommentAnswerBox = (d) => {\n  return d.value.comments.map((c) => {\n    return (\n      <div style={thisWidgetInlineStyles.allCommentAnswerBox.container}>\n        <Widget\n          src=\"mob.near/widget/ProfileImage\"\n          props={{\n            accountId: c.accountId,\n            className: \"d-inline-block\",\n            style:\n              thisWidgetInlineStyles.allCommentAnswerBox.profileImageStyles,\n          }}\n        />\n        <a href={`#/mob.near/widget/ProfilePage?accountId=${c.accountId}`}>\n          {c.accountId}\n        </a>\n        I BuiDL... <b>{c.value.commentAnswer}&nbsp;&nbsp;&nbsp;</b>\n        <Widget\n          src=\"mob.near/widget/FollowButton\"\n          props={{ accountId: c.accountId }}\n        />\n      </div>\n    );\n  });\n};\n\n/* END CommentBox  */\n\nconst RenderKudoBox = (d, index) => {\n  return (\n    <Widget\n      src={`${widgetOwner}/widget/kudoBox`}\n      props={{\n        allStyledComponentsStyles: props.allStyledComponentsStyles,\n        widgetOwner,\n        d,\n        index,\n        upvotes,\n        updateGeneralState,\n        allWidgetsInlineStyles: props.allWidgetsInlineStyles,\n        allWidgetsClassNames: props.allWidgetsClassNames,\n      }}\n    />\n  );\n};\n\nconsole.log(\"sortedData: \", sortedData);\n\nreturn (\n  <div className={thisWidgetClassNames.generalContainer}>\n    <h2 style={thisWidgetInlineStyles.selectedTab}>All Kudos</h2>\n\n    <p>An accolade, a Thank You, a Job Well Done. Give em a Kudo!\ud83d\udc4f </p>\n    <Widget\n      src={`${widgetOwner}/widget/Common.Compose`}\n      props={{\n        id: \"main\",\n        textAreaOnly: true,\n        onChange: state.onChange,\n        onHelper: ({ extractMentionNotifications, extractHashtags }) => {\n          State.update({ extractMentionNotifications, extractHashtags });\n        },\n      }}\n    />\n    {state.content && (\n      <div>\n        <Widget\n          src={`${widgetOwner}/widget/MainPage.Post`}\n          props={{\n            widgetOwner,\n            accountId: context.accountId,\n            content: state.content,\n            blockHeight: \"now\",\n            onChange: state.onChange,\n          }}\n        />\n      </div>\n    )}\n    <div className={thisWidgetClassNames.urlTextareaContainer}>\n      <p>Url:</p>\n      <textarea\n        style={thisWidgetInlineStyles.urlTextarea}\n        rows=\"1\"\n        value={state.url}\n        onChange={(e) => {\n          State.update({ url: e.target.value });\n        }}\n      />\n    </div>\n    <CommitButton\n      style={\n        state.hoveringElement == \"commitButton\"\n          ? props.allWidgetsInlineStyles.hoveringButtonStyles\n          : props.allWidgetsInlineStyles.standardButtonStyles\n      }\n      data={{\n        index: {\n          kudo: JSON.stringify(\n            {\n              key: \"answer\",\n              value: {\n                answer: state.content.text,\n                url: state.url,\n              },\n            },\n            undefined,\n            0\n          ),\n        },\n      }}\n      onMouseEnter={() => {\n        State.update({ hoveringElement: \"commitButton\" });\n      }}\n      onMouseLeave={() => {\n        State.update({ hoveringElement: \"\" });\n      }}\n      onCommit={() => {\n        State.update({\n          reloadData: true,\n        });\n      }}\n    >\n      Kudos!\n    </CommitButton>\n\n    <div className={thisWidgetClassNames.allCardsContainer}>\n      {sortedData\n        ? sortedData.map((d, index) => {\n            RenderKudoBox(d, index);\n          })\n        : \"Loading...\"}\n    </div>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Kudos", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.great-job": NaN, "metadata.tags.kudo": NaN, "metadata.tags.lets-go": NaN, "metadata.tags.well-done": NaN, "metadata": NaN}