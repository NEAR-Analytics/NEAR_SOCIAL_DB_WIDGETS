{"tx_hash": "ANP6i3nQZc9recqjcJ3NC66Legy2Yy8xYRaUdcHFxqEj", "action_id_social": "8gyNr1zY6X3j8mSkqGKETTBuUxCfAzXtuzFh2FWb4DGT-0-widget", "block_id": 87961196, "block_timestamp": "2023-03-23 19:00:56.243", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Kudos", "source_code": "State.init({\r\n  input: \"\",\r\n  url: \"\",\r\n  onChange: ({ content }) => {\r\n    State.update({ content });\r\n  },\r\n});\r\n\r\nconst updateGeneralState = props.updateGeneralState;\r\n\r\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.kudos;\r\nconst thisWidgetClassNames = props.allWidgetsClassNames.kudos;\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\nconst widgetName = \"Kudos\";\r\nconst widgetPath = `webuidl.near/widget/${widgetName}`;\r\nconst metadata = props.metadata ?? Social.getr(`${widgetPath}/metadata`);\r\n\r\nconst imgWH = {\r\n  width: \"25px\",\r\n  height: \"25px\",\r\n};\r\n\r\nconst urlPrefix = \"https://\";\r\nconst accountId = props.accountId ?? \"*\";\r\n\r\nconst data = Social.index(\"kudo\", \"answer\");\r\nif (!data) {\r\n  return \"Loading answers\";\r\n}\r\nconst upvotes = Social.index(\"kudo\", \"upvote\");\r\nif (!upvotes) {\r\n  return \"Loading upvotes\";\r\n}\r\n\r\nconst commentAnswers = Social.index(\"kudo\", \"commentAnswers\");\r\nif (!commentAnswers) {\r\n  return \"Loading commentAnswers\";\r\n}\r\n\r\nconst blackList = [\"webuidl.near\"];\r\nconst whiteListData = data.filter((d) => !blackList.includes(d.accountId));\r\nconst whiteListComments = commentAnswers.filter(\r\n  (d) => !blackList.includes(d.accountId)\r\n);\r\nlet sortedData = whiteListData.sort(\r\n  (d1, d2) => d2.blockHeight - d1.blockHeight\r\n);\r\n\r\nsortedData.forEach((_, i) => {\r\n  sortedData[i].value.comments = [];\r\n  sortedData[i].value.upvotes = 0;\r\n});\r\n\r\nlet upvotesMap = {};\r\nfor (let i = 0; i < upvotes.length; i++) {\r\n  const vote = upvotes[i];\r\n  const upvoteBlockHeight = vote.value.blockHeight;\r\n  if (!upvotesMap[upvoteBlockHeight]) {\r\n    upvotesMap[upvoteBlockHeight] = 0;\r\n  }\r\n  upvotesMap[upvoteBlockHeight] += 1;\r\n}\r\n\r\nwhiteListComments.forEach((c) => {\r\n  const dataIndex = sortedData.findIndex(\r\n    (d) => d.blockHeight == c.value.blockHeight\r\n  );\r\n  if (dataIndex === -1) return;\r\n  sortedData[dataIndex].value.comments.push(c);\r\n});\r\n\r\nupvotes.forEach((upvote) => {\r\n  const dataIndex = sortedData.findIndex(\r\n    (d) => d.blockHeight == upvote.value.blockHeight\r\n  );\r\n  if (dataIndex === -1) return;\r\n  sortedData[dataIndex].value.upvotes += 1;\r\n});\r\n\r\nconst finalData = sortedData;\r\n\r\n/* BEGIN Common.componse  */\r\nconst composeData = () => {\r\n  const data = {\r\n    post: {\r\n      main: JSON.stringify(state.content),\r\n    },\r\n    index: {\r\n      post: JSON.stringify({\r\n        key: \"main\",\r\n        value: {\r\n          type: \"md\",\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  const item = {\r\n    type: \"social\",\r\n    path: `${context.accountId}/post/main`,\r\n  };\r\n\r\n  const notifications = state.extractMentionNotifications(\r\n    state.content.text,\r\n    item\r\n  );\r\n\r\n  if (notifications.length) {\r\n    data.index.notify = JSON.stringify(\r\n      notifications.length > 1 ? notifications : notifications[0]\r\n    );\r\n  }\r\n\r\n  const hashtags = state.extractHashtags(state.content.text);\r\n\r\n  if (hashtags.length) {\r\n    data.index.hashtag = JSON.stringify(\r\n      hashtags.map((hashtag) => ({\r\n        key: hashtag,\r\n        value: item,\r\n      }))\r\n    );\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n/* END Common.componse  */\r\n\r\n/* BEGIN CommentButton  */\r\n\r\n/* END CommentButton  */\r\n\r\n/* START CommentBox */\r\nconst RenderAllCommentAnswerBox = (d) => {\r\n  return d.value.comments.map((c) => {\r\n    return (\r\n      <div style={thisWidgetInlineStyles.allCommentAnswerBox.container}>\r\n        <Widget\r\n          src=\"mob.near/widget/ProfileImage\"\r\n          props={{\r\n            accountId: c.accountId,\r\n            className: \"d-inline-block\",\r\n            style:\r\n              thisWidgetInlineStyles.allCommentAnswerBox.profileImageStyles,\r\n          }}\r\n        />\r\n        <a href={`#/mob.near/widget/ProfilePage?accountId=${c.accountId}`}>\r\n          {c.accountId}\r\n        </a>\r\n        I BuiDL... <b>{c.value.commentAnswer}&nbsp;&nbsp;&nbsp;</b>\r\n        <Widget\r\n          src=\"mob.near/widget/FollowButton\"\r\n          props={{ accountId: c.accountId }}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\n/* END CommentBox  */\r\n\r\nconst RenderKudoBox = (d) => {\r\n  return (\r\n    <Widget\r\n      src={`${widgetOwner}/widget/kudoBox`}\r\n      props={{\r\n        d,\r\n        upvotes,\r\n        updateGeneralState,\r\n        thisWidgetInlineStyles,\r\n        thisWidgetClassNames,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div className={thisWidgetClassNames.generalContainer}>\r\n    <h2 style={thisWidgetInlineStyles.selectedTab}>All Kudos</h2>\r\n\r\n    <p>An accolade, a Thank You, a Job Well Done. Give em a Kudo!\ud83d\udc4f </p>\r\n    <Widget\r\n      src={`${widgetOwner}/widget/Common.Compose`}\r\n      props={{\r\n        id: \"main\",\r\n        textAreaOnly: true,\r\n        onChange: state.onChange,\r\n        onHelper: ({ extractMentionNotifications, extractHashtags }) => {\r\n          State.update({ extractMentionNotifications, extractHashtags });\r\n        },\r\n      }}\r\n    />\r\n    {state.content && (\r\n      <div>\r\n        <Widget\r\n          src=\"mob.near/widget/MainPage.Post\"\r\n          props={{\r\n            accountId: context.accountId,\r\n            content: state.content,\r\n            blockHeight: \"now\",\r\n            onChange: state.onChange,\r\n          }}\r\n        />\r\n      </div>\r\n    )}\r\n    <div className={thisWidgetClassNames.urlTextareaContainer}>\r\n      <p>Url:</p>\r\n      <textarea\r\n        style={thisWidgetInlineStyles.urlTextarea}\r\n        rows=\"1\"\r\n        value={state.url}\r\n        onChange={(e) => {\r\n          State.update({ url: e.target.value });\r\n        }}\r\n      />\r\n    </div>\r\n    <CommitButton\r\n      style={thisWidgetInlineStyles.commitButton}\r\n      data={{\r\n        index: {\r\n          kudo: JSON.stringify(\r\n            {\r\n              key: \"answer\",\r\n              value: {\r\n                answer: state.content.text,\r\n                url: state.url,\r\n              },\r\n            },\r\n            undefined,\r\n            0\r\n          ),\r\n        },\r\n      }}\r\n      onMouseEnter={() => {\r\n        updateGeneralState({ hoveringElement: \"commitButton\" });\r\n      }}\r\n      onMouseLeave={() => {\r\n        updateGeneralState({ hoveringElement: \"\" });\r\n      }}\r\n      onCommit={() => {\r\n        State.update({\r\n          reloadData: true,\r\n        });\r\n      }}\r\n    >\r\n      Kudos!\r\n    </CommitButton>\r\n    <div className={allWidgetsClassNames.allCardsContainer}>\r\n      {sortedData ? sortedData.map((d) => RenderKudoBox(d)) : \"Loading...\"}\r\n    </div>\r\n  </div>\r\n);\r\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Kudos", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.app": NaN, "metadata.tags.great-job": NaN, "metadata.tags.kudo": NaN, "metadata.tags.lets-go": NaN, "metadata.tags.well-done": NaN, "metadata": NaN}