{"tx_hash": "6kzRTs3vTKXr6ga83JYjEjgdC25hfbMoagMFEFUUhbLb", "action_id_social": "CPEbw3chc4R5xqXTtsUtMfQfmirxT5jD9viGxzCjzb7V-0-widget", "block_id": 95330929, "block_timestamp": "2023-06-29T21:22:14.237Z", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "SayALot_Reactions", "source_code": "// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\nconst initialEmoji = \"\ud83e\udd0d Like\";\n// It is important that 'Heart' Positive emoji is first\nconst emojiArray = [\n  \"\u2764\ufe0f Positive\",\n  \"\ud83d\ude4f Thank you\",\n  \"\ud83d\udcaf Definitely\",\n  \"\ud83d\udc40 Thinking\",\n  \"\ud83d\udd25 Awesome\",\n  \"\ud83d\udc4d Like\",\n  \"\ud83d\ude4c Celebrate\",\n  \"\ud83d\udc4f Applause\",\n  \"\u26a1 Lightning\",\n  \"\u22c8 Bowtie\",\n];\nconst item = props.item;\n\nconst accountThatIsLoggedIn = context.accountId;\n\nif (!item) {\n  return \"\";\n}\n\nState.init({\n  emoji: undefined,\n  likesStatistics: [],\n  show: false,\n  loading: false,\n});\n\n// ========= UNFILTERED LIKES and SOCIAL.INDEX =========\nconst unfilteredLikes = Social.index(\"like\", item, {\n  order: \"desc\",\n});\n\n// ========= ARRAY LAST LIKE FOR EACH USER =========\n// arrayLastLikeForEachUser - array of objects {accountId, blockHeight, value: {type: \"\ud83d\ude01 LOL\"}}\nconst uniqueAccounts = [];\nconst arrayLastLikeForEachUser =\n  unfilteredLikes &&\n  unfilteredLikes.filter((obj) => {\n    if (!uniqueAccounts.includes(obj.accountId)) {\n      uniqueAccounts.push(obj.accountId);\n      return true;\n    }\n    return false;\n  });\n\n// ========= GET USER EMOJI =========\nconst userEmoji = arrayLastLikeForEachUser.find((obj) => {\n  return obj.accountId === accountThatIsLoggedIn;\n});\n\n// ========= GET LIKES STATISTICS =========\nconst getLikeStats = (acc, likeObj) => {\n  if (likeObj.value.type === initialEmoji) {\n    return acc;\n  }\n  if (!acc.hasOwnProperty(likeObj.value.type)) {\n    acc[likeObj.value.type] = {\n      quantity: 0,\n      emoji: likeObj.value.type.slice(0, 2),\n      text: likeObj.value.type.slice(2),\n      accounts: [],\n    };\n    // acc[likeObj.value.type].quantity = 0;\n    // acc[likeObj.value.type].emoji = likeObj.value.type.slice(0, 2);\n    // acc[likeObj.value.type].accounts = [];\n  }\n  acc[likeObj.value.type].quantity += 1;\n  acc[likeObj.value.type].accounts = [\n    likeObj.accountId,\n    ...acc[likeObj.value.type].accounts,\n  ];\n\n  return acc;\n};\nconst countLikesStats = (arr) => Object.values(arr.reduce(getLikeStats, {}));\nlet likesStatistics =\n  arrayLastLikeForEachUser && countLikesStats(arrayLastLikeForEachUser);\nif (state.likesStatistics.length === 0 || state.likesStatistics === null) {\n  State.update({\n    likesStatistics,\n  });\n}\n//likesStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\n\n// ========= CHECK DOES USER VOTED =========\nconst doesUserVoted = () => {\n  const resObject = arrayLastLikeForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  return resObject;\n};\n\n// ========= UPDATE EMOJI STATE IF USER VOTED SOMETIME BEFORE =========\nconst updateEmojiIfUserVoted = () => {\n  const resObject = arrayLastLikeForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  if (resObject) {\n    State.update({ emoji: resObject.value.type });\n  }\n};\nstate.emoji === undefined &&\n  arrayLastLikeForEachUser &&\n  updateEmojiIfUserVoted();\n\n// ========= UPDATE LIKE STATISTICS IF USER VOTED RIGHT NOW=========\nconst updateLikesStatisticsIfUserVoted = (newEmoji) => {\n  const resObject = arrayLastLikeForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  if (!resObject) {\n    arrayLastLikeForEachUser = [\n      ...arrayLastLikeForEachUser,\n      {\n        accountId: accountThatIsLoggedIn,\n        blockHeight: item.blockHeight,\n        value: { type: newEmoji },\n      },\n    ];\n  } else {\n    arrayLastLikeForEachUser =\n      arrayLastLikeForEachUser &&\n      arrayLastLikeForEachUser.map((item) => {\n        if (item.accountId === accountThatIsLoggedIn) {\n          return { ...item, value: { type: newEmoji } };\n        }\n        return item;\n      });\n  }\n  likesStatistics =\n    arrayLastLikeForEachUser && countLikesStats(arrayLastLikeForEachUser);\n  State.update({\n    likesStatistics,\n  });\n};\n\n// ================= Mouse Handlers ===============\n\nconst handleOnMouseEnter = (e) => {\n  State.update({ show: true });\n};\n\nconst handleOnMouseLeave = (e) => {\n  State.update({ show: false });\n};\n\nconst clickHandler = (emojiMessage) => {\n  if (state.loading) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n\n  // decide to put unique emoji or white heart (unlike emoji)\n  const emojiToWrite =\n    emojiMessage === initialEmoji && state.emoji === initialEmoji\n      ? emojiArray[0]\n      : emojiMessage;\n\n  const data = {\n    index: {\n      like: JSON.stringify({\n        key: item,\n        value: {\n          type: emojiToWrite,\n        },\n      }),\n    },\n  };\n\n  Social.set(data, {\n    onCommit: () => {\n      updateLikesStatisticsIfUserVoted(emojiToWrite);\n      State.update({ emoji: emojiToWrite, loading: false, show: false });\n    },\n    onCancel: () => State.update({ loading: false, show: false }),\n  });\n};\n\n// =============== CSS Styles ===============\nconst Button = styled.button`\n  min-width: fit-content;\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  width: 8em;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  :hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n  }\n`;\n\nconst SmallButton = styled.button`\nposition: relative;\n  border: 0;\n  background: transparent;\n  width: 35px;\n  height: 35px;\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\n`;\n\nconst SmallButtonSpan = styled.span`\n  font-size: 19px;\n  :hover{\n      position: absolute;\n      font-size: 35px;\n      bottom: -5px;\n      width: 35px;\n      height: 40px;\n      transform: translateX(-50%) translateY(-50%);\n  }\n  \n  @media (max-width: 599px) {\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n      :hover{\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 120%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n  }\n      \n  }\n`;\n\n// =============== NEW CSS Styles ===============!!!!!!!!\nconst EmojiWrapper = styled.div`\ndisplay: inline-block;\nposition: relative;\noverflow: visible !important;\npadding-left: 8px;\n`;\n\nconst Reactions = styled.div`\n  position: relative;\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  width: 8em;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n`;\n\nconst EmojiListWrapper = styled.div`\ndisplay: flex;\nflex-wrap: wrap;\npadding: 0.5rem;\n\nbackground: white;\nborder-radius: 1rem;\nbox-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\n@media (min-width: 600px) {\n    display: ${({ show }) => (show ? \"flex\" : \"none\")};\n    height: 3.2rem;\n    flex-wrap: nowrap;\n    position: absolute;\n    transform: translateY(-10%);\n    zIndex: 2;\n  }\n`;\n\nconst StatWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n  overflow: visible !important;\n  border-radius: ${({ isUserVote }) => (isUserVote ? \"1rem\" : \"0\")};\n  background-color: ${({ isUserVote }) =>\n    isUserVote ? \"rgba(0, 191, 255, 0.3)\" : \"transparent\"};\n`;\n\nconst EmojiQty = styled.span`\n  width: 1rem;\n  padding-right: 8px;\n`;\n\nconst AccountsListBigContainer = styled.div`\n  position: absolute;\n  overflow: hidden;\n  bottom: 2rem;\n  background-color: rgb(230, 230, 230);\n  border-radius: 12px;\n  width: 40vw;\n`;\n\nconst AccountsListSmallContainer = styled.div`\n  margin: 0.5rem;\n  border-radius: 12px;\n  overflow: hidden;\n  padding: 10px;\n  text-overflow: ellipsis;\n  background-color: white;\n  max-height: 20rem;\n`;\n\nconst AccountContainer = styled.p`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  text-align: start;\n  margin-left: 0.2rem;\n  margin-right: 0.2rem;\n`;\n\nconst ShowMoreIndicator = styled.p`\n  color: var(--bs-link-color);\n  cursor: pointer;\n  text-decoration: underline;\n  text-align: start;\n  margin-left: 0.2rem;\n  margin-right: 0.2rem;\n\n  :hover {\n      color: var(--bs-indigo);\n  }\n`;\n\n// =============== NEW JSX ===============!!!!!!!!\nconst Overlay = () => (\n  <EmojiListWrapper\n    onMouseEnter={handleOnMouseEnter}\n    onMouseLeave={handleOnMouseLeave}\n    show={state.show}\n  >\n    {emojiArray &&\n      emojiArray.map((item, index) => (\n        <SmallButton onClick={() => clickHandler(item)} isHeart={index === 0}>\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={\n              <Tooltip>\n                <div className=\"text-truncate text-start\">{item.slice(2)}</div>\n              </Tooltip>\n            }\n          >\n            <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\n          </OverlayTrigger>\n        </SmallButton>\n      ))}\n  </EmojiListWrapper>\n);\n\nlet maxAmountOfAccountsShown = 7;\n\nconst renderReactionListModal = (accounts, objText) => {\n  let accountsa = [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n    22, 23, 24, 25, 26, 27, 28, 29, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n  ];\n\n  return (\n    <div className=\"modal\" tabindex=\"-1\" role=\"dialog\">\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">{`All ${objText} reactions`}</h5>\n            <button\n              onClick={() => State.update({ showReactionsListModal: \"\" })}\n              type=\"button\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            {accountsa.map((acc) => {\n              return <AccountContainer>{acc}</AccountContainer>;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderReactionList = (accounts, objText) => {\n  let accountsa = [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n    22, 23, 24, 25, 26, 27, 28, 29, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n  ];\n\n  return (\n    <AccountsListBigContainer\n      onMouseLeave={() => State.update({ expandReactionList: \"\" })}\n    >\n      <AccountsListSmallContainer>\n        {accountsa &&\n          accountsa.map((acc, i) => {\n            if (i < maxAmountOfAccountsShown - 1) {\n              return <AccountContainer>{acc}</AccountContainer>;\n            } else if (i == maxAmountOfAccountsShown) {\n              return (\n                <ShowMoreIndicator\n                  onClick={() =>\n                    State.update({ showReactionsListModal: objText })\n                  }\n                >{`And ${\n                  accountsa.length - maxAmountOfAccountsShown\n                } more...`}</ShowMoreIndicator>\n              );\n            } else {\n              return <></>;\n            }\n          })}\n      </AccountsListSmallContainer>\n    </AccountsListBigContainer>\n  );\n};\n\nconst Stats = () =>\n  likesStatistics && likesStatistics.length ? (\n    likesStatistics.map((obj) => {\n      const userReaction = userEmoji ? userEmoji.value.type.slice(0, 2) : \"\";\n      return (\n        <div\n          onMouseOver={() => State.update({ expandReactionList: obj.text })}\n          onMouseLeave={() => State.update({ expandReactionList: \"\" })}\n        >\n          {state.expandReactionList == obj.text &&\n            renderReactionList(obj.accounts, obj.text)}\n          {(state.showReactionsListModal == obj.text || true) &&\n            renderReactionListModal(obj.accounts, obj.text)}\n          <StatWrapper\n            title={`${obj.text}`}\n            isUserVote={obj.emoji === userReaction}\n          >\n            <EmojiWrapper>{obj.emoji}</EmojiWrapper>\n            <EmojiQty>{obj.quantity}</EmojiQty>\n          </StatWrapper>\n        </div>\n      );\n    })\n  ) : (\n    <></>\n  );\n\nconst Spinner = () => {\n  return (\n    <div\n      className=\"spinner-border text-secondary\"\n      style={{ height: \"1rem\", width: \"1rem\", marginTop: \"2px\" }}\n      role=\"status\"\n    >\n      <span className=\"sr-only\" title=\"Loading...\"></span>\n    </div>\n  );\n};\n\nreturn (\n  <EmojiWrapper>\n    <Button onMouseEnter={handleOnMouseEnter} onMouseLeave={handleOnMouseLeave}>\n      {state.loading && <Spinner />}\n      {!userEmoji ? initialEmoji : <Stats />}\n    </Button>\n    {!userEmoji ? (\n      <Reactions>\n        <Stats />\n      </Reactions>\n    ) : (\n      <></>\n    )}\n    <Overlay />\n  </EmojiWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/SayALot_Reactions", "__row_index": 58}