{"tx_hash": "BWZCeDNpCMM2jAeUmcpVyTaudvFcg2DA1DB98wLMfE5E", "action_id_social": "AWNPiijabKTScZgCtnu6n5egvF4ptAMSJs89s2i4qHz9-0-widget", "block_id": 82308793, "block_timestamp": "2023-01-06 05:55:27.733", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "questionsByCreator", "source_code": "State.init({\n  showQuestion: false,\n  modalBlockHeight: 0,\n  polls: {},\n  answers: {},\n});\n\nlet isShort = props.isShort;\nlet polls = Social.index(\"poll_question\", \"question-v3.1.0\", {\n  accountId: props.accountId,\n});\n\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\n  State.update({ polls: polls });\n}\n\nif (!polls) {\n  return \"Loading\";\n}\n\nfunction sliceString(string, newStringLength) {\n  if (string.length > newStringLength) {\n    return string.slice(0, newStringLength) + \"...\";\n  }\n  return string;\n}\n\nfunction isActive(poll) {\n  return (\n    poll.value.startTimestamp < Date.now() &&\n    Date.now() < poll.value.endTimestamp\n  );\n}\n\nfunction isUpcoming(poll) {\n  return poll.value.startTimestamp > Date.now();\n}\n\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\n  // let questionParams = polls.find(q => q.blockHeight == questionBlockHeight)\n\n  const answers = Social.index(\"poll_question\", \"answer-v3.1.0\");\n\n  if (JSON.stringify(answers) != JSON.stringify(state.answers)) {\n    State.update({ answers: answers });\n  }\n\n  if (!answers) {\n    return \"Loading\";\n  }\n  const answersFromThisQuestion = answers.filter(\n    (a) => a.value.questionBlockHeight == questionBlockHeight\n  );\n  const usersWithAnswers = answersFromThisQuestion.map((a) => a.accountId);\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\n    (u, index) => usersWithAnswers.indexOf(u) == index\n  );\n  return usersWithAnswersWithoutDuplicates.length;\n}\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestion: false });\n  };\n}\n\nlet widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\n\nconst renderPollTypeIcon = (poll) => {\n  let allPollTypes = [];\n  for (let i = 0; i < poll.value.questions.length; i++) {\n    if (!allPollTypes.includes(poll.value.questions[i].questionType)) {\n      allPollTypes.push(poll.value.questions[i].questionType);\n    }\n  }\n\n  allPollTypes.length == 1 &&\n  (allPollTypes[0] == \"0\" || allPollTypes[0] == \"1\") ? (\n    <i className=\"bi bi-pie-chart\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"2\" ? (\n    <i\n      style={{\n        transform: \"rotate(90deg)\",\n        padding: \"0.6rem 0.8rem\",\n      }}\n      className=\"bi bi-bar-chart-line\"\n    ></i>\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"3\" ? (\n    <i className=\"bi bi-file-text\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  ) : (\n    <i className=\"bi bi-pie-chart\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\n  );\n};\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestion && { display: \"block\", backgroundColor: \"#7e7e7e70\" }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div className=\"modal-dialog\" style={{ maxWidth: \"95%\" }} role=\"document\">\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              backgroundColor: \"white\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/newVotingInterface`}\n              props={{\n                blockHeight: state.modalBlockHeight,\n                shouldDisplayViewAll: true,\n              }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestion: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <>\n    {polls.map((poll, index) => {\n      if ((isShort && index < 2) || !isShort) {\n        return (\n          <div\n            className=\"mt-2\"\n            style={\n              index == 0\n                ? { cursor: \"pointer\", backGroundColor: \"white\" }\n                : {\n                    paddingTop: \"1rem\",\n                    backGroundColor: \"white\",\n                    borderTop: \"1px solid #ced4da\",\n                    marginTop: \"1rem\",\n                    cursor: \"pointer\",\n                  }\n            }\n            onClick={() => {\n              State.update({\n                showQuestion: true,\n                modalBlockHeight: poll.blockHeight,\n              });\n            }}\n          >\n            <div className=\"d-flex align-content-center\">\n              <div\n                className=\"d-flex justify-content-center\"\n                style={{\n                  maxHeight: \"2.8rem\",\n                  aspectRatio: \"1\",\n                  borderRadius: \"16px\",\n                  backgroundColor: \"#F2F6FA\",\n                  marginRight: \"0.8rem\",\n                }}\n              >\n                {renderPollTypeIcon(poll)}\n              </div>\n              <p style={{ margin: \"0.5rem 0 0 0\", fontWeight: \"500\" }}>\n                {sliceString(poll.value.title, 20)}\n              </p>\n            </div>\n            <div className=\"d-flex\">\n              <div\n                className=\"d-flex justify-content-center\"\n                style={{\n                  width: \"2.8rem\",\n                  marginRight: \"0.8rem\",\n                }}\n              >\n                {/*Structural div, do not delete*/}\n              </div>\n              <div className=\"d-flex w-100 justify-content-between flex-nowrap text-secondary mb-2\">\n                <div>\n                  <i className=\"bi bi-people\"></i>\n                  <span>\n                    {getValidAnswersQtyFromQuestion(poll.blockHeight)}\n                  </span>\n                </div>\n                <span>\n                  Ends\n                  <Widget\n                    src={`silkking.near/widget/timeAgo`}\n                    props={{\n                      reduced: true,\n                      timeInFuture: poll.value.endTimestamp,\n                    }}\n                  />\n                </span>\n                <span\n                  style={{\n                    backgroundColor: isUpcoming(poll)\n                      ? \"#FFF3B4\"\n                      : isActive(poll)\n                      ? \"#D9FCEF\"\n                      : \"#FFE5E5\",\n\n                    height: \"1.5rem\",\n                    width: \"4rem\",\n                    textAlign: \"center\",\n                    borderRadius: \"16px\",\n                    marginRight: \"1rem\",\n                    lineHeight: \"1.5rem\",\n                    fontSize: \"0.8rem\",\n                    letterSpacing: \"-0.025rem\",\n                    color: isUpcoming(poll)\n                      ? \"#FFC905\"\n                      : isActive(poll)\n                      ? \"#00B37D\"\n                      : \"#FF4747\",\n                    fontWeight: \"500\",\n                  }}\n                >\n                  {isUpcoming(poll)\n                    ? \"Upcoming\"\n                    : isActive(poll)\n                    ? \"Active\"\n                    : \"Closed\"}\n                </span>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    })}\n    {state.showQuestion && renderModal()}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/questionsByCreator"}