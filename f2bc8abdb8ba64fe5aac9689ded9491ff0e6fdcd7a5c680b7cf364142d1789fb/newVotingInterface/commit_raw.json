{"tx_hash": "6LDqHcTD6nygQWPfMvFsxAA9y4S5NEbhvsRJgMHq7PCe", "action_id_social": "G88oeTHXVsX8XLXwfe69gEaYZospDCHNtMEzkqNcbk4E-0-widget", "block_id": 80640272, "block_timestamp": "2022-12-14 15:32:21.894", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newVotingInterface", "source_code": "if (!props.isPreview && !props.blockHeight) {\n  return \"Prop block height wasn't provided\";\n}\n\nlet isPreview = props.isPreview ?? false;\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\n\nlet questionBlockHeight = Number(props.blockHeight);\nconst questions =\n  !props.previewInfo && Social.index(\"poll_question\", \"question-v3.0.1\");\n\nconst questionParams =\n  props.previewInfo ??\n  questions.find((q) => q.blockHeight == questionBlockHeight);\n\nlet profile = Social.getr(`${questionParams.accountId}/profile`);\n\nlet questionsByThisCreator = Social.index(\"poll_question\", \"question-v3.0.1\", {\n  accountId: questionParams.accountId,\n});\n\nif (!questionParams && !isPreview) {\n  return \"Loading...\";\n}\n\nfunction sliceString(string, newStringLength) {\n  if (string.length > newStringLength) {\n    return string.slice(0, newStringLength) + \"...\";\n  }\n  return string;\n}\n\nfunction transformDateFormat(date) {\n  return new Date(date).toLocaleDateString();\n}\n\nconst isQuestionActive =\n  questionParams.value.startTimestamp < Date.now() &&\n  Date.now() < questionParams.value.endTimestamp;\n\nState.init({\n  showQuestionsByThisUser: false,\n});\n\nconst widgetOwner = \"silkking.near\";\nconst renderVoteMultipleChoice = () => {\n  if (questionParams) {\n    return (\n      <Widget\n        src={`${widgetOwner}/widget/voteMultipleChoice`}\n        props={{\n          ...questionParams,\n          isPreview,\n        }}\n      />\n    );\n  } else {\n    return \"Invalid block height provided.\";\n  }\n};\n\nconst renderVoteText = () => {\n  return (\n    <Widget\n      src={`${widgetOwner}/widget/voteWithText`}\n      props={{ ...questionParams, isPreview }}\n    />\n  );\n};\n\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\n  // let questionParams = questions.find(q => q.blockHeight == questionBlockHeight)\n\n  const answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\n  const answersFromThisQuestion = answers.filter(\n    (a) => a.value.questionBlockHeight == questionBlockHeight\n  );\n  const usersWithAnswers = answersFromThisQuestion.map((a) => a.accountId);\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\n    (u, index) => usersWithAnswers.indexOf(u) == index\n  );\n  return usersWithAnswersWithoutDuplicates.length;\n}\n\nconst renderQuestionsByThisCreator = () => {\n  return questionsByThisCreator.map((questionByCreator, index) => {\n    let divStyle = index == 0 ? {} : { borderTop: \"1px solid #ced4da\" };\n    return (\n      <div style={divStyle}>\n        <p style={{ fontWeight: \"500\" }}>\n          {sliceString(questionByCreator.value.title, 20)}\n        </p>\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary\">\n          <span>End date</span>\n          <span>\n            {transformDateFormat(questionByCreator.value.endTimestamp)}\n          </span>\n        </div>\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary\">\n          <span>Votes</span>\n          <span>\n            ({getValidAnswersQtyFromQuestion(questionByCreator.blockHeight)})\n          </span>\n        </div>\n      </div>\n    );\n  });\n};\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\n  };\n}\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestionsByThisUser && {\n          display: \"block\",\n          backgroundColor: \"#7e7e7e70\",\n        }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div\n        className=\"modal-dialog\"\n        style={{ maxWidth: \"100%\" }}\n        role=\"document\"\n      >\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/showQuestionsHandler`}\n              props={{ accountId: questionParams.accountId }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <>\n    <div\n      className=\"d-flex content-align-start justify-content-between\"\n      style={{ borderRadius: \"3px\", padding: \"2rem 3rem\" }}\n    >\n      <div style={{ width: \"75%\", marginRight: \"2rem\" }}>\n        <div className=\"d-flex\">\n          <span\n            style={{\n              backgroundColor: isQuestionActive\n                ? \"rgb(153, 255, 153)\"\n                : \"rgb(255, 128, 128)\",\n\n              height: \"max-content\",\n              width: \"6rem\",\n              border: \"1px solid rgb(0, 82, 204)\",\n              textAlign: \"center\",\n              borderRadius: \"80px\",\n              marginRight: \"1rem\",\n            }}\n          >\n            {isQuestionActive ? \"Active\" : \"Closed\"}\n          </span>\n\n          {Date.now() < questionParams.value.endTimestamp && (\n            <span\n              style={{\n                paddingLeft: \"1.5rem\",\n                borderLeft: \"2px solid #ced4da\",\n              }}\n            >\n              Ends in\n              <Widget\n                src={`silkking.near/widget/timeAgo`}\n                props={{ timeInFuture: questionParams.value.endTimestamp }}\n              />\n            </span>\n          )}\n        </div>\n\n        <h2>{questionParams.value.title}</h2>\n\n        <div className=\"d-flex\">\n          <span className=\"mr-3\" style={{ fontWeight: \"500\" }}>\n            Created by\n          </span>\n\n          <Widget\n            src=\"mob.near/widget/ProfileImage\"\n            props={{\n              profile,\n              question: questionParams.accountId,\n              className: \"float-start d-inline-block me-2\",\n              style: {\n                width: \"1.5rem\",\n                marginLeft: \"1rem\",\n              },\n            }}\n          />\n\n          <span style={{ fontWeigth: \"500\" }}>\n            {sliceString(questionParams.accountId, 18)}\n          </span>\n        </div>\n\n        <p>{questionParams.value.description}</p>\n\n        {questionParams.value.tgLink != \"\" &&\n          questionParams.value.tgLink != undefined && (\n            <h4>\n              Discussion link:\n              <a href={questionParams.value.tgLink}>\n                {questionParams.value.tgLink}\n              </a>\n            </h4>\n          )}\n\n        <div\n          style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\n          className=\"p-3 my-3\"\n        >\n          <h4>{questionParams.value.question}</h4>\n\n          {questionParams.value.questionType == \"0\"\n            ? renderVoteText()\n            : renderVoteMultipleChoice()}\n        </div>\n      </div>\n      <div style={{ minWidth: \"17rem\" }}>\n        <h5>Information</h5>\n        <div\n          className=\"mb-2\"\n          style={{\n            border: \"1px solid #ced4da\",\n            borderRadius: \"0.375rem\",\n            fontWeight: \"500\",\n            padding: \"0.5rem 1rem\",\n          }}\n        >\n          <div className=\"d-flex justify-content-between\">\n            <span>Status</span>\n            <span>{isQuestionActive ? \"Active\" : \"Closed\"}</span>\n          </div>\n\n          <div className=\"d-flex justify-content-between\">\n            <span>Start date</span>\n            <span>\n              {transformDateFormat(questionParams.value.startTimestamp)}\n            </span>\n          </div>\n\n          <div className=\"d-flex justify-content-between\">\n            <span>End date</span>\n            <span>\n              {transformDateFormat(questionParams.value.endTimestamp)}\n            </span>\n          </div>\n\n          <div className=\"d-flex justify-content-between\">\n            <span>Creator</span>\n            <span>{sliceString(questionParams.accountId, 8)}</span>\n          </div>\n        </div>\n\n        {questionsByCreator.length != 1 && (\n          <>\n            <div className=\"d-flex\">\n              <h5>Polls by creator</h5>\n              <h5 style={{ marginLeft: \"0.5rem\" }}>\n                ({questionsByThisCreator.length})\n              </h5>\n            </div>\n\n            <div\n              style={{\n                border: \"1px solid #ced4da\",\n                borderRadius: \"0.375rem\",\n                padding: \"0.5rem 1rem\",\n              }}\n            >\n              {renderQuestionsByThisCreator()}\n              {shouldDisplayViewAll && (\n                <div style={{ margin: \"1rem 0\", textAlign: \"center\" }}>\n                  <button\n                    className=\"btn btn-outline-primary w-75\"\n                    onClick={() => {\n                      State.update({ showQuestionsByThisUser: true });\n                    }}\n                  >\n                    View all\n                  </button>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n    {state.showQuestionsByThisUser && renderModal()}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newVotingInterface"}