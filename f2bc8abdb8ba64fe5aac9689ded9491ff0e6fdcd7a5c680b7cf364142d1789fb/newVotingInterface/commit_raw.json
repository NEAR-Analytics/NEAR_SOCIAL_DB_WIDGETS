{"tx_hash": "4pMEuu8JFonL4LTVR8hXovAmL4Lw2gw7scEZHxPwu9Wz", "action_id_social": "BTnhQ5M6dVPQ1Q3CGt9uViBsrxyfvANQF8DFZFL7qx45-0-widget", "block_id": 84374592, "block_timestamp": "2023-02-02 20:06:35.295", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newVotingInterface", "source_code": "/********** Start validations ************/\r\n\r\nif (!props.isPreview && !props.blockHeight) {\r\n  return \"Prop block height wasn't provided\";\r\n}\r\n\r\n/********** End validations ************/\r\n\r\n/********** Start initialization ************/\r\n\r\nState.init({\r\n  showQuestionsByThisUser: false,\r\n  descriptionHeightLimited: true,\r\n  poll: {},\r\n  polls: [{}],\r\n  profile: {},\r\n  pollsByThisCreator: [{}],\r\n  answers: [{}],\r\n});\r\n\r\nlet isPreview = props.isPreview ?? false;\r\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\r\n\r\nlet questionBlockHeight = Number(props.blockHeight);\r\n\r\nconst polls =\r\n  !props.previewInfo && Social.index(\"poll_question\", \"question-v3.1.1\");\r\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\r\n  State.update({ polls: polls });\r\n}\r\n\r\nif (!state.polls) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst poll =\r\n  props.previewInfo ??\r\n  state.polls.find((q) => q.blockHeight == questionBlockHeight);\r\n\r\nif (JSON.stringify(poll) != JSON.stringify(state.poll)) {\r\n  State.update({ poll: poll });\r\n}\r\n\r\nif (!state.poll && !isPreview) {\r\n  return \"Loading...\";\r\n}\r\n\r\nfunction getPollStatus(poll) {\r\n  return isUpcoming(poll)\r\n    ? QUESTION_STATUSES.UPCOMING\r\n    : isActive(poll)\r\n    ? QUESTION_STATUSES.ACTIVE\r\n    : QUESTION_STATUSES.CLOSED;\r\n}\r\n\r\nfunction isActive(poll) {\r\n  return (\r\n    poll.value.startTimestamp < Date.now() &&\r\n    Date.now() < poll.value.endTimestamp\r\n  );\r\n}\r\n\r\nfunction isUpcoming(poll) {\r\n  return poll.value.startTimestamp > Date.now();\r\n}\r\n\r\nconst pollStatus = getPollStatus(state.poll);\r\n\r\nlet profile = Social.getr(`${state.poll.accountId}/profile`);\r\nif (JSON.stringify(profile) != JSON.stringify(state.profile)) {\r\n  State.update({ profile: profile });\r\n}\r\n\r\nif (!profile) {\r\n  return \"Loading\";\r\n}\r\n\r\nlet pollsByThisCreator = Social.index(\"poll_question\", \"question-v3.1.1\", {\r\n  accountId: state.poll.accountId,\r\n});\r\n\r\nif (\r\n  JSON.stringify(pollsByThisCreator) != JSON.stringify(state.pollsByThisCreator)\r\n) {\r\n  State.update({ pollsByThisCreator });\r\n}\r\n\r\nif (!state.pollsByThisCreator) {\r\n  return \"Loading\";\r\n}\r\n\r\n/********** End initialization ************/\r\n\r\n/********** Start constants ************/\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n\r\nconst QUESTION_STATUSES = {\r\n  ACTIVE: {\r\n    id: 0,\r\n    text: \"Active\",\r\n    backgroundColor: \"#D9FCEF\",\r\n    fontColor: \"#00B37D\",\r\n  },\r\n  CLOSED: {\r\n    id: 1,\r\n    text: \"Closed\",\r\n    backgroundColor: \"#FFE5E5\",\r\n    fontColor: \"#FF4747\",\r\n  },\r\n  UPCOMING: {\r\n    id: 2,\r\n    text: \"Upcoming\",\r\n    backgroundColor: \"#FFF3B4\",\r\n    fontColor: \"#FFC905\",\r\n  },\r\n};\r\n\r\n/********** End constants ************/\r\n\r\n/********** Start styles ************/\r\n/********** End styles ************/\r\n\r\n/********** Start functions ************/\r\n\r\nfunction sliceString(string, newStringLength) {\r\n  if (string.length > newStringLength) {\r\n    return string.slice(0, newStringLength) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction transformDateFormat(date) {\r\n  return new Date(date).toLocaleDateString();\r\n}\r\n\r\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\r\n  const answers = Social.index(\"poll_question\", \"answer-v3.1.1\");\r\n\r\n  if (JSON.stringify(answers) != JSON.stringify(state.answers)) {\r\n    State.update({ answers: answers });\r\n  }\r\n\r\n  if (!state.answers) {\r\n    return \"Loading\";\r\n  }\r\n\r\n  const answersFromThisPoll = state.answers.filter(\r\n    (a) => a.value.questionBlockHeight == questionBlockHeight\r\n  );\r\n\r\n  const usersWithAnswers = answersFromThisPoll.map((a) => a.accountId);\r\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\r\n    (u, index) => usersWithAnswers.indexOf(u) == index\r\n  );\r\n  return usersWithAnswersWithoutDuplicates.length;\r\n}\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  return (e) => {\r\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\r\n  };\r\n}\r\n\r\nfunction descriptionText(description) {\r\n  if (state.descriptionHeightLimited && description.length > 501) {\r\n    return description.slice(0, 500) + \"...\";\r\n  } else {\r\n    return description;\r\n  }\r\n}\r\n\r\n/********** End functions ************/\r\n\r\n/********** Start components ************/\r\n\r\nconst renderPollTypeIcon = () => {\r\n  let allPollTypes = [];\r\n  for (let i = 0; i < poll.value.questions.length; i++) {\r\n    if (!allPollTypes.includes(poll.value.questions[i].questionType)) {\r\n      allPollTypes.push(poll.value.questions[i].questionType);\r\n    }\r\n  }\r\n\r\n  return allPollTypes.length == 1 &&\r\n    (allPollTypes[0] == \"0\" || allPollTypes[0] == \"1\") ? (\r\n    <i className=\"bi bi-pie-chart\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\r\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"2\" ? (\r\n    <i\r\n      style={{\r\n        transform: \"rotate(90deg)\",\r\n        padding: \"0.6rem 0.8rem\",\r\n      }}\r\n      className=\"bi bi-bar-chart-line\"\r\n    ></i>\r\n  ) : allPollTypes.length == 1 && allPollTypes[0] == \"3\" ? (\r\n    <i className=\"bi bi-file-text\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\r\n  ) : (\r\n    <i className=\"bi bi-collection\" style={{ padding: \"0.6rem 0.8rem\" }}></i>\r\n  );\r\n};\r\n\r\nconst renderQuestionsByThisCreator = () => {\r\n  return state.pollsByThisCreator.map((pollByCreator, index) => {\r\n    let divStyle =\r\n      index == 0\r\n        ? { backGroundColor: \"white\" }\r\n        : {\r\n            backGroundColor: \"white\",\r\n            paddingTop: \"1rem\",\r\n            borderTop: \"1px solid #ced4da\",\r\n          };\r\n    let pollByCreatorStatus = getPollStatus(pollByCreator);\r\n    return (\r\n      <div style={divStyle}>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div\r\n            className=\"d-flex justify-content-center\"\r\n            style={{\r\n              maxHeight: \"2.8rem\",\r\n              aspectRatio: \"1\",\r\n              borderRadius: \"16px\",\r\n              backgroundColor: \"#F2F6FA\",\r\n              marginRight: \"0.8rem\",\r\n            }}\r\n          >\r\n            {renderPollTypeIcon(pollByCreator)}\r\n          </div>\r\n          <p style={{ fontWeight: \"500\", margin: \"0\" }}>\r\n            {sliceString(pollByCreator.value.title, 20)}\r\n          </p>\r\n        </div>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary mb-2\">\r\n          <div>\r\n            <i className=\"bi bi-people\"></i>\r\n            <span>\r\n              {getValidAnswersQtyFromQuestion(pollByCreator.blockHeight)}\r\n            </span>\r\n          </div>\r\n          <span>\r\n            Ends\r\n            <Widget\r\n              src={`silkking.near/widget/timeAgo`}\r\n              props={{\r\n                timeInFuture: pollByCreator.value.endTimestamp,\r\n                reduced: true,\r\n              }}\r\n            />\r\n          </span>\r\n          <span\r\n            style={{\r\n              backgroundColor: pollByCreatorStatus.backgroundColor,\r\n              height: \"1.5rem\",\r\n              width: \"4rem\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"16px\",\r\n              marginRight: \"1rem\",\r\n              lineHeight: \"1.5rem\",\r\n              fontSize: \"0.8rem\",\r\n              letterSpacing: \"-0.025rem\",\r\n              color: pollByCreatorStatus.fontColor,\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            {pollByCreatorStatus.text}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nconst renderModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        state.showQuestionsByThisUser && {\r\n          display: \"block\",\r\n          backgroundColor: \"#7e7e7e70\",\r\n        }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div\r\n        className=\"modal-dialog\"\r\n        style={{ maxWidth: \"100%\" }}\r\n        role=\"document\"\r\n      >\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          >\r\n            <Widget\r\n              src={`${widgetOwner}/widget/showQuestionsHandler`}\r\n              props={{ accountId: state.poll.accountId, onlyUser: true }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/********** End components ************/\r\n\r\n/********** Start rendering ************/\r\nreturn (\r\n  <div>\r\n    <div className=\"d-flex content-align-start justify-content-between\">\r\n      <div\r\n        style={{\r\n          width: \"75%\",\r\n          maxWidth: \"1000px\",\r\n          margin: \"2rem 0.5rem 2rem 2rem\",\r\n          padding: \"2rem\",\r\n          borderRadius: \"18px\",\r\n          background: \"white\",\r\n          boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\r\n        }}\r\n      >\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div className=\"d-flex\">\r\n            <Widget\r\n              src=\"mob.near/widget/ProfileImage\"\r\n              props={{\r\n                profile,\r\n                question: state.poll.accountId,\r\n                className: \"float-start d-inline-block me-2\",\r\n                style: {\r\n                  width: \"3.5rem\",\r\n                  aspectRatio: \"1\",\r\n                  marginLeft: \"1rem\",\r\n                  borderRadius: \"100%\",\r\n                  overflow: \"hidden\",\r\n                },\r\n              }}\r\n            />\r\n            <div>\r\n              <p style={{ margin: \"0\", fontWeight: \"300\" }}>Created by</p>\r\n              <p style={{ fontWeight: \"500\" }}>\r\n                {sliceString(state.poll.accountId, 18)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {Date.now() < state.poll.value.endTimestamp && (\r\n            <>\r\n              <span>\r\n                Started{\" \"}\r\n                {new Date(state.poll.value.startTimestamp).toLocaleDateString()}\r\n              </span>\r\n\r\n              <span\r\n                style={{\r\n                  paddingLeft: \"1.5rem\",\r\n                  borderLeft: \"2px solid #ced4da\",\r\n                  height: \"max-content\",\r\n                }}\r\n              >\r\n                Ends\r\n                <Widget\r\n                  src={`silkking.near/widget/timeAgo`}\r\n                  props={{\r\n                    timeInFuture: state.poll.value.endTimestamp,\r\n                    reduced: true,\r\n                  }}\r\n                />\r\n              </span>\r\n            </>\r\n          )}\r\n          <span\r\n            style={{\r\n              backgroundColor: pollStatus.backgroundColor,\r\n              height: \"2.1rem\",\r\n              width: \"5rem\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"16px\",\r\n              marginRight: \"1rem\",\r\n              lineHeight: \"1.9rem\",\r\n              fontSize: \"1rem\",\r\n              letterSpacing: \"-0.025rem\",\r\n              color: pollStatus.fontColor,\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            {pollStatus.text}\r\n          </span>\r\n        </div>\r\n        <div className=\"d-flex my-3\">\r\n          <div\r\n            style={{\r\n              height: \"inherit\",\r\n              backgroundColor: \"#AAC8F7\",\r\n              width: \"0.5rem\",\r\n              minWidth: \"5px\",\r\n              marginRight: \"0.5rem\",\r\n              borderRadius: \"8px\",\r\n            }}\r\n          >\r\n            {/*Decorative div, do not delete*/}\r\n          </div>\r\n          <h2\r\n            style={{\r\n              fontWeight: \"700\",\r\n              fontSize: \"2rem\",\r\n              letterSpacing: \"0.1px\",\r\n              color: \"#010A2D\",\r\n              wordWrap: \"anywhere\",\r\n            }}\r\n          >\r\n            {state.poll.value.title}\r\n          </h2>\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            width: \"max-content\",\r\n            margin: \"1rem\",\r\n          }}\r\n        >\r\n          <Widget\r\n            src={`${widgetOwner}/widget/shareWidget`}\r\n            props={{ blockHeight: questionBlockHeight }}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"p-3\"\r\n          style={{\r\n            position: \"relative\",\r\n            border: \"1.5px solid rgb(206, 212, 218)\",\r\n            borderRadius: \"24px\",\r\n            wordWrap: \"anywhere\",\r\n          }}\r\n        >\r\n          <h3\r\n            style={{\r\n              fontWeight: \"700\",\r\n              fontSize: \"1.2rem\",\r\n              marginBottom: \"1.2rem\",\r\n            }}\r\n          >\r\n            Description\r\n          </h3>\r\n          <Markdown text={descriptionText(state.poll.value.description)} />\r\n\r\n          {state.poll.value.description.length > 501 &&\r\n          !state.descriptionHeightLimited ? (\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                bottom: \"-1.125rem\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                marginRight: \"auto\",\r\n                marginLeft: \"auto\",\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              <h4\r\n                style={{\r\n                  fontSize: \"1.2rem\",\r\n                  display: \"inline-block\",\r\n                  backgroundColor: \"white\",\r\n                  padding: \"0 1rem\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => State.update({ descriptionHeightLimited: true })}\r\n              >\r\n                Show less <i className=\"bi bi-arrow-up\"></i>\r\n              </h4>\r\n            </div>\r\n          ) : (\r\n            state.poll.value.description.length > 501 && (\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  bottom: \"-1.125rem\",\r\n                  left: \"0\",\r\n                  right: \"0\",\r\n                  marginRight: \"auto\",\r\n                  marginLeft: \"auto\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <h4\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    display: \"inline-block\",\r\n                    backgroundColor: \"white\",\r\n                    padding: \"0 1rem\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() =>\r\n                    State.update({ descriptionHeightLimited: false })\r\n                  }\r\n                >\r\n                  Show more <i className=\"bi bi-arrow-down\"></i>\r\n                </h4>\r\n              </div>\r\n            )\r\n          )}\r\n        </div>\r\n        {state.poll.value.tgLink && state.poll.value.tgLink != \"\" && (\r\n          <div\r\n            className=\"mt-3 d-flex justify-content-between\"\r\n            style={{\r\n              border: \"1.5px solid #D4E5FB\",\r\n              padding: \"1.2rem 1.7rem\",\r\n              borderRadius: \"24px\",\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <i\r\n                className=\"bi bi-people d-flex align-items-center justify-content-center\"\r\n                style={{\r\n                  height: \"100%\",\r\n                  aspectRatio: \"1\",\r\n                  backgroundColor: \"#2F5BCF\",\r\n                  borderRadius: \"14px\",\r\n                  marginRight: \"1rem\",\r\n                  color: \"white\",\r\n                }}\r\n              ></i>\r\n              <div>\r\n                <p\r\n                  className=\"m-0\"\r\n                  style={{\r\n                    color: \"#2F5BCF\",\r\n                    fontWeight: \"500\",\r\n                    fontSize: \"0.7rem\",\r\n                  }}\r\n                >\r\n                  Discussion link\r\n                </p>\r\n                <h6>\r\n                  <a\r\n                    style={{ color: \"#2346B1\" }}\r\n                    href={state.poll.value.tgLink}\r\n                  >\r\n                    {sliceString(state.poll.value.tgLink, 30)}\r\n                  </a>\r\n                </h6>\r\n              </div>\r\n            </div>\r\n            <div className=\"d-flex align-items-center\">\r\n              <a\r\n                target=\"_blank\"\r\n                href={state.poll.value.tgLink}\r\n                style={{ userSelect: \"none\" }}\r\n              >\r\n                <i\r\n                  className=\"bi bi-box-arrow-up-right\"\r\n                  style={{\r\n                    color: \"#2F5BCF\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                ></i>\r\n              </a>\r\n              <i\r\n                className=\"bi bi-clipboard\"\r\n                style={{\r\n                  userSelect: \"none\",\r\n                  color: \"#2F5BCF\",\r\n                  cursor: \"pointer\",\r\n                  marginLeft: \"0.8rem\",\r\n                }}\r\n                onClick={() => clipboard.writeText(state.poll.value.tgLink)}\r\n              ></i>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {\r\n          <Widget\r\n            src={`${widgetOwner}/widget/allVotingWidget`}\r\n            props={{\r\n              poll: state.poll,\r\n              isPreview,\r\n            }}\r\n          />\r\n        }\r\n      </div>\r\n      <div style={{ minWidth: \"17rem\" }}>\r\n        <div\r\n          style={{\r\n            margin: \"2rem 2rem 2rem 0.5rem\",\r\n            padding: \"2rem\",\r\n            borderRadius: \"18px\",\r\n            backgroundColor: \"white\",\r\n            boxShadow: \"0px 8px 28px rgba(43, 68, 106, 0.05)\",\r\n          }}\r\n        >\r\n          {questionsByCreator.length != 1 && (\r\n            <>\r\n              <div\r\n                className=\"d-flex\"\r\n                style={\r\n                  shouldDisplayViewAll\r\n                    ? {\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }\r\n                    : {\r\n                        justifyContent: \"flex-start\",\r\n                        alignItems: \"center\",\r\n                      }\r\n                }\r\n              >\r\n                <h5>Polls by creator ({state.pollsByThisCreator.length})</h5>\r\n\r\n                {shouldDisplayViewAll && (\r\n                  <div style={{ margin: \"1rem 0\", textAlign: \"center\" }}>\r\n                    <p\r\n                      style={{\r\n                        color: \"#2346B1\",\r\n                        fontWeight: \"500\",\r\n                        fontSize: \"1rem\",\r\n                        margin: \"0\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => {\r\n                        State.update({ showQuestionsByThisUser: true });\r\n                      }}\r\n                    >\r\n                      View All <i className=\"bi bi-arrow-right\"></i>\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  padding: \"0.5rem 1rem\",\r\n                }}\r\n              >\r\n                {renderQuestionsByThisCreator()}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    {state.showQuestionsByThisUser && renderModal()}\r\n  </div>\r\n);\r\n/********** End rendering ************/\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newVotingInterface"}