{"tx_hash": "81UQi3pzSjrnZTbDADYKbLFWcgA7RemS7jfRsENuegh4", "action_id_social": "3vyvAvzhtBxUrQfF5PGiCHqu9TPP563MfCS68gByET5Q-0-widget", "block_id": 82142546, "block_timestamp": "2023-01-04 00:35:44.712", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newVotingInterface", "source_code": "if (!props.isPreview && !props.blockHeight) {\n  return \"Prop block height wasn't provided\";\n}\n\nlet isPreview = props.isPreview ?? false;\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\n\nlet questionBlockHeight = Number(props.blockHeight);\nconst questions =\n  !props.previewInfo && Social.index(\"poll_question\", \"question-v3.0.1\");\n\nif (JSON.stringify(questions) != JSON.stringify(state.questions)) {\n  State.update({ questions: questions });\n}\n\nif (!questions) {\n  return \"Loading\";\n}\n\nconst questionParams =\n  props.previewInfo ??\n  questions.find((q) => q.blockHeight == questionBlockHeight);\n\nlet profile = Social.getr(`${questionParams.accountId}/profile`);\n\nif (JSON.stringify(profile) != JSON.stringify(state.profile)) {\n  State.update({ profile: profile });\n}\n\nif (!profile) {\n  return \"Loading\";\n}\n\nlet questionsByThisCreator = Social.index(\"poll_question\", \"question-v3.0.1\", {\n  accountId: questionParams.accountId,\n});\n\nif (\n  JSON.stringify(questionsByThisCreator) !=\n  JSON.stringify(state.questionsByThisCreator)\n) {\n  State.update({ questionsByThisCreator: questionsByThisCreator });\n}\n\nif (!questionsByThisCreator) {\n  return \"Loading\";\n}\n\nif (!questionParams && !isPreview) {\n  return \"Loading...\";\n}\n\nfunction sliceString(string, newStringLength) {\n  if (string.length > newStringLength) {\n    return string.slice(0, newStringLength) + \"...\";\n  }\n  return string;\n}\n\nfunction transformDateFormat(date) {\n  return new Date(date).toLocaleDateString();\n}\n\nfunction isActive() {\n  return (\n    question.value.startTimestamp < Date.now() &&\n    Date.now() < question.value.endTimestamp\n  );\n}\n\nfunction isUpcoming() {\n  return question.value.startTimestamp > Date.now();\n}\n\nState.init({\n  showQuestionsByThisUser: false,\n  descriptionHeightLimited: true,\n  questions: {},\n  profile: {},\n  questionsByThisCreator: {},\n});\n\nconst widgetOwner =\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\nconst renderVoteMultipleChoice = () => {\n  if (questionParams) {\n    return (\n      <Widget\n        src={`${widgetOwner}/widget/voteMultipleChoice`}\n        props={{\n          ...questionParams,\n          isPreview,\n        }}\n      />\n    );\n  } else {\n    return \"Invalid block height provided.\";\n  }\n};\n\nconst renderVoteText = () => {\n  if (questionParams) {\n    return (\n      <Widget\n        src={`${widgetOwner}/widget/voteWithText`}\n        props={{ ...questionParams, isPreview }}\n      />\n    );\n  } else {\n    return \"Invalid block height provided.\";\n  }\n};\n\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\n  // let questionParams = questions.find(q => q.blockHeight == questionBlockHeight)\n\n  const answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\n  if (!answers) {\n    return \"Loading\";\n  }\n  const answersFromThisQuestion = answers.filter(\n    (a) => a.value.questionBlockHeight == questionBlockHeight\n  );\n  const usersWithAnswers = answersFromThisQuestion.map((a) => a.accountId);\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\n    (u, index) => usersWithAnswers.indexOf(u) == index\n  );\n  return usersWithAnswersWithoutDuplicates.length;\n}\n\nconst renderQuestionsByThisCreator = () => {\n  //TODO show only the 2 polls\n  return questionsByThisCreator.map((questionByCreator, index) => {\n    let divStyle =\n      index == 0\n        ? {}\n        : { backGroundColor: \"white\", borderTop: \"1px solid #ced4da\" };\n    return (\n      <div style={divStyle}>\n        <p style={{ fontWeight: \"500\" }}>\n          {sliceString(questionByCreator.value.title, 20)}\n        </p>\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary mb-2\">\n          <div>\n            <i className=\"bi bi-people\"></i>\n            <span>\n              {getValidAnswersQtyFromQuestion(questionByCreator.blockHeight)}\n            </span>\n          </div>\n          <span>\n            Ends\n            <Widget\n              src={`silkking.near/widget/timeAgo`}\n              props={{\n                timeInFuture: questionByCreator.value.endTimestamp,\n                reduced: true,\n              }}\n            />\n          </span>\n          <span\n            style={{\n              backgroundColor: isUpcoming(questionByCreator)\n                ? \"#ffe06e\"\n                : isActive()\n                ? \"#D9FCEF\"\n                : \"#FFE5E5\",\n\n              height: \"1.5rem\",\n              width: \"4rem\",\n              textAlign: \"center\",\n              borderRadius: \"16px\",\n              marginRight: \"1rem\",\n              lineHeight: \"1.5rem\",\n              fontSize: \"0.8rem\",\n              letterSpacing: \"-0.025rem\",\n              color: isUpcoming(questionByCreator)\n                ? \"#FFC905\"\n                : isActive()\n                ? \"#00B37D\"\n                : \"#FF4747\",\n              fontWeight: \"500\",\n            }}\n          >\n            {isUpcoming(questionByCreator)\n              ? \"Upcoming\"\n              : isActive()\n              ? \"Active\"\n              : \"Closed\"}\n          </span>\n        </div>\n      </div>\n    );\n  });\n};\n\nfunction closeModalClickingOnTransparent() {\n  return (e) => {\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\n  };\n}\n\nconst renderModal = () => {\n  return (\n    <div\n      className=\"modal\"\n      id=\"modal\"\n      style={\n        state.showQuestionsByThisUser && {\n          display: \"block\",\n          backgroundColor: \"#7e7e7e70\",\n        }\n      }\n      tabindex=\"-1\"\n      role=\"dialog\"\n      onClick={closeModalClickingOnTransparent()}\n    >\n      <div\n        className=\"modal-dialog\"\n        style={{ maxWidth: \"100%\" }}\n        role=\"document\"\n      >\n        <div\n          className=\"modal-content\"\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\n        >\n          <div className=\"modal-header flex-row-reverse\">\n            <button\n              type=\"button\"\n              className=\"close\"\n              dataDismiss=\"modal\"\n              ariaLabel=\"Close\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              <span ariaHidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div\n            className=\"modal-body\"\n            style={{\n              width: \"90%\",\n              borderRadius: \"1rem\",\n              margin: \"0 auto\",\n            }}\n          >\n            <Widget\n              src={`${widgetOwner}/widget/showQuestionsHandler`}\n              props={{ accountId: questionParams.accountId }}\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction showDescription(description) {\n  if (state.descriptionHeightLimited && description.length > 501) {\n    return description.slice(0, 500) + \"...\";\n  } else {\n    return description;\n  }\n}\n\nreturn (\n  <>\n    <div\n      className=\"d-flex content-align-start justify-content-between\"\n      style={{ borderRadius: \"3px\", padding: \"2rem 3rem\" }}\n    >\n      <div style={{ width: \"75%\", marginRight: \"2rem\" }}>\n        <div className=\"d-flex justify-content-between\">\n          <div className=\"d-flex\">\n            <Widget\n              src=\"mob.near/widget/ProfileImage\"\n              props={{\n                profile,\n                question: questionParams.accountId,\n                className: \"float-start d-inline-block me-2\",\n                style: {\n                  width: \"3.5rem\",\n                  aspectRatio: \"1\",\n                  marginLeft: \"1rem\",\n                  borderRadius: \"100%\",\n                  overflow: \"hidden\",\n                },\n              }}\n            />\n            <div>\n              <span className=\"mr-3\" style={{ fontWeight: \"300\" }}>\n                Created by\n              </span>\n              <span style={{ fontWeight: \"500\" }}>\n                {sliceString(questionParams.accountId, 18)}\n              </span>\n            </div>\n          </div>\n\n          {Date.now() < questionParams.value.endTimestamp && (\n            <>\n              <span>\n                Start{\" \"}\n                {new Date(\n                  questionParams.value.startTimestamp\n                ).toLocaleDateString()}\n              </span>\n\n              <span\n                style={{\n                  paddingLeft: \"1.5rem\",\n                  borderLeft: \"2px solid #ced4da\",\n                  height: \"max-content\",\n                }}\n              >\n                Ends\n                <Widget\n                  src={`silkking.near/widget/timeAgo`}\n                  props={{\n                    timeInFuture: questionParams.value.endTimestamp,\n                    reduced: true,\n                  }}\n                />\n              </span>\n            </>\n          )}\n          <span\n            style={{\n              backgroundColor: isUpcoming(questionByCreator)\n                ? \"#ffe06e\"\n                : isActive()\n                ? \"#D9FCEF\"\n                : \"#FFE5E5\",\n\n              height: \"2.1rem\",\n              width: \"5rem\",\n              textAlign: \"center\",\n              borderRadius: \"16px\",\n              marginRight: \"1rem\",\n              lineHeight: \"1.9rem\",\n              fontSize: \"1rem\",\n              letterSpacing: \"-0.025rem\",\n              color: isUpcoming(questionByCreator)\n                ? \"#FFC905\"\n                : isActive()\n                ? \"#00B37D\"\n                : \"#FF4747\",\n              fontWeight: \"500\",\n            }}\n          >\n            {isUpcoming(questionByCreator)\n              ? \"Upcoming\"\n              : isActive()\n              ? \"Active\"\n              : \"Closed\"}\n          </span>\n        </div>\n        <div className=\"d-flex my-3\">\n          <div\n            style={{\n              height: \"inherit\",\n              backgroundColor: \"#AAC8F7\",\n              width: \"0.5rem\",\n              minWidth: \"5px\",\n              marginRight: \"0.5rem\",\n              borderRadius: \"8px\",\n            }}\n          >\n            {/*Decorative div, do not delete*/}\n          </div>\n          <h2\n            style={{\n              fontWeight: \"700\",\n              fontSize: \"2rem\",\n              letterSpacing: \"0.1px\",\n              color: \"#010A2D\",\n              wordWrap: \"anywhere\",\n            }}\n          >\n            {questionParams.value.title}\n          </h2>\n        </div>\n\n        <div\n          className=\"p-3\"\n          style={{\n            position: \"relative\",\n            border: \"1.5px solid rgb(206, 212, 218)\",\n            borderRadius: \"24px\",\n            wordWrap: \"anywhere\",\n          }}\n        >\n          <h3\n            style={{\n              fontWeight: \"700\",\n              fontSize: \"1.2rem\",\n              marginBottom: \"1.2rem\",\n            }}\n          >\n            Description\n          </h3>\n          <p style={{ fontSize: \"0.9rem\" }}>\n            {showDescription(questionParams.value.description)}\n          </p>\n          {questionParams.value.description.length > 501 &&\n          !state.descriptionHeightLimited ? (\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: \"-1.125rem\",\n                left: \"0\",\n                right: \"0\",\n                marginRight: \"auto\",\n                marginLeft: \"auto\",\n                textAlign: \"center\",\n              }}\n            >\n              <h4\n                style={{\n                  fontSize: \"1.2rem\",\n                  display: \"inline-block\",\n                  backgroundColor: \"white\",\n                  padding: \"0 1rem\",\n                  cursor: \"pointer\",\n                }}\n                onClick={() => State.update({ descriptionHeightLimited: true })}\n              >\n                Show less <i className=\"bi bi-arrow-up\"></i>\n              </h4>\n            </div>\n          ) : (\n            questionParams.value.description.length > 501 && (\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: \"-1.125rem\",\n                  left: \"0\",\n                  right: \"0\",\n                  marginRight: \"auto\",\n                  marginLeft: \"auto\",\n                  textAlign: \"center\",\n                }}\n              >\n                <h4\n                  style={{\n                    fontSize: \"1.2rem\",\n                    display: \"inline-block\",\n                    backgroundColor: \"white\",\n                    padding: \"0 1rem\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() =>\n                    State.update({ descriptionHeightLimited: false })\n                  }\n                >\n                  Show more <i className=\"bi bi-arrow-down\"></i>\n                </h4>\n              </div>\n            )\n          )}\n        </div>\n\n        {questionParams.value.tgLink != \"\" &&\n          questionParams.value.tgLink != undefined && (\n            <div\n              className=\"mt-3 d-flex justify-content-between\"\n              style={{\n                border: \"1.5px solid #D4E5FB\",\n                padding: \"1.2rem 1.7rem\",\n                borderRadius: \"24px\",\n              }}\n            >\n              <div className=\"d-flex\">\n                <i\n                  className=\"bi bi-people d-flex align-items-center justify-content-center\"\n                  style={{\n                    height: \"100%\",\n                    aspectRatio: \"1\",\n                    backgroundColor: \"#2F5BCF\",\n                    borderRadius: \"14px\",\n                    marginRight: \"1rem\",\n                    color: \"white\",\n                  }}\n                ></i>\n                <div>\n                  <p\n                    className=\"m-0\"\n                    style={{\n                      color: \"#2F5BCF\",\n                      fontWeight: \"500\",\n                      fontSize: \"0.7rem\",\n                    }}\n                  >\n                    Discussion link\n                  </p>\n                  <h6>\n                    <a\n                      style={{ color: \"#2346B1\" }}\n                      href={questionParams.value.tgLink}\n                    >\n                      {sliceString(questionParams.value.tgLink, 30)}\n                    </a>\n                  </h6>\n                </div>\n              </div>\n              <div className=\"d-flex align-items-center\">\n                <a\n                  target=\"_blank\"\n                  href={questionParams.value.tgLink}\n                  style={{ userSelect: \"none\" }}\n                >\n                  <i\n                    className=\"bi bi-box-arrow-up-right\"\n                    style={{\n                      color: \"#2F5BCF\",\n                      cursor: \"pointer\",\n                    }}\n                  ></i>\n                </a>\n                <i\n                  className=\"bi bi-clipboard\"\n                  style={{\n                    userSelect: \"none\",\n                    color: \"#2F5BCF\",\n                    cursor: \"pointer\",\n                    marginLeft: \"0.8rem\",\n                  }}\n                  onClick={() =>\n                    clipboard.writeText(questionParams.value.tgLink)\n                  }\n                ></i>\n              </div>\n            </div>\n          )}\n\n        <div\n          style={{\n            border: \"1.5px solid rgb(206, 212, 218)\",\n            borderRadius: \"24px\",\n            position: \"relative\",\n          }}\n          className=\"p-3 my-3\"\n        >\n          <h4>{questionParams.value.question}</h4>\n\n          {questionParams.value.questionType == \"0\"\n            ? renderVoteText()\n            : renderVoteMultipleChoice()}\n        </div>\n      </div>\n      <div style={{ minWidth: \"17rem\" }}>\n        {questionsByCreator.length != 1 && (\n          <>\n            <div\n              className=\"d-flex\"\n              style={\n                shouldDisplayViewAll\n                  ? {\n                      justifyContent: \"space-between\",\n                      alignItems: \"center\",\n                    }\n                  : {\n                      justifyContent: \"flex-start\",\n                      alignItems: \"center\",\n                    }\n              }\n            >\n              <h5>Polls by creator ({questionsByThisCreator.length})</h5>\n\n              {shouldDisplayViewAll && (\n                <div style={{ margin: \"1rem 0\", textAlign: \"center\" }}>\n                  <p\n                    style={{\n                      color: \"#2346B1\",\n                      fontWeight: \"500\",\n                      fontSize: \"1rem\",\n                      margin: \"0\",\n                      cursor: \"pointer\",\n                    }}\n                    onClick={() => {\n                      State.update({ showQuestionsByThisUser: true });\n                    }}\n                  >\n                    View All <i className=\"bi bi-arrow-right\"></i>\n                  </p>\n                </div>\n              )}\n            </div>\n\n            <div\n              style={{\n                border: \"1px solid #ced4da\",\n                borderRadius: \"0.375rem\",\n                padding: \"0.5rem 1rem\",\n              }}\n            >\n              {renderQuestionsByThisCreator()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n    {state.showQuestionsByThisUser && renderModal()}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newVotingInterface"}