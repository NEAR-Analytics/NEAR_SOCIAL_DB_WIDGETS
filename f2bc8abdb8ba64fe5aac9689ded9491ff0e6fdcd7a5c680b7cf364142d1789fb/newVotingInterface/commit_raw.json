{"tx_hash": "EvA6Gs1CtX8Thj7g9fCFGhrKn1cvV4yiB1brLawSo6xK", "action_id_social": "5rTA2c2tdMjGG84ANz8KeyEk4HwA1WTmEL8ZPiLnFr1o-0-widget", "block_id": 80589545, "block_timestamp": "2022-12-13 23:05:43.032", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newVotingInterface", "source_code": "if (!props.isPreview && !props.blockHeight) {\r\n  return \"Prop block height wasn't provided\";\r\n}\r\n\r\nlet isPreview = props.isPreview ?? false;\r\nlet loopBraker = props.loopBraker;\r\n\r\nlet questionBlockHeight = Number(props.blockHeight);\r\nconst questions =\r\n  !props.previewInfo && Social.index(\"poll_question\", \"question-v3.0.1\");\r\nconst questionParams =\r\n  props.previewInfo ??\r\n  questions.find((q) => q.blockHeight == questionBlockHeight);\r\n\r\nlet profile = Social.getr(`${questionParams.accountId}/profile`);\r\n\r\nlet questionsByThisCreator = Social.index(\"poll_question\", \"question-v3.0.1\", {\r\n  accountId: questionParams.accountId,\r\n});\r\n\r\nif (!questions) {\r\n  return \"Loading...\";\r\n}\r\n\r\nfunction sliceString(string, newStringLenght) {\r\n  if (string.length > newStringLenght) {\r\n    return string.slice(0, newStringLenght) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction transformDateFormat(date) {\r\n  return new Date(date).toLocaleDateString();\r\n}\r\n\r\nState.init({\r\n  showQuestionsByThisUser: false,\r\n});\r\n\r\nconst widgetOwner = \"silkking.near\";\r\nconst renderVoteMultipleChoice = () => {\r\n  if (questionParams) {\r\n    return (\r\n      <Widget\r\n        src={`${widgetOwner}/widget/voteMultipleChoice`}\r\n        props={{\r\n          ...questionParams,\r\n          isPreview,\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return \"Invalid block height provided.\";\r\n  }\r\n};\r\n\r\nconst renderVoteText = () => {\r\n  return (\r\n    <Widget\r\n      src={`${widgetOwner}/widget/voteWithText`}\r\n      props={{ ...questionParams, isPreview }}\r\n    />\r\n  );\r\n};\r\n\r\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\r\n  // let questionParams = questions.find(q => q.blockHeight == questionBlockHeight)\r\n\r\n  const answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\r\n  const answersFromThisQuestion = answers.filter(\r\n    (a) => a.value.questionBlockHeight == questionBlockHeight\r\n  );\r\n  const usersWithAnswers = answersFromThisQuestion.map((a) => a.accountId);\r\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\r\n    (u, index) => usersWithAnswers.indexOf(u) == index\r\n  );\r\n  return usersWithAnswersWithoutDuplicates.length;\r\n}\r\n\r\nconst renderQuestionsByThisCreator = () => {\r\n  return questionsByThisCreator.map((questionByCreator, index) => {\r\n    let divStyle = index == 0 ? {} : { borderTop: \"1px solid #ced4da\" };\r\n    return (\r\n      <div style={divStyle}>\r\n        <p style={{ fontWeight: \"500\" }}>\r\n          {sliceString(questionByCreator.value.title, 20)}\r\n        </p>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary\">\r\n          <span>End date</span>\r\n          <span>\r\n            {transformDateFormat(questionByCreator.value.endTimestamp)}\r\n          </span>\r\n        </div>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary\">\r\n          <span>Votes</span>\r\n          <span>\r\n            ({getValidAnswersQtyFromQuestion(questionByCreator.blockHeight)})\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  console.log(\"n3\");\r\n  return (e) => {\r\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\r\n  };\r\n}\r\n\r\nconst renderModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        state.showQuestionsByThisUser && {\r\n          display: \"block\",\r\n          backgroundColor: \"#7e7e7e70\",\r\n        }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div\r\n        className=\"modal-dialog\"\r\n        style={{ maxWidth: \"100%\" }}\r\n        role=\"document\"\r\n      >\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              backgroundColor: \"white\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          >\r\n            <Widget\r\n              src={`${context.accountId}/widget/showQuestionsHandler`}\r\n              props={{ accountId: questionParams.accountId }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div\r\n    className=\"d-flex content-align-start justify-content-between\"\r\n    style={{ borderRadius: \"3px\", padding: \"2rem 3rem\" }}\r\n  >\r\n    <div style={{ width: \"75%\", marginRight: \"2rem\" }}>\r\n      <div className=\"d-flex\">\r\n        <span\r\n          style={{\r\n            backgroundColor:\r\n              questionParams.value.startTimestamp < Date.now() &&\r\n              questionParams.value.endTimestamp > Date.now()\r\n                ? \"rgb(153, 255, 153)\"\r\n                : \"rgb(255, 128, 128)\",\r\n\r\n            height: \"max-content\",\r\n            width: \"6rem\",\r\n            border: \"1px solid rgb(0, 82, 204)\",\r\n            textAlign: \"center\",\r\n            borderRadius: \"80px\",\r\n            marginRight: \"1rem\",\r\n          }}\r\n        >\r\n          {questionParams.value.startTimestamp < Date.now() &&\r\n          questionParams.value.endTimestamp > Date.now()\r\n            ? \"Active\"\r\n            : \"Closed\"}\r\n        </span>\r\n\r\n        {Date.now() < questionParams.value.endTimestamp && (\r\n          <span\r\n            style={{\r\n              paddingLeft: \"1.5rem\",\r\n              borderLeft: \"2px solid #ced4da\",\r\n            }}\r\n          >\r\n            Ends in\r\n            <Widget\r\n              src={`silkking.near/widget/timeAgo`}\r\n              props={{ timeInFuture: questionParams.value.endTimestamp }}\r\n            />\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      <h2>{questionParams.value.title}</h2>\r\n\r\n      <div className=\"d-flex\">\r\n        <span className=\"mr-3\" style={{ fontWeight: \"500\" }}>\r\n          Created by\r\n        </span>\r\n\r\n        <Widget\r\n          src=\"mob.near/widget/ProfileImage\"\r\n          props={{\r\n            profile,\r\n            question: questionParams.accountId,\r\n            className: \"float-start d-inline-block me-2\",\r\n            style: {\r\n              width: \"1.5rem\",\r\n              marginLeft: \"1rem\",\r\n            },\r\n          }}\r\n        />\r\n\r\n        <span style={{ fontWeigth: \"500\" }}>\r\n          {sliceString(questionParams.accountId, 18)}\r\n        </span>\r\n      </div>\r\n\r\n      <p>{questionParams.value.description}</p>\r\n\r\n      {questionParams.value.tgLink != \"\" &&\r\n        questionParams.value.tgLink != undefined && (\r\n          <h4>\r\n            Discussion link:\r\n            <a href={questionParams.value.tgLink}>\r\n              {questionParams.value.tgLink}\r\n            </a>\r\n          </h4>\r\n        )}\r\n\r\n      <div\r\n        style={{ border: \"1px solid #ced4da\", borderRadius: \"0.375rem\" }}\r\n        className=\"p-3 my-3\"\r\n      >\r\n        <h4>{questionParams.value.question}</h4>\r\n\r\n        {questionParams.value.questionType == \"0\"\r\n          ? renderVoteText()\r\n          : renderVoteMultipleChoice()}\r\n      </div>\r\n    </div>\r\n\r\n    <div style={{ minWidth: \"17rem\" }}>\r\n      <h5>Information</h5>\r\n      <div\r\n        className=\"mb-2\"\r\n        style={{\r\n          border: \"1px solid #ced4da\",\r\n          borderRadius: \"0.375rem\",\r\n          fontWeight: \"500\",\r\n          padding: \"0.5rem 1rem\",\r\n        }}\r\n      >\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Status</span>\r\n          <span>\r\n            {questionParams.value.startTimestamp < Date.now() &&\r\n            questionParams.value.endTimestamp > Date.now()\r\n              ? \"Active\"\r\n              : \"Closed\"}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Start date</span>\r\n          <span>\r\n            {transformDateFormat(questionParams.value.startTimestamp)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>End date</span>\r\n          <span>{transformDateFormat(questionParams.value.endTimestamp)}</span>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <span>Creator</span>\r\n          <span>{sliceString(questionParams.accountId, 8)}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {questionsByCreator.length != 1 && (\r\n        <>\r\n          <div className=\"d-flex\">\r\n            <h5>Polls by creator</h5>\r\n            <h5 style={{ marginLeft: \"0.5rem\" }}>\r\n              ({questionsByThisCreator.length})\r\n            </h5>\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              border: \"1px solid #ced4da\",\r\n              borderRadius: \"0.375rem\",\r\n              padding: \"0.5rem 1rem\",\r\n            }}\r\n          >\r\n            {renderQuestionsByThisCreator()}\r\n            {loopBraker != \"brake\" && (\r\n              <div style={{ margin: \"1rem 0\", textAlign: \"center\" }}>\r\n                <button\r\n                  className=\"btn btn-outline-primary w-75\"\r\n                  onClick={() => {\r\n                    State.update({ showQuestionsByThisUser: true });\r\n                  }}\r\n                >\r\n                  View all\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n    {renderModal()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newVotingInterface"}