{"tx_hash": "FRkoNdP8sWamg5Ugq4LPj8atAqdaSEUYfNJoF6CGPE2K", "action_id_social": "6ZVAaCKvgZiZKZpqPWsNoEpmyH3C2uHtn1hZP2kCY8hW-0-widget", "block_id": 81668086, "block_timestamp": "2022-12-28 18:47:40.649", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "newVotingInterface", "source_code": "if (!props.isPreview && !props.blockHeight) {\r\n  return \"Prop block height wasn't provided\";\r\n}\r\n\r\nlet isPreview = props.isPreview ?? false;\r\nlet shouldDisplayViewAll = props.shouldDisplayViewAll;\r\n\r\nlet questionBlockHeight = Number(props.blockHeight);\r\nconst questions =\r\n  !props.previewInfo && Social.index(\"poll_question\", \"question-v3.0.1\");\r\nif (!questions) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst questionParams =\r\n  props.previewInfo ??\r\n  questions.find((q) => q.blockHeight == questionBlockHeight);\r\n\r\nlet profile = Social.getr(`${questionParams.accountId}/profile`);\r\n// if (!profile) {\r\n//   return \"Loading\";\r\n// }\r\n\r\nlet questionsByThisCreator = Social.index(\"poll_question\", \"question-v3.0.1\", {\r\n  accountId: questionParams.accountId,\r\n});\r\nif (!questionsByThisCreator) {\r\n  return \"Loading\";\r\n}\r\n\r\nif (!questionParams && !isPreview) {\r\n  return \"Loading...\";\r\n}\r\n\r\nfunction sliceString(string, newStringLength) {\r\n  if (string.length > newStringLength) {\r\n    return string.slice(0, newStringLength) + \"...\";\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction transformDateFormat(date) {\r\n  return new Date(date).toLocaleDateString();\r\n}\r\n\r\nfunction isQuestionActive(question) {\r\n  return (\r\n    question.value.startTimestamp < Date.now() &&\r\n    Date.now() < question.value.endTimestamp\r\n  );\r\n}\r\n\r\nState.init({\r\n  showQuestionsByThisUser: false,\r\n  descriptionHeightLimited: true,\r\n});\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\nconst renderVoteMultipleChoice = () => {\r\n  if (questionParams) {\r\n    return (\r\n      <Widget\r\n        src={`${widgetOwner}/widget/voteMultipleChoice`}\r\n        props={{\r\n          ...questionParams,\r\n          isPreview,\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return \"Invalid block height provided.\";\r\n  }\r\n};\r\n\r\nconst renderVoteText = () => {\r\n  return (\r\n    <Widget\r\n      src={`${widgetOwner}/widget/voteWithText`}\r\n      props={{ ...questionParams, isPreview }}\r\n    />\r\n  );\r\n};\r\n\r\nfunction getValidAnswersQtyFromQuestion(questionBlockHeight) {\r\n  // let questionParams = questions.find(q => q.blockHeight == questionBlockHeight)\r\n\r\n  const answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\r\n  if (!answers) {\r\n    return \"Loading\";\r\n  }\r\n  const answersFromThisQuestion = answers.filter(\r\n    (a) => a.value.questionBlockHeight == questionBlockHeight\r\n  );\r\n  const usersWithAnswers = answersFromThisQuestion.map((a) => a.accountId);\r\n  const usersWithAnswersWithoutDuplicates = usersWithAnswers.filter(\r\n    (u, index) => usersWithAnswers.indexOf(u) == index\r\n  );\r\n  return usersWithAnswersWithoutDuplicates.length;\r\n}\r\n\r\nconst renderQuestionsByThisCreator = () => {\r\n  //TODO show only the 2 more recent polls\r\n  return questionsByThisCreator.map((questionByCreator, index) => {\r\n    console.log(questionByCreator);\r\n    let divStyle =\r\n      index == 0\r\n        ? {}\r\n        : { backGroundColor: \"white\", borderTop: \"1px solid #ced4da\" };\r\n    return (\r\n      <div style={divStyle}>\r\n        <p style={{ fontWeight: \"500\" }}>\r\n          {sliceString(questionByCreator.value.title, 20)}\r\n        </p>\r\n        <div className=\"d-flex justify-content-between flex-nowrap text-secondary mb-2\">\r\n          <div>\r\n            <i className=\"bi bi-people\"></i>\r\n            <span>\r\n              {getValidAnswersQtyFromQuestion(questionByCreator.blockHeight)}\r\n            </span>\r\n          </div>\r\n          <span>\r\n            Ends\r\n            <Widget\r\n              src={`silkking.near/widget/timeAgo`}\r\n              props={{ timeInFuture: questionByCreator.value.endTimestamp }}\r\n            />\r\n          </span>\r\n          <span\r\n            style={{\r\n              backgroundColor: isQuestionActive(questionByCreator)\r\n                ? \"#D9FCEF\"\r\n                : \"#FFE5E5\",\r\n\r\n              height: \"1.5rem\",\r\n              width: \"4rem\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"16px\",\r\n              marginRight: \"1rem\",\r\n              lineHeight: \"1.5rem\",\r\n              fontSize: \"0.8rem\",\r\n              letterSpacing: \"-0.025rem\",\r\n              color: isQuestionActive(questionByCreator)\r\n                ? \"#00B37D\"\r\n                : \"#FF4747\",\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            {isQuestionActive(questionByCreator) ? \"Active\" : \"Closed\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  return (e) => {\r\n    e.target.id == \"modal\" && State.update({ showQuestionsByThisUser: false });\r\n  };\r\n}\r\n\r\nconst renderModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        state.showQuestionsByThisUser && {\r\n          display: \"block\",\r\n          backgroundColor: \"#7e7e7e70\",\r\n        }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div\r\n        className=\"modal-dialog\"\r\n        style={{ maxWidth: \"100%\" }}\r\n        role=\"document\"\r\n      >\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          >\r\n            <Widget\r\n              src={`${widgetOwner}/widget/showQuestionsHandler`}\r\n              props={{ accountId: questionParams.accountId }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() => State.update({ showQuestionsByThisUser: false })}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction showDescription(description) {\r\n  if (state.descriptionHeightLimited && description.length > 501) {\r\n    return description.slice(0, 500) + \"...\";\r\n  } else {\r\n    return description;\r\n  }\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <div\r\n      className=\"d-flex content-align-start justify-content-between\"\r\n      style={{ borderRadius: \"3px\", padding: \"2rem 3rem\" }}\r\n    >\r\n      <div style={{ width: \"75%\", marginRight: \"2rem\" }}>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div className=\"d-flex\">\r\n            <Widget\r\n              src=\"mob.near/widget/ProfileImage\"\r\n              props={{\r\n                profile,\r\n                question: questionParams.accountId,\r\n                className: \"float-start d-inline-block me-2\",\r\n                style: {\r\n                  width: \"3.5rem\",\r\n                  aspectRatio: \"1\",\r\n                  marginLeft: \"1rem\",\r\n                  borderRadius: \"100%\",\r\n                  overflow: \"hidden\",\r\n                },\r\n              }}\r\n            />\r\n            <div>\r\n              <span className=\"mr-3\" style={{ fontWeight: \"300\" }}>\r\n                Created by\r\n              </span>\r\n              <span style={{ fontWeight: \"500\" }}>\r\n                {sliceString(questionParams.accountId, 18)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {Date.now() < questionParams.value.endTimestamp && (\r\n            <>\r\n              <span>\r\n                Start{\" \"}\r\n                {new Date(\r\n                  questionParams.value.startTimestamp\r\n                ).toLocaleDateString()}\r\n              </span>\r\n\r\n              <span\r\n                style={{\r\n                  paddingLeft: \"1.5rem\",\r\n                  borderLeft: \"2px solid #ced4da\",\r\n                  height: \"max-content\",\r\n                }}\r\n              >\r\n                Ends\r\n                <Widget\r\n                  src={`silkking.near/widget/timeAgo`}\r\n                  props={{ timeInFuture: questionParams.value.endTimestamp }}\r\n                />\r\n              </span>\r\n            </>\r\n          )}\r\n          <span\r\n            style={{\r\n              backgroundColor: isQuestionActive(questionParams)\r\n                ? \"#D9FCEF\"\r\n                : \"#FFE5E5\",\r\n\r\n              height: \"2.1rem\",\r\n              width: \"5rem\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"16px\",\r\n              marginRight: \"1rem\",\r\n              lineHeight: \"1.9rem\",\r\n              fontSize: \"1rem\",\r\n              letterSpacing: \"-0.025rem\",\r\n              color: isQuestionActive(questionParams) ? \"#00B37D\" : \"#FF4747\",\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            {isQuestionActive(questionParams) ? \"Active\" : \"Closed\"}\r\n          </span>\r\n        </div>\r\n        <div className=\"d-flex my-3\">\r\n          <div\r\n            style={{\r\n              height: \"inherit\",\r\n              backgroundColor: \"#AAC8F7\",\r\n              width: \"0.5rem\",\r\n              minWidth: \"5px\",\r\n              marginRight: \"0.5rem\",\r\n              borderRadius: \"8px\",\r\n            }}\r\n          >\r\n            {/*Decorative div, do not delete*/}\r\n          </div>\r\n          <h2\r\n            style={{\r\n              fontWeight: \"700\",\r\n              fontSize: \"2rem\",\r\n              letterSpacing: \"0.1px\",\r\n              color: \"#010A2D\",\r\n              wordWrap: \"anywhere\",\r\n            }}\r\n          >\r\n            {questionParams.value.title}\r\n          </h2>\r\n        </div>\r\n\r\n        <div\r\n          className=\"p-3\"\r\n          style={{\r\n            position: \"relative\",\r\n            border: \"1.5px solid rgb(206, 212, 218)\",\r\n            borderRadius: \"24px\",\r\n            wordWrap: \"anywhere\",\r\n          }}\r\n        >\r\n          <h3\r\n            style={{\r\n              fontWeight: \"700\",\r\n              fontSize: \"1.2rem\",\r\n              marginBottom: \"1.2rem\",\r\n            }}\r\n          >\r\n            Description\r\n          </h3>\r\n          <p style={{ fontSize: \"0.9rem\" }}>\r\n            {showDescription(questionParams.value.description)}\r\n          </p>\r\n          {questionParams.value.description.length > 501 &&\r\n          !state.descriptionHeightLimited ? (\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                bottom: \"-1.125rem\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                marginRight: \"auto\",\r\n                marginLeft: \"auto\",\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              <h4\r\n                style={{\r\n                  fontSize: \"1.2rem\",\r\n                  display: \"inline-block\",\r\n                  backgroundColor: \"white\",\r\n                  padding: \"0 1rem\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => State.update({ descriptionHeightLimited: true })}\r\n              >\r\n                Show less <i className=\"bi bi-arrow-up\"></i>\r\n              </h4>\r\n            </div>\r\n          ) : (\r\n            questionParams.value.description.length > 501 && (\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  bottom: \"-1.125rem\",\r\n                  left: \"0\",\r\n                  right: \"0\",\r\n                  marginRight: \"auto\",\r\n                  marginLeft: \"auto\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <h4\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    display: \"inline-block\",\r\n                    backgroundColor: \"white\",\r\n                    padding: \"0 1rem\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() =>\r\n                    State.update({ descriptionHeightLimited: false })\r\n                  }\r\n                >\r\n                  Show more <i className=\"bi bi-arrow-down\"></i>\r\n                </h4>\r\n              </div>\r\n            )\r\n          )}\r\n        </div>\r\n\r\n        {questionParams.value.tgLink != \"\" &&\r\n          questionParams.value.tgLink != undefined && (\r\n            <div\r\n              className=\"mt-3 d-flex justify-content-between\"\r\n              style={{\r\n                border: \"1.5px solid #D4E5FB\",\r\n                padding: \"1.2rem 1.7rem\",\r\n                borderRadius: \"24px\",\r\n              }}\r\n            >\r\n              <div className=\"d-flex\">\r\n                <i\r\n                  className=\"bi bi-people d-flex align-items-center justify-content-center\"\r\n                  style={{\r\n                    height: \"100%\",\r\n                    aspectRatio: \"1\",\r\n                    backgroundColor: \"#2F5BCF\",\r\n                    borderRadius: \"14px\",\r\n                    marginRight: \"1rem\",\r\n                    color: \"white\",\r\n                  }}\r\n                ></i>\r\n                <div>\r\n                  <p\r\n                    className=\"m-0\"\r\n                    style={{\r\n                      color: \"#2F5BCF\",\r\n                      fontWeight: \"500\",\r\n                      fontSize: \"0.7rem\",\r\n                    }}\r\n                  >\r\n                    Discussion link\r\n                  </p>\r\n                  <h6>\r\n                    <a\r\n                      style={{ color: \"#2346B1\" }}\r\n                      href={questionParams.value.tgLink}\r\n                    >\r\n                      {sliceString(questionParams.value.tgLink, 30)}\r\n                    </a>\r\n                  </h6>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex align-items-center\">\r\n                <a\r\n                  target=\"_blank\"\r\n                  href={questionParams.value.tgLink}\r\n                  style={{ userSelect: \"none\" }}\r\n                >\r\n                  <i\r\n                    className=\"bi bi-box-arrow-up-right\"\r\n                    style={{\r\n                      color: \"#2F5BCF\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  ></i>\r\n                </a>\r\n                <i\r\n                  className=\"bi bi-clipboard\"\r\n                  style={{\r\n                    userSelect: \"none\",\r\n                    color: \"#2F5BCF\",\r\n                    cursor: \"pointer\",\r\n                    marginLeft: \"0.8rem\",\r\n                  }}\r\n                  onClick={() =>\r\n                    clipboard.writeText(questionParams.value.tgLink)\r\n                  }\r\n                ></i>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n        <div\r\n          style={{\r\n            border: \"1.5px solid rgb(206, 212, 218)\",\r\n            borderRadius: \"24px\",\r\n          }}\r\n          className=\"p-3 my-3\"\r\n        >\r\n          <h4>{questionParams.value.question}</h4>\r\n\r\n          {questionParams.value.questionType == \"0\"\r\n            ? renderVoteText()\r\n            : renderVoteMultipleChoice()}\r\n        </div>\r\n      </div>\r\n      <div style={{ minWidth: \"17rem\" }}>\r\n        {/*<h5>Information</h5>\r\n        <div\r\n          className=\"mb-2\"\r\n          style={{\r\n            border: \"1px solid #ced4da\",\r\n            borderRadius: \"0.375rem\",\r\n            fontWeight: \"500\",\r\n            padding: \"0.5rem 1rem\",\r\n          }}\r\n        >\r\n          <div className=\"d-flex justify-content-between\">\r\n            <span>Status</span>\r\n            <span>{isQuestionActive(questionParams) ? \"Active\" : \"Closed\"}</span>\r\n          </div>\r\n\r\n          <div className=\"d-flex justify-content-between\">\r\n            <span>Start date</span>\r\n            <span>\r\n              {transformDateFormat(questionParams.value.startTimestamp)}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"d-flex justify-content-between\">\r\n            <span>End date</span>\r\n            <span>\r\n              {transformDateFormat(questionParams.value.endTimestamp)}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"d-flex justify-content-between\">\r\n            <span>Creator</span>\r\n            <span>{sliceString(questionParams.accountId, 8)}</span>\r\n          </div>\r\n        </div>*/}\r\n\r\n        {questionsByCreator.length != 1 && (\r\n          <>\r\n            <div\r\n              className=\"d-flex\"\r\n              style={\r\n                shouldDisplayViewAll\r\n                  ? {\r\n                      justifyContent: \"space-between\",\r\n                      alignItems: \"center\",\r\n                    }\r\n                  : {\r\n                      justifyContent: \"flex-start\",\r\n                      alignItems: \"center\",\r\n                    }\r\n              }\r\n            >\r\n              <h5>Polls by creator ({questionsByThisCreator.length})</h5>\r\n\r\n              {shouldDisplayViewAll && (\r\n                <div style={{ margin: \"1rem 0\", textAlign: \"center\" }}>\r\n                  <p\r\n                    style={{\r\n                      color: \"#2346B1\",\r\n                      fontWeight: \"500\",\r\n                      fontSize: \"1rem\",\r\n                      margin: \"0\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      State.update({ showQuestionsByThisUser: true });\r\n                    }}\r\n                  >\r\n                    View All <i className=\"bi bi-arrow-right\"></i>\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div\r\n              style={{\r\n                border: \"1px solid #ced4da\",\r\n                borderRadius: \"0.375rem\",\r\n                padding: \"0.5rem 1rem\",\r\n              }}\r\n            >\r\n              {renderQuestionsByThisCreator()}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n    {state.showQuestionsByThisUser && renderModal()}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/newVotingInterface"}