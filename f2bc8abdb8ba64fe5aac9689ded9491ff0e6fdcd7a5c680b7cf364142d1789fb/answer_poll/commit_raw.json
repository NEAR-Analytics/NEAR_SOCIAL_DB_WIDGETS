{"tx_hash": "J31AVhNi35WjKsgLw7DGw1DEYs5aFqVhshVvTGkQTbug", "action_id_social": "8pjSC9BWPXrhUoYCdyy58Mn29oWAfntBtyJ16FEWYRSr-0-widget", "block_id": 80071559, "block_timestamp": "2022-12-06 22:38:52.004", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "answer_poll", "source_code": "//I\u00b4m using the ?? with example data to make it visible to all users without setting props\n//I need questionBockHeight to be a string but .toString() is reserved so i convert the number into string like this\nconst questionBlockHeight = props.questionBlockHeight + \"\" ?? 79932918;\nconst userMakingQuestion =\n  props.accountId ??\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\nconst question = props.question ?? \"Testing multiple choice\";\nconst questionTimestamp = props.questionTimestamp ?? 1670201835360;\nconst questionType = props.questionType ?? \"2\";\nconst choicesOptions = props.choicesOptions ?? [\"a\", \"b\", \"c\"];\n\nconst currentAccountId = context.accountId;\n\nconst profile = Social.getr(`${userMakingQuestion}/profile`);\n\nState.init({\n  currentAnswer: \"\",\n  answersData: [{}],\n});\n\nlet answersData = Social.index(\"answer_poll\", questionBlockHeight);\n\nif (JSON.stringify(answersData) !== JSON.stringify(state.answersData)) {\n  State.update({ answersData: answersData });\n}\n\nconst profileLink = (c) => (\n  <a\n    className=\"text-decoration-none link-dark\"\n    href={`#/mob.near/widget/ProfilePage?accountId=${userMakingQuestion}`}\n  >\n    {c}\n  </a>\n);\n\nlet countVotes = [];\n\nif (questionType == \"0\") {\n  countVotes = [0, 0];\n} else if (questionType == \"2\") {\n  for (let i = 0; i < choicesOptions.length; i++) {\n    countVotes.push(0);\n  }\n}\n\nif (state.answersData) {\n  if (questionType == \"0\") {\n    countVotes = state.answersData.reduce(\n      (acc, curr) => {\n        let vote = curr.value.user_answer;\n\n        let voteValue = parseInt(vote);\n\n        if (isNaN(voteValue)) {\n          return acc;\n        } else if (voteValue == 0) {\n          return [acc[0], acc[1] + 1];\n        } else {\n          return [acc[0] + 1, acc[1]];\n        }\n      },\n\n      [0, 0]\n    );\n  } else if (questionType == \"2\") {\n    let emptyArray = [];\n    for (let i = 0; i < choicesOptions.length; i++) {\n      emptyArray.push(0);\n    }\n\n    countVotes = state.answersData.reduce((acc, curr) => {\n      let vote = curr.value.user_answer;\n\n      let voteValue = parseInt(vote);\n\n      if (isNaN(voteValue)) {\n        return acc;\n      } else {\n        acc[voteValue] += 1;\n        return acc;\n      }\n    }, emptyArray);\n  }\n}\n\nconst haveThisUserAlreadyVoted = () => {\n  if (state.answersData.length == 0) {\n    return false;\n  }\n  for (let i = 0; i < state.answersData.length; i++) {\n    return state.answersData[i].accountId == currentAccountId;\n  }\n};\n\nconst loadComments = () => {\n  return state.answersData.map((answerData) => {\n    let answer = answerData.value.user_answer;\n\n    let answerTimeStamp = answerData.value.answer_timestamp;\n\n    if (answer != undefined) {\n      return (\n        <Widget\n          src=\"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/answer_poll-comment-container\"\n          props={{\n            answer: answer,\n            answerTimeStamp: answerTimeStamp,\n            userName: answerData.accountId,\n          }}\n        />\n      );\n    }\n  });\n};\n\nconst renderYesNoInputs = () => {\n  return (\n    <>\n      <p style={{ marginBottom: \"0\" }}>Vote:</p>\n      <div className=\"form-check\">\n        <input\n          key={state.currentAnswer}\n          className=\"form-check-input\"\n          type=\"radio\"\n          name=\"flexRadioDefault\"\n          id=\"voteYes\"\n          value=\"1\"\n          onChange={onValueChange}\n          checked={state.currentAnswer == \"1\"}\n        />\n        <label className=\"form-check-label\" for=\"voteYes\">\n          Yes\n        </label>\n      </div>\n      <div className=\"form-check\">\n        <input\n          key={state.currentAnswer}\n          className=\"form-check-input\"\n          type=\"radio\"\n          name=\"flexRadioDefault\"\n          id=\"voteNo\"\n          value=\"0\"\n          onChange={onValueChange}\n          checked={state.currentAnswer == \"0\"}\n        />\n        <label className=\"form-check-label\" for=\"voteNo\">\n          No\n        </label>\n      </div>\n    </>\n  );\n};\n\nconst renderTextinput = () => {\n  return (\n    <>\n      <label for=\"answer\" className=\"font-weight-bold\">\n        Write answer:\n      </label>\n      <textarea\n        className=\"form-control mb-1\"\n        id=\"answer\"\n        rows=\"3\"\n        value={state.currentAnswer}\n        onChange={onValueChange}\n      ></textarea>\n    </>\n  );\n};\n\nconst renderMultipleChoiceInputs = () => {\n  return choicesOptions.map((choice, index) => {\n    return (\n      <>\n        <div className=\"form-check\">\n          <input\n            key={state.currentAnswer}\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"flexRadioDefault\"\n            id={choice + index}\n            value={index + \"\"}\n            onChange={onValueChange}\n            checked={state.currentAnswer == index + \"\"}\n          />\n          <label className=\"form-check-label\" for={choice + index}>\n            {choice}\n          </label>\n        </div>\n      </>\n    );\n  });\n};\n\nconst getForm = () => {\n  return (\n    <div\n      style={{\n        border: \"1px solid #e9e9e9\",\n        borderRadius: \"20px\",\n        padding: \"1rem\",\n      }}\n    >\n      <h5>Give your opinion</h5>\n      <div className=\"form-group\">\n        {questionType == \"0\"\n          ? renderYesNoInputs()\n          : questionType == \"1\"\n          ? renderTextinput()\n          : questionType == \"2\" && renderMultipleChoiceInputs()}\n      </div>\n      <CommitButton\n        data={{\n          index: {\n            answer_poll: JSON.stringify({\n              key: questionBlockHeight,\n              value: {\n                user_answer:\n                  state.currentAnswer == \"\"\n                    ? answer.userVote\n                    : state.currentAnswer,\n                amountOfChoices: choicesOptions.length,\n                answer_timestamp: Date.now(),\n              },\n            }),\n          },\n        }}\n      >\n        Confirm\n      </CommitButton>\n    </div>\n  );\n};\n\nfunction onValueChange(e) {\n  const currentAnswer = e.target.value;\n\n  State.update({ currentAnswer: currentAnswer });\n}\n\nconst renderYesNoCounter = () => {\n  return (\n    <div className=\"d-flex align-items-start\">\n      <i\n        className=\"bi bi-check-circle-fill\"\n        style={{ padding: \"0 0.3rem\" }}\n      ></i>\n      <p className=\"text-secondary\">{countVotes[0]}</p>\n      <i\n        className=\"bi bi-x-octagon-fill\"\n        style={{ padding: \"0 0.5rem 0 1rem\" }}\n      ></i>\n      <p className=\"text-secondary\">{countVotes[1]}</p>\n    </div>\n  );\n};\n\nfunction getPercentageOfVotes(index) {\n  let votesForThisOption = countVotes[index];\n  let amountOfvotes = answersData.length;\n\n  if (amountOfvotes == 0) {\n    return 0;\n  } else {\n    return (votesForThisOption / amountOfvotes) * 100;\n  }\n}\n\nconst renderChoicesSelectedCounter = () => {\n  return choicesOptions.map((choice, index) => {\n    let percentageOfVotes = getPercentageOfVotes(index);\n    return (\n      <div className=\"mx-3 d-flex align-items-center justify-content-between\">\n        <span\n          style={{\n            border: \"1px solid #e9e9e9\",\n            borderRadius: \"20px\",\n            padding: \"1rem\",\n            marginRight: \"1rem\",\n            marginTop: \"0.2rem\",\n            marginBottom: \"0.2rem\",\n            width: \"100%\",\n          }}\n        >\n          {choice}\n        </span>\n        <span style={{ width: \"40px\", textAlign: \"center\" }}>\n          %{percentageOfVotes}\n        </span>\n      </div>\n    );\n  });\n};\n\nconst timeAgo = (diffSec) =>\n  diffSec < 60000\n    ? `${(diffSec / 1000) | 0} seconds ago`\n    : diffSec < 3600000\n    ? `${(diffSec / 60000) | 0} minutes ago`\n    : diffSec < 86400000\n    ? `${(diffSec / 3600000) | 0} hours ago`\n    : `${(diffSec / 86400000) | 0} days ago`;\n\nreturn (\n  <div style={{ maxWidth: \"40em\" }}>\n    <div\n      className=\"d-flex align-items-start\"\n      style={{\n        padding: \"1.5rem 0\",\n        borderBottom: \"1px solid #e9e9e9\",\n      }}\n    >\n      <div>\n        {profileLink(\n          <a\n            className=\"text-decoration-none\"\n            //Check how href is done in memes widget of mob.near\n            href={`#`}\n          >\n            <Widget src=\"mob.near/widget/ProfileImage\" props={{ accountId }} />\n          </a>\n        )}\n      </div>\n      <div className=\"ms-2 flex-grow-1\" style={{ minWidth: 0 }}>\n        <div className=\"d-flex justify-content-start\">\n          <div className=\"flex-grow-1 me-1 text-truncate\">\n            {profileLink(\n              <>\n                <span className=\"fw-bold\">{profile.name}</span>\n                <span className=\"text-secondary\">@{accountId}</span>\n              </>\n            )}\n          </div>\n          <div>\n            <small className=\"ps-1 text-nowrap text-muted ms-auto\">\n              <i className=\"bi bi-clock me-1\"></i>\n              {timeAgo(Date.now() - questionTimestamp)}\n            </small>\n          </div>\n        </div>\n        <div>{question}</div>\n        <>\n          {questionType == \"0\"\n            ? renderYesNoCounter()\n            : questionType == \"1\"\n            ? loadComments()\n            : questionType == \"2\" && renderChoicesSelectedCounter()}\n        </>\n        <>{getForm()}</>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/answer_poll"}