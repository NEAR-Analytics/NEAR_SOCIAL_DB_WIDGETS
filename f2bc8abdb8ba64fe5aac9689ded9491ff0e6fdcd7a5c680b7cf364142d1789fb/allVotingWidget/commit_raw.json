{"tx_hash": "DNbu3D1UnhQHP2eHWyKFXXnW8hjwzV7GcprNnZy3v2Lt", "action_id_social": "HTNxH92gR7jAHJpNVK8zoXe7oo5JKwYYvGJHJUdhpA7T-0-widget", "block_id": 83788887, "block_timestamp": "2023-01-25 21:21:25.025", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "allVotingWidget", "source_code": "if (!props.isPreview && !props.poll) {\r\n  return \"Property poll not set\";\r\n}\r\n\r\nconst isPreview = props.isPreview ?? false;\r\n\r\nlet widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n\r\n// Getting question\r\nconst poll = props.poll;\r\n\r\nlet defaultVotes = [];\r\nfor (let i = 0; i < poll.value.questions.length; i++) {\r\n  if (poll.value.questions[i].questionType == \"2\") {\r\n    defaultVotes.push([\"\"]);\r\n  } else {\r\n    defaultVotes.push(\"\");\r\n  }\r\n}\r\n\r\nState.init({\r\n  vote: userVote ?? defaultVotes,\r\n  answers: {},\r\n  showErrorsInForm: false,\r\n  hoveringElement: \"\",\r\n  justVoted: false,\r\n});\r\n\r\nlet bgBlue = \"#96C0FF\";\r\nlet bgRed = \"#FFB4B4\";\r\nlet bgYellow = \"#FFE999\";\r\nlet bgPurple = \"#E6C0FF\";\r\nlet bgGreen = \"#96FFE0\";\r\nlet bgPink = \"#FF96B9\";\r\nlet bgSkyBlue = \"#96EAFF\";\r\nlet bgIndigo = \"#96DCD2\";\r\n\r\nlet allBgColors = [\r\n  bgBlue,\r\n  bgRed,\r\n  bgYellow,\r\n  bgPurple,\r\n  bgGreen,\r\n  bgPink,\r\n  bgSkyBlue,\r\n  bgIndigo,\r\n];\r\n\r\nlet secondaryBgBlue = \"#E6F0FF\";\r\nlet secondaryBgRed = \"#FFEDED\";\r\nlet secondaryBgYellow = \"#FFFAE6\";\r\nlet secondaryBgPurple = \"#F9F0FF\";\r\nlet secondaryBgGreen = \"#E6FFF7\";\r\nlet secondaryBgPink = \"#FFE6EE\";\r\nlet secondaryBgSkyBlue = \"#E6FAFF\";\r\nlet secondaryBgIndigo = \"#E6F6F4\";\r\n\r\nlet allSecondaryBgColors = [\r\n  secondaryBgBlue,\r\n  secondaryBgRed,\r\n  secondaryBgYellow,\r\n  secondaryBgPurple,\r\n  secondaryBgGreen,\r\n  secondaryBgPink,\r\n  secondaryBgSkyBlue,\r\n  secondaryBgIndigo,\r\n];\r\n\r\nlet fontColorBlue = \"#003E9C\";\r\nlet fontColorRed = \"#9C2B2B\";\r\nlet fontColorYellow = \"#9C7B03\";\r\nlet fontColorPurple = \"#763E9C\";\r\nlet fontColorGreen = \"#009C6D\";\r\nlet fontColorPink = \"#9C0034\";\r\nlet fontColorSkyBlue = \"#007C9C\";\r\nlet fontColorIndigo = \"#006758\";\r\n\r\nlet allFontColors = [\r\n  fontColorBlue,\r\n  fontColorRed,\r\n  fontColorYellow,\r\n  fontColorPurple,\r\n  fontColorGreen,\r\n  fontColorPink,\r\n  fontColorSkyBlue,\r\n  fontColorIndigo,\r\n];\r\n\r\nlet secondaryColor = \"#E9EBF8\";\r\n\r\nfunction getBgColor(index, isPrimary) {\r\n  let allColorsOfThisType =\r\n    state.vote != `${index}` && isPrimary ? allBgColors : allSecondaryBgColors;\r\n\r\n  return Number.isInteger((index + 1) / allColorsOfThisType.length)\r\n    ? allColorsOfThisType[0]\r\n    : allColorsOfThisType[\r\n        ((index + 1) / allColorsOfThisType.length -\r\n          Math.trunc((index + 1) / allColorsOfThisType.length)) *\r\n          allColorsOfThisType.length -\r\n          1\r\n      ];\r\n}\r\n\r\nfunction getFontColor(index) {\r\n  return Number.isInteger((index + 1) / allFontColors.length)\r\n    ? allFontColors[0]\r\n    : allFontColors[\r\n        ((index + 1) / allFontColors.length -\r\n          Math.trunc((index + 1) / allFontColors.length)) *\r\n          allFontColors.length -\r\n          1\r\n      ];\r\n}\r\n\r\nfunction getInputStyles(questionType, questionNumber, optionNumber) {\r\n  if (questionType == \"2\") {\r\n    return state.vote[questionNumber].includes(optionNumber + \"\")\r\n      ? {\r\n          borderColor: \"black\",\r\n          backgroundColor: \"black\",\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        }\r\n      : {\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        };\r\n  } else {\r\n    return optionNumber + \"\" == state.vote[questionNumber]\r\n      ? {\r\n          borderColor: \"black\",\r\n          backgroundColor: \"black\",\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        }\r\n      : {\r\n          width: \"1rem\",\r\n          marginRight: \"0.7rem\",\r\n        };\r\n  }\r\n}\r\n\r\n// Utility function\r\nfunction getBlockTimestamp(blockHeight) {\r\n  // It is stored in nanoseconds which is 1e-6 miliseconds\r\n  return Near.block(blockHeight).header.timestamp / 1e6;\r\n}\r\n\r\n// Discards answers that were posted after question's end date\r\nfunction getTimeRelatedValidAnswers(answers) {\r\n  let low = 0;\r\n  let high = answers.length - 1;\r\n  const questionEndTimestamp = poll.value.endTimestamp;\r\n  let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\r\n  if (endBlockTimestamp < questionEndTimestamp) return answers;\r\n  // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\r\n  let tries = 10;\r\n  while (high - low > 1 && tries > 0) {\r\n    tries--;\r\n    let curr = Math.floor((high - low) / 2) + low;\r\n    let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\r\n    if (currBlockTimestamp < questionEndTimestamp) {\r\n      low = curr;\r\n    } else {\r\n      high = curr;\r\n    }\r\n  }\r\n  // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\r\n  return answers.slice(0, high);\r\n}\r\n\r\nfunction getOptionRelatedValidAnswers(answers) {\r\n  return answers.filter((a) => {\r\n    const userAnswers = a.value.answer;\r\n    return userAnswers.every((an, i) => {\r\n      // If has choicesOptions, then it's needs validation answer is among the options. If not, any answer is just fine\r\n      if (poll.value.questions[i].choicesOptions.length > 0) {\r\n        if (Array.isArray(an)) {\r\n          return an.every(\r\n            (ans) =>\r\n              0 <= Number(ans) &&\r\n              Number(ans) < poll.value.questions[i].choicesOptions.length\r\n          );\r\n        } else {\r\n          return (\r\n            0 <= Number(an) &&\r\n            Number(an) < poll.value.questions[i].choicesOptions.length\r\n          );\r\n        }\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getValidAnswers() {\r\n  let validTimeAnswers = getTimeRelatedValidAnswers(answersToThisPoll);\r\n  let validOptionAndTimeAnswers =\r\n    getOptionRelatedValidAnswers(validTimeAnswers);\r\n  return validOptionAndTimeAnswers;\r\n}\r\n\r\n// Getting valid answers\r\nconst answers = Social.index(\"poll_question\", \"answer-v3.1.0\");\r\n\r\nif (JSON.stringify(answers) != JSON.stringify(state.answers)) {\r\n  State.update({ answers: answers });\r\n}\r\n\r\nif (!state.answers) {\r\n  return \"Loading\";\r\n}\r\nconst answersToThisPoll = state.answers.filter(\r\n  (a) => a.value.questionBlockHeight == props.poll.blockHeight\r\n);\r\nconst validAnswersToThisPoll = getValidAnswers(answersToThisPoll);\r\n\r\nlet userVote;\r\n// Getting if user has already voted\r\nconst currAccountId = context.accountId ?? \"\";\r\nfunction userHasVoted() {\r\n  return (\r\n    validAnswersToThisPoll.find((a) => a.accountId == currAccountId) !=\r\n    undefined\r\n  );\r\n}\r\n\r\nlet hasVoted = userHasVoted();\r\n\r\nconst isQuestionOpen =\r\n  poll.value.startTimestamp < Date.now() &&\r\n  Date.now() < poll.value.endTimestamp;\r\nconst canVote = !hasVoted && isQuestionOpen;\r\n\r\n// Counting votes to display\r\nfunction countVotes(questionNumber, questionType) {\r\n  if (questionType == \"3\") return;\r\n  return validAnswersToThisPoll.reduce((acc, curr) => {\r\n    let ans = curr.value.answer[questionNumber];\r\n    if (Array.isArray(ans)) {\r\n      ans.forEach((a) => {\r\n        acc[Number(a)] += 1;\r\n      });\r\n    } else {\r\n      acc[Number(ans)] += 1;\r\n    }\r\n\r\n    return acc;\r\n  }, new Array(poll.value.questions[questionNumber].choicesOptions.length).fill(0));\r\n}\r\n\r\nconst getPublicationParams = () => {\r\n  return {\r\n    index: {\r\n      poll_question: JSON.stringify(\r\n        {\r\n          key: \"answer-v3.1.0\",\r\n          value: {\r\n            answer: state.vote,\r\n            questionBlockHeight: props.poll.blockHeight,\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nfunction isVoteValid() {\r\n  let isValid = state.vote.length == poll.value.questions.length;\r\n  isValid = isValid && context.accountId;\r\n  for (let i = 0; i < state.vote.length; i++) {\r\n    const vote = state.vote[i];\r\n    // vote should always be a string, but in one case is treated as an array. Replace array with csv\r\n    if (Array.isArray(vote)) {\r\n      isValid = isValid && vote.filter((v) => v.trim() != \"\").length > 0;\r\n    } else {\r\n      isValid = isValid && vote.trim() != \"\";\r\n    }\r\n  }\r\n  return isValid;\r\n}\r\n\r\nfunction calculatePercentage(votesToThisOption) {\r\n  if (validAnswersToThisPoll.length == 0) return 0;\r\n  return ((votesToThisOption / validAnswersToThisPoll.length) * 100).toFixed(2);\r\n}\r\n\r\nfunction calculatePercentageOfOption(votes, index) {\r\n  const validAnswers = votes.reduce((acc, curr) => acc + curr, 0);\r\n\r\n  if (validAnswers == 0 || votes.length == 0) return 0;\r\n\r\n  const votesToThisOption = votes[index];\r\n  return ((votesToThisOption / validAnswers) * 100).toFixed(2);\r\n}\r\n\r\nfunction getBorderRadious(questionNumber, optionNumber) {\r\n  if (optionNumber == 0) {\r\n    return \"12px 12px 4px 4px\";\r\n  } else if (\r\n    optionNumber ==\r\n    poll.value.questions[questionNumber].choicesOptions.length - 1\r\n  ) {\r\n    return \"4px 4px 12px 12px\";\r\n  } else {\r\n    return \"4px\";\r\n  }\r\n}\r\n\r\nconst isValidInput = () => {\r\n  let result = state.vote != \"\";\r\n  return result && !isPreview;\r\n};\r\n\r\nconst renderAnswers = (questionNumber) => {\r\n  return (\r\n    <Widget\r\n      src={`${widgetOwner}/widget/answer_poll-comment-container`}\r\n      props={{\r\n        questionNumber: questionNumber + \"\",\r\n        answers: validAnswersToThisPoll,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nfunction clickRadioInputHandler(questionNumber, optionNumber) {\r\n  return () => {\r\n    let newVote = state.vote;\r\n\r\n    newVote[questionNumber] = optionNumber + \"\";\r\n    State.update({ vote: newVote });\r\n  };\r\n}\r\n\r\nfunction clickCheckboxInputHandler(questionNumber, optionNumber) {\r\n  return () => {\r\n    let newVote = state.vote;\r\n\r\n    let oldQuestionVotes = newVote[questionNumber];\r\n    let newQuestionVotes = [];\r\n\r\n    if (!oldQuestionVotes.includes(optionNumber + \"\")) {\r\n      newQuestionVotes = oldQuestionVotes;\r\n      newQuestionVotes.push(optionNumber + \"\");\r\n    } else {\r\n      for (let i = 0; i < oldQuestionVotes.length; i++) {\r\n        if (oldQuestionVotes[i] != optionNumber + \"\") {\r\n          newQuestionVotes.push(oldQuestionVotes[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    newVote[questionNumber] = newQuestionVotes.filter((a) => a != \"\");\r\n\r\n    State.update({ votes: newVote });\r\n  };\r\n}\r\n\r\nconst renderMultipleChoiceInput = (\r\n  questionNumber,\r\n  questionType,\r\n  option,\r\n  optionNumber\r\n) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"d-flex align-content-center\">\r\n          {/* Set the width of the next div to make the bar grow. At the same, use the same value to fill the span tag */}\r\n          {!canVote ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignContent: \"center\",\r\n                backgroundColor: `${getBgColor(optionNumber, false)}`,\r\n                color: `${getFontColor(optionNumber)}`,\r\n                width: \"100%\",\r\n                margin: \"0.3rem 0px\",\r\n                height: \"2.4rem\",\r\n                borderRadius: `${getBorderRadious(\r\n                  questionNumber,\r\n                  optionNumber\r\n                )}`,\r\n                overflow: \"hidden\",\r\n                position: \"relative\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  height: \"100%\",\r\n                  padding: \"0.01em 22px 0.01em 11px\",\r\n                  display: \"inline-block\",\r\n                  width: `${calculatePercentageOfOption(\r\n                    countVotes(questionNumber, questionType),\r\n                    optionNumber\r\n                  )}%`,\r\n                  textAlign: \"center\",\r\n                  overflow: \"visible\",\r\n                  whiteSpace: \"nowrap\",\r\n                  textAlign: \"left\",\r\n                  backgroundColor: `${getBgColor(optionNumber, true)}`,\r\n                  borderRadius: \"4px\",\r\n                }}\r\n              >\r\n                <span\r\n                  style={{\r\n                    overflow: \"visible\",\r\n                    fontWeight: \"500\",\r\n                    lineHeight: \"2.5rem\",\r\n                  }}\r\n                >\r\n                  {option} \u2022\r\n                  <span\r\n                    className=\"text-secondary\"\r\n                    style={{\r\n                      marginLeft: \"1rem\",\r\n                      fontWeight: \"400\",\r\n                    }}\r\n                  >\r\n                    ({countVotes(questionNumber, questionType)[optionNumber]}{\" \"}\r\n                    votes)\r\n                  </span>\r\n                </span>\r\n              </div>\r\n              <span\r\n                style={{\r\n                  minWidth: \"max-content\",\r\n                  margin: \"0.4rem 0px 0.4rem 0.3rem\",\r\n                  fontWeight: \"500\",\r\n                  position: \"absolute\",\r\n                  right: \"1.7rem\",\r\n                }}\r\n              >\r\n                {calculatePercentageOfOption(\r\n                  countVotes(questionNumber, questionType),\r\n                  optionNumber\r\n                )}\r\n                %\r\n              </span>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <input\r\n                className=\"form-check-input\"\r\n                id={`${questionNumber}-${optionNumber}`}\r\n                name={`${questionNumber}-${questionType}`}\r\n                key={`${questionNumber}-${optionNumber}-${state.vote}`}\r\n                style={getInputStyles(\r\n                  questionType,\r\n                  questionNumber,\r\n                  optionNumber\r\n                )}\r\n                type={questionType == \"2\" ? \"checkbox\" : \"radio\"}\r\n                value={optionNumber}\r\n                checked={\r\n                  questionType == \"2\"\r\n                    ? state.vote[questionNumber].includes(optionNumber + \"\")\r\n                    : state.vote[questionNumber] == optionNumber + \"\"\r\n                }\r\n                onClick={\r\n                  questionType != \"2\" &&\r\n                  clickRadioInputHandler(questionNumber, optionNumber)\r\n                }\r\n                onChange={\r\n                  questionType == \"2\" &&\r\n                  clickCheckboxInputHandler(questionNumber, optionNumber)\r\n                }\r\n              />\r\n              <label for={`${questionNumber}-${optionNumber}`}>{option}</label>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst renderTextInput = (questionNumber) => {\r\n  return (\r\n    <div>\r\n      {hasVoted || !state.justVoted ? (\r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2,1fr)\" }}>\r\n          {renderAnswers(questionNumber)}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <textarea\r\n            value={state.vote[questionNumber]}\r\n            onChange={(e) => {\r\n              let newVote = state.vote;\r\n              newVote[questionNumber] = e.target.value;\r\n\r\n              State.update({ vote: newVote });\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <>\r\n    {poll.value.questions.map((question, questionNumber) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            border: \"1.5px solid rgb(206, 212, 218)\",\r\n            borderRadius: \"24px\",\r\n            position: \"relative\",\r\n          }}\r\n          className=\"p-3 my-3\"\r\n        >\r\n          <div className=\"d-flex\">\r\n            <p\r\n              style={{\r\n                backgroundColor: \"#353A40\",\r\n                padding: \"0.15rem 0.65rem\",\r\n                borderRadius: \"9px\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              {questionNumber + 1}\r\n            </p>\r\n            <h4 style={{ fontWeight: \"700\", marginLeft: \"0.8rem\" }}>\r\n              {question.question}\r\n            </h4>\r\n          </div>\r\n\r\n          {(!hasVoted || !state.justVoted) &&\r\n          (question.questionType == \"0\" || question.questionType == \"1\") ? (\r\n            <p className=\"mb-1\">Select one option:</p>\r\n          ) : (!hasVoted || !state.justVoted) &&\r\n            question.questionType == \"2\" ? (\r\n            <p className=\"mb-1\">You can check multiple options:</p>\r\n          ) : (\r\n            (!hasVoted || !state.justVoted) && (\r\n              <p className=\"mb-1\">Write your answer:</p>\r\n            )\r\n          )}\r\n          {question.questionType != \"3\"\r\n            ? question.choicesOptions.map((option, optionNumber) => {\r\n                return renderMultipleChoiceInput(\r\n                  questionNumber,\r\n                  question.questionType,\r\n                  option,\r\n                  optionNumber\r\n                );\r\n              })\r\n            : renderTextInput(questionNumber)}\r\n        </div>\r\n      );\r\n    })}\r\n    {isQuestionOpen ? (\r\n      hasVoted || !state.justVoted ? (\r\n        \"\"\r\n      ) : isVoteValid() ? (\r\n        <CommitButton\r\n          className=\"w-100\"\r\n          style={\r\n            state.hoveringElement != \"voteButton\"\r\n              ? {\r\n                  marginTop: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  backgroundColor: \"#000000\",\r\n                  color: \"#FFFFFF\",\r\n                  fontSize: \"1rem\",\r\n                  borderRadius: \"9px\",\r\n                  border: \"1.5px solid transparent\",\r\n                }\r\n              : {\r\n                  marginTop: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  backgroundColor: \"#FFFFFF\",\r\n                  color: \"#000000\",\r\n                  fontSize: \"1rem\",\r\n                  borderRadius: \"9px\",\r\n                  border: \"1.5px solid #000000\",\r\n                }\r\n          }\r\n          onMouseEnter={() => State.update({ hoveringElement: \"voteButton\" })}\r\n          onMouseLeave={() => State.update({ hoveringElement: \"\" })}\r\n          data={getPublicationParams()}\r\n          onCommit={() => State.update({ justVoted: true })}\r\n        >\r\n          Vote\r\n        </CommitButton>\r\n      ) : (\r\n        <>\r\n          <button\r\n            className=\"w-100\"\r\n            style={\r\n              state.hoveringElement != \"voteButton\"\r\n                ? {\r\n                    marginTop: \"0.5rem\",\r\n                    padding: \"0.5rem\",\r\n                    backgroundColor: \"#000000\",\r\n                    color: \"#FFFFFF\",\r\n                    fontSize: \"1rem\",\r\n                    borderRadius: \"9px\",\r\n                    border: \"1.5px solid transparent\",\r\n                  }\r\n                : {\r\n                    marginTop: \"0.5rem\",\r\n                    padding: \"0.5rem\",\r\n                    backgroundColor: \"#FFFFFF\",\r\n                    color: \"#000000\",\r\n                    fontSize: \"1rem\",\r\n                    borderRadius: \"9px\",\r\n                    border: \"1.5px solid #000000\",\r\n                  }\r\n            }\r\n            onMouseEnter={() => State.update({ hoveringElement: \"voteButton\" })}\r\n            onMouseLeave={() => State.update({ hoveringElement: \"\" })}\r\n            onClick={() => State.update({ showErrorsInForm: true })}\r\n          >\r\n            Vote\r\n          </button>\r\n          {state.showErrorsInForm && (\r\n            <span className=\"text-danger\">Please answer all the questions</span>\r\n          )}\r\n        </>\r\n      )\r\n    ) : (\r\n      \"\"\r\n    )}\r\n    <p\r\n      style={{\r\n        fontWeight: \"500\",\r\n        fontSize: \"1.1rem\",\r\n        color: \"#767B8E\",\r\n        letterSpacing: \"-0.02em\",\r\n        marginTop: \"0.8rem\",\r\n      }}\r\n    >\r\n      {validAnswersToThisPoll.length} votes\r\n    </p>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/allVotingWidget"}