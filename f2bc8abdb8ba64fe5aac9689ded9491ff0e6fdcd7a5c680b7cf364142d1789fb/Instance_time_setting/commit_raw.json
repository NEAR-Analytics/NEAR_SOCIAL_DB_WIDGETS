{"tx_hash": "CeQa6P5SVsWNKCvzewHnHXuJGC5mbZczTR149cXjpLDU", "action_id_social": "43CmqYAgQp1hvhXqDnzcgzqJtZS1sJDzeGTZrJkTkuCX-0-widget", "block_id": 88985129, "block_timestamp": "2023-04-06 22:45:29.010", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "Instance_time_setting", "source_code": "const updateInstanceTimeState = props.updateInstanceTimeState;\r\nconst tabs = props.tabs;\r\n\r\nconst thisWidgetInlineStyles =\r\n  props.allWidgetsInlineStyles.instance_time_setting;\r\nconst thisWidgetClassNames = props.allWidgetsClassNames.instance_time_setting;\r\n\r\nconst sortAndRemoveRepeated = (flag, data) => {\r\n  var temp = data;\r\n  if (flag) temp.push(0, 168);\r\n  var sortedTimeData =\r\n    temp && temp.length ? temp.sort((d2, d1) => d2 - d1) : [];\r\n\r\n  var final = [];\r\n  for (var k = 0; k < sortedTimeData.length; k++) {\r\n    var repeated = false;\r\n    for (var l = 0; l < sortedTimeData.length; l++) {\r\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\r\n        repeated = true;\r\n      }\r\n    }\r\n    if (!repeated) final.push(sortedTimeData[k]);\r\n  }\r\n  return final;\r\n};\r\n\r\nconst widgetOwner =\r\n  \"f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb\";\r\n\r\nconst getFormatedTime = (time) => {\r\n  const hours = parseInt(time);\r\n  const mins = (time - hours) * 60;\r\n  const formated =\r\n    hours > 12\r\n      ? `${hours - 12 < 10 ? \"0\" : \"\"}${hours - 12}:${\r\n          mins == 0 ? \"00\" : mins\r\n        } PM`\r\n      : `${hours < 10 ? \"0\" : \"\"}${hours}:${mins == 0 ? \"00\" : mins} AM`;\r\n  return formated;\r\n};\r\nconst time_zone = props.data.time_zone ?? \"(UTC+00:00) UTC\";\r\nvar is_on = [false, false, false, false, false, false, false];\r\nvar _from = [\r\n  \"10:00 AM\",\r\n  \"10:00 AM\",\r\n  \"10:00 AM\",\r\n  \"10:00 AM\",\r\n  \"10:00 AM\",\r\n  \"10:00 AM\",\r\n  \"10:00 AM\",\r\n];\r\nvar _to = [\r\n  \"06:00 PM\",\r\n  \"06:00 PM\",\r\n  \"06:00 PM\",\r\n  \"06:00 PM\",\r\n  \"06:00 PM\",\r\n  \"06:00 PM\",\r\n  \"06:00 PM\",\r\n];\r\n\r\nif (props.data.schedule) {\r\n  for (var i = 0; i < 7; i++) {\r\n    is_on[i] = props.data.schedule[i].on_off;\r\n    if (is_on[i] == \"on\") {\r\n      _from[i] = getFormatedTime(props.data.schedule[i].data[0]._from);\r\n      _to[i] = getFormatedTime(props.data.schedule[i].data[0]._to);\r\n    }\r\n  }\r\n}\r\nState.init({\r\n  _is_on: is_on,\r\n  _from: _from,\r\n  _to: _to,\r\n  _validate_result: true,\r\n  _validate_error: [true, true, true, true, true, true, true],\r\n  _sent: false,\r\n  hoveringElement: \"\",\r\n});\r\n\r\nconst hours = [];\r\nconst days = [\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n  \"Sunday\",\r\n];\r\nconst tbl_headers = [\"Day\", \"Off/On\", \"From\", \"To\"];\r\nconst initialize = () => {\r\n  hours = [];\r\n  for (var i = 0; i < 2; i++)\r\n    for (var j = 0; j <= 12; j++)\r\n      for (var k = 0; k < 4; k++) {\r\n        i % 2 == 0\r\n          ? hours.push(`${j < 10 ? `0${j}` : j}:${k == 0 ? \"00\" : k * 15} AM`)\r\n          : hours.push(`${j < 10 ? `0${j}` : j}:${k == 0 ? \"00\" : k * 15} PM`);\r\n      }\r\n};\r\ninitialize();\r\nconst validate = () => {\r\n  var result = true;\r\n  for (var i = 0; i < 7; i++) {\r\n    if (!state._validate_error[i]) result = false;\r\n  }\r\n  State.update({ _validate_result: result });\r\n};\r\nconst getTime = (time) => {\r\n  const ap = time.split(\" \")[1];\r\n  const hour = parseInt(time.split(\":\")[0]);\r\n  const mins = parseInt(time.split(\":\")[1]) / 60;\r\n  const time_by_hours = ap == \"AM\" ? hour + mins : hour + 12 + mins;\r\n  return time_by_hours;\r\n};\r\nconst onTimeChanged = (value, index, is_from_to, in_de) => {\r\n  let temp = is_from_to ? state._from : state._to;\r\n  const i = hours.indexOf(value);\r\n  if (i + in_de >= 0 && i + in_de < hours.length) {\r\n    temp[index] = hours[i + in_de];\r\n    is_from_to ? State.update({ _from: temp }) : State.update({ _to: temp });\r\n    let error_temp = state._validate_error;\r\n    if (getTime(state._from[index]) >= getTime(state._to[index])) {\r\n      error_temp[index] = false;\r\n    } else {\r\n      error_temp[index] = true;\r\n    }\r\n    validate();\r\n    State.update({\r\n      _validate_error: error_temp,\r\n    });\r\n  }\r\n};\r\n\r\nconst getData = () => {\r\n  var zone = time_zone.split(\" \")[0].split(\"UTC\")[1].split(\":\");\r\n  var hours = parseInt(zone[0]);\r\n  var offset = hours + (parseInt(zone[1]) / 60) * ((hours > 0) * 2 - 1);\r\n  var temp = [];\r\n  var flag = false;\r\n  for (var i = 0; i < 7; i++) {\r\n    if (state._is_on[i]) {\r\n      for (var j = 0; j < 2; j++) {\r\n        const time =\r\n          j == 0\r\n            ? getTime(state._from[i]) + 24 * i - offset\r\n            : getTime(state._to[i]) + 24 * i - offset;\r\n        if (time > 168) {\r\n          temp.push(time - 168);\r\n          flag = true;\r\n        } else if (time < 0) {\r\n          temp.push(time + 168);\r\n          flag = true;\r\n        } else temp.push(time);\r\n      }\r\n    }\r\n  }\r\n  const final = sortAndRemoveRepeated(flag, temp);\r\n  return {\r\n    index: {\r\n      Instance_time: JSON.stringify(\r\n        {\r\n          key: \"schedule\",\r\n          value: {\r\n            _data: final,\r\n            _time_zone: time_zone,\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\nconst timeSelector = (f, index) => {\r\n  return (\r\n    <div\r\n      style={\r\n        state._is_on[index]\r\n          ? thisWidgetInlineStyles.timeSelectorContainerActive\r\n          : timeSelectorContainerInactive\r\n      }\r\n    >\r\n      <div className={thisWidgetClassNames.timeSelector}>\r\n        <select\r\n          style={\r\n            state._is_on[index]\r\n              ? thisWidgetInlineStyles.comboBoxActive\r\n              : thisWidgetInlineStyles.comboBoxInactive\r\n          }\r\n          value={f ? state._from[index] : state._to[index]}\r\n          disabled={!state._is_on[index]}\r\n          onChange={(e) => {\r\n            onTimeChanged(e.target.value, index, f, 0);\r\n          }}\r\n        >\r\n          {hours.map((hour) => (\r\n            <option value={hour}>{hour}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className={thisWidgetClassNames.caretsContainer}>\r\n        <div\r\n          onClick={() => {\r\n            if (state._is_on[index]) {\r\n              const value = f ? state._from[index] : state._to[index];\r\n              onTimeChanged(value, index, f, 1);\r\n            }\r\n          }}\r\n        >\r\n          <i\r\n            className={thisWidgetClassNames.caretUpIcon}\r\n            style={\r\n              state._is_on[index]\r\n                ? thisWidgetInlineStyles.colorActive\r\n                : thisWidgetInlineStyles.colorInactive\r\n            }\r\n          ></i>\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            if (state._is_on[index]) {\r\n              const value = f ? state._from[index] : state._to[index];\r\n              onTimeChanged(value, index, f, -1);\r\n            }\r\n          }}\r\n        >\r\n          <i\r\n            className={thisWidgetClassNames.caretDownIcon}\r\n            style={\r\n              state._is_on[index]\r\n                ? thisWidgetInlineStyles.colorActive\r\n                : thisWidgetInlineStyles.colorInactive\r\n            }\r\n          ></i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderDayRow = (day, index, size) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className={`${thisWidgetClassNames.dayContainer} ${\r\n          size == \"big\"\r\n            ? thisWidgetClassNames.showInMidAndBigScreens\r\n            : thisWidgetClassNames.showInSmallerScreens\r\n        }`}\r\n        style={thisWidgetInlineStyles.dayContainer}\r\n      >\r\n        <div style={thisWidgetInlineStyles.dayPartContainer}>\r\n          <div\r\n            className={thisWidgetClassNames.infoAndTitleContainer}\r\n            style={thisWidgetInlineStyles.infoAndTitleContainer}\r\n          >\r\n            <p\r\n              className={thisWidgetClassNames.showInResponsive}\r\n              style={thisWidgetInlineStyles.fontW600}\r\n            >\r\n              {tbl_headers[0]}\r\n            </p>\r\n            <p style={thisWidgetInlineStyles.fontW600}>{day}</p>\r\n          </div>\r\n          <div\r\n            className={thisWidgetClassNames.infoAndTitleContainer}\r\n            style={thisWidgetInlineStyles.infoAndTitleContainer}\r\n          >\r\n            <p\r\n              className={thisWidgetClassNames.showInResponsive}\r\n              style={thisWidgetInlineStyles.fontW600}\r\n            >\r\n              {tbl_headers[1]}\r\n            </p>\r\n\r\n            <div\r\n              className=\"form-check form-switch\"\r\n              style={thisWidgetInlineStyles.inputContainer}\r\n            >\r\n              <input\r\n                style={\r\n                  state._is_on[index]\r\n                    ? thisWidgetInlineStyles.inputActive\r\n                    : thisWidgetInlineStyles.inputInactive\r\n                }\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                checked={state._is_on[index]}\r\n                id={day + index}\r\n                key={day + index + state._is_on[index]}\r\n                onChange={(e) => {\r\n                  let temp = state._is_on;\r\n                  temp[index] = !temp[index];\r\n                  State.update({ _is_on: temp });\r\n                  if (!e.target.value) {\r\n                    state._from[index] = \"0\";\r\n                    state._to[index] = \"0\";\r\n                    let error_temp = state._validate_error;\r\n                    State.update({\r\n                      _error_msg: `${(error_temp[index] = true)}`,\r\n                    });\r\n                    validate();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={thisWidgetInlineStyles.dayPartContainer}>\r\n          <div\r\n            className={thisWidgetClassNames.infoAndTitleContainer}\r\n            style={thisWidgetInlineStyles.infoAndTitleContainer}\r\n          >\r\n            <p\r\n              className={thisWidgetClassNames.showInResponsive}\r\n              style={thisWidgetInlineStyles.fontW600}\r\n            >\r\n              {tbl_headers[2]}\r\n            </p>\r\n            {timeSelector(true, index)}\r\n          </div>\r\n          <div\r\n            className={thisWidgetClassNames.infoAndTitleContainer}\r\n            style={thisWidgetInlineStyles.infoAndTitleContainer}\r\n          >\r\n            <p\r\n              className={thisWidgetClassNames.showInResponsive}\r\n              style={thisWidgetInlineStyles.fontW600}\r\n            >\r\n              {tbl_headers[3]}\r\n            </p>\r\n            {timeSelector(false, index)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    {context.accountId ? (\r\n      <div\r\n        style={thisWidgetInlineStyles.logedInGeneralContainer}\r\n        className={thisWidgetClassNames.logedInGeneralContainer}\r\n      >\r\n        <div style={thisWidgetInlineStyles.logedInSecondContainer}>\r\n          <div\r\n            style={thisWidgetInlineStyles.logedInThirdContainer}\r\n            className={thisWidgetInlineStyles.logedInThirdContainer}\r\n          >\r\n            <div\r\n              style={thisWidgetInlineStyles.headerContainer}\r\n              className={thisWidgetClassNames.headerContainer}\r\n            >\r\n              {tbl_headers.map((header) => (\r\n                <div style={thisWidgetInlineStyles.headerElement}>{header}</div>\r\n              ))}\r\n            </div>\r\n            {days.map((day, index) => (\r\n              <>\r\n                {renderDayRow(day, index, \"big\")}\r\n\r\n                {renderDayRow(day, index, \"small\")}\r\n              </>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div style={thisWidgetInlineStyles.showErrorContainer}>\r\n          {days.map((day, index) => {\r\n            return !state._validate_error[index] && `${day} `;\r\n          })}\r\n          {!state._validate_result && \"time set wrong\"}\r\n        </div>\r\n        <div className={thisWidgetClassNames.buttonsContainer}>\r\n          {!state._sent ? (\r\n            <CommitButton\r\n              style={\r\n                state.hoveringElement == \"saveButton\"\r\n                  ? thisWidgetInlineStyles.buttonHovered\r\n                  : thisWidgetInlineStyles.buttonStandard\r\n              }\r\n              onMouseEnter={() => {\r\n                State.update({ hoveringElement: \"saveButton\" });\r\n              }}\r\n              onMouseLeave={() => {\r\n                State.update({ hoveringElement: \"\" });\r\n              }}\r\n              onCommit={() => {\r\n                State.update({ _sent: true });\r\n              }}\r\n              disabled={!state._validate_result}\r\n              data={getData()}\r\n            >\r\n              Save\r\n            </CommitButton>\r\n          ) : (\r\n            <button\r\n              onClick={() => {\r\n                updateInstanceTimeState({ tab: tabs.ALL_SCHEDULE.id });\r\n              }}\r\n              style={\r\n                state.hoveringElement == \"viewScheduels\"\r\n                  ? thisWidgetInlineStyles.buttonHovered\r\n                  : thisWidgetInlineStyles.buttonStandard\r\n              }\r\n              onMouseEnter={() => {\r\n                State.update({ hoveringElement: \"viewScheduels\" });\r\n              }}\r\n              onMouseLeave={() => {\r\n                State.update({ hoveringElement: \"\" });\r\n              }}\r\n            >\r\n              View Scheduels\r\n            </button>\r\n          )}\r\n\r\n          <button\r\n            onMouseEnter={() => {\r\n              State.update({ hoveringElement: \"cancelNewSchedule\" });\r\n            }}\r\n            onMouseLeave={() => {\r\n              State.update({ hoveringElement: \"\" });\r\n            }}\r\n            onClick={() => {\r\n              updateInstanceTimeState({ showAbortScheduleCreation: true });\r\n            }}\r\n            style={\r\n              state.hoveringElement == \"cancelNewSchedule\"\r\n                ? thisWidgetInlineStyles.buttonHovered\r\n                : thisWidgetInlineStyles.buttonStandard\r\n            }\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div>SignIn first plz!</div>\r\n    )}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/Instance_time_setting"}