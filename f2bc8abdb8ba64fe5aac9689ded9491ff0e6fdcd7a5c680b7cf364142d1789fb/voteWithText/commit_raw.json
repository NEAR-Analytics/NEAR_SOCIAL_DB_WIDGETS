{"tx_hash": "BecakXT1yfoAYgs4UPgBEv6t2u5bdGYsB3hA7XCP9zGV", "action_id_social": "EFAD7UJRWKrMJzCP1MugT6XdRPVEKBN9n7f27pjSgRpK-0-widget", "block_id": 81304341, "block_timestamp": "2022-12-23 19:10:49.452", "signer_id": "f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb", "widget_name": "voteWithText", "source_code": "if (!props.isPreview && !props.blockHeight) {\r\n  return \"Property blockHeight not set\";\r\n}\r\n\r\nconst isQuestionOpen =\r\n  questionParams.value.startTimestamp < Date.now() &&\r\n  Date.now() < questionParams.value.endTimestamp;\r\n\r\n// Utility function\r\nfunction getBlockTimestamp(blockHeight) {\r\n  // It is stored in nanoseconds which is 1e-6 miliseconds\r\n  return Near.block(blockHeight).header.timestamp / 1e6;\r\n}\r\n\r\nfunction getQuestion(blockHeight) {\r\n  const questions = Social.index(\"poll_question\", \"question-v3.0.1\");\r\n  if (!questions) {\r\n    return \"Loading\";\r\n  }\r\n  return questions.find((q) => q.blockHeight == blockHeight);\r\n}\r\n\r\n// Discards answers that were posted after question's end date\r\nfunction getTimeRelatedValidAnswers(answers) {\r\n  const questionParams = getQuestion(props.blockHeight);\r\n  let low = 0;\r\n  let high = answers.length - 1;\r\n  const questionEndTimestamp = questionParams.value.endTimestamp;\r\n  let endBlockTimestamp = getBlockTimestamp(answers[high].blockHeight);\r\n  console.log(4, questionParams);\r\n  if (endBlockTimestamp < questionEndTimestamp) return answers;\r\n  // For tries to exceed 50 there should be more than 10e15 answers which will never happen. But if you mess up and make an infinite cycle it will crash. This way it will never be infinite\r\n  let tries = 50;\r\n  while (high - low > 1 && tries > 0) {\r\n    tries--;\r\n    let curr = Math.floor((high - low) / 2) + low;\r\n    let currBlockTimestamp = getBlockTimestamp(answers[curr].blockHeight);\r\n    if (currBlockTimestamp < questionEndTimestamp) {\r\n      low = curr;\r\n    } else {\r\n      high = curr;\r\n    }\r\n  }\r\n  // Slice ignores the index of the last one. Since high - low == 1, high = low + 1\r\n  return answers.slice(0, high);\r\n}\r\n\r\nfunction closeModalClickingOnTransparent() {\r\n  return (e) => {\r\n    e.target.id == \"modal\" &&\r\n      State.update({\r\n        showVeryfyInstructionModal: false,\r\n        showVeryfyFailedModal: false,\r\n      });\r\n  };\r\n}\r\n\r\nlet isPreview = props.isPreview;\r\nconst questionBlockHeight = props.blockHeight;\r\nState.init({\r\n  vote: \"\",\r\n  showErrorsInForm: false,\r\n  verifiedStatus: \"verifying\",\r\n  showVeryfyInstructionModal: false,\r\n  showVeryfyFailedModal: false,\r\n});\r\n\r\nconst answers = Social.index(\"poll_question\", \"answer-v3.0.1\");\r\nif (!answers) {\r\n  return \"Loading\";\r\n}\r\nconst answersToThisQuestion = answers.filter(\r\n  (a) => a.value.questionBlockHeight == questionBlockHeight\r\n);\r\nconst onTimeAnswersToThisQuestion = getTimeRelatedValidAnswers(\r\n  answersToThisQuestion\r\n);\r\n\r\nlet usersThatAlreadyReplied = [];\r\nlet validAnswersToThisQuestion = onTimeAnswersToThisQuestion.filter((a) => {\r\n  const didUserAlreadyVoted = usersThatAlreadyReplied.includes(a.accountId);\r\n  if (!didUserAlreadyVoted) {\r\n    usersThatAlreadyReplied.push(a.accountId);\r\n  }\r\n  return !didUserAlreadyVoted;\r\n});\r\n\r\nlet userVote;\r\nconst loggedAccountId = context.accountId ?? \"\";\r\nfunction userHasVoted() {\r\n  return (\r\n    answersToThisQuestion.find((a) => a.accountId == loggedAccountId) !=\r\n    undefined\r\n  );\r\n}\r\nlet hasVoted = userHasVoted();\r\n\r\nconst getPublicationParams = () => {\r\n  return {\r\n    index: {\r\n      poll_question: JSON.stringify(\r\n        {\r\n          key: \"answer-v3.0.1\",\r\n          value: {\r\n            answer: state.vote,\r\n            questionBlockHeight: props.blockHeight,\r\n          },\r\n        },\r\n        undefined,\r\n        0\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nconst isValidInput = () => {\r\n  let result = state.vote != \"\";\r\n  return result && !isPreview;\r\n};\r\n\r\nconst renderAnswers = () => {\r\n  return validAnswersToThisQuestion.map((answer) => {\r\n    return (\r\n      <Widget\r\n        src=\"silkking.near/widget/answer_poll-comment-container\"\r\n        props={{ blockHeight: answer.blockHeight }}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nconst renderModal = () => {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      id=\"modal\"\r\n      style={\r\n        (state.showVeryfyInstructionModal || state.showVeryfyFailedModal) && {\r\n          display: \"block\",\r\n          backgroundColor: \"#7e7e7e70\",\r\n        }\r\n      }\r\n      tabindex=\"-1\"\r\n      role=\"dialog\"\r\n      onClick={closeModalClickingOnTransparent()}\r\n    >\r\n      <div className=\"modal-dialog\" style={{ maxWidth: \"90%\" }} role=\"document\">\r\n        <div\r\n          className=\"modal-content\"\r\n          style={{ backgroundColor: \"rgb(230, 230, 230)\" }}\r\n        >\r\n          <div className=\"modal-header flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              dataDismiss=\"modal\"\r\n              ariaLabel=\"Close\"\r\n              onClick={() =>\r\n                State.update({\r\n                  showVeryfyInstructionModal: false,\r\n                  showVeryfyFailedModal: false,\r\n                })\r\n              }\r\n            >\r\n              <span ariaHidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div\r\n            className=\"modal-body\"\r\n            style={{\r\n              width: \"90%\",\r\n              borderRadius: \"1rem\",\r\n              margin: \"0 auto\",\r\n              backgroundColor: \"white\",\r\n            }}\r\n          >\r\n            {state.showVeryfyInstructionModal ? (\r\n              <p className=\"text-center\">\r\n                Please complete the Proof of Humanity on the other tab. Once you\r\n                finish, the process might take a few minutes. Please, reload\r\n                this tab\r\n              </p>\r\n            ) : (\r\n              <p className=\"text-center text-danger\">\r\n                The verification has failed. Please verify again.\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={() =>\r\n                State.update({\r\n                  showVeryfyInstructionModal: false,\r\n                  showVeryfyFailedModal: false,\r\n                })\r\n              }\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    {!isQuestionOpen ? \"This question is already closed\" : \"\"}\r\n    {hasVoted ? (\r\n      <p\r\n        className=\"text-primary\"\r\n        style={{ textAlign: \"center\", fontWeight: \"500\" }}\r\n      >\r\n        You have already voted\r\n      </p>\r\n    ) : (\r\n      isQuestionOpen && (\r\n        <div>\r\n          <textarea\r\n            value={state.vote}\r\n            onChange={(e) => State.update({ vote: e.target.value })}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n\r\n          {state.verifiedStatus == \"verified\" ? (\r\n            isValidInput() ? (\r\n              <CommitButton\r\n                className=\"my-2 btn btn-primary\"\r\n                data={getPublicationParams()}\r\n              >\r\n                Done\r\n              </CommitButton>\r\n            ) : (\r\n              <button\r\n                className=\"my-2 btn btn-primary\"\r\n                onClick={() => State.update({ showErrorsInForm: true })}\r\n              >\r\n                Done\r\n              </button>\r\n            )\r\n          ) : state.verifiedStatus == \"verifying\" ? (\r\n            <button type=\"button\" disabled className=\"my-2 btn btn-primary\">\r\n              <span\r\n                className=\"spinner-border spinner-border-sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n              ></span>\r\n              <span className=\"sr-only\">Verifying...</span>\r\n            </button>\r\n          ) : state.verifiedStatus == \"failed\" ? (\r\n            <></>\r\n          ) : (\r\n            state.verifiedStatus == \"notVerified\" && (\r\n              <a\r\n                href=\"http://localhost:1234\"\r\n                target=\"_blank\"\r\n                onClick={() =>\r\n                  State.update({ showVeryfyInstructionModal: true })\r\n                }\r\n              >\r\n                <button className=\"my-2 btn btn-primary\">Verify</button>\r\n              </a>\r\n            )\r\n          )}\r\n        </div>\r\n      )\r\n    )}\r\n    {renderAnswers()}\r\n    {(state.showVeryfyInstructionModal || state.showVeryfyFailedModal) &&\r\n      renderModal()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f2bc8abdb8ba64fe5aac9689ded9491ff0e6fdcd7a5c680b7cf364142d1789fb/widget/voteWithText"}