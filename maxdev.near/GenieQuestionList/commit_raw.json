{"tx_hash": "8GcqBi1Y8bZaYBeCH7zadrM7TEdMyEdNHVeYLMTQEnY9", "action_id_social": "DR8aNEjZKEDE3XJdikNrtT6fju6BQpofr3qw2erB9XeN-0-widget", "block_id": 83684226, "block_timestamp": "2023-01-24 11:56:47.758", "signer_id": "maxdev.near", "widget_name": "GenieQuestionList", "source_code": "const ownerId = \"maxdev.near\";\nconst { searchString, setSelectedQuestion, moderators } = props;\nlet questionRefsData = Social.index(\"neardevs_beta1\", \"asked\") || [];\n\nconsole.log(questionRefsData);\nconst blockedQuestions =\n  Social.index(\"neardevs_beta1\", \"blocked\", {\n    accountId: moderators,\n  }) || [];\n// const unblockedQuestions = Social.index(\"neardevs_beta1\", \"unblocked\") || [];\n\n// const finalBlockedQuestions = [...blockedQuestions, ...unblockedQuestions]\n//   .filter(q => moderators.includes(q.accountId))\n//   .sort((a, b) => a.blockHeight < b.blockHeight)\n//   .reduce((acc, q) => (acc.find((a) => q.value === a.value) ? null : q), [])\n//   .filter((q) => q !== null);\n\nconst blockedQuestionsMap = Object.fromEntries(\n  blockedQuestions.map((q) => [q.value, true])\n);\nlet notBlockedQuestions = questionRefsData.filter(\n  (q) => !blockedQuestionsMap[q.value]\n);\n\nnotBlockedQuestions = notBlockedQuestions.reverse();\n\nreturn (\n  <div className=\"d-flex flex-column gap-1\">\n    <div className=\"d-flex justify-content-end\"></div>\n    <div className=\"d-flex flex-column gap-3\">\n      {notBlockedQuestions.map((q) => {\n        const asker = q.value.split(\"--\")[0];\n        const question = Social.getr(\n          `${asker}/neardevs_beta1/questions/${q.value}`\n        );\n        // return nothing if data does not meet schema\n        if (!question?.title || !question?.content) {\n          return <></>;\n        }\n\n        // return nothing if question does not meet search criteria\n        if (\n          searchString &&\n          !question.title.toLowerCase().includes(searchString.toLowerCase()) &&\n          !question.content.toLowerCase().includes(searchString.toLowerCase())\n        ) {\n          return <></>;\n        }\n        return (\n          <div\n            key={q.value}\n            className=\"d-flex flex-column gap-1\"\n            style={{\n              borderTop: \"0.5px solid #D3D3D3\",\n              padding: \"1.5rem 0 0 0\",\n            }}\n            onClick={() => {\n              setSelectedQuestion(q.value);\n            }}\n          >\n            <Widget\n              src={`${ownerId}/widget/GenieQuestionView`}\n              props={{ questionRef: q.value, searchString: props.searchString }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/maxdev.near/widget/GenieQuestionList"}