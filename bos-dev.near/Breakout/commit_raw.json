{"tx_hash": "3vaebu35to8c356BVreUnJEALxB7sbh7mM2rN4pCCq6u", "action_id_social": "GcxSzuJTT3Kd3oN9foF7zSbXLVCf93YdBN3dpj93ZjAm-0-widget", "block_id": 91123823, "block_timestamp": "2023-05-05 03:09:47.589", "signer_id": "bos-dev.near", "widget_name": "Breakout", "source_code": "const srcCode = `\n\n<style>\nhtml,\nbody {\n  height: 100%;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: black;\n}\n\n</style>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/phaser/3.55.2/phaser.min.js\"></script>\n\n<script>\nclass Breakout extends Phaser.Scene\n{\n    constructor ()\n    {\n        super({ key: 'breakout' });\n\n        this.bricks;\n        this.paddle;\n        this.ball;\n    }\n\n    preload ()\n    {\n        this.load.atlas('assets', 'assets/games/breakout/breakout.png', 'assets/games/breakout/breakout.json');\n    }\n\n    create ()\n    {\n        //  Enable world bounds, but disable the floor\n        this.physics.world.setBoundsCollision(true, true, true, false);\n\n        //  Create the bricks in a 10x6 grid\n        this.bricks = this.physics.add.staticGroup({\n            key: 'assets', frame: [ 'blue1', 'red1', 'green1', 'yellow1', 'silver1', 'purple1' ],\n            frameQuantity: 10,\n            gridAlign: { width: 10, height: 6, cellWidth: 64, cellHeight: 32, x: 112, y: 100 }\n        });\n\n        this.ball = this.physics.add.image(400, 500, 'assets', 'ball1').setCollideWorldBounds(true).setBounce(1);\n        this.ball.setData('onPaddle', true);\n\n        this.paddle = this.physics.add.image(400, 550, 'assets', 'paddle1').setImmovable();\n\n        //  Our colliders\n        this.physics.add.collider(this.ball, this.bricks, this.hitBrick, null, this);\n        this.physics.add.collider(this.ball, this.paddle, this.hitPaddle, null, this);\n\n        //  Input events\n        this.input.on('pointermove', function (pointer)\n        {\n\n            //  Keep the paddle within the game\n            this.paddle.x = Phaser.Math.Clamp(pointer.x, 52, 748);\n\n            if (this.ball.getData('onPaddle'))\n            {\n                this.ball.x = this.paddle.x;\n            }\n\n        }, this);\n\n        this.input.on('pointerup', function (pointer)\n        {\n\n            if (this.ball.getData('onPaddle'))\n            {\n                this.ball.setVelocity(-75, -300);\n                this.ball.setData('onPaddle', false);\n            }\n\n        }, this);\n    }\n\n    hitBrick (ball, brick)\n    {\n        brick.disableBody(true, true);\n\n        if (this.bricks.countActive() === 0)\n        {\n            this.resetLevel();\n        }\n    }\n\n    resetBall ()\n    {\n        this.ball.setVelocity(0);\n        this.ball.setPosition(this.paddle.x, 500);\n        this.ball.setData('onPaddle', true);\n    }\n\n    resetLevel ()\n    {\n        this.resetBall();\n\n        this.bricks.children.each(brick =>\n        {\n\n            brick.enableBody(false, 0, 0, true, true);\n\n        });\n    }\n\n    hitPaddle (ball, paddle)\n    {\n        let diff = 0;\n\n        if (ball.x < paddle.x)\n        {\n            //  Ball is on the left-hand side of the paddle\n            diff = paddle.x - ball.x;\n            ball.setVelocityX(-10 * diff);\n        }\n        else if (ball.x > paddle.x)\n        {\n            //  Ball is on the right-hand side of the paddle\n            diff = ball.x - paddle.x;\n            ball.setVelocityX(10 * diff);\n        }\n        else\n        {\n            //  Ball is perfectly in the middle\n            //  Add a little random X to stop it bouncing straight up!\n            ball.setVelocityX(2 + Math.random() * 8);\n        }\n    }\n\n    update ()\n    {\n        if (this.ball.y > 600)\n        {\n            this.resetBall();\n        }\n    }\n}\n\nconst config = {\n    type: Phaser.WEBGL,\n    width: 800,\n    height: 600,\n    parent: 'phaser-example',\n    scene: [ Breakout ],\n    physics: {\n        default: 'arcade'\n    }\n};\n\nconst game = new Phaser.Game(config);\n\n</script>\n`;\n\nreturn (\n  <>\n    <iframe\n      srcDoc={srcCode}\n      style={{\n        height: \"70vh\",\n        width: \"100%\",\n      }}\n    ></iframe>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos-dev.near/widget/Breakout"}