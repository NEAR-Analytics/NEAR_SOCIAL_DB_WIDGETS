{"tx_hash": "43EPwA7wXKe4rgSyUgpdMPjt8k43KBf5HjfnX9aJcFom", "action_id_social": "92qYm8GKsbHrQc1hhx5kFbyrjwmcCYXmFWvqSRgTbNoD-0-widget", "block_id": 94980149, "block_timestamp": "2023-06-25T07:08:56.048Z", "signer_id": "chloe.near", "widget_name": "piglet", "source_code": "// Styling components\nconst Button = styled.button`\n  background: palevioletred;\n  color: white;\n  font-size: 1em;\n  margin: 10px;\n  padding: 0.5em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 10px;\n  &:hover {\n    background: white;\n    color: palevioletred;\n  }\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  margin-top: 20px;\n\n  th, td {\n    border: 1px solid black;\n    padding: 10px;\n  }\n\n  .sender-row {\n    color: green;\n  }\n`;\n\nconst Header = styled.p`\n  text-align: left;\n  font-size: 0.8em;\n  margin-top: 10px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background: #ffc0cb;\n  color: black; /* Update text color to black */\n  font-size: calc(10px + 2vmin);\n  padding: 20px;\n  box-sizing: border-box;\n`;\n\nconst Title = styled.h1`\n  font-weight: bold;\n  margin-top: 20px;\n`;\n\nconst Info = styled.p`\n  margin-top: 10px;\n`;\n\nconst PiggyImage = styled.img`\n  width: 200px;\n  height: auto;\n  margin-bottom: 20px;\n`;\n\nconst CoverImage = styled.img`\n  width: 90%;\n  height: auto;\n  margin-bottom: 20px;\n`;\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 137) {\n  return <p>Switch to Polygon Mainnet</p>;\n}\n\nfunction initPiggyState() {\n  return {\n    isCrowd: false,\n    isVerified: false,\n    chainOne: false,\n    chainTwo: false,\n    chainThree: false,\n    tableData: [], // This state will hold the fetched data for the table\n  };\n}\n\n// DETECT SENDER\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    const addressWithoutPrefix = accounts[0].substring(2);\n    State.update({ sender: addressWithoutPrefix });\n    console.log(\"set sender\", addressWithoutPrefix);\n  }\n}\n\nState.init(initPiggyState());\n\n// Handle the click event for verification\nfunction handleClickVerify() {\n  State.update({ isVerified: true });\n  alert(\"You are now verified as a human.\");\n}\n\nfunction handleClickCrowd() {\n  State.update({ isCrowd: true });\n\n  getSender();\n\n  asyncFetch(\n    \"https://raw.githubusercontent.com/doulos819/piglet/main/output.json\"\n  )\n    .then((res) => {\n      console.log(\"Fetch response:\", res); // log the raw fetch response\n\n      // Parse the response body into an object\n      const data = JSON.parse(res.body);\n      console.log(\"Parsed data:\", data); // log the parsed data\n\n      let updatedTableData = [];\n      data.forEach((item) => {\n        item[\"@data\"].events.forEach((event) => {\n          // Use BN to handle the large number\n          const valueBN = new BN(event.value);\n          // Convert from Gwei (base 9 decimals) to Ether (base 18 decimals)\n          const valueInEtherBN = valueBN.div(new BN(\"1000000000000000000\"));\n          updatedTableData.push({\n            address: event.from,\n            value: valueInEtherBN.toString(), // convert BN to string for display\n          });\n        });\n      });\n\n      console.log(\"Updated table data:\", updatedTableData); // log the new data array\n\n      State.update({ tableData: updatedTableData });\n      console.log(\"State after update:\", State.get()); // log the state after the update\n    })\n    .catch((error) => {\n      console.error(\"Error fetching data:\", error); // log any fetch errors\n    });\n}\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\n// Handle the click event for entering the platform\nfunction handleClickEnter() {\n  State.update({ isPiggy: true });\n  alert(\"You have successfully entered the crowd funding platform.\");\n}\n\n// $sDAI?\nfunction handleEnterChainOne() {\n  State.update({ chainOne: true });\n  alert(\n    \"You have successfully entered the crowd saving platform on Chain One.\"\n  );\n}\n\n// $shETH\nfunction handleEnterChainTwo() {\n  State.update({ chainTwo: true });\n}\n\n//APECoin\nfunction handleEnterChainThree() {\n  State.update({ chainThree: true });\n  alert(\n    \"You have successfully entered the crowd saving platform on Chain Three.\"\n  );\n}\n\nreturn (\n  <Container>\n    <CoverImage\n      src=\"https://github.com/doulos819/piglet/blob/main/photo_2023-06-25_02-54-33.jpg?raw=true\"\n      alt=\"Cover\"\n    />\n    <Header>FAQ:</Header>\n    <Header>\n      1. The first step with Piglet is to purchace an NFT from Unlock Protocol.\n      If you do not yet have an NFT, you can get one at\n      <a\n        href=\"https://app.unlock-protocol.com/checkout?id=39b62ad3-07f2-442d-b2ef-d136d6a83374\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Unlock Protocol Checkout\n      </a>\n    </Header>\n    <Header>\n      2. Continue collecting NFTs according to your savings goals! If you\n      selected the recurring option, the savings will be topped up\n      automatically, and if you chose manual, then you will have to come back\n      weekly to get a new piggy.\n    </Header>\n    <Header>\n      3. This is the page to see how your saving is going. Records for all user\n      savings are saved, aggregated, and then displayed, powered by The Graph\n      Substreams!\n    </Header>\n    <Header>\n      4. To interact with Piglet crowd savings voting platform, you will need to\n      verify with Sismo Connect (workdcoin/polygon ID). This step is not needed\n      to take part in the personal savings flow.\n    </Header>\n    <PiggyImage\n      src=\"https://github.com/doulos819/mjr/blob/main/images/photo_2023-06-23_11-46-49.jpg?raw=true\"\n      alt=\"Piggy\"\n    />\n\n    <Title>\n      {addressWithoutPrefix ? (\n        <>\n          Hello {addressWithoutPrefix}! Welcome to Piglet, your community crowd\n          saving platform.\n        </>\n      ) : (\n        <>Welcome to Piglet, your community crowd saving platform.</>\n      )}\n    </Title>\n    {state.isLoading ? (\n      <div>Loading data...</div>\n    ) : state.isVerified ? (\n      <>\n        <Info>Thank you for verifying your humanity, piglet.</Info>\n        <Info>\n          You can now deposit into the piggy bank of your choice{\" \"}\n          {accountId ? `, ${accountId}` : \"\"}!\n        </Info>\n        <Button\n          onClick={state.chainOne ? undefined : handleEnterChainOne}\n          disabled={state.chainOne}\n          style={{ backgroundColor: state.chainOne ? \"grey\" : \"palevioletred\" }}\n        >\n          Enter Piggy Bank 1\n        </Button>\n        <Button\n          onClick={state.chainTwo ? undefined : handleEnterChainTwo}\n          disabled={state.chainTwo}\n          style={{ backgroundColor: state.chainTwo ? \"grey\" : \"palevioletred\" }}\n        >\n          Enter Piggy Bank 2\n        </Button>\n        <Button\n          onClick={state.chainThree ? undefined : handleEnterChainThree}\n          disabled={state.chainThree}\n          style={{\n            backgroundColor: state.chainThree ? \"grey\" : \"palevioletred\",\n          }}\n        >\n          Enter Piggy Bank 3\n        </Button>\n      </>\n    ) : (\n      <Button onClick={handleClickCrowd}>\n        Check to see if you are a part of the crowd.\n      </Button>\n    )}\n\n    <Info> {state.sender} </Info>\n\n    <Table>\n      <thead>\n        <tr>\n          <th>Address</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {state.tableData.length > 0 ? (\n          state.tableData.map((item, index) => (\n            <tr\n              key={index}\n              className={item.address === state.sender ? \"sender-row\" : \"\"}\n            >\n              <td>{item.address}</td>\n              <td>{item.value}</td>\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td colSpan=\"2\">No data to display</td>\n          </tr>\n        )}\n      </tbody>\n    </Table>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chloe.near/widget/piglet", "__row_index": 8}