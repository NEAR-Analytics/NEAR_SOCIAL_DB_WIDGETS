{"tx_hash": "5ZpBHyVhWzVRp4pg9cC4Qz2sf1B5WhQRGrbkytuqa5Ct", "action_id_social": "2jrjqpAxA8yVpM9UDPBt8STWxvg2LnFiKPz4VWXrBa1f-1-widget", "block_id": 88965026, "block_timestamp": "2023-04-06 16:28:13.226", "signer_id": "adminalpha.near", "widget_name": "DIG.Button", "source_code": "let {\n  disabled,\n  fill,\n  href,\n  icon,\n  iconLeft,\n  iconRight,\n  label,\n  loading,\n  size,\n  type,\n  variant,\n  ...forwardedProps\n} = props;\n\nfill = fill ?? \"solid\";\nsize = size ?? \"default\";\ntype = type ?? \"button\";\nvariant = variant ?? \"primary\";\n\nconst conditionalAttributes = href\n  ? {\n      as: \"a\",\n      href,\n    }\n  : {\n      type,\n      disabled: disabled || loading,\n    };\n\nif (icon) {\n  conditionalAttributes[\"aria-label\"] = label;\n}\n\nconst variants = {\n  primary: {\n    outline: {\n      background: \"var(--sand1)\",\n      border: \"var(--sand6)\",\n      color: \"var(--violet8)\",\n      iconColor: \"var(--violet9)\",\n      hover: {\n        border: \"var(--violet6)\",\n      },\n      focus: {\n        border: \"var(--violet9)\",\n      },\n      active: {\n        background: \"var(--violet2)\",\n        border: \"var(--violet7)\",\n      },\n    },\n    solid: {\n      background: \"var(--sand12)\",\n      border: \"var(--sand12)\",\n      color: \"var(--sand1)\",\n      iconColor: \"var(--sand11)\",\n      hover: {\n        background: \"var(--sand11)\",\n        border: \"var(--sand11)\",\n      },\n      focus: {},\n      active: {},\n    },\n  },\n  secondary: {\n    outline: {\n      background: \"var(--sand1)\",\n      border: \"var(--sand6)\",\n      color: \"var(--sand12)\",\n      iconColor: \"var(--sand10)\",\n      hover: {\n        border: \"var(--sand8)\",\n      },\n      focus: {\n        border: \"var(--violet8)\",\n      },\n      active: {\n        background: \"var(--sand3)\",\n        border: \"var(--sand8)\",\n      },\n    },\n    solid: {\n      background: \"var(--sand3)\",\n      border: \"var(--sand6)\",\n      color: \"var(--sand12)\",\n      iconColor: \"var(--sand11)\",\n      hover: {\n        background: \"var(--sand4)\",\n      },\n      focus: {\n        border: \"var(--violet8)\",\n      },\n      active: {\n        background: \"var(--sand5)\",\n      },\n    },\n  },\n  destructive: {\n    outline: {\n      background: \"var(--sand1)\",\n      border: \"var(--sand6)\",\n      color: \"var(--red8)\",\n      iconColor: \"var(--red9)\",\n      hover: {\n        border: \"var(--red6)\",\n      },\n      focus: {\n        border: \"var(--violet8)\",\n      },\n      active: {\n        background: \"var(--red2)\",\n        border: \"var(--red7)\",\n      },\n    },\n    solid: {\n      background: \"var(--red9)\",\n      border: \"var(--red8)\",\n      color: \"var(--red12)\",\n      iconColor: \"var(--red11)\",\n      hover: {\n        background: \"var(--red10)\",\n      },\n      focus: {\n        border: \"var(--red11)\",\n      },\n      active: {\n        background: \"var(--red8)\",\n      },\n    },\n  },\n  affirmative: {\n    outline: {\n      background: \"var(--sand1)\",\n      border: \"var(--sand6)\",\n      color: \"var(--green11)\",\n      iconColor: \"var(--green10)\",\n      hover: {\n        border: \"var(--green9)\",\n      },\n      focus: {\n        border: \"var(--violet8)\",\n      },\n      active: {\n        background: \"var(--green2)\",\n        border: \"var(--green8)\",\n      },\n    },\n    solid: {\n      background: \"var(--green9)\",\n      border: \"var(--green8)\",\n      color: \"var(--green12)\",\n      iconColor: \"var(--green11)\",\n      hover: {\n        background: \"var(--green10)\",\n      },\n      focus: {\n        border: \"var(--green11)\",\n      },\n      active: {\n        background: \"var(--green8)\",\n      },\n    },\n  },\n};\nvariants.primary.ghost = {\n  ...variants.primary.outline,\n  border: \"hsla(0, 0%, 100%, 0)\",\n  background: \"hsla(0, 0%, 100%, 0)\",\n};\nvariants.secondary.ghost = {\n  ...variants.secondary.outline,\n  border: \"hsla(0, 0%, 100%, 0)\",\n  background: \"hsla(0, 0%, 100%, 0)\",\n};\nvariants.destructive.ghost = {\n  ...variants.destructive.outline,\n  border: \"hsla(0, 0%, 100%, 0)\",\n  background: \"hsla(0, 0%, 100%, 0)\",\n};\nvariants.affirmative.ghost = {\n  ...variants.affirmative.outline,\n  border: \"hsla(0, 0%, 100%, 0)\",\n  background: \"hsla(0, 0%, 100%, 0)\",\n};\n\nconst sizes = {\n  small: {\n    font: \"var(--text-xs)\",\n    gap: \"6px\",\n    height: \"32px\",\n    icon: \"14px\",\n    paddingX: \"16px\",\n  },\n  default: {\n    font: \"var(--text-s)\",\n    gap: \"8px\",\n    height: \"40px\",\n    icon: \"18px\",\n    paddingX: \"20px\",\n  },\n  large: {\n    font: \"var(--text-base)\",\n    gap: \"8px\",\n    height: \"48px\",\n    icon: \"18px\",\n    paddingX: \"24px\",\n  },\n};\n\nfunction returnColor(state, key) {\n  if (state === \"default\") return variants[variant][fill][key];\n  return variants[variant][fill][state][key] || variants[variant][fill][key];\n}\n\nconst Button = styled.button`\n  all: unset;\n  box-sizing: border-box;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  width: ${icon ? sizes[size].height : undefined};\n  height: ${sizes[size].height};\n  padding: ${icon ? \"0\" : `0 ${sizes[size].paddingX}`};\n  font: ${sizes[size].font};\n  font-weight: 600;\n  line-height: 1;\n  border-radius: 100px;\n  background: ${returnColor(\"default\", \"background\")};\n  color: ${returnColor(\"default\", \"color\")};\n  border: 1px solid ${returnColor(\"default\", \"border\")};\n  box-shadow: 0 0 0 0px var(--violet4);\n  cursor: pointer;\n  transition: all 200ms;\n  text-decoration: none !important;\n\n  &:hover {\n    background: ${returnColor(\"hover\", \"background\")};\n    color: ${returnColor(\"hover\", \"color\")};\n    border: 1px solid ${returnColor(\"hover\", \"border\")};\n  }\n  &:focus {\n    background: ${returnColor(\"focus\", \"background\")};\n    color: ${returnColor(\"focus\", \"color\")};\n    border: 1px solid ${returnColor(\"focus\", \"border\")};\n    box-shadow: 0 0 0 4px var(--violet4);\n  }\n  &:active {\n    background: ${returnColor(\"active\", \"background\")};\n    color: ${returnColor(\"active\", \"color\")};\n    border: 1px solid ${returnColor(\"active\", \"border\")};\n  }\n\n  ${\n    loading &&\n    `\n    pointer-events: none;\n  `\n  }\n\n  ${\n    disabled &&\n    `\n    opacity: 1;\n    background: ${fill === \"ghost\" ? \"hsla(0, 0%, 100%, 0)\" : \"var(--sand3)\"};\n    border-color: var(--sand3);\n    color: var(--sand8);\n    pointer-events: none;\n\n    i {\n      color: var(--sand8) !important;\n    }\n  `\n  }\n`;\n\nconst Inner = styled.span`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: ${sizes[size].gap};\n\n  i {\n    font-size: ${sizes[size].icon};\n    line-height: ${sizes[size].icon};\n    color: ${icon ? undefined : returnColor(\"default\", \"iconColor\")};\n  }\n\n  ${\n    loading &&\n    `\n    opacity: 0;\n  `\n  }\n`;\n\nconst Label = styled.span``;\n\nconst Spinner = styled.i`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin: calc(${sizes[size].icon} * -0.5) auto 0;\n  width: ${sizes[size].icon};\n  height: ${sizes[size].icon};\n  font-size: ${sizes[size].icon};\n  line-height: ${sizes[size].icon};\n  animation: spin 800ms infinite linear;\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nreturn (\n  <Button ref=\"forwardedRef\" {...conditionalAttributes} {...forwardedProps}>\n    {loading && <Spinner className=\"ph-bold ph-circle-notch\" />}\n    <Inner>\n      {icon ? (\n        <i className={icon} />\n      ) : (\n        <>\n          {iconLeft && <i className={iconLeft} />}\n          <Label>{label}</Label>\n          {iconRight && <i className={iconRight} />}\n        </>\n      )}\n    </Inner>\n  </Button>\n);\n", "metadata": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/adminalpha.near/widget/DIG.Button", "branch.draft.": NaN, "branch.draft.metadata": NaN, "branch": NaN, "metadata.description": NaN, "metadata.name": NaN}