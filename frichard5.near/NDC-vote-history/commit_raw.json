{"tx_hash": "8ACkKaGiQbVwWmRdAtwwW5XPwy6H9bYEuxysyvXyttUa", "action_id_social": "2LhS5qswf2GehBqfVFJDbNf5UQtZ9JKDeoYmwzdLRvKB-0-widget", "block_id": 90329315, "block_timestamp": "2023-04-24 14:48:01.962", "signer_id": "frichard5.near", "widget_name": "NDC-vote-history", "source_code": "const widgetProvider = props.widgetProvider;\nconst account = props.account || \"marketing.sputnik-dao.near\";\nconst apiUrl = `https://api.pikespeak.ai/daos/votes-history/${account}`;\nconst apiProposalUrl = `https://api.pikespeak.ai/daos/proposal/marketing.sputnik-dao.near`;\nconst apiPolicyUrl = `https://api.pikespeak.ai/daos/policy/${account}`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst thumbUpSvg = (\n  <svg\n    class=\"approved-icon\"\n    focusable=\"false\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 24 24\"\n    data-testid=\"ThumbUpIcon\"\n  >\n    <path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"></path>\n  </svg>\n);\nconst thumbDownSvg = (\n  <svg\n    class=\"rejected-icon\"\n    focusable=\"false\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 24 24\"\n    data-testid=\"ThumbDownIcon\"\n  >\n    <path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"></path>\n  </svg>\n);\n\nconst getVoteSvg = (vote) => {\n  switch (vote) {\n    case \"VoteReject\":\n      return thumbDownSvg;\n    case \"VoteApprove\":\n      return thumbUpSvg;\n  }\n};\n\nconst columns = [\n  {\n    id: \"timestamp\",\n    label: \"Date\",\n    formatter: (d) => {\n      return new Date(d.timestamp).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n      });\n    },\n  },\n  {\n    id: \"sender\",\n    label: \"Voter\",\n    formatter: (d) => {\n      return (\n        <a\n          href={`https://explorer.near.org/accounts/${d.transaction_view.sender}`}\n          target=\"_blank\"\n        >\n          {d.transaction_view.sender}\n        </a>\n      );\n    },\n  },\n  {\n    id: \"id\",\n    label: \"Proposal id\",\n    formatter: (d) => {\n      const proposalId = d.transaction_view.actProposal.id;\n      const setModal = (proposalId) => {\n        return () => {\n          State.update({ isModalOpen: true, proposalId: proposalId });\n        };\n      };\n      return <button onClick={setModal(proposalId)}>{proposalId}</button>;\n    },\n  },\n  {\n    id: \"action\",\n    label: \"Vote\",\n    formatter: (d) => {\n      return getVoteSvg(d.transaction_view.actProposal.action);\n    },\n  },\n  {\n    id: \"transaction_id\",\n    label: \"Tx id\",\n    formatter: (d) => {\n      return (\n        <a\n          href={`https://explorer.near.org/transactions/${d.transaction_id}`}\n          target=\"_blank\"\n        >\n          {d.transaction_id}\n        </a>\n      );\n    },\n  },\n];\n\nconst resPerPage = 10;\n\nState.init({\n  votes: [],\n  offset: 0,\n  isModalOpen: false,\n  proposal: [],\n});\n\nconst nextPage = () => {\n  State.update({ offset: state.offset + resPerPage });\n};\n\nconst previousPage = () => {\n  State.update({ offset: state.offset - resPerPage });\n};\n\nconst GenericTable = (\n  <Widget\n    src={`${widgetProvider}/widget/generic_table`}\n    props={{\n      title: \"Votes history\",\n      columns,\n      data: state.votes,\n      nextPage,\n      previousPage,\n      offset: state.offset,\n      resPerPage,\n    }}\n  />\n);\n\nconst ProposalCard = (\n  <Widget\n    src={`${widgetProvider}/widget/NDC-proposal-card`}\n    props={{\n      proposal: state.proposal,\n      council: state.council,\n    }}\n  />\n);\n\nconst fetchVoteHistory = (offset) => {\n  const voteHistory = fetch(apiUrl + `?offset=${offset}&limit=${resPerPage}`, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  voteHistory.body &&\n    State.update({\n      votes: voteHistory.body,\n    });\n};\n!state.votes.length && fetchVoteHistory(state.offset);\n\nconst fetchProposal = (id) => {\n  const proposal = fetch(apiProposalUrl + `?id=${id}`, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  proposal.body &&\n    State.update({\n      proposal: proposal.body.length ? proposal.body[0] : [],\n    });\n};\n\nstate.proposalId && fetchProposal(state.proposalId);\n\nconst fetchPolicy = () => {\n  const policy = asyncFetch(apiPolicyUrl, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  }).then(({ err, body, ok }) => {\n    if (ok) {\n      State.update({\n        council: body.state.policy.roles.find((r) => r.name === \"Council\").kind,\n      });\n    }\n  });\n};\n\n!state.council && fetchPolicy();\n\nconst toggleModal = (isOpen) => {\n  State.update({ isModalOpen: isOpen });\n};\n\nreturn (\n  <>\n    {state.proposal && state.isModalOpen && state.council ? (\n      <Widget\n        src={`${widgetProvider}/widget/NDC-modal`}\n        props={{\n          isOpen: state.isModalOpen,\n          toggleModal,\n          component: ProposalCard,\n        }}\n      />\n    ) : (\n      \"\"\n    )}\n\n    {GenericTable}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/NDC-vote-history"}