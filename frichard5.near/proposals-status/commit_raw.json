{"tx_hash": "Dtfh1Yxzp893YaETMctj8uokVU3fo6BnamgQ9VCkbkfp", "action_id_social": "DK7ugZfs2ALUzn32vrnzkTAwmMciyAbzXZQGZiV29QNH-0-widget", "block_id": 88952543, "block_timestamp": "2023-04-06 12:31:29.334", "signer_id": "frichard5.near", "widget_name": "proposals-status", "source_code": "const widgetProvider = props.widgetProvider;\nconst account = props.account || \"marketing.sputnik-dao.near\";\nconst apiUrl = `https://api.pikespeak.ai/daos/proposals/status/${account}`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nState.init({\n  proposalsStatus: [],\n});\n\nconst order = [\n  { proposal_type: 0 },\n  { Approved: 1 },\n  { Rejected: 2 },\n  { Expired: 3 },\n];\nconst columns = state.proposalsStatus\n  .reduce((acc, pS) => {\n    Object.keys(pS).forEach((k) => {\n      if (!acc.find((c) => c.id === k)) {\n        acc.push({\n          id: k,\n          label: k === \"proposal_type\" ? \"Type\" : k,\n        });\n      }\n    });\n    return acc;\n  }, [])\n  .sort((a, b) => order[a.id] - order[b.id]);\n\nconst GenericTable = (\n  <Widget\n    src={`${widgetProvider}/widget/generic_table`}\n    props={{\n      title: `Status stats`,\n      columns,\n      data: state.proposalsStatus,\n    }}\n  />\n);\n\nconst fetchTransfers = () => {\n  const proposalsStatus = fetch(apiUrl, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  proposalsStatus.body &&\n    State.update({ proposalsStatus: proposalsStatus.body });\n};\nfetchTransfers();\n\nreturn <>{GenericTable}</>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/proposals-status"}