{"tx_hash": "CjhUn5WsNpyUQBbQ6dw3kGQ9CXg8i4sG4qJN76apZEwp", "action_id_social": "51U74WTFMAyF9h6D2Dr2jYwzddbeosjqr74waKEpunbT-0-widget", "block_id": 89855833, "block_timestamp": "2023-04-18 09:22:06.126", "signer_id": "frichard5.near", "widget_name": "proposal-status-by-month", "source_code": "const widgetProvider = props.widgetProvider;\nconst account = props.account || \"marketing.sputnik-dao.near\";\nconst apiUrl = `https://api.pikespeak.ai/daos/proposals/status-by-day/${account}`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nState.init({\n  proposalsByMonth: [],\n});\n\nconst fetchTransfers = () => {\n  const proposalsByMonth = fetch(apiUrl, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  if (proposalsByMonth.body) {\n    proposalsByMonth.body.forEach((proposal) => {\n      const { proposal_type, status, count, day } = proposal;\n      const year = new Date(proposal.day).getFullYear();\n      const month = new Date(proposal.day).getMonth() + 1;\n\n      const key = `${year}-${month}`;\n\n      if (groupedProposals.hasOwnProperty(key)) {\n        const entry = groupedProposals[key].find(\n          (e) => e.proposal_type === proposal_type && e.status === status\n        );\n        if (entry) {\n          entry.count = parseInt(entry.count) + parseInt(count);\n        } else {\n          groupedProposals[key].push({\n            proposal_type,\n            status,\n            count,\n            day,\n          });\n        }\n      } else {\n        groupedProposals[key] = [\n          {\n            proposal_type,\n            status,\n            count,\n            day,\n          },\n        ];\n      }\n    });\n\n    const byMonth = Object.keys(groupedProposals)\n      .map((key) => {\n        const [year, month] = key.split(\"-\");\n        return {\n          year,\n          month,\n          proposals: groupedProposals[key],\n        };\n      })\n      .sort((a, b) => {\n        if (a.year !== b.year) {\n          return a.year - b.year;\n        } else {\n          return a.month - b.month;\n        }\n      });\n  }\n  State.update({ proposalsByMonth: byMonth });\n};\nfetchTransfers();\n\nconsole.log(state.proposalsByMonth);\n\nreturn <div>Hello World</div>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/proposal-status-by-month"}