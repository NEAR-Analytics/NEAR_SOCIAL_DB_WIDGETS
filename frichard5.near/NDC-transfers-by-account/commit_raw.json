{"tx_hash": "2TJVV3Csij5e8Fo5d9Hrbq8n1bExMEDawYcrQpx8TVgS", "action_id_social": "B6novngcvwq9xXDQEgEQVjWrzQaC9q54fu9LD2PbWK7h-0-widget", "block_id": 90987452, "block_timestamp": "2023-05-03 07:23:24.717", "signer_id": "frichard5.near", "widget_name": "NDC-transfers-by-account", "source_code": "const widgetProvider = props.widgetProvider;\nconst account = props.account || \"marketing.sputnik-dao.near\";\nconst ftList = props.ftList;\nconst resPerPage = 10;\nconst apiUrl = `https://api.pikespeak.ai/daos/transfers-beneficiaries/${account}`;\nconst apiProposalUrl = `https://api.pikespeak.ai/daos/proposal/${account}`;\nconst apiPolicyUrl = `https://api.pikespeak.ai/daos/policy`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst columns = [\n  {\n    id: \"account\",\n    label: \"Beneficiary\",\n    formatter: (d) => {\n      return (\n        <a\n          href={`https://explorer.near.org/accounts/${d.account}`}\n          target=\"_blank\"\n        >\n          {d.account}\n        </a>\n      );\n    },\n  },\n  {\n    id: \"proposals\",\n    label: \"Transfers\",\n    formatter: (d) => {\n      return d.proposals.map((p) => {\n        const transferData = p.proposal.kind;\n        const proposalId = p.proposal_id;\n        const setModal = (proposalId) => {\n          return () => {\n            State.update({\n              isModalOpen: true,\n              proposalId: proposalId,\n              fetchingProposal: true,\n            });\n          };\n        };\n\n        return (\n          <div style={{ display: \"flex\", marginBottom: \"5px\" }}>\n            <Widget\n              src={`${widgetProvider}/widget/table_ft_formatter`}\n              props={{\n                ftList,\n                amount: transferData.parsedAmount,\n                ft: transferData.token_id,\n                isParsed: true,\n              }}\n            />\n            <button\n              onClick={setModal(proposalId)}\n              style={{ marginLeft: \"10px\" }}\n            >\n              {proposalId}\n            </button>\n          </div>\n        );\n      });\n    },\n  },\n  {\n    id: \"totalEstimatedValue\",\n    label: \"Estimated Value\",\n    formatter: (d) => {\n      return <span>$ {d.totalEstimatedValue.toFixed(2)}</span>;\n    },\n  },\n];\n\nState.init({\n  offset: 0,\n  account,\n  displayedRank: [],\n  isModalOpen: false,\n  proposal: false,\n  fetchingProposal: false,\n});\n\nconst nextPage = () => {\n  const currentOffset = state.offset + resPerPage;\n  State.update({\n    offset: currentOffset,\n    displayedRank: [\n      ...state.ranking.slice(currentOffset, resPerPage + currentOffset),\n    ],\n  });\n};\n\nconst previousPage = () => {\n  const currentOffset = state.offset - resPerPage;\n  State.update({\n    offset: currentOffset,\n    displayedRank: state.ranking.slice(\n      currentOffset,\n      resPerPage + currentOffset\n    ),\n  });\n};\n\nconst fetchProposal = (id) => {\n  const proposal = fetch(apiProposalUrl + `?id=${id}`, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  proposal.body &&\n    State.update({\n      proposal: proposal.body.length ? proposal.body[0] : [],\n      fetchingProposal: false,\n    });\n};\n\nfetchProposal(state.proposalId);\n\nconst fetchPolicy = (daos) => {\n  const policy = asyncFetch(apiPolicyUrl + `?daos=${daos}`, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  }).then(({ err, body, ok }) => {\n    if (ok) {\n      State.update({\n        council: body.state.policy.roles.find(\n          (r) => r.name === \"Council\" || r.name === \"council\"\n        ).kind,\n      });\n    }\n  });\n};\n\n!state.council && fetchPolicy([account]);\n\nconst fetchTransfersBeneficiaries = () => {\n  const beneficiaries = fetch(apiUrl, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  beneficiaries.body &&\n    State.update({\n      ranking: beneficiaries.body,\n      displayedRank: beneficiaries.body.slice(0, resPerPage),\n    });\n};\n\n!state.displayedRank.length && fetchTransfersBeneficiaries();\n\nconst GenericTable = (\n  <Widget\n    src={`${widgetProvider}/widget/generic_table`}\n    props={{\n      title: \"Transfers beneficiaries ranking\",\n      columns,\n      data: state.displayedRank,\n      nextPage,\n      previousPage,\n      offset: state.offset,\n      resPerPage,\n    }}\n  />\n);\n\nconst ProposalCard = (\n  <Widget\n    src={`${widgetProvider}/widget/NDC-proposal-card`}\n    props={{\n      widgetProvider,\n      proposal: state.proposal,\n      council: state.council,\n    }}\n  />\n);\n\nconst toggleModal = (isOpen) => {\n  State.update({ isModalOpen: isOpen });\n};\n\nreturn (\n  <div>\n    {state.proposal &&\n    state.isModalOpen &&\n    state.council &&\n    !state.fetchingProposal ? (\n      <Widget\n        src={`${widgetProvider}/widget/NDC-modal`}\n        props={{\n          isOpen: state.isModalOpen,\n          toggleModal,\n          component: ProposalCard,\n        }}\n      />\n    ) : (\n      \"\"\n    )}\n    {state.displayedRank.length ? GenericTable : \"\"}\n    {state.ranking && state.ranking.length === 0 && (\n      <span>No Transfer Proposal Beneficiaries</span>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/NDC-transfers-by-account"}