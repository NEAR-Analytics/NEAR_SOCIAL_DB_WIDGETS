{"tx_hash": "UDiH7zs6artaEgCMSDScQzRKn7y1VvqbrxDYTVjMnPv", "action_id_social": "6EFazvte5jUmtyBxvvjNG88sucapU3DfWJPT24aT7sKV-0-widget", "block_id": 93582408, "block_timestamp": "2023-06-06T11:21:49.256Z", "signer_id": "frichard5.near", "widget_name": "proposals", "source_code": "const widgetProvider = props.widgetProvider;\nconst account = props.account || \"marketing.sputnik-dao.near\";\nconst ftList = props.ftList;\nconst apiUrl = `https://api.pikespeak.ai/daos/proposals`;\nconst apiPolicyUrl = `https://api.pikespeak.ai/daos/policy`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst ndcList = [\n    \"ndctrust.sputnik-dao.near\",\n    \"marketing.sputnik-dao.near\",\n    \"creativesdao.sputnik-dao.near\",\n    \"neardevgov.sputnik-dao.near\",\n    \"gwg.sputnik-dao.near\",\n]\nconst daosList = ndcList.includes(account)?ndcList:[account];\n\nconst forgeUrl = (apiUrl, params) =>\n    apiUrl +\n    Object.keys(params).sort().reduce(\n        (paramString, p) => paramString + `${p}=${params[p]}&`,\n        \"?\"\n    );\n\nconst detailSvg = <svg width=\"20\" className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium MuiBox-root css-1om0hkc\"\n                       focusable=\"false\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" data-testid=\"LoupeIcon\">\n    <path\n        d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10h8c1.1 0 2-.9 2-2v-8c0-5.51-4.49-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"></path>\n</svg>;\n\nconst ProposalContainer = styled.div`\n  box-shadow: 3px 2px 24px rgba(68, 152, 224, 0.3);\n  border-radius: 4px;\n  padding: 20px;\n  margin-top: 40px;\n  min-height: 500px;\n`;\n\nconst NoProposal = styled.div`\n  text-align: center;\n  margin-top: 100px;\n`;\n\nconst resPerPage = 10;\n\nState.init({\n    offset: 0,\n    //lastProposalFetch: [],\n    proposals: [],\n    isFetchingProposals: false,\n    types: [],\n    account: account,\n    status: [],\n    fromDate: \"\",\n    toDate: \"\",\n    daos:  props.initialSelectedDaos || [account],\n    isModalOpen: false\n});\n\nconst columns = [\n    {\n        id: \"submission_time\",\n        label: \"Date\",\n        formatter: (data) => {\n            return new Date(data.submission_time).toLocaleDateString(\"en-US\", {\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n            });\n        },\n    },\n    {\n        id: \"proposal_type\",\n        label: \"type\",\n    },\n    {\n        id: \"proposer\",\n        label: \"Proposer\",\n        formatter: (d) => {\n            return (\n                <a\n                    href={`https://explorer.near.org/accounts/${d.proposer}`}\n                    target=\"_blank\"\n                >\n                    {d.proposer}\n                </a>\n            );\n        },\n    },\n    {\n        id: \"proposal_id\",\n        label: \"Proposal Id\",\n    },\n    {\n        id: \"dao_id\",\n        label: \"Dao\",\n        formatter: (d) => {\n            return (\n                <a\n                    href={`https://explorer.near.org/accounts/${d.dao_id}`}\n                    target=\"_blank\"\n                >\n                    {d.dao_id}\n                </a>\n            );\n        },\n    },\n    {\n        id: \"status\",\n        label: \"Status\",\n        formatter: (d) => {\n            const status = d.status;\n            const Status = styled.div`\n              font-weight: 700;\n              color: ${(props) => {\n                switch (props.status) {\n                  case \"Rejected\":\n                    return \"#ff5e03\";\n                  case \"Approved\":\n                    return \"#13a36e\";\n                  case \"Expired\":\n                    return \"grey\";\n                  case \"InProgress\":\n                    return \"#ff8743\";\n                }\n              }}\n            `;\n            return <Status status={status}>{status}</Status>\n        }\n    },\n    {\n        id: \"\",\n        label: \"Details\",\n        formatter: (d) => {\n            const setModal = () => {\n                State.update({\n                    isModalOpen: true,\n                    detailedProposal: d,\n                });\n            };\n            return <button style={{marginLeft: 0}} onClick={setModal}> {detailSvg}</button>\n        }\n    }\n];\n\nconst nextPage = () => {\n    fetchProposal( state.offset + resPerPage)\n    State.update({offset: state.offset + resPerPage});\n};\n\nconst previousPage = () => {\n    fetchProposal( state.offset - resPerPage)\n    State.update({offset: state.offset - resPerPage});\n};\n\n\nconst GenericTable = (\n    <Widget\n        src={`${widgetProvider}/widget/generic_table`}\n        props={{\n            columns,\n            data: state.proposals,\n            nextPage,\n            previousPage,\n            offset: state.offset,\n            resPerPage,\n            maxHeight: 800,\n            boxShadow: 'unset'\n        }}\n    />\n);\n\nconst fetchPolicy = (params) => {\n    const policy = fetch(forgeUrl(apiPolicyUrl, params), {\n        mode: \"cors\",\n        headers: {\n            \"x-api-key\": publicApiKey,\n        },\n    })\n\n    policy.body && State.update({\n        policy: policy.body.length ? policy.body : [policy.body],\n    });\n};\n\nconst fetchProposal = (offset) => {\n    State.update({fetchingProposals: true});\n    asyncFetch(forgeUrl(apiUrl, {\n        offset: offset,\n        limit: resPerPage,\n        proposal_types: state.types,\n        status: state.status,\n        time_start: state.fromDate,\n        time_end: state.toDate,\n        daos: state.daos,\n    }), {\n        mode: \"cors\",\n        headers: {\n            \"x-api-key\": publicApiKey,\n            \"no-cache\": true,\n        },\n    }).then((res) => {\n        res.body && State.update({proposals: res.body, fetchingProposals:false});\n    })\n};\n\n!state.fetchingProposals && !state.proposals.length && fetchProposal(state.offset);\n\nif (!state.policy) {\n    fetchPolicy({daos: daosList});\n}\n\nif (state.account != account) {\n    State.update({proposals: [], account, offset: 0, daos: [account]});\n}\n\nconst selectType = (types) => {\n    State.update({\n        proposals: [],\n        offset: 0,\n        types: types,\n    });\n};\n\nconst typeOptions = [\n    \"Transfer\",\n    \"Vote\",\n    \"FunctionCall\",\n    \"AddBounty\",\n    \"BountyDone\",\n    \"AddMemberToRole\",\n    \"RemoveMemberFromRole\",\n    \"ChangeConfig\",\n    \"ChangePolicy\",\n    \"ChangePolicyUpdateParameters\",\n    \"ChangePolicyUpdateDefaultVotePolicy\",\n    \"ChangePolicyRemoveRole\",\n    \"ChangePolicyAddOrUpdateRole\",\n    \"FactoryInfoUpdate\",\n    \"SetStakingContract\",\n    \"UpgradeRemote\",\n    \"UpgradeSelf\",\n].map((t) => {\n    return {\n        value: t,\n        label: t,\n    };\n});\nconst SelectType = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-checkbox-list`}\n        props={{\n            widgetProvider,\n            checkboxes: typeOptions,\n            selectedBoxes: [...state.types],\n            onChange: selectType,\n            label: \"Type\",\n            id: \"proposal-type-selector\",\n        }}\n    />\n);\n\nconst selectStatus = (status) => {\n    State.update({\n        status,\n        proposals: [],\n        offset: 0,\n    });\n};\n\nconst selectDaos = (daos) => {\n    State.update({\n        daos,\n        proposals: [],\n        offset: 0,\n    });\n};\n\nconst getCouncil = (policy, proposalDaoId) => {\n    const votePermissions = [\"*:VoteApprove\", \"*:VoteReject\"];\n    const proposalPolicy = policy.filter((pol) => pol.dao_id === proposalDaoId)\n    if(proposalPolicy.length) {\n        let council = proposalPolicy[0].state.policy.roles.reduce((acc,role) => {\n            if(role.permissions.some((p) => votePermissions.includes(p))) {\n                acc.push(...role.kind)\n            }\n            return acc\n        }, [])\n        return council;\n    }\n}\n\nconst statusOptions = [\"Approved\", \"Rejected\", \"InProgress\", \"Expired\"].map(\n    (t) => {\n        return {\n            value: t,\n            label: t,\n        };\n    }\n);\n\nconst SelectStatus = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-checkbox-list`}\n        props={{\n            widgetProvider,\n            checkboxes: statusOptions,\n            selectedBoxes: [...state.status],\n            onChange: selectStatus,\n            label: \"Status\",\n            id: \"proposal-status-selector\",\n        }}\n    />\n);\n\nconst daosOptions = daosList.map((t) => {\n    return {\n        value: t,\n        label: t.split(\".\")[0],\n    };\n});\n\nconst SelectDaos = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-checkbox-list`}\n        props={{\n            widgetProvider,\n            checkboxes: daosOptions,\n            selectedBoxes: [...state.daos],\n            onChange: selectDaos,\n            label: \"Daos\",\n            id: \"proposal-daos-selector\",\n        }}\n    />\n);\n\nconst SelectFromDate = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-input`}\n        props={{\n            widgetProvider,\n            validate: \"date\",\n            sendInput: (fromDate) => {\n                State.update({\n                    fromDate,\n                    proposals: [],\n                    offset: 0,\n                });\n            },\n            placeholder: \"yyyy/mm/dd\",\n            label: \"From Date\",\n        }}\n    />\n);\nconst SelectToDate = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-input`}\n        props={{\n            widgetProvider,\n            validate: \"date\",\n            sendInput: (toDate) => {\n                State.update({\n                    toDate,\n                    proposals: [],\n                    offset: 0,\n                });\n            },\n            placeholder: \"yyyy/mm/dd\",\n            label: \"To Date\",\n        }}\n    />\n);\n\n\nconst getFilters = () => {\n    let filters = [...state.status, ...state.types, ...state.daos];\n    if (state.fromDate.length) {\n        filters.push(`From: ${state.fromDate}`);\n    }\n    if (state.toDate.length) {\n        filters.push(`From: ${state.toDate}`);\n    }\n    return filters;\n};\n\nconst ProposalFilters = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-filter-menu`}\n        props={{\n            widgetProvider,\n            comps: [\n                SelectDaos,\n                SelectType,\n                SelectStatus,\n                SelectFromDate,\n                SelectToDate,\n            ],\n            filters: getFilters(),\n            removeFilter: (filter) => {\n                State.update({\n                    types: [...state.types.filter((t) => t != filter)],\n                    status: [...state.status.filter((s) => s != filter)],\n                    daos: [...state.daos.filter((d) => d != filter)],\n                    fromDate: filter.includes(state.fromDate) ? \"\" : state.fromDate,\n                    proposals: [],\n                    offset: 0,\n                    limit: resPerPage,\n                });\n            },\n            resetFilters: () => {\n                State.update({\n                    types: [],\n                    status: [],\n                    proposals: [],\n                    offset: 0,\n                    daos: [state.account],\n                    limit: resPerPage,\n                });\n            },\n        }}\n    />\n);\n\nconst toggleModal = (isOpen) => {\n    State.update({ isModalOpen: isOpen });\n};\n\nconst ProposalCard = (\n    <Widget\n        src={`${widgetProvider}/widget/NDC-proposal-card`}\n        props={{\n            proposal: state.detailedProposal,\n            widgetProvider,\n            ftList,\n            council: state.policy && state.detailedProposal.dao_id && getCouncil(state.policy, state.detailedProposal.dao_id),\n            voteExpired:\n                state.policy &&\n                state.policy.filter((pol) => pol.dao_id === state.detailedProposal.dao_id)[0].state\n                    .policy.proposal_period,\n        }}\n    />\n);\n\nreturn <div>\n    {state.isModalOpen && state.policy ? (\n        <Widget\n            src={`${widgetProvider}/widget/NDC-modal`}\n            props={{\n                isOpen: state.isModalOpen,\n                toggleModal,\n                component: ProposalCard,\n            }}\n        />\n    ) : (\n        \"\"\n    )}\n    <ProposalContainer>\n        {ProposalFilters}\n        {state.proposals.length ? GenericTable : <NoProposal>No proposal found.</NoProposal>}\n    </ProposalContainer>\n</div>", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/proposals", "__row_index": 0}