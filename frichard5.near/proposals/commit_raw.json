{"tx_hash": "FFb2FUveGGkpw9WCBPu2TZ4mEJCj4qnuWoPGGCaEnxVv", "action_id_social": "6Z21osHnmrFeJiexX89twqBGQK1nrgdG8CmBLHQecttJ-0-widget", "block_id": 89033245, "block_timestamp": "2023-04-07 13:44:23.678", "signer_id": "frichard5.near", "widget_name": "proposals", "source_code": "const widgetProvider = props.widgetProvider;\nconst account = props.account || \"marketing.sputnik-dao.near\";\nconst apiUrl = `https://api.pikespeak.ai/daos/proposals/${account}`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst forgeUrl = (apiUrl, params) =>\n  apiUrl +\n  Object.keys(params).reduce(\n    (paramString, p) => paramString + `${p}=${params[p]}&`,\n    \"?\"\n  );\n\nconst ProposalContainer = styled.div`\n  min-height: 100px\n`;\n\nconst NoProposal = styled.div`\n  text-align: center;\n  margin-top: 100px;\n`;\n\nconst resPerPage = 10;\n\nState.init({\n  offset: 0,\n  lastProposalFetch: [],\n  proposals: [],\n  isLoading: false,\n  type: \"all\",\n});\n\nconst columns = [\n  {\n    id: \"submission_time\",\n    label: \"Submission time\",\n  },\n  {\n    id: \"proposal_id\",\n    label: \"Proposal Id\",\n  },\n  {\n    id: \"status\",\n    label: \"Status\",\n  },\n  {\n    id: \"proposal_type\",\n    label: \"type\",\n  },\n];\n\nconst nextPage = () => {\n  State.update({ offset: state.offset + resPerPage });\n};\n\nconst previousPage = () => {\n  State.update({ offset: state.offset - resPerPage });\n};\n\nconst GenericTable = (\n  <Widget\n    src={`${widgetProvider}/widget/generic_table`}\n    props={{\n      title: `${account} proposals`,\n      columns,\n      data: state.proposals,\n      nextPage,\n      previousPage,\n      offset: state.offset,\n      resPerPage,\n    }}\n  />\n);\n\nconst fetchProposal = (params) => {\n  const proposals = asyncFetch(forgeUrl(apiUrl, params), {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  }).then(({ err, body, ok }) => {\n    if (ok) {\n      const allProposals = [...state.proposals, ...body];\n      State.update({\n        lastProposalFetch: body,\n        proposals: allProposals,\n        isLoading: false,\n      });\n    }\n  });\n};\n\nif (!state.proposals.length) {\n  fetchProposal({\n    limit: resPerPage,\n    offset: state.offset,\n    proposal_type: state.type,\n  });\n}\n\nconst fetchMore = () => {\n  if (!state.isLoading) {\n    State.update({ offset: state.offset + resPerPage, isLoading: true });\n    fetchProposal({\n      limit: resPerPage,\n      offset: state.offset,\n      proposal_type: state.type,\n    });\n  }\n};\n\nconst ProposalCards = [];\nconsole.log(\"state PROPOSALS\", state.proposals);\nstate.proposals.forEach((proposal) => {\n  ProposalCards.push(\n    <Widget\n      src={`${widgetProvider}/widget/NDC-proposal-card`}\n      props={{\n        proposal,\n      }}\n    />\n  );\n});\n\nconst selectType = (e) => {\n  State.update({ type: e.target.value, proposals: [] });\n  fetchProposal({\n    limit: resPerPage,\n    offset: 0,\n    proposal_type: state.type,\n  });\n};\n\nconst typeOptions = [\n  \"ChangePolicyUpdateParameters\",\n  \"ChangePolicyUpdateDefaultVotePolicy\",\n  \"ChangePolicyRemoveRole\",\n  \"ChangePolicyAddOrUpdateRole\",\n  \"FactoryInfoUpdate\",\n  \"BountyDone\",\n  \"SetStakingContract\",\n  \"UpgradeRemote\",\n  \"UpgradeSelf\",\n  \"ChangePolicy\",\n  \"AddBounty\",\n  \"Vote\",\n  \"ChangeConfig\",\n  \"Transfer\",\n  \"FunctionCall\",\n  \"AddMemberToRole\",\n  \"RemoveMemberFromRole\",\n].map((t) => {\n  return {\n    value: t,\n    label: t,\n  };\n});\nconst SelectType = (\n  <Widget\n    src={`${widgetProvider}/widget/NDC-select`}\n    props={{\n      options: typeOptions,\n      selectedOption: state.type,\n      onChange: selectType,\n    }}\n  />\n);\n\nconst ProposalInfiniteScroll = (\n  <Widget\n    src={`${widgetProvider}/widget/proposals_scroll`}\n    props={{\n      cards: ProposalCards,\n      fetchMore: fetchMore,\n      hasMore: state.lastProposalFetch.length === resPerPage,\n    }}\n  />\n);\n\nreturn (\n  <ProposalContainer>\n    {SelectType}\n    {state.proposals.length ? (\n      ProposalInfiniteScroll\n    ) : (\n      <NoProposal>No proposal found.</NoProposal>\n    )}\n  </ProposalContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/proposals"}