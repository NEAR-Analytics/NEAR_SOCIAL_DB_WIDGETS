{"tx_hash": "EDwNDyeG5uo7TM7mzogMV7mGqYR5bB3rcDUuf3ZZBrK3", "action_id_social": "DHTF2efLd8TQgksH2j9efEyDuQD97eRDKtKjpxFoo9PC-0-widget", "block_id": 91013934, "block_timestamp": "2023-05-03 15:55:46.694", "signer_id": "frichard5.near", "widget_name": "NDC-search", "source_code": "const { account, widgetProvider, proposal_id, ftList } = props;\nconst apiProposalUrl = `https://api.pikespeak.ai/daos/proposal/${account}`;\nconst apiPolicyUrl = `https://api.pikespeak.ai/daos/policy`;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconsole.log(\"PROPS SEEARCH\", props);\n\nState.init({\n  input: \"\",\n  ftList: ftList,\n  proposal_id: proposal_id,\n});\n\n// Fetch\nif (!ftList) {\n  const fetchedFtList = fetch(refUrl);\n  State.update({ ftList: fetchedFtList.body });\n}\n\nconst Input = (\n  <Widget\n    src={`${widgetProvider}/widget/NDC-input`}\n    props={{\n      buttonLabel: \"Search\",\n      placeholder: \"Enter an account address or a proposal id\",\n      sendInput: (i) => {\n        if (!isNaN(i)) {\n          State.update({ proposal_id: i, fetchingProposal: true });\n        }\n      },\n    }}\n  />\n);\n\nconst ProposalCard = (\n  <Widget\n    src={`${widgetProvider}/widget/NDC-proposal-card`}\n    props={{\n      proposal: state.proposal,\n      widgetProvider,\n      ftList: state.ftList,\n      council:\n        state.policy &&\n        state.policy.state.policy.roles.find(\n          (r) => r.name === \"Council\" || r.name === \"council\"\n        ).kind,\n      voteExpired: state.policy && state.policy.state.policy.proposal_period,\n    }}\n  />\n);\n\nconst fetchProposal = (id) => {\n  const proposal = fetch(apiProposalUrl + `?id=${id}`, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  proposal.body &&\n    State.update({\n      proposal: proposal.body.length ? proposal.body[0] : false,\n      error: !proposal.body.length\n        ? `Proposal ${state.proposal_id} not found`\n        : false,\n      fetchingProposal: false,\n    });\n};\n\nconst fetchPolicy = (daos) => {\n  const policy = asyncFetch(apiPolicyUrl + `?daos=${daos}`, {\n    mode: \"cors\",\n    headers: {\n      \"x-api-key\": publicApiKey,\n    },\n  }).then(({ err, body, ok }) => {\n    if (ok) {\n      State.update({\n        policy: body,\n      });\n    }\n  });\n};\n\n!state.policy && fetchPolicy([account]);\n\nfetchProposal(state.proposal_id);\n\nconst Error = styled.div`\n`;\n\nconst InputWrapper = styled.div`\n\n`;\n\nreturn (\n  <>\n    <InputWrapper>{Input}</InputWrapper>\n    {!state.fetchingProposal && state.proposal && state.policy && ProposalCard}\n    {state.error && <Error>{state.error}</Error>}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frichard5.near/widget/NDC-search"}