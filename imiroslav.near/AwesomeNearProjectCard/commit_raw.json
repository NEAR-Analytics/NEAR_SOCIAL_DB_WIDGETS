{"tx_hash": "97wJmPJX3sQifV7x1JxbXvvZUe1qPQ4gMAkKvqBF1KmU", "action_id_social": "BmWk2H6RYkj3qCKRVJmD9y4wFHAx9rYF47iJDTEssoKw-0-widget", "block_id": 87720895, "block_timestamp": "2023-03-20 12:44:51.442", "signer_id": "imiroslav.near", "widget_name": "AwesomeNearProjectCard", "source_code": "const widgetAuthor = \"imiroslav.near\";\r\nconst API_KEY = \"tESt_keY\"; // TODO get from Social db?\r\nconst symbol = props.symbol ?? \"NEAR\";\r\n\r\nconst css = fetch(\r\n  \"https://gateway.pinata.cloud/ipfs/QmTQKDx6jGLkigj9yAWZow1d1dEYrqUeSvKgHtcmnBEVYK?_gl=1*1uz9sye*_ga*MjRlZDQxNzQtOGRlNy00ZGZjLTlhNWEtMWEyNjU5OGUzMGMw*_ga_5RMPXG14TE*MTY3OTI5NjkzNy4xLjEuMTY3OTI5NzQ3MC41NC4wLjA.\"\r\n).body;\r\n\r\nif (!css) return \"\";\r\n\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    ${css}`,\r\n  });\r\n}\r\n\r\nconst Theme = state.theme;\r\n\r\nconst queryContent = {\r\n  query: `{\r\n    projects(filter: {contractAddress: {}, symbol: \"${symbol}\"}) {\r\n        edges {\r\n            node {\r\n                logo\r\n                link\r\n                linkedIn\r\n                investors\r\n                grants\r\n                title\r\n                telegram\r\n                status\r\n                oneliner\r\n                medium\r\n                twitter\r\n                website\r\n                whitepaper\r\n                github\r\n                facebook\r\n                discord\r\n                description\r\n                dapp\r\n                categories\r\n                }   \r\n            }\r\n        }\r\n    }`,\r\n};\r\n\r\nconst queryBody = JSON.stringify(queryContent);\r\nconst projects = fetch(\"https://awesomenear.com/api/graphql/public\", {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Bearer ${API_KEY}`,\r\n  },\r\n  body: queryBody,\r\n});\r\n\r\nif (!projects) return \"Loading\";\r\nconsole.log(projects);\r\n\r\nif (projects?.body?.errors) {\r\n  return `Erorr: ${projects.body.errors.map((error) => error.message)}`;\r\n}\r\n\r\nconst data = projects?.body?.data?.projects;\r\nif (!data) {\r\n  return \"NO DATA\";\r\n}\r\n\r\nif (data.edges.length === 0) return `Failed to get data for symbol ${symbol}`;\r\n\r\nconst project = {\r\n  ...data.edges[0].node,\r\n  series: [], // TODO not exposed by API yet\r\n};\r\n\r\nconsole.log(project);\r\n\r\nconst isBuilding = project.status === \"BUILDING\";\r\n\r\nreturn (\r\n  <Theme>\r\n    <Widget src={`${widgetAuthor}/widget/AwesomeNearIcons`} />\r\n    <div className=\"near-item\">\r\n      <div className=\"near-item-test\">\r\n        <div className=\"tile\">\r\n          <div className=\"tile-icon\">\r\n            <img src={project.logo} alt={project.title} loading=\"lazy\" />\r\n          </div>\r\n          <div className=\"tile-content\">\r\n            <h2 className=\"tile-title\">{project.title}</h2>\r\n            <div className=\"tile-tags\">\r\n              {isBuilding ? (\r\n                <span>\"COMMING SOON\"</span>\r\n              ) : (\r\n                <>\r\n                  {project.categories.map((category, i) => (\r\n                    <span key={i} title={category}>\r\n                      {category}\r\n                    </span>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"tile\">\r\n          <h3 className=\"tile-subtitle\">{project.oneliner}</h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"near-item-footer\">\r\n        <div className=\"tile-social\">\r\n          {project.website && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-website\"></use>\r\n            </svg>\r\n          )}\r\n          {project.twitter && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-twitter\"></use>\r\n            </svg>\r\n          )}\r\n          {project.facebook && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-facebook\"></use>\r\n            </svg>\r\n          )}\r\n          {project.medium && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-medium\"></use>\r\n            </svg>\r\n          )}\r\n          {project.telegram && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-telegram\"></use>\r\n            </svg>\r\n          )}\r\n          {project.github && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-github\"></use>\r\n            </svg>\r\n          )}\r\n          {project.linkedIn && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-linkedin\"></use>\r\n            </svg>\r\n          )}\r\n          {project.astroDAO && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-astrodao\"></use>\r\n            </svg>\r\n          )}\r\n          {project.discord && (\r\n            <svg className=\"icon\" height=\"20\" width=\"20\">\r\n              <use xlinkHref=\"#icon-discord\"></use>\r\n            </svg>\r\n          )}\r\n        </div>\r\n        <div className=\"tile-series\">\r\n          {project.series.map((serie, i) => (\r\n            <div key={i} className={`label-series ${serie.toLowerCase()}`}>\r\n              <svg className=\"icon icon-series\" height=\"20\" width=\"20\">\r\n                <use xlinkHref={`#icon-${serie.toLowerCase()}`}></use>\r\n              </svg>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/imiroslav.near/widget/AwesomeNearProjectCard", "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata": NaN}