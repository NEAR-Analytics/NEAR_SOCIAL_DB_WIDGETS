{"tx_hash": "FkFv3MUGQzFpouVqrhvpFmhidbWGkDv4SUNBZMfUKQDe", "action_id_social": "Abv3Yxk7zVsrgY2aXgMvYqZaAB1vvgcFH5HabGrqBL1G-0-widget", "block_id": 87929081, "block_timestamp": "2023-03-23 08:04:56.442", "signer_id": "imiroslav.near", "widget_name": "AwesomeNearProjectCard", "source_code": "const widgetAuthor = \"imiroslav.near\";\nconst API_KEY = \"tESt_keY\"; // TODO get from Social db?\nconst symbol = props.symbol ?? \"NEAR\";\n\nconst css = fetch(\n  \"https://gateway.pinata.cloud/ipfs/QmTQKDx6jGLkigj9yAWZow1d1dEYrqUeSvKgHtcmnBEVYK?_gl=1*1uz9sye*_ga*MjRlZDQxNzQtOGRlNy00ZGZjLTlhNWEtMWEyNjU5OGUzMGMw*_ga_5RMPXG14TE*MTY3OTI5NjkzNy4xLjEuMTY3OTI5NzQ3MC41NC4wLjA.\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}`,\n  });\n}\n\nconst Theme = state.theme;\n\nconst queryContent = {\n  query: `{\n    projects(filter: {contractAddress: {}, symbol: \"${symbol}\"}) {\n        edges {\n            node {\n                logo\n                link\n                linkedIn\n                investors\n                grants\n                title\n                telegram\n                status\n                oneliner\n                medium\n                twitter\n                website\n                whitepaper\n                github\n                facebook\n                discord\n                description\n                dapp\n                categories\n                }   \n            }\n        }\n    }`,\n};\n\nconst queryBody = JSON.stringify(queryContent);\nconst projects = fetch(\"https://awesomenear.com/api/graphql/public\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${API_KEY}`,\n  },\n  body: queryBody,\n});\n\nif (!projects) return \"Loading\";\nconsole.log(projects);\n\nif (projects?.body?.errors) {\n  return `Erorr: ${projects.body.errors.map((error) => error.message)}`;\n}\n\nconst data = projects?.body?.data?.projects;\nif (!data) {\n  return \"NO DATA\";\n}\n\nif (data.edges.length === 0) return `Failed to get data for symbol ${symbol}`;\n\nconst project = {\n  ...data.edges[0].node,\n  series: [], // TODO not exposed by API yet\n};\n\nconsole.log(project);\n\nconst isBuilding = project.status === \"BUILDING\";\n\nreturn (\n  <Theme>\n    <Widget src={`${widgetAuthor}/widget/AwesomeNearIcons`} />\n    <div className=\"near-item\">\n      <div className=\"near-item-header\">\n        <div className=\"tile\">\n          <div className=\"tile-icon\">\n            <img src={project.logo} alt={project.title} loading=\"lazy\" />\n          </div>\n          <div className=\"tile-content\">\n            <h2 className=\"tile-title\">{project.title}</h2>\n            <div className=\"tile-tags\">\n              {isBuilding ? (\n                <span>\"COMMING SOON\"</span>\n              ) : (\n                <>\n                  {project.categories.map((category, i) => (\n                    <span key={i} title={category}>\n                      {category}\n                    </span>\n                  ))}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"tile\">\n          <h3 className=\"tile-subtitle\">{project.oneliner}</h3>\n        </div>\n      </div>\n      <div className=\"near-item-footer\">\n        <div className=\"tile-social\" style={{ gap: \"2px\" }}>\n          {project.website && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-website\"></use>\n            </svg>\n          )}\n          {project.twitter && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-twitter\"></use>\n            </svg>\n          )}\n          {project.facebook && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-facebook\"></use>\n            </svg>\n          )}\n          {project.medium && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-medium\"></use>\n            </svg>\n          )}\n          {project.telegram && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-telegram\"></use>\n            </svg>\n          )}\n          {project.github && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-github\"></use>\n            </svg>\n          )}\n          {project.linkedIn && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-linkedin\"></use>\n            </svg>\n          )}\n          {project.astroDAO && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-astrodao\"></use>\n            </svg>\n          )}\n          {project.discord && (\n            <svg className=\"icon\" height=\"20\" width=\"20\">\n              <use xlinkHref=\"#icon-discord\"></use>\n            </svg>\n          )}\n        </div>\n        <div className=\"tile-series\">\n          {project.series.map((serie, i) => (\n            <div key={i} className={`label-series ${serie.toLowerCase()}`}>\n              <svg className=\"icon icon-series\" height=\"20\" width=\"20\">\n                <use xlinkHref={`#icon-${serie.toLowerCase()}`}></use>\n              </svg>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/imiroslav.near/widget/AwesomeNearProjectCard", "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata": NaN}