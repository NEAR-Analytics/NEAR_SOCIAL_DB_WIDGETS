{"tx_hash": "Bb2axNq5tRhtcFYBxDsGAgUFo74pXqmD5xHCg8tikXwg", "action_id_social": "3NyZEKWaMpzhGqDNnwyioiqXXiXGQ38qjjxeuXNfRdYe-0-widget", "block_id": 90057194, "block_timestamp": "2023-04-21 01:10:21.715", "signer_id": "bo.near", "widget_name": "gigs-board.components.posts.PostEditor", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst postType = props.postType ?? \"Sponsorship\";\nconst parentId = props.parentId ?? null;\nconst postId = props.postId ?? null;\nconst mode = props.mode ?? \"Create\";\n\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\ninitState({\n  author_id: context.accountId,\n  // Should be a list of objects with field \"name\".\n  labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings,\n  postType,\n  name: props.name ?? \"\",\n  description: props.description ?? \"\",\n  amount: props.amount ?? \"0\",\n  token: props.token ?? \"Near\",\n  supervisor: props.supervisor ?? \"\",\n  githubLink: props.githubLink ?? \"\",\n  warning: \"\",\n});\n\nlet fields = {\n  Comment: [\"description\"],\n  Idea: [\"name\", \"description\"],\n  Submission: [\"name\", \"description\"],\n  Attestation: [\"name\", \"description\"],\n  Sponsorship: [\n    \"name\",\n    \"description\",\n    \"amount\",\n    \"sponsorship_token\",\n    \"supervisor\",\n  ],\n  Github: [\"githubLink\", \"name\", \"description\"],\n}[postType];\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearDevGovGigsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\nconst onClick = () => {\n  let labels = state.labelStrings;\n  var body = {\n    Comment: { description: state.description, comment_version: \"V2\" },\n    Idea: {\n      name: state.name,\n      description: state.description,\n      idea_version: \"V1\",\n    },\n    Submission: {\n      name: state.name,\n      description: state.description,\n      submission_version: \"V1\",\n    },\n    Attestation: {\n      name: state.name,\n      description: state.description,\n      attestation_version: \"V1\",\n    },\n    Sponsorship: {\n      name: state.name,\n      description: state.description,\n      amount: state.amount,\n      sponsorship_token: state.token,\n      supervisor: state.supervisor,\n      sponsorship_version: \"V1\",\n    },\n    Github: {\n      name: state.name,\n      description: state.description,\n      github_version: \"V0\",\n      github_link: state.githubLink,\n    },\n  }[postType];\n  body[\"post_type\"] = postType;\n  if (!context.accountId) {\n    return;\n  }\n  let txn = [];\n  if (mode == \"Create\") {\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_post\",\n      args: {\n        parent_id: parentId,\n        labels,\n        body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  } else if (mode == \"Edit\") {\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"edit_post\",\n      args: {\n        id: postId,\n        labels,\n        body,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    });\n  }\n  if (mode == \"Create\" || mode == \"Edit\") {\n    if (grantNotify === false) {\n      txn.unshift({\n        contractName: \"social.near\",\n        methodName: \"grant_write_permission\",\n        args: {\n          predecessor_id: nearDevGovGigsContractAccountId,\n          keys: [context.accountId + \"/index/notify\"],\n        },\n        deposit: Big(10).pow(23),\n        gas: Big(10).pow(12).mul(30),\n      });\n    }\n    Near.call(txn);\n  }\n};\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst setLabels = (labels) => {\n  labels = labels.map((o) => {\n    o.name = normalizeLabel(o.name);\n    return o;\n  });\n  if (labels.length < state.labels.length) {\n    let oldLabels = new Set(state.labels.map((label) => label.name));\n    for (let label of labels) {\n      oldLabels.delete(label.name);\n    }\n    let removed = oldLabels.values().next().value;\n    Near.asyncView(\n      nearDevGovGigsContractAccountId,\n      \"is_allowed_to_use_labels\",\n      { editor: context.accountId, labels: [removed] }\n    ).then((allowed) => {\n      if (allowed) {\n        let labelStrings = labels.map((o) => {\n          return o.name;\n        });\n        State.update({ labels, labelStrings });\n      } else {\n        State.update({ warning: \"No permission to remove \" + removed });\n        return;\n      }\n    });\n  } else {\n    let labelStrings = labels.map((o) => {\n      return o.name;\n    });\n    State.update({ labels, labelStrings });\n  }\n};\nconst existingLabelStrings =\n  Near.view(nearDevGovGigsContractAccountId, \"get_all_allowed_labels\", {\n    editor: context.accountId,\n  }) ?? [];\nconst existingLabelSet = new Set(existingLabelStrings);\nconst existingLabels = existingLabelStrings.map((s) => {\n  return { name: s };\n});\n\nconst labelEditor = (\n  <div className=\"col-lg-12  mb-2\">\n    Labels:\n    <Typeahead\n      multiple\n      labelKey=\"name\"\n      onInputChange={(text, event) => console.log(text,event)}\n      onChange={setLabels}\n      options={existingLabels}\n      placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n      selected={state.labels}\n      positionFixed\n      allowNew={(results, props) => {\n        return (\n          !existingLabelSet.has(props.text) &&\n          props.selected.filter((selected) => selected.name === props.text)\n            .length == 0 &&\n          Near.view(\n            nearDevGovGigsContractAccountId,\n            \"is_allowed_to_use_labels\",\n            { editor: context.accountId, labels: [props.text] }\n          )\n        );\n      }}\n    />\n  </div>\n);\n\nconst githubLinkDiv = fields.includes(\"githubLink\") ? (\n  <div className=\"col-lg-12  mb-2\">\n    Github Issue URL:\n    <input\n      type=\"text\"\n      value={state.githubLink}\n      onChange={(event) => State.update({ githubLink: event.target.value })}\n    />\n  </div>\n) : null;\n\nconst nameDiv = fields.includes(\"name\") ? (\n  <div className=\"col-lg-6  mb-2\">\n    Title:\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n) : null;\n\nconst descriptionDiv = fields.includes(\"description\") ? (\n  <div className=\"col-lg-12  mb-2\">\n    Description:\n    <br />\n    <textarea\n      value={state.description}\n      type=\"text\"\n      rows={6}\n      className=\"form-control\"\n      onChange={(event) => State.update({ description: event.target.value })}\n    />\n  </div>\n) : null;\n\nconst amountDiv = fields.includes(\"amount\") ? (\n  <div className=\"col-lg-6  mb-2\">\n    Amount:\n    <input\n      type=\"text\"\n      value={state.amount}\n      onChange={(event) => State.update({ amount: event.target.value })}\n    />\n  </div>\n) : null;\n\nconst tokenDiv = fields.includes(\"sponsorship_token\") ? (\n  <div className=\"col-lg-6  mb-2\">\n    Tokens:\n    <input\n      type=\"text\"\n      value={state.token}\n      onChange={(event) => State.update({ token: event.target.value })}\n    />\n  </div>\n) : null;\n\nconst supervisorDiv = fields.includes(\"supervisor\") ? (\n  <div className=\"col-lg-6 mb-2\">\n    Supervisor:\n    <input\n      type=\"text\"\n      value={state.supervisor}\n      onChange={(event) => State.update({ supervisor: event.target.value })}\n    />\n  </div>\n) : null;\n\nconst disclaimer = (\n  <p>\n    <i>\n      * Note, all projects that were granted sponsorships are required to pass\n      KYC to receive the funding.\n    </i>\n  </p>\n);\n\nconst renamedPostType = postType == \"Submission\" ? \"Solution\" : postType;\n// Below there is a weird code with fields.includes(\"githubLink\") ternary operator.\n// This is to hack around rendering bug of near.social.\nreturn (\n  <div className=\"card\">\n    <div className=\"card-header\">\n      {mode} {renamedPostType}\n    </div>\n\n    <div class=\"card-body\">\n      {state.warning ? (\n        <div\n          class=\"alert alert-warning alert-dismissible fade show\"\n          role=\"alert\"\n        >\n          {state.warning}\n          <button\n            type=\"button\"\n            class=\"btn-close\"\n            data-bs-dismiss=\"alert\"\n            aria-label=\"Close\"\n            onClick={() => State.update({ warning: \"\" })}\n          ></button>\n        </div>\n      ) : (\n        <></>\n      )}\n      {fields.includes(\"githubLink\") ? (\n        <div className=\"row\">\n          {githubLinkDiv}\n          {labelEditor}\n          {nameDiv}\n          {descriptionDiv}\n        </div>\n      ) : (\n        <div className=\"row\">\n          {labelEditor}\n          {nameDiv}\n          {amountDiv}\n          {tokenDiv}\n          {supervisorDiv}\n          {descriptionDiv}\n        </div>\n      )}\n\n      <a className=\"btn btn-outline-primary mb-2\" onClick={onClick}>\n        Submit\n      </a>\n      {disclaimer}\n    </div>\n    <div class=\"card-footer\">\n      Preview:\n      {widget(\"components.posts.Post\", {\n        isPreview: true,\n        id: 0, // irrelevant\n        post: {\n          author_id: state.author_id,\n          likes: [],\n          snapshot: {\n            editor_id: state.editor_id,\n            labels: state.labelStrings,\n            post_type: postType,\n            name: state.name,\n            description: state.description,\n            amount: state.amount,\n            sponsorship_token: state.token,\n            supervisor: state.supervisor,\n            github_link: state.githubLink,\n          },\n        },\n      })}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bo.near/widget/gigs-board.components.posts.PostEditor"}