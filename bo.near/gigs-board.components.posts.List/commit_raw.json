{"tx_hash": "SPvDGTTtYz53fhVVRyprvLffNTbWZZDfgE4pq3VFvPK", "action_id_social": "6z7LCU76Sqrs8roQz5PsC58KDA2jMjVTE4kp5CbtqNY3-0-widget", "block_id": 89483173, "block_timestamp": "2023-04-13 10:57:38.310", "signer_id": "bo.near", "widget_name": "gigs-board.components.posts.List", "source_code": "// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\n\n/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconsole.log(props);\n\nfunction defaultRenderItem(postId, additionalProps) {\n  if (!additionalProps) {\n    additionalProps = {};\n  }\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\n  return (\n    <div style={{ minHeight: \"150px\" }}>\n      {widget(\n        `components.posts.Post`,\n        {\n          id: postId,\n          expandable: true,\n          defaultExpanded: false,\n          ...additionalProps,\n        },\n        postId\n      )}\n    </div>\n  );\n}\n\nconst renderItem = props.renderItem ?? defaultRenderItem;\n\nconst cachedRenderItem = (item, i) => {\n  if (props.searchResult && props.searchResult.keywords[item]) {\n    return renderItem(item, {\n      searchKeywords: props.searchResult.keywords[item],\n    });\n  }\n\n  const key = JSON.stringify(item);\n\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\n\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\n\nfunction getPostsByLabel() {\n  return Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n    label: props.label,\n  });\n}\n\nfunction getPostsByAuthor() {\n  return Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_author\", {\n    author: props.author,\n  });\n}\n\nfunction intersectPostsWithLabel(postIds) {\n  if (props.label) {\n    let postIdLabels = getPostsByLabel();\n    if (postIdLabels === null) {\n      // wait until postIdLabels are loaded\n      return null;\n    }\n    postIdLabels = new Set(postIdLabels);\n    return postIds.filter((id) => postIdLabels.has(id));\n  }\n  return postIds;\n}\n\nfunction intersectPostsWithAuthor(postIds) {\n  if (props.author) {\n    let postIdsByAuthor = getPostsByAuthor();\n    if (postIdsByAuthor == null) {\n      // wait until postIdsByAuthor are loaded\n      return null;\n    } else {\n      postIdsByAuthor = new Set(postIdsByAuthor);\n      return postIds.filter((id) => postIdsByAuthor.has(id));\n    }\n  }\n  return postIds;\n}\n\nlet postIds;\nif (props.searchResult) {\n  postIds = props.searchResult.postIds;\n  postIds = intersectPostsWithLabel(postIds);\n  postIds = intersectPostsWithAuthor(postIds);\n} else if (props.label) {\n  postIds = getPostsByLabel();\n  // postIds = intersectPostsWithAuthor(postIds);\n} else if (props.author) {\n  postIds = getPostsByAuthor();\n} else if (props.recency == \"all\") {\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_all_post_ids\");\n} else {\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_children_ids\");\n}\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\nif (postIds === null) {\n  return loader;\n}\nconst initialItems = props.searchResult ? postIds : postIds.reverse();\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \"get_post\", { post_id: postId }) }));\n\n// const computeFetchFrom = (items, limit) => {\n//   if (!items || items.length < limit) {\n//     return false;\n//   }\n//   const blockHeight = items[items.length - 1].blockHeight;\n//   return index.options.order === \"desc\" ? blockHeight - 1 : blockHeight + 1;\n// };\n\n// const mergeItems = (newItems) => {\n//   const items = [\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\n//   ].map((i) => JSON.parse(i));\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\n//   if (index.options.order === \"desc\") {\n//     items.reverse();\n//   }\n//   return items;\n// };\n\nconst jInitialItems = JSON.stringify(initialItems);\nif (state.jInitialItems !== jInitialItems) {\n  // const jIndex = JSON.stringify(index);\n  // if (jIndex !== state.jIndex) {\n  State.update({\n    jIndex,\n    jInitialItems,\n    items: initialItems,\n    fetchFrom: false,\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\n    nextFetchFrom: false,\n    displayCount: initialRenderLimit,\n    cachedItems: {},\n  });\n  // } else {\n  //   State.update({\n  //     jInitialItems,\n  //     items: mergeItems(initialItems),\n  //   });\n  // }\n}\n\nif (state.fetchFrom) {\n  console.log(\"TODO: fetchFrom\");\n  // const limit = addDisplayCount;\n  // const newItems = Social.index(\n  //   index.action,\n  //   index.key,\n  //   Object.assign({}, index.options, {\n  //     from: state.fetchFrom,\n  //     subscribe: undefined,\n  //     limit,\n  //   })\n  // );\n  // if (newItems !== null) {\n  //   State.update({\n  //     items: mergeItems(newItems),\n  //     fetchFrom: false,\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\n  //   });\n  // }\n}\n\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  if (\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\n    !state.fetchFrom &&\n    state.nextFetchFrom &&\n    state.nextFetchFrom !== state.fetchFrom\n  ) {\n    State.update({\n      fetchFrom: state.nextFetchFrom,\n    });\n  }\n};\n\nconst fetchMore =\n  props.manual &&\n  (state.fetchFrom && state.items.length < state.displayCount\n    ? loader\n    : state.displayCount < state.items.length && (\n        <div key={\"loader more\"}>\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n            {props.loadMoreText ?? \"Load more...\"}\n          </a>\n        </div>\n      ));\n\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\n\nconsole.log(items);\nconst renderedItems = items.map(cachedRenderItem);\n\nreturn (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={makeMoreItems}\n    hasMore={state.displayCount < state.items.length}\n    loader={loader}\n  >\n    {renderedItems}\n  </InfiniteScroll>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/bo.near/widget/gigs-board.components.posts.List", "branch.draft.": NaN}