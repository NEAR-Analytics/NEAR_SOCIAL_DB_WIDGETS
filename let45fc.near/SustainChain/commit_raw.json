{"tx_hash": "G623cLGuDmyReephwow8k1eBrmjXCkh8bZFGsXSDY8g4", "action_id_social": "Gcgab5bRnSK8Sth2GpS45oy5QBp1qJ51zYTeH3WVRxx4-0-widget", "block_id": 93952341, "block_timestamp": "2023-06-11T08:40:58.424Z", "signer_id": "let45fc.near", "widget_name": "SustainChain", "source_code": "const contract = \"0xfc238caf851b86137ce56d6f71ec85fc638f0560\";\n\nconst abiObj = [\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"AdminAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"AdminRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"message\",\n        type: \"string\",\n      },\n    ],\n    name: \"Log\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              { internalType: \"address\", name: \"addr\", type: \"address\" },\n            ],\n            internalType: \"struct SupplyChain.Department\",\n            name: \"handler\",\n            type: \"tuple\",\n          },\n          { internalType: \"uint256\", name: \"parent\", type: \"uint256\" },\n          {\n            internalType: \"enum SupplyChain.PackageSnapshotStatus\",\n            name: \"status\",\n            type: \"uint8\",\n          },\n          { internalType: \"string\", name: \"name\", type: \"string\" },\n          { internalType: \"string\", name: \"description\", type: \"string\" },\n          { internalType: \"uint256\", name: \"created\", type: \"uint256\" },\n          { internalType: \"bool\", name: \"exists\", type: \"bool\" },\n        ],\n        indexed: false,\n        internalType: \"struct SupplyChain.PackageSnapshot\",\n        name: \"snapshot\",\n        type: \"tuple\",\n      },\n      { indexed: false, internalType: \"uint256\", name: \"id\", type: \"uint256\" },\n    ],\n    name: \"PackageSnapshotAdded\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"parent\", type: \"uint256\" },\n      {\n        internalType: \"enum SupplyChain.PackageSnapshotStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n      { internalType: \"string\", name: \"name\", type: \"string\" },\n      { internalType: \"string\", name: \"description\", type: \"string\" },\n    ],\n    name: \"addPackageSnapshot\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"admins\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"makeMeAdmin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"makeMeUser\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"snapshotNumber\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"snapshots\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"addr\", type: \"address\" },\n        ],\n        internalType: \"struct SupplyChain.Department\",\n        name: \"handler\",\n        type: \"tuple\",\n      },\n      { internalType: \"uint256\", name: \"parent\", type: \"uint256\" },\n      {\n        internalType: \"enum SupplyChain.PackageSnapshotStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n      { internalType: \"string\", name: \"name\", type: \"string\" },\n      { internalType: \"string\", name: \"description\", type: \"string\" },\n      { internalType: \"uint256\", name: \"created\", type: \"uint256\" },\n      { internalType: \"bool\", name: \"exists\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst iface = new ethers.utils.Interface(abiObj);\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst getAdmins = () => {\n  const encodedData = iface.encodeFunctionData(\"admins\", [sender]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((result) => {\n      return iface.decodeFunctionResult(\"admins\", result)[0];\n    });\n};\n\nconst hexNumberDateToHuman = (hexNumber) => {\n  const date = new Date(parseInt(hexNumber, 16) * 1000);\n  return date\n    .toLocaleString(\"en-GB\", {\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })\n    .replace(/\\//g, \".\");\n};\n\nconst getSnapshot = (id) => {\n  const encodedData = iface.encodeFunctionData(\"snapshots\", [id]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((result) => {\n      const decoded = iface.decodeFunctionResult(\"snapshots\", result);\n\n      const name = decoded.name;\n      const description = decoded.description;\n      const date = hexNumberDateToHuman(decoded.created);\n\n      return { name, description, date };\n    });\n};\n\nState.init({\n  isLogged: !!sender,\n  packageId: 1,\n  packageInfo: null,\n});\n\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"is-logged\":\n      isLoggedHandler(request, response, Utils);\n      break;\n    case \"is-admin\":\n      isAdminHandler(request, response, Utils);\n      break;\n    case \"get-wallet-address\":\n      getWalletAddressHandler(request, response, Utils);\n      break;\n    case \"set-print-input\":\n      setPrintInputHandler(request, response, Utils);\n      break;\n    case \"make-me-admin\":\n      makeMeAdminHandler(request, response, Utils);\n      break;\n    case \"make-me-user\":\n      makeMeUserHandler(request, response, Utils);\n      break;\n    case \"create-package\":\n      createPackageHandler(request, response, Utils);\n      break;\n    case \"create-report\":\n      createReportHandler(request, response, Utils);\n      break;\n  }\n};\n\nconst isLoggedHandler = (request, response, Utils) => {\n  console.log(\"[BOS] sender\", sender);\n  response(request).send(!!sender);\n};\n\nconst isAdminHandler = (request, response, Utils) => {\n  console.log(\"[BOS] get-admins\");\n  getAdmins().then((isAdmin) => {\n    response(request).send(isAdmin);\n  });\n};\n\nconst getWalletAddressHandler = (request, response, Utils) => {\n  console.log(\"[BOS] get-wallet-address\");\n  response(request).send(sender);\n};\n\nconst setPrintInputHandler = (request, response, Utils) => {\n  console.log(\"[BOS] set-print-input\");\n  State.update({ packageId: request.payload, packageInfo: null });\n  response(request).send(true);\n};\n\nconst makeMeAdminHandler = (request, response, Utils) => {\n  console.log(\"[BOS] make-me-admin\");\n  const suschain = new ethers.Contract(\n    contract,\n    abiObj,\n    Ethers.provider().getSigner()\n  );\n\n  suschain\n    .makeMeAdmin()\n    .then((result) => {\n      console.log(\"[BOS] make-me-admin result\", result);\n      response(request).send(true);\n    })\n    .catch((err) => {\n      console.log(\"[BOS] make-me-admin error\", err);\n      response(request).send(false);\n    });\n};\n\nconst makeMeUserHandler = (request, response, Utils) => {\n  console.log(\"[BOS] make-me-user\");\n  const suschain = new ethers.Contract(\n    contract,\n    abiObj,\n    Ethers.provider().getSigner()\n  );\n\n  suschain\n    .makeMeUser()\n    .then((result) => {\n      console.log(\"[BOS] make-me-user result\", result);\n      response(request).send(true);\n    })\n    .catch((err) => {\n      console.log(\"[BOS] make-me-user error\", err);\n      response(request).send(false);\n    });\n};\n\nconst createPackageHandler = (request, response, Utils) => {\n  console.log(\"[BOS] create-package\");\n  const suschain = new ethers.Contract(\n    contract,\n    abiObj,\n    Ethers.provider().getSigner()\n  );\n\n  const { parent, status, name, description } = request.payload;\n\n  suschain\n    .addPackageSnapshot(parent, status, name, description)\n    .then((result) => {\n      result.wait().then((result) => {\n        const newSnapshotId = parseInt(result.events[0].args[1]._hex, 16);\n        response(request).send({\n          ok: true,\n          newSnapshotId,\n        });\n      });\n    })\n    .catch((err) => {\n      console.log(\"[BOS] create-package error\", err);\n      response(request).send({ ok: false });\n    });\n};\n\nconst createReportHandler = (request, response, Utils) => {\n  console.log(\"[BOS] create-report\");\n  const suschain = new ethers.Contract(\n    contract,\n    abiObj,\n    Ethers.provider().getSigner()\n  );\n\n  const { parent, reportDescription } = request.payload;\n\n  suschain\n    .addPackageSnapshot(parent, 3, \"Reported\", reportDescription)\n    .then((result) => {\n      response(request).send(true);\n    })\n    .catch((err) => {\n      console.log(\"[BOS] create-report error\", err);\n      response(request).send(false);\n    });\n};\n\nconst externalAppUrl = \"https://sustain-chain.vercel.app/\";\n\nconst handlePackageIdInput = (e) => {\n  State.update({ packageId: e.target.value, packageInfo: null });\n};\n\nconst handleGetPackageInfo = () => {\n  if (state.packageId) {\n    getSnapshot(state.packageId).then((result) => {\n      State.update({ packageInfo: result });\n    });\n  }\n};\n\nreturn (\n  <>\n    {!sender && (\n      <Web3Connect\n        className=\"LidoStakeFormSubmitContainer\"\n        connectLabel=\"Connect with Web3\"\n      />\n    )}\n    <div className=\"container mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-8\">\n          <div className=\"form-group\">\n            <label htmlFor=\"printIdInput\" className=\"text-danger\">\n              Input package id\n            </label>\n            <input\n              id=\"printIdInput\"\n              type=\"text\"\n              placeholder=\"Package ID\"\n              value={state.packageId}\n              onChange={handlePackageIdInput}\n            />\n          </div>\n        </div>\n        <div className=\"col md-4 d-flex align-items-end\">\n          {state.packageInfo === null ? (\n            <button\n              onClick={handleGetPackageInfo}\n              className=\"btn btn-danger me-2\"\n            >\n              \u2b07\ufe0f Get package info\n            </button>\n          ) : (\n            <a\n              href={`${externalAppUrl}create-package/qr-code-creation?id=${state.packageId}&name=${state.packageInfo.name}&description=${state.packageInfo.description}&date=${state.packageInfo.date}`}\n              target=\"_blank\"\n              className=\"btn btn-danger me-2\"\n            >\n              \ud83d\udda8 Print package\n            </a>\n          )}\n          <a\n            href={externalAppUrl + \"scan-package/qr-code-scanning\"}\n            target=\"_blank\"\n            className=\"btn btn-dark\"\n          >\n            \ud83d\udd0e Scan package\n          </a>\n        </div>\n      </div>\n    </div>\n    <Widget\n      src=\"wendersonpires.near/widget/NearSocialBridgeCore\"\n      props={{\n        externalAppUrl,\n        path: props.path,\n        initialViewHeight: 1240,\n        initialPayload: {\n          packageId: 0,\n        },\n        requestHandler,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/let45fc.near/widget/SustainChain", "__row_index": 1}