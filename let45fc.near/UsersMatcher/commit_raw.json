{"tx_hash": "Hoi48N4C9Q5qZ956ZfSNqBkp6eUMD3wcYMtDDNuEkF1N", "action_id_social": "4TEYJZHv1RqGKXLdvemCcmAKqZA9az6MT6gz1W3cmCHQ-0-widget", "block_id": 85756716, "block_timestamp": "2023-02-22 01:01:01.889", "signer_id": "let45fc.near", "widget_name": "UsersMatcher", "source_code": "// inspired by https://near.social/#/wendersonpires.near/widget/Chat\n\nif (typeof props.loadRoomCallback != \"function\") {\n  return (\n    <h2>\n      You have to pass the loadRoomCallback function in props. Found type:{\" \"}\n      {typeof props.loadRoomCallback}\n    </h2>\n  );\n}\n\nState.init({\n  roomId: Storage.get(\"roomId\") || null,\n  errorMessage: null,\n  roomCreated: false,\n});\n\nconst uuidv4 = () => {\n  var u = \"\",\n    i = 0;\n  while (i++ < 36) {\n    var c = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"[i - 1],\n      r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    u += c == \"-\" || c == \"4\" ? c : v.toString(16);\n  }\n  return u;\n};\n\nconst generateRoomId = () => {\n  return `${context.accountId}-${props.widgetKey}-room-${uuidv4()}`;\n};\n\nconst newRoomId = generateRoomId();\n\nconst placeHolder = \"Enter room id\";\n\nconst findRoom = (created) => {\n  if (!created) {\n    created = false;\n  }\n  Storage.set(\"created\", \"false\");\n  Storage.set(\"roomId\", \"\");\n  const ownerAccountId = state.roomId.split(\"-\")[0];\n  console.log(\"getting roomData\");\n  const roomData = Social.getr(\n    `${ownerAccountId}/${props.widgetKey}/${state.roomId}`\n  );\n  console.log(props.widgetKey, state.roomId);\n  console.log(roomData);\n  if (!roomData) {\n    State.update({ errorMessage: \"Room not found\" });\n    return;\n  }\n  State.update({\n    roomData: roomData,\n  });\n  if (props.loadRoomCallback && roomData) {\n    props.loadRoomCallback(roomData, state.roomId, created);\n  }\n};\n\nconst roomCreated = Storage.get(\"created\");\n\nif (state.roomCreated || roomCreated == \"true\") {\n  const roomId = Storage.get(\"roomId\");\n  if (!roomId) {\n    return <h1>Something went wrong and \"roomId\" is not set</h1>;\n  }\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <h2>Room created</h2>\n      </div>\n      <div class=\"row\">\n        <span>Your room id: {roomId}</span>\n      </div>\n      <button class=\"btn btn-success\" onClick={findRoom(true)}>\n        Go to game\n      </button>\n    </div>\n  );\n}\n\nreturn (\n  <div class=\"container\">\n    <div class=\"row mt-3\">\n      <div class=\"col-12\">\n        <h3>{props.widgetName}</h3>\n      </div>\n      <div class=\"col-12\">\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeHolder={placeHolder}\n          value={state.roomId}\n          onChange={(e) => {\n            const roomId = e.target.value;\n            State.update({ roomId });\n          }}\n        />\n      </div>\n    </div>\n    {state.errorMessage && (\n      <div class=\"row mt-4\">\n        <div class=\"col-12\">\n          <p class=\"text-danger\">{state.errorMessage}</p>\n        </div>\n      </div>\n    )}\n    <div class=\"row mt-4\">\n      <div class=\"col-6 text-end\">\n        <button class=\"btn btn-success\" onClick={findRoom}>\n          Connect to room\n        </button>\n      </div>\n      <div class=\"col-6\">\n        <CommitButton\n          class=\"btn btn-primary\"\n          onClick={() => {\n            State.update({ roomId: newRoomId });\n            Storage.set(\"created\", \"true\");\n            Storage.set(\"roomId\", newRoomId);\n          }}\n          onCommit={() => State.update({ roomCreated: true })}\n          data={{\n            [props.widgetKey]: {\n              [newRoomId]: {\n                createdTimestamp: Date.now(),\n                initial: props.initialValue || null,\n              },\n            },\n          }}\n        >\n          Create new room\n        </CommitButton>\n      </div>\n    </div>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/let45fc.near/widget/UsersMatcher", "metadata.tags.widget": NaN, "metadata": NaN, "metadata.name": NaN, "metadata.description": NaN, "metadata.tags.hackathon": NaN}