{"tx_hash": "Dn5Xfq3GSpYzsS1GRq1BMuohkZdUUyzVMAU7GGeaDANQ", "action_id_social": "6GJjqWyr8NsxKHJwFvMXmNvVFbWr6PgZyAiQJFeJysua-0-widget", "block_id": 88503275, "block_timestamp": "2023-03-31 11:49:11.774", "signer_id": "juaner.near", "widget_name": "ref_burrow-repay", "source_code": "let BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet accountId = context.accountId;\n\nconst { selectedTokenId, amount, hasError, assets, rewards, account } = state;\n\nconst hasData = assets.length > 0 && rewards.length > 0;\n\nconst onLoad = (data) => {\n  State.update(data);\n};\n\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals));\n};\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\nconst toAPY = (v) => Math.round(v * 100) / 100;\n\nif (!accountId) {\n  return <Widget src=\"ciocan.near/widget/account-signin\" />;\n}\n\nconst listAssets =\n  assets &&\n  assets\n    ?.filter((a) => a.accountBalance > 0)\n    ?.map((asset) => {\n      const { token_id, metadata } = asset;\n      if (account.borrowed.map((a) => a.token_id).includes(token_id)) {\n        return (\n          <option key={token_id} value={token_id}>\n            {metadata.symbol}\n          </option>\n        );\n      }\n    });\n\nlet availableBalance = 0;\nlet apy = 0;\n\nconst getBalance = (asset) => {\n  if (!asset) return 0;\n  const { accountBalance, metadata } = asset;\n  return formatToken(shrinkToken(accountBalance, metadata.decimals).toFixed());\n};\n\nconst getApy = (asset) => {\n  if (!asset) return 0;\n  const r = rewards.find((a) => a.token_id === asset.token_id);\n  return toAPY(r.apyBaseBorrow);\n};\n\nif (selectedTokenId) {\n  const token = selectedTokenId === \"NEAR\" ? \"wrap.near\" : selectedTokenId;\n  const asset = assets.find((a) => a.token_id === token);\n  availableBalance =\n    selectedTokenId === \"NEAR\" ? nearBalance : getBalance(asset);\n  apy = getApy(asset);\n}\n\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\n\nconst handleSelect = (e) => {\n  State.update({\n    selectedTokenId: e.target.value,\n    amount: \"\",\n    hasError: false,\n  });\n};\n\nconst handleAmount = (e) => {\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n  });\n};\n\nconst handleRepay = () => {\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n\n  if (!selectedTokenId || !amount || hasError) return;\n\n  if (amount > availableBalance) {\n    State.update({ selectedTokenId, amount, hasError: true });\n    return;\n  }\n  const transactions = [];\n\n  const expandedAmount = expandToken(\n    amount,\n    asset.metadata.decimals + asset.config.extra_decimals\n  );\n\n  const repayTemplate = {\n    Execute: {\n      actions: [\n        {\n          Repay: {\n            max_amount: expandedAmount.toFixed(0),\n            token_id: selectedTokenId,\n          },\n        },\n      ],\n    },\n  };\n\n  const repayTransaction = {\n    contractName: selectedTokenId,\n    methodName: \"ft_transfer_call\",\n    deposit: new Big(\"1\").toFixed(),\n    gas: expandToken(300, 12),\n    args: {\n      receiver_id: BURROW_CONTRACT,\n      amount: expandedAmount.toFixed(0),\n      msg: JSON.stringify(repayTemplate),\n    },\n  };\n\n  if (storageToken?.available === \"0\" || !storageToken?.available) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.push({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n\n  transactions.push(repayTransaction);\n\n  Near.call(transactions);\n};\n\nreturn (\n  <div style={{ maxWidth: \"300px\" }}>\n    {!hasData && (\n      <Widget src=\"ciocan.near/widget/burrow-data\" props={{ onLoad }} />\n    )}\n    <div class=\"card-body d-grid gap-3\">\n      <div>\n        <div class=\"mb-2 text-muted\">From</div>\n        <select\n          onChange={handleSelect}\n          class=\"p-2 mb-1\"\n          style={{ width: \"100%\" }}\n        >\n          <option value=\"\">Repay an asset</option>\n          {listAssets}\n        </select>\n        <div>\n          <span class=\"badge bg-light text-dark\">\n            {availableBalance} available\n          </span>\n          <span class=\"badge bg-light text-dark\">{apy}% Borrow APY</span>\n        </div>\n      </div>\n      <div>\n        <div class=\"mb-2 text-muted\">Amount</div>\n        <input type=\"number\" value={amount} onChange={handleAmount} />\n      </div>\n      {hasError && (\n        <p class=\"alert alert-danger\" role=\"alert\">\n          Amount greater than balance\n        </p>\n      )}\n      <button\n        onClick={handleRepay}\n        style={{ background: \"#4ED58A\", borderColor: \"white\" }}\n      >\n        Repay\n      </button>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref_burrow-repay"}