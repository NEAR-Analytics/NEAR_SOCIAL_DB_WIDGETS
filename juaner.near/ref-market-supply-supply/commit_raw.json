{"tx_hash": "5bj4BgYCcc35AHLvjFyNcKHDswqWDpBpFzXwQkKDypxd", "action_id_social": "FmyE3VVCnJnc4zJ4V8sSGpgvnqsCEd2NJxD7p5s7eify-0-widget", "block_id": 91504391, "block_timestamp": "2023-05-10T04:20:20.858Z", "signer_id": "juaner.near", "widget_name": "ref-market-supply-supply", "source_code": "const Container = styled.div`\n    .template .title{\n      font-size:14px;\n      color:#7E8A93;\n    }\n    .template .value{\n      font-size:14px;\n      color:#fff;\n    }\n    .mt_25{\n      margin-top:25px;\n    }\n    .greenButton{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      background: #00FFD1;\n      border-radius: 12px;\n      height:46px;\n      font-weight: 700;\n      font-size: 18px;\n      color:#000;\n      cursor:pointer;\n      width:100%;\n    }\n    .disabled{\n      opacity:0.3;\n      cursor: not-allowed!important;\n    }\n    .switchButton{\n      display:flex;\n      align-items:center;\n      width: 36px;\n      height: 20px;\n      border-radius: 14px;\n      padding:2px 3px;\n      cursor:pointer;\n      margin-left:8px;\n    }\n    .justify-end {\n      background: #00C6A2;\n    }\n    .justify-start {\n      background: #ccc;\n    }\n    .switchButton .whiteBall {\n      width:15px;\n      height:15px;\n      background: #FFFFFF;\n      box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.5);\n      border-radius:100px;\n      transition: all 100ms ease-out;\n      cursor:pointer;\n    }\n    .justify-end .whiteBall{\n      margin-left:14px;\n    }\n    .justify-start .whiteBall{\n      margin-left:2px;\n    }\n    .flex-center{\n      display:flex;\n      align-items:center;\n    }\n`;\nconst Backdrop = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.6);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1001;\n`;\nconst Modal = styled.div`\n  background-color:#1A2E33;\n  border-radius:12px;\n  position:fixed;\n  z-index:1002;\n  width:30rem;\n  max-width: 95vw;\n  max-height: 80vh;\n  padding:10px 0 20px 0;\n  animation:anishow 0.3s forwards ease-out;\n  left:50%;\n  top:50%;\n  @keyframes anishow {\n    from {\n      opacity: 0;\n      transform:translate(-50%,-70%);\n    }\n    to {\n      opacity: 1;\n      transform:translate(-50%,-50%);\n    }\n  }\n    .modal-header{\n      display:flex;\n      align-items:center;\n      justify-content:start;\n      color:#fff;\n      font-weight: 700;\n      font-size: 18px;\n      padding:12px 20px;\n      margin-bottom:16px;\n      border-bottom:2px solid rgba(48, 67, 82, 0.5);\n    } \n    .modal-header .title{\n       font-weight: 700;\n       font-size: 18px;\n       color:#fff;\n    }\n    .modal-header .btn-close{\n      position:absolute;\n      right:28px;\n      margin:0;\n    }\n    .modal-body {\n        padding:0 16px;\n    }\n   .btn-close-custom{\n      position:absolute;\n      right:28px;\n      width:12px;\n      height:12px;\n      cursor:pointer;\n    }\n`;\nlet accountId = context.accountId;\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nconst NO_STORAGE_DEPOSIT_CONTRACTS = [\"aurora\", \"meta-pool.near\"];\nlet MAX_RATIO = 10_000;\nlet B = Big();\nB.DP = 60;\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals || 0));\n};\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals || 0));\n};\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\nconst { selectedTokenId, closeModal, showModal, selectedTokenMeta } = props;\nconst {\n  rewards,\n  account: burrowAccount,\n  amount,\n  hasError,\n  assets,\n  cfButtonStatus,\n  newHealthFactor,\n  wnearbase64,\n  closeButtonBase64,\n  isMax,\n} = state;\nconst hasData = assets.length > 0 && rewards.length > 0;\nif (!showModal) {\n  State.update({\n    amount: \"\",\n    hasError: false,\n    cfButtonStatus: false,\n    newHealthFactor: \"\",\n  });\n}\nconst onLoad = (data) => {\n  State.update(data);\n};\nconst account = fetch(\"https://rpc.mainnet.near.org\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    jsonrpc: \"2.0\",\n    id: \"dontcare\",\n    method: \"query\",\n    params: {\n      request_type: \"view_account\",\n      finality: \"final\",\n      account_id: accountId,\n    },\n  }),\n});\nif (!account) {\n  return null;\n}\nlet nearBalance = \"0\";\nlet vailableBalance = 0;\nlet vailableBalance$ = 0;\nlet apy = 0;\nlet cf = \"-\";\nlet asset;\nconst getBalanceOfnear = () => {\n  if (!assets) return \"0\";\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { amount, storage_usage } = account.body.result;\n  const near_b = Big(amount || 0).minus(\n    Big(storage_usage || 0).mul(Big(10).pow(19))\n  );\n  const wnear_b = asset.accountBalance || 0;\n  const total_b = near_b.plus(wnear_b);\n  const total_b_avalible = shrinkToken(total_b.toFixed(), 24).minus(0.25);\n  if (total_b_avalible.gt(0)) {\n    nearBalance = total_b_avalible.toFixed();\n  }\n};\ngetBalanceOfnear();\nconst getBalance = (asset) => {\n  if (!asset) return 0;\n  const { accountBalance, metadata } = asset;\n  return shrinkToken(accountBalance, metadata.decimals).toFixed();\n};\nconst getApy = (asset) => {\n  if (!asset && !rewards) return 0;\n  const r = rewards.find((a) => a.token_id === asset.token_id);\n  const totalApy = r.apyBase + r.apyRewardTvl + r.apyReward;\n  return toAPY(totalApy);\n};\nif (selectedTokenId && assets) {\n  asset = assets.find((a) => a.token_id === selectedTokenId);\n  vailableBalance =\n    selectedTokenId === \"wrap.near\" ? nearBalance : getBalance(asset);\n  apy = getApy(asset);\n  cf = asset.config.volatility_ratio / 100;\n  vailableBalance$ = Big(asset.price.usd || 0)\n    .mul(vailableBalance || 0)\n    .toFixed(2);\n}\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\nconst handleAmount = (value, isMax) => {\n  const amount = value;\n  const newHF = recomputeHealthFactor(selectedTokenId, amount);\n  State.update({\n    amount,\n    selectedTokenId,\n    hasError: false,\n    newHealthFactor: newHF,\n    isMax,\n  });\n};\nconst handleDeposit = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n  const amountValue = isMax ? vailableBalance : amount;\n  if (selectedTokenId === \"wrap.near\") {\n    handleDepositNear(amountValue);\n    return;\n  }\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { token_id, metadata, config } = asset;\n  const expandedAmount = expandToken(amountValue, metadata.decimals).toFixed();\n  const collateralAmount = expandToken(\n    amountValue,\n    metadata.decimals + config.extra_decimals\n  ).toFixed();\n  const collateralMsg =\n    config.can_use_as_collateral && cfButtonStatus\n      ? `{\"Execute\":{\"actions\":[{\"IncreaseCollateral\":{\"token_id\": \"${token_id}\",\"max_amount\":\"${collateralAmount}\"}}]}}`\n      : \"\";\n  const transactions = [];\n  const depositTransaction = {\n    contractName: token_id,\n    methodName: \"ft_transfer_call\",\n    deposit: new Big(\"1\").toFixed(),\n    gas: expandToken(300, 12),\n    args: {\n      receiver_id: BURROW_CONTRACT,\n      amount: expandedAmount,\n      msg: collateralMsg,\n    },\n  };\n  if (\n    !(storageToken && storageToken.total != \"0\") &&\n    !NO_STORAGE_DEPOSIT_CONTRACTS.includes(token_id)\n  ) {\n    transactions.push({\n      contractName: token_id,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.push({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n  transactions.push(depositTransaction);\n  Near.call(transactions);\n};\nconst handleDepositNear = (amount) => {\n  const expandedAmount = expandToken(amount, 24);\n  const amountDecimal = expandedAmount.toFixed();\n  const extraDecimal = expandedAmount.sub(asset.accountBalance || 0);\n  const transactions = [\n    ...(extraDecimal.gt(0)\n      ? [\n          {\n            contractName: \"wrap.near\",\n            methodName: \"near_deposit\",\n            deposit: extraDecimal.toFixed(),\n            gas: expandToken(300, 12),\n          },\n        ]\n      : []),\n    {\n      contractName: \"wrap.near\",\n      methodName: \"ft_transfer_call\",\n      deposit: new Big(\"1\").toFixed(),\n      gas: expandToken(300, 12),\n      args: {\n        receiver_id: BURROW_CONTRACT,\n        amount: amountDecimal,\n        msg: cfButtonStatus\n          ? `{\"Execute\":{\"actions\":[{\"IncreaseCollateral\":{\"token_id\":\"wrap.near\",\"max_amount\":\"${amountDecimal}\"}}]}}`\n          : \"\",\n      },\n    },\n  ];\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.unshift({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n  Near.call(transactions);\n};\nfunction getAdjustedSum(type, burrowAccount) {\n  if (!assets || !burrowAccount || burrowAccount[type].length == 0) return 0;\n  return burrowAccount[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals || 0))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\", burrowAccount);\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\", burrowAccount);\nfunction getHealthFactor() {\n  if (Big(adjustedBorrowedSum).eq(0)) return 10000;\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\nconst healthFactor = getHealthFactor();\nconst canUseAsCollateral = asset.config.can_use_as_collateral;\nfunction switchButtonStatus() {\n  if (canUseAsCollateral) {\n    State.update({\n      cfButtonStatus: !cfButtonStatus,\n    });\n  }\n}\nconst recomputeHealthFactor = (tokenId, amount) => {\n  if (!tokenId || !amount || !assets || !burrowAccount) return null;\n  const asset = assets.find((a) => a.token_id === tokenId);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const accountCollateralAsset = burrowAccount.collateral.find(\n    (a) => a.token_id === tokenId\n  );\n  const newBalance = expandToken(amount, decimals)\n    .plus(B(accountCollateralAsset?.balance || 0))\n    .toFixed();\n  const clonedAccount = clone(burrowAccount);\n  const updatedToken = {\n    token_id: tokenId,\n    balance: newBalance,\n    shares: newBalance,\n    apr: \"0\",\n  };\n  if (clonedAccount?.collateral.length === 0) {\n    clonedAccount.collateral = [updatedToken];\n  } else if (!accountCollateralAsset) {\n    clonedAccount.collateral.push(updatedToken);\n  } else {\n    clonedAccount.collateral = [\n      ...clonedAccount.collateral.filter((a) => a.token_id !== tokenId),\n      updatedToken,\n    ];\n  }\n  const adjustedCollateralSum = getAdjustedSum(\n    \"collateral\",\n    amount === 0 ? burrowAccount : clonedAccount\n  );\n  const adjustedBorrowedSum = getAdjustedSum(\"borrowed\", burrowAccount);\n  let newHealthFactor;\n  if (Big(adjustedBorrowedSum).eq(0)) {\n    newHealthFactor = 10000;\n  } else {\n    newHealthFactor = B(adjustedCollateralSum)\n      .div(B(adjustedBorrowedSum))\n      .mul(100)\n      .toFixed(0);\n  }\n  return Number(newHealthFactor) < MAX_RATIO ? newHealthFactor : MAX_RATIO;\n};\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nreturn (\n  <Container>\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    <Modal style={{ display: showModal ? \"block\" : \"none\" }}>\n      <div class=\"modal-header\">\n        <div class=\"title\">Supply&nbsp; {selectedTokenMeta.symbol}</div>\n        <img\n          class=\"btn-close-custom\"\n          src={closeButtonBase64}\n          onClick={closeModal}\n        />\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"content\">\n          <Widget\n            src=\"juaner.near/widget/ref-input-box\"\n            props={{\n              amount,\n              handleAmount,\n              balance: vailableBalance,\n              balance$: vailableBalance$,\n            }}\n          />\n          <div class=\"template mt_25\">\n            <span class=\"title\">Health Factor</span>\n            <span class=\"value\">\n              {newHealthFactor && cfButtonStatus\n                ? newHealthFactor\n                : healthFactor}\n              %\n            </span>\n          </div>\n          <div class=\"template mt_25\">\n            <span class=\"title\">Collateral Factor</span>\n            <div class=\"flex-center\">\n              <span class=\"value\">{cf}%</span>\n              <div\n                class={`switchButton ${canUseAsCollateral ? \"\" : \"disabled\"} ${\n                  cfButtonStatus ? \"justify-end\" : \"justify-start\"\n                }`}\n                onClick={switchButtonStatus}\n              >\n                <label\n                  class={`whiteBall ${canUseAsCollateral ? \"\" : \"disabled\"}`}\n                ></label>\n              </div>\n            </div>\n          </div>\n          <div\n            class={`greenButton mt_25  ${Number(amount) ? \"\" : \"disabled\"}`}\n            onClick={handleDeposit}\n          >\n            Supply\n          </div>\n        </div>\n      </div>\n    </Modal>\n    <Backdrop\n      style={{ display: showModal ? \"block\" : \"none\" }}\n      onClick={closeModal}\n    ></Backdrop>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-supply-supply", "__row_index": 0}