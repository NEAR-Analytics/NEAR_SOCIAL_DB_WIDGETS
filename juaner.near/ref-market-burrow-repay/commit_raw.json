{"tx_hash": "9kZsYb75TUWWXa1Ue5rHp3aRyj5cabwBSCudvfFNnSQx", "action_id_social": "FoMuzTif9qokUGVEKHGBwQvhMqqshSktRm9V8Ksrv7RH-1-widget", "block_id": 88643357, "block_timestamp": "2023-04-02 09:31:22.971", "signer_id": "juaner.near", "widget_name": "ref-market-burrow-repay", "source_code": "const Container = styled.div`\n    .content input{\n      background: #152528;\n      border-radius: 12px;\n      height: 55px;\n      font-size:20px;\n      color: #7E8A93;\n      padding:0 15px 0 15px;\n      border:none;\n      outline:none;\n      margin-bottom:8px;\n    }\n    .content input:focus{\n      outline:none;\n    }\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n    }\n    .content .balance {\n      font-size:12px;\n      color:#4B6778;\n      margin-left:6px;\n    }\n    .template{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-left:6px;\n    }\n    .template .title{\n      font-size:14px;\n      color:#7E8A93;\n    }\n    .template .value{\n      font-size:14px;\n      color:#fff;\n    }\n    .mt_25{\n      margin-top:25px;\n    }\n    .mt-10{\n      margin-top:10px;\n    }\n    .greenButton{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      background: #00FFD1;\n      border-radius: 12px;\n      height:46px;\n      font-weight: 700;\n      font-size: 18px;\n      color:#000;\n      cursor:pointer;\n      width:100%;\n    }\n`;\n/** base tool start  */\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet accountId = context.accountId;\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals));\n};\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\nconst selectedTokenId = props.selectedTokenId;\nconst { rewards, account, balances, amount, hasError, assets } = state;\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\n/** base tool end */\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nconst onLoad = (data) => {\n  State.update(data);\n};\n/** logic start */\nlet availableBalance = 0;\nlet apy = 0;\n\nconst getBalance = (asset) => {\n  if (!asset) return 0;\n  const { accountBalance, metadata } = asset;\n  return formatToken(shrinkToken(accountBalance, metadata.decimals).toFixed());\n};\n\nconst getApy = (asset) => {\n  if (!asset) return 0;\n  const r = rewards.find((a) => a.token_id === asset.token_id);\n  return toAPY(r.apyBaseBorrow);\n};\n\nif (selectedTokenId && assets) {\n  const token = selectedTokenId === \"NEAR\" ? \"wrap.near\" : selectedTokenId;\n  const asset = assets.find((a) => a.token_id === token);\n  availableBalance =\n    selectedTokenId === \"NEAR\" ? nearBalance : getBalance(asset);\n  apy = getApy(asset);\n}\n\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\n\nconst handleAmount = (e) => {\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n  });\n};\nconst handleRepay = () => {\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n\n  if (!selectedTokenId || !amount || hasError) return;\n\n  if (amount > availableBalance) {\n    State.update({ selectedTokenId, amount, hasError: true });\n    return;\n  }\n  const transactions = [];\n\n  const expandedAmount = expandToken(\n    amount,\n    asset.metadata.decimals + asset.config.extra_decimals\n  );\n\n  const repayTemplate = {\n    Execute: {\n      actions: [\n        {\n          Repay: {\n            max_amount: expandedAmount.toFixed(0),\n            token_id: selectedTokenId,\n          },\n        },\n      ],\n    },\n  };\n\n  const repayTransaction = {\n    contractName: selectedTokenId,\n    methodName: \"ft_transfer_call\",\n    deposit: new Big(\"1\").toFixed(),\n    gas: expandToken(300, 12),\n    args: {\n      receiver_id: BURROW_CONTRACT,\n      amount: expandedAmount.toFixed(0),\n      msg: JSON.stringify(repayTemplate),\n    },\n  };\n\n  if (storageToken?.available === \"0\" || !storageToken?.available) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.push({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n\n  transactions.push(repayTransaction);\n\n  Near.call(transactions);\n};\n/** logic end */\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    <div class=\"content\">\n      <input type=\"number\" value={amount} onChange={handleAmount} />\n      {selectedTokenId && (\n        <span class=\"balance\">\n          Balance: {availableBalance} {/**(${availableUSD}) */}\n        </span>\n      )}\n      {hasError && (\n        <p class=\"alert alert-danger mt-10\" role=\"alert\">\n          Amount greater than available\n        </p>\n      )}\n      <div class=\"template mt_25\">\n        <span class=\"title\">Borrow APY</span>\n        <span class=\"value\">{apy}%</span>\n      </div>\n      <div class=\"greenButton mt_25\" onClick={handleRepay}>\n        Repay\n      </div>\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-burrow-repay"}