{"tx_hash": "5dja95AtZanxaQmm8C1nU19RpDfzHxPcAmbp6Jm2ERy2", "action_id_social": "G7mCy7V7SXQUb6oQ9PfzBMGDvm2imPL4U6Kz6xS35nik-1-widget", "block_id": 89403125, "block_timestamp": "2023-04-12 09:55:43.923", "signer_id": "juaner.near", "widget_name": "ref-adjust-button", "source_code": "let BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet ORACLE_CONTRACT = \"priceoracle.near\";\nlet accountId = context.accountId;\nlet MAX_RATIO = 10_000;\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\nconst NO_STORAGE_DEPOSIT_CONTRACTS = [\"aurora\", \"meta-pool.near\"];\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals));\n};\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\nconst {\n  selectedTokenId,\n  amount,\n  hasError,\n  account,\n  onLoad,\n  assets,\n  availableBalance,\n  storageToken,\n} = props;\nfunction decimalMax(a, b) {\n  a = new B(a);\n  b = new B(b);\n  return a.gt(b) ? a : b;\n}\n\nfunction decimalMin(a, b) {\n  a = new B(a);\n  b = new B(b);\n  return a.lt(b) ? a : b;\n}\nconst handleWithdraw = () => {\n  if (!selectedTokenId || !amount || hasError || !account) return;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { token_id, metadata, config } = asset;\n  if (Number(amount) > Number(availableBalance)) {\n    onLoad({ hasError: true });\n    return;\n  }\n  const decimals = metadata.decimals + config.extra_decimals;\n  const expandedAmount = expandToken(amount, decimals);\n  const accountSuppliedAsset = account.supplied.find(\n    (a) => a.token_id === tokenId\n  );\n  const suppliedBalance = accountSuppliedAsset?.balance || 0;\n  const decreaseCollateralAmount = decimalMax(\n    expandedAmount.sub(suppliedBalance).toFixed(),\n    0\n  );\n  const withdrawAction = {\n    Withdraw: {\n      token_id,\n      max_amount: expandedAmount.toFixed(),\n    },\n  };\n  const transactions = [];\n  if (decreaseCollateralAmount.gt(0)) {\n    transactions.push({\n      contractName: ORACLE_CONTRACT,\n      methodName: \"oracle_call\",\n      gas: expandToken(100, 12),\n      deposit: new Big(\"1\").toFixed(),\n      args: {\n        receiver_id: BURROW_CONTRACT,\n        msg: JSON.stringify({\n          Execute: {\n            actions: [\n              {\n                DecreaseCollateral: {\n                  token_id,\n                  amount: decreaseCollateralAmount.toFixed(0),\n                },\n              },\n              withdrawAction,\n            ],\n          },\n        }),\n      },\n    });\n  } else {\n    transactions.push({\n      contractName: ORACLE_CONTRACT,\n      methodName: \"oracle_call\",\n      gas: expandToken(100, 12),\n      deposit: new Big(\"1\").toFixed(),\n      args: {\n        receiver_id: BURROW_CONTRACT,\n        msg: JSON.stringify({\n          Execute: { actions: [withdrawAction] },\n        }),\n      },\n    });\n  }\n  const isNEAR = token_id == \"wrap.near\";\n  if (isNEAR && expandedAmount.gt(10)) {\n    transactions.push({\n      contractName: token_id,\n      methodName: \"near_withdraw\",\n      args: { amount: expandedAmount.sub(10).toFixed(0) },\n    });\n  }\n  if (\n    !(storageToken && storageToken.total != \"0\") &&\n    !NO_STORAGE_DEPOSIT_CONTRACTS.includes(token_id)\n  ) {\n    transactions.unshift({\n      contractName: token_id,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n\n  Near.call(transactions);\n};\nreturn (\n  <div\n    class={`greenButton mt_25 ${Number(amount) ? \"\" : \"disabled\"}`}\n    onClick={handleWithdraw}\n  >\n    Adjust\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-adjust-button"}