{"tx_hash": "EWduQT3U8WefgWzeagnRZy6C15nTo8VRW5m9DTT3cJzX", "action_id_social": "B2GBVNtmfHppkksm3SekpbenYBF63FvFvfpNYvTRqnMu-0-widget", "block_id": 91006672, "block_timestamp": "2023-05-03 13:32:48.715", "signer_id": "juaner.near", "widget_name": "ref-market-burrow-assets", "source_code": "const Container = styled.div`\n   background: #1A2E33;\n    .table{\n        margin:0;\n    }\n    .noBorder{\n      border:none;\n    }\n    .table thead tr{\n        height:50px;\n        border:hidden;\n    }\n    .table tbody tr{\n        height:50px;\n    }\n     .table.click tbody tr:hover{\n        background: rgba(0, 0, 0, 0.1);\n     }\n    .table th{\n        color: #7E8A93;\n        font-size:14px;\n        vertical-align: middle;\n    }\n    .table td{\n        color: #fff;\n        font-size:14px;\n        vertical-align: middle;\n        border: none;\n    }\n    .tokenIcon{\n      width: 26px;\n      height: 26px;\n      border-radius:100px;\n      margin-right:8px;\n    }\n    .rewardIcon{\n      width: 16px;\n      height: 16px;\n      border-radius:100px;\n    }\n    .text_red_color{\n      color:#FF6BA9;\n    }\n    .ml_4_ne{\n        margin-left:-4px;\n    }\n    .flex_center{\n      display:flex;\n      align-items:center;\n    }\n    .font-18{\n      font-size:18px;\n    }\n    .flex-end{\n      display:flex;\n      align-items:center;\n      justify-content:end;\n      height:50px;\n    }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nlet MAX_RATIO = 10_000;\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\n\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return B(value).div(B(10).pow(decimals || 0));\n};\n\nconst expandToken = (value, decimals) => {\n  return B(value).mul(B(10).pow(decimals || 0));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nconst power = (x, y) => {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n};\nconst nFormat = (num, digits) => {\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"K\" },\n    { value: 1e6, symbol: \"M\" },\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup\n    .slice()\n    .reverse()\n    .find((item) => num >= item.value);\n  return item\n    ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol\n    : \"0\";\n};\nconst {\n  rewards,\n  account,\n  balances,\n  selectedTokenId,\n  amount,\n  hasError,\n  assets,\n  tabName,\n  showModal,\n  wnearbase64,\n  closeButtonBase64,\n} = state;\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\n/** base tool end */\nconst config = Near.view(BURROW_CONTRACT, \"get_config\");\nconst onLoad = (data) => {\n  State.update(data);\n};\nconst rewardsMap = rewards\n  ? rewards.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nconst assetsMap = assets\n  ? assets.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nfunction getExtraApy(asset) {\n  const asset_token_id = asset.token_id;\n  const borrowFarm = asset.farms.find(\n    (farm) =>\n      farm[\"farm_id\"][\"Borrowed\"] && Object.keys(farm.rewards || {}).length\n  );\n  if (!borrowFarm) return 0;\n  const assetDecimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const totalBorrowUSD = toUsd(asset.borrowed.balance, asset);\n  const rewards = borrowFarm.rewards;\n  let userFarm;\n  if (account) {\n    userFarm = account.farms.find((farm) => {\n      return (\n        farm[\"farm_id\"][\"Borrowed\"] == asset.token_id && farm.rewards.length\n      );\n    });\n  }\n  if (!userFarm) {\n    return Object.keys(rewards)\n      .map((reward_token_id) => {\n        const farmData = rewards[reward_token_id];\n        const { reward_per_day, boosted_shares } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const totalRewardsUsd = toUsd(\n          B(reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        if (B(totalBorrowUSD).eq(0)) return 0;\n        const apy = B(totalRewardsUsd).div(totalBorrowUSD).mul(100).toFixed();\n        return apy;\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  } else {\n    return userFarm.rewards\n      .map((farmData) => {\n        const { reward_token_id, boosted_shares, asset_farm_reward } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const borrowedShares = Number(\n          shrinkToken(boosted_shares || 0, assetDecimals)\n        );\n        const totalBoostedShares = Number(\n          shrinkToken(asset_farm_reward.boosted_shares, assetDecimals)\n        );\n        const boosterLogBase = Number(\n          shrinkToken(\n            asset_farm_reward.booster_log_base,\n            config.booster_decimals\n          )\n        );\n        const xBRRRAmount = Number(\n          shrinkToken(\n            account.booster_staking[\"x_booster_amount\"] || 0,\n            config.booster_decimals\n          )\n        );\n        const log = Math.log(xBRRRAmount) / Math.log(boosterLogBase);\n        const multiplier = log >= 0 ? 1 + log : 1;\n        const userBorrowedBalance =\n          account.borrowed.find((asset) => asset.token_id == asset_token_id)\n            .balance || 0;\n        const totalUserAssetUSD = toUsd(userBorrowedBalance, asset);\n        const totalRewardsUsd = toUsd(\n          B(asset_farm_reward.reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        return B(totalRewardsUsd)\n          .mul(borrowedShares / totalBoostedShares)\n          .mul(multiplier)\n          .div(totalUserAssetUSD)\n          .mul(100)\n          .toFixed();\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  }\n}\nconst toUsd = (balance, asset) =>\n  asset.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\n// get market can burrow assets\nconst can_burrow_assets = assets && assets.filter((a) => a.config.can_borrow);\nconst market_burrow_assets =\n  can_burrow_assets &&\n  can_burrow_assets.map((asset) => {\n    const { token_id, metadata, price, config } = asset;\n    const r = rewards.find((a) => a.token_id === asset.token_id);\n    const borrowApy = r.apyBaseBorrow;\n    const extraApy = getExtraApy(asset);\n    const apy = borrowApy - extraApy;\n    const token_usd_price = price && price.usd;\n    const liquidity = nFormat(\n      B(asset.availableLiquidity || 0)\n        .mul(token_usd_price || 0)\n        .toNumber(),\n      2\n    );\n    const { volatility_ratio } = config;\n    const cf = volatility_ratio / 100;\n\n    const hasRewards = rewardsMap[token_id] && assetsMap[token_id];\n    const rewardMap = hasRewards && rewardsMap[token_id];\n    const rewardTokens = rewardMap && rewardMap.rewardTokensBorrow;\n    const rewardTokensImg =\n      rewardTokens &&\n      rewardTokens.map((token_id, index) => {\n        const metadata = assetsMap[token_id].metadata;\n        return (\n          <img\n            class={`rewardIcon ${index > 0 ? \"ml_4_ne\" : \"\"}`}\n            src={metadata.icon}\n          ></img>\n        );\n      });\n    return (\n      <tr>\n        <td>\n          <img src={metadata.icon || wnearbase64} class=\"tokenIcon\"></img>\n          {metadata.symbol}\n        </td>\n        <td>{toAPY(apy)}%</td>\n        <td class=\"text-white\">\n          {rewardTokensImg.length == 0 ? \"-\" : rewardTokensImg}\n        </td>\n        <td>{cf || \"-\"}%</td>\n        <td>{liquidity}</td>\n        <td class=\"flex-end\">\n          <Widget\n            src=\"juaner.near/widget/ref-operation-button\"\n            props={{\n              clickEvent: () => {\n                handleSelect(token_id);\n              },\n              buttonType: \"solid\",\n              actionName: \"Burrow\",\n              hoverOn: true,\n            }}\n          />\n        </td>\n      </tr>\n    );\n  });\nconst handleSelect = (token_id) => {\n  State.update({\n    selectedTokenId: token_id,\n    showModal: true,\n  });\n};\nfunction closeModal() {\n  State.update({\n    showModal: false,\n  });\n}\nfunction changeTab(tabName) {\n  State.update({\n    tabName,\n  });\n}\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nconst selectedToken = (selectedTokenId && assetsMap[selectedTokenId]) || {};\nconst selectedTokenMeta = selectedToken.metadata || {};\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    {/* market */}\n    <div class=\"fw-bold text-white mt-3 font-18\">\n      <span class=\"text_red_color\">Borrow</span> Market\n    </div>\n    <table class=\"table click noBorder\">\n      <thead>\n        <tr>\n          <th scope=\"col\" width=\"15%\">\n            Assets\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"15%\">\n            APY\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"15%\">\n            Rewards\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"15%\">\n            C.F.\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"15%\">\n            Total Liquidity\n          </th>\n          <th scope=\"col\" class=\"text-end\"></th>\n        </tr>\n      </thead>\n      <tbody>{market_burrow_assets}</tbody>\n    </table>\n    {/* Modal*/}\n    <Widget\n      src=\"juaner.near/widget/ref-market-burrow-burrow\"\n      props={{ selectedTokenId, selectedTokenMeta, showModal, closeModal }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-burrow-assets"}