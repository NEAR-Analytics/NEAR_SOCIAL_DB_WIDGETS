{"tx_hash": "4x9xy9wpTLwVKQbzBBRohJAn16zGCNkurNEpXPP3keh", "action_id_social": "69sKtJhc4iWbQCb2qgdRamw89RYXGoXmmFU5Zr996ccF-1-widget", "block_id": 89411215, "block_timestamp": "2023-04-12 12:27:23.430", "signer_id": "juaner.near", "widget_name": "ref-market-supply-adjust", "source_code": "const Container = styled.div`\n    background-color:black;\n    .content input{\n      background: #152528;\n      border-radius: 12px;\n      height: 55px;\n      font-size:20px;\n      color: #7E8A93;\n      padding:0 15px 0 15px;\n      border:none;\n      margin-bottom:8px;\n    }\n    .content input:focus{\n      outline:none;\n    }\n \n    .content .balance {\n      font-size:12px;\n      color:#4B6778;\n      margin-left:6px;\n    }\n    .template{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-left:6px;\n    }\n    .template .title{\n      font-size:14px;\n      color:#7E8A93;\n    }\n    .template .value{\n      font-size:14px;\n      color:#fff;\n    }\n    .mt_25{\n      margin-top:25px;\n    }\n    .mt-10{\n      margin-top:10px;\n    }\n\n    .flex-center{\n      display:flex;\n      align-items:center;\n\n    }\n    .greenButton{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      background: #00FFD1;\n      border-radius: 12px;\n      height:46px;\n      font-weight: 700;\n      font-size: 18px;\n      color:#000;\n      cursor:pointer;\n      width:100%;\n    }\n    .disabled{\n      opacity:0.3;\n      cursor: not-allowed;\n    }\n    .checkButton{\n       flex-grow:1;\n       height: 32px;\n       border: 1px solid #304352;\n       margin-right:7px;\n       display:flex;\n       align-items:center;\n       justify-content:center;\n       color:white;\n       border-radius: 6px;\n       cursor:pointer;\n    }\n    .checkButton.active{\n        background-color:#304352;\n    }\n    .mt-15{\n        margin-top:15px;\n    }\n`;\n/** base tool start  */\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet ORACLE_CONTRACT = \"priceoracle.near\";\nlet accountId = context.accountId;\nlet MAX_RATIO = 10_000;\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\nconst NO_STORAGE_DEPOSIT_CONTRACTS = [\"aurora\", \"meta-pool.near\"];\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals));\n};\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\nconst { showModal, selectedTokenId } = props;\nconst {\n  rewards,\n  balances,\n  account,\n  amount,\n  hasError,\n  hasHFError,\n  assets,\n  cfButtonStatus,\n  newHealthFactor,\n} = state;\nconst hasData = assets.length > 0 && rewards.length > 0;\nif (!showModal) {\n  State.update({\n    amount: \"\",\n    hasError: false,\n    hasHFError: false,\n  });\n}\n/** base tool end */\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nconst onLoad = (data) => {\n  State.update(data);\n};\n/** logic start */\nlet apy = 0;\nlet cf = \"-\";\nconst getApy = (asset) => {\n  if (!asset && !rewards) return 0;\n  const r = rewards.find((a) => a.token_id === asset.token_id);\n  const totalApy = r.apyBase + r.apyRewardTvl + r.apyReward;\n  return toAPY(totalApy);\n};\nif (selectedTokenId && assets) {\n  const token = selectedTokenId === \"NEAR\" ? \"wrap.near\" : selectedTokenId;\n  const asset = assets.find((a) => a.token_id === token);\n  apy = getApy(asset);\n  cf = asset.config.volatility_ratio / 100;\n}\nconst handleAmount = (e) => {\n  const amount = Number(e.target.value);\n  const [newHF, hFErrorStatus] = recomputeHealthFactor(selectedTokenId, amount);\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n    newHealthFactor: newHF,\n    hasHFError: hFErrorStatus,\n  });\n};\n\n/** logic end */\nfunction getAdjustedSum(type, account) {\n  if (!assets || !account || account[type].length == 0) return B(1);\n  return account[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\nfunction getHealthFactor() {\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\nconst healthFactor = getHealthFactor();\n\nconst recomputeHealthFactor = (tokenId, amount) => {\n  if (!tokenId || !amount || !assets) return null;\n  const asset = assets.find((a) => a.token_id === tokenId);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const accountCollateralAsset = account.collateral.find(\n    (a) => a.token_id === tokenId\n  );\n  const amountDecimal = expandToken(amount || 0, decimals);\n  const newBalance = amountDecimal.toFixed();\n  const clonedAccount = clone(account);\n\n  const updatedToken = {\n    token_id: tokenId,\n    balance: newBalance,\n    shares: newBalance,\n    apr: \"0\",\n  };\n\n  if (clonedAccount?.collateral.length === 0) {\n    clonedAccount.collateral = updatedToken;\n  } else if (!accountCollateralAsset) {\n    clonedAccount.collateral.push(updatedToken);\n  } else {\n    clonedAccount.collateral = [\n      ...clonedAccount.collateral.filter((a) => a.token_id !== tokenId),\n      updatedToken,\n    ];\n  }\n  const adjustedCollateralSum = getAdjustedSum(\n    \"collateral\",\n    amount === 0 ? account : clonedAccount\n  );\n  const adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\n  const newHealthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  let hFErrorStatus = false;\n  if (Number(newHealthFactor) >= 0 && Number(newHealthFactor) <= 105) {\n    hFErrorStatus = true;\n  }\n  const newHealthFactorAmount =\n    Number(newHealthFactor) < MAX_RATIO ? newHealthFactor : MAX_RATIO;\n  return [newHealthFactorAmount, hFErrorStatus];\n};\nfunction computeAdjustMaxAmount() {\n  if (!assets || !selectedTokenId || !account) return \"0\";\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { metadata, config } = asset;\n  const decimals = metadata.decimals + config.extra_decimals;\n  const assetPrice = asset.price\n    ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n    : B(0);\n  const accountSuppliedAsset = account.supplied.find(\n    (a) => a.token_id === selectedTokenId\n  );\n  const suppliedBalance = new B(accountSuppliedAsset?.balance || 0);\n  const supplied = Number(shrinkToken(suppliedBalance.toFixed(), decimals));\n\n  const accountCollateralAsset = account.collateral.find(\n    (a) => a.token_id === selectedTokenId\n  );\n  const collateralBalance = new B(accountCollateralAsset?.balance || 0);\n  const collateral = Number(shrinkToken(collateralBalance.toFixed(), decimals));\n  const availableBalance = B(supplied).plus(collateral).toFixed();\n  return [availableBalance, collateral];\n}\nfunction decimalMax(a, b) {\n  a = new B(a);\n  b = new B(b);\n  return a.gt(b) ? a : b;\n}\n\nfunction decimalMin(a, b) {\n  a = new B(a);\n  b = new B(b);\n  return a.lt(b) ? a : b;\n}\nconst [availableBalance, remainBalance] = computeAdjustMaxAmount();\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    <div class=\"content\">\n      <input type=\"number\" value={amount} onChange={handleAmount} />\n      {selectedTokenId && (\n        <span class=\"balance\">Balance: {availableBalance}</span>\n      )}\n      {hasError && (\n        <p class=\"alert alert-danger mt-10\" role=\"alert\">\n          Amount greater than available\n        </p>\n      )}\n      {hasHFError && (\n        <p class=\"alert alert-danger mt-10\" role=\"alert\">\n          Your health factor will be dangerously low and you're at risk of\n          liquidation\n        </p>\n      )}\n      {/*<div class=\"flex-center mt-15\">\n        <span class=\"checkButton active\">25%</span>\n        <span class=\"checkButton\">50%</span>\n        <span class=\"checkButton\">75%</span>\n        <span class=\"checkButton\">100%</span>\n      </div>*/}\n      <div class=\"template mt_25\">\n        <span class=\"title\">Health Factor</span>\n        <span class=\"value\">\n          {newHealthFactor ? newHealthFactor : healthFactor}%\n        </span>\n      </div>\n      <div class=\"template mt_25\">\n        <span class=\"title\">Amount designated as collateral</span>\n        <span class=\"value\">{amount || remainBalance || \"-\"}</span>\n      </div>\n      <Widget\n        src=\"juaner.near/widget/ref-adjust-button\"\n        props={{\n          onLoad,\n          selectedTokenId,\n          amount,\n          hasError,\n          hasHFError,\n          account,\n          onLoad,\n          assets,\n          availableBalance,\n        }}\n      />\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-supply-adjust"}