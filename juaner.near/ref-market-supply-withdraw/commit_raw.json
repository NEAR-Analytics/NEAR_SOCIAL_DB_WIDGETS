{"tx_hash": "9XdcxFLXgZqSuioSqKnntpYA8ga3XSnj35c4ut5LKY7n", "action_id_social": "Hyr99nnArKJNR6C9UVXkAKZ6XrPAxTyxmbLQPffxKgLE-0-widget", "block_id": 89607557, "block_timestamp": "2023-04-15 02:27:19.778", "signer_id": "juaner.near", "widget_name": "ref-market-supply-withdraw", "source_code": "const Container = styled.div`\n   .template{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-left:6px;\n    }\n    .template .title{\n      font-size:14px;\n      color:#7E8A93;\n    }\n    .template .value{\n      font-size:14px;\n      color:#fff;\n    }\n    .template .usd{\n        color:#7E8A93;\n    }\n    .mt_25{\n      margin-top:25px;\n    }\n    .mt-10{\n      margin-top:10px;\n    }\n`;\nconst Backdrop = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.6);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1001;\n`;\nconst Modal = styled.div`\n  background-color:#1A2E33;\n  border-radius:12px;\n  position:fixed;\n  z-index:1002;\n  width:30rem;\n  max-width: 95vw;\n  max-height: 80vh;\n  padding:10px 0 20px 0;\n  animation:anishow 0.3s forwards ease-out;\n  left:50%;\n  top:50%;\n  @keyframes anishow {\n    from {\n      opacity: 0;\n      transform:translate(-50%,-70%);\n    }\n    to {\n      opacity: 1;\n      transform:translate(-50%,-50%);\n    }\n  }\n    .modal-header{\n      display:flex;\n      align-items:center;\n      justify-content:start;\n      color:#fff;\n      font-weight: 700;\n      font-size: 18px;\n      padding:12px 20px;\n      margin-bottom:16px;\n      border-bottom:2px solid rgba(48, 67, 82, 0.5);\n    } \n    .modal-header .title{\n       font-weight: 700;\n       font-size: 18px;\n       color:#fff;\n    }\n    .modal-header .btn-close{\n      position:absolute;\n      right:28px;\n      margin:0;\n    }\n    .modal-body {\n        padding:0 16px;\n    }\n    .modal-body .tab{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-bottom:30px;\n    }\n    .modal-body .tab span{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      width:50%;\n      height:40px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 18px;\n      cursor:pointer;\n      color:#fff;\n    }\n    .modal-body .tab span.active{\n      background: #304352;\n    }\n   .btn-close-custom{\n      position:absolute;\n      right:28px;\n      width:12px;\n      height:12px;\n      cursor:pointer;\n    }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet ORACLE_CONTRACT = \"priceoracle.near\";\nlet MAX_RATIO = 10_000;\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals));\n};\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\nconst { showModal, closeModal, selectedTokenId, selectedTokenMeta } = props;\nconst {\n  assets,\n  rewards,\n  balances,\n  account,\n  amount,\n  hasError,\n  newHealthFactor,\n  wnearbase64,\n  closeButtonBase64,\n} = state;\nconst hasData = assets.length > 0 && rewards.length > 0;\nif (!showModal) {\n  State.update({\n    amount: \"\",\n    hasError: false,\n  });\n}\n/** base tool end */\nconst onLoad = (data) => {\n  State.update(data);\n};\n/** logic start */\nlet apy = 0;\nlet cf = \"-\";\nconst getApy = (asset) => {\n  if (!asset && !rewards) return 0;\n  const r = rewards.find((a) => a.token_id === asset.token_id);\n  const totalApy = r.apyBase + r.apyRewardTvl + r.apyReward;\n  return toAPY(totalApy);\n};\nif (selectedTokenId && assets) {\n  const token = selectedTokenId === \"NEAR\" ? \"wrap.near\" : selectedTokenId;\n  const asset = assets.find((a) => a.token_id === token);\n  apy = getApy(asset);\n  cf = asset.config.volatility_ratio / 100;\n}\n\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\n\nconst handleAmount = (value) => {\n  const amount = Number(value);\n  const newHF = recomputeHealthFactor(selectedTokenId, amount);\n  State.update({\n    amount,\n    selectedTokenId,\n    hasError: false,\n    newHealthFactor: newHF,\n  });\n};\n\n/** logic end */\nfunction getAdjustedSum(type, account) {\n  if (!assets || !account || account[type].length == 0) return B(1);\n  return account[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\nfunction getHealthFactor() {\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\nconst healthFactor = getHealthFactor();\n\nconst recomputeHealthFactor = (tokenId, amount) => {\n  if (!tokenId || !amount || !assets) return null;\n  const asset = assets.find((a) => a.token_id === tokenId);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const accountCollateralAsset = account.collateral.find(\n    (a) => a.token_id === tokenId\n  );\n  const accountSuppliedAsset = account.supplied.find(\n    (a) => a.token_id === tokenId\n  );\n  const collateralBalance = B(accountCollateralAsset?.balance || 0);\n  const suppliedBalance = B(accountSuppliedAsset?.balance || 0);\n  const amountDecimal = expandToken(amount || 0, decimals);\n\n  const newBalance = decimalMin(\n    collateralBalance.toFixed(),\n    collateralBalance.plus(suppliedBalance).minus(amountDecimal).toFixed()\n  ).toFixed();\n  const clonedAccount = clone(account);\n\n  const updatedToken = {\n    token_id: tokenId,\n    balance: newBalance,\n    shares: newBalance,\n    apr: \"0\",\n  };\n\n  if (clonedAccount?.collateral.length === 0) {\n    clonedAccount.collateral = updatedToken;\n  } else if (!accountCollateralAsset) {\n    clonedAccount.collateral.push(updatedToken);\n  } else {\n    clonedAccount.collateral = [\n      ...clonedAccount.collateral.filter((a) => a.token_id !== tokenId),\n      updatedToken,\n    ];\n  }\n  const adjustedCollateralSum = getAdjustedSum(\n    \"collateral\",\n    amount === 0 ? account : clonedAccount\n  );\n  const adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\n  const newHealthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n\n  return Number(newHealthFactor) < MAX_RATIO ? newHealthFactor : MAX_RATIO;\n};\nfunction computeWithdrawMaxAmount() {\n  if (!assets || !selectedTokenId || !account) return \"0\";\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { metadata, config } = asset;\n  const decimals = metadata.decimals + config.extra_decimals;\n  const assetPrice = asset.price\n    ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n    : B(0);\n  const accountSuppliedAsset = account.supplied.find(\n    (a) => a.token_id === selectedTokenId\n  );\n  const suppliedBalance = new B(accountSuppliedAsset?.balance || 0);\n  const supplied = Number(shrinkToken(suppliedBalance.toFixed(), decimals));\n\n  const accountCollateralAsset = account.collateral.find(\n    (a) => a.token_id === selectedTokenId\n  );\n  const collateralBalance = new B(accountCollateralAsset?.balance || 0);\n  const collateral = Number(shrinkToken(collateralBalance.toFixed(), decimals));\n  let maxAmount = suppliedBalance;\n  if (collateralBalance.gt(0)) {\n    const adjustedPricedDiff = decimalMax(\n      0,\n      B(adjustedCollateralSum).sub(adjustedBorrowedSum).toFixed()\n    );\n    const safeAdjustedPricedDiff = adjustedPricedDiff.mul(999).div(1000);\n\n    const safePricedDiff = safeAdjustedPricedDiff\n      .div(asset.config.volatility_ratio)\n      .mul(10000);\n    const safeDiff = safePricedDiff\n      .div(assetPrice)\n      .mul(expandToken(1, asset.config.extra_decimals))\n      .toFixed(0);\n    maxAmount = maxAmount.add(\n      decimalMin(safeDiff, collateralBalance.toFixed()).toFixed()\n    );\n    const { metadata, config } = asset;\n    const decimals = metadata.decimals + config.extra_decimals;\n    maxAmount = shrinkToken(maxAmount.toFixed(), decimals);\n  }\n  const remain = Math.abs(\n    Math.min(collateral, collateral + supplied - (amount || 0))\n  );\n  const remainBalance = B(remain).toFixed(4);\n  const price = asset.price.usd || 0;\n  const maxAmount$ = maxAmount.mul(price).toFixed(2);\n  const remainBalance$ = B(remain).mul(price).toFixed(2);\n  return [maxAmount.toFixed(), remainBalance, maxAmount$, remainBalance$];\n}\nfunction decimalMax(a, b) {\n  a = new B(a);\n  b = new B(b);\n  return a.gt(b) ? a : b;\n}\n\nfunction decimalMin(a, b) {\n  a = new B(a);\n  b = new B(b);\n  return a.lt(b) ? a : b;\n}\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nconst [availableBalance, remainBalance, availableBalance$, remainBalance$] =\n  computeWithdrawMaxAmount();\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    {/** modal */}\n    <Modal style={{ display: showModal ? \"block\" : \"none\" }}>\n      <div class=\"modal-header\">\n        <div class=\"title\">Withdraw&nbsp; {selectedTokenMeta.symbol}</div>\n        <img\n          class=\"btn-close-custom\"\n          src={closeButtonBase64}\n          onClick={closeModal}\n        />\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"content\">\n          <Widget\n            src=\"juaner.near/widget/ref-input-box\"\n            props={{\n              amount,\n              handleAmount,\n              balance: availableBalance,\n              balance$: availableBalance$,\n            }}\n          />\n          {hasError && (\n            <p class=\"alert alert-danger mt-10\" role=\"alert\">\n              Amount greater than available\n            </p>\n          )}\n          <div class=\"template mt_25\">\n            <span class=\"title\">Health Factor</span>\n            <span class=\"value\">\n              {newHealthFactor ? newHealthFactor : healthFactor}%\n            </span>\n          </div>\n          <div class=\"template mt_25\">\n            <span class=\"title\">Remaining Collateral</span>\n            <span class=\"value\">\n              {remainBalance || \"-\"}\n              <span class=\"usd\">(${remainBalance$ || \"0\"})</span>\n            </span>\n          </div>\n          <Widget\n            src=\"juaner.near/widget/ref-withdraw-button\"\n            props={{\n              onLoad,\n              selectedTokenId,\n              amount,\n              hasError,\n              account,\n              onLoad,\n              assets,\n              availableBalance,\n              storageToken,\n            }}\n          />\n        </div>\n      </div>\n    </Modal>\n    <Backdrop\n      style={{ display: showModal ? \"block\" : \"none\" }}\n      onClick={closeModal}\n    ></Backdrop>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-supply-withdraw"}