{"tx_hash": "3UFs1y9oogzcR7TNnSQ5ry2Frf2NNtZc7q6ERg5FS3Y3", "action_id_social": "Fa2PyZWgvXg1Ej13Khps8VvZi9n6eAcMUuYC2WGxeKAw-0-widget", "block_id": 88502653, "block_timestamp": "2023-03-31 11:36:26.017", "signer_id": "juaner.near", "widget_name": "ref_burrow-borrow", "source_code": "let MAX_RATIO = 10_000;\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet accountId = context.accountId;\n\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\n\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\n\nconst { selectedTokenId, amount, hasError, assets, rewards } = state;\n\nconst hasData = assets.length > 0 && rewards.length > 0;\n\nconst onLoad = (data) => {\n  State.update(data);\n};\n\nconst shrinkToken = (value, decimals) => {\n  return B(value).div(B(10).pow(decimals));\n};\n\nconst expandToken = (value, decimals) => {\n  return B(value).mul(B(10).pow(decimals));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nconst power = (x, y) => {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n};\n\nif (!accountId) {\n  return <Widget src=\"ciocan.near/widget/account-signin\" />;\n}\n\nconst config = Near.view(BURROW_CONTRACT, \"get_config\");\n\nconst account = Near.view(BURROW_CONTRACT, \"get_account\", {\n  account_id: accountId,\n});\n\nif (!account) return <div>loading...</div>;\n\n// sum all assets to get the health factor\n// https://github.com/burrowfdn/burrowland for detailed explanation\nfunction getAdjustedSum(type, account) {\n  if (!assets) return B(1);\n  return account[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\n\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\nfunction getHealthFactor() {\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\n\nconst healthFactor = getHealthFactor();\n\nconst recomputeHealthFactor = (tokenId, amount) => {\n  if (!tokenId || !amount) return null;\n  const asset = assets.find((a) => a.token_id === tokenId);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const accountBorrowedAsset = account.borrowed.find(\n    (a) => a.token_id === tokenId\n  );\n\n  const newBalance = expandToken(amount, decimals)\n    .plus(B(accountBorrowedAsset?.balance || 0))\n    .toFixed();\n\n  const clonedAccount = clone(account);\n\n  const updatedToken = {\n    token_id: tokenId,\n    balance: newBalance,\n    shares: newBalance,\n    apr: \"0\",\n  };\n\n  if (clonedAccount?.borrowed.length === 0) {\n    clonedAccount.borrowed = updatedToken;\n  } else if (!accountBorrowedAsset) {\n    clonedAccount.borrowed.push(updatedToken);\n  } else {\n    clonedAccount.borrowed = [\n      ...clonedAccount.borrowed.filter((a) => a.token_id !== tokenId),\n      updatedToken,\n    ];\n  }\n  console.log(clonedAccount);\n  const adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\n  const adjustedBorrowedSum = getAdjustedSum(\n    \"borrowed\",\n    amount === 0 ? account : clonedAccount\n  );\n\n  const newHealthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toNumber();\n\n  return newHealthFactor;\n};\n\n// get max ammount can be borrowed\nfunction getMaxAmount() {\n  if (!selectedTokenId) return 0;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const volatiliyRatio = asset.config.volatility_ratio || 0;\n  const price = asset.price?.usd || Infinity;\n\n  const available = Number(\n    B(adjustedCollateralSum)\n      .sub(B(adjustedBorrowedSum))\n      .mul(volatiliyRatio)\n      .div(MAX_RATIO)\n      .div(price)\n      .mul(95)\n      .div(100)\n      .toFixed(4)\n  );\n  return [available, (asset.price.usd * available).toFixed(2)];\n}\n\nconst [available, availableUSD] = getMaxAmount();\n\nconst listAssets =\n  assets &&\n  assets\n    ?.filter((a) => a.config.can_borrow)\n    ?.map((asset) => {\n      const { token_id, metadata } = asset;\n\n      return <option value={token_id}>{metadata.symbol}</option>;\n    });\n\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\n// get the storage deposit for a token\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\n\nconst handleSelect = (e) => {\n  State.update({\n    selectedTokenId: e.target.value,\n    amount: \"\",\n    hasError: false,\n  });\n};\n\nconst handleAmount = (e) => {\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n  });\n};\n\nconst handleBlur = (e) => {\n  State.update({\n    newHealthFactor: recomputeHealthFactor(selectedTokenId, amount),\n  });\n};\n\nconst handleBorrow = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n\n  if (amount > available) {\n    State.update({ selectedTokenId, amount, hasError: true });\n    return;\n  }\n\n  const transactions = [];\n\n  const expandedAmount = expandToken(\n    amount,\n    asset.metadata.decimals + asset.config.extra_decimals\n  );\n\n  const borrowTemplate = {\n    Execute: {\n      actions: [\n        {\n          Borrow: {\n            token_id: selectedTokenId,\n            amount: expandedAmount.toFixed(0),\n          },\n        },\n        {\n          Withdraw: {\n            token_id: selectedTokenId,\n            max_amount: expandedAmount.toFixed(0),\n          },\n        },\n      ],\n    },\n  };\n\n  const borrowTransaction = {\n    contractName: config.oracle_account_id,\n    methodName: \"oracle_call\",\n    deposit: B(\"1\").toFixed(),\n    gas: expandToken(300, 12),\n    args: {\n      receiver_id: BURROW_CONTRACT,\n      msg: JSON.stringify(borrowTemplate),\n    },\n  };\n\n  if (storageToken?.available === \"0\" || !storageToken?.available) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.push({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n\n  transactions.push(borrowTransaction);\n\n  if (\n    [\"wrap.near\", \"wrap.testnet\"].includes(selectedTokenId) &&\n    expandedAmount.gt(10)\n  ) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"near_withdraw\",\n      deposit: B(\"1\").toFixed(),\n      args: {\n        amount: expandedAmount.sub(10).toFixed(0),\n      },\n    });\n  }\n\n  Near.call(transactions);\n};\n\nconst reward = rewards && rewards.find((a) => a.token_id === selectedTokenId);\n\nconst newHealthFactor = state.newHealthFactor\n  ? state.newHealthFactor?.toFixed()\n  : undefined;\n\nreturn (\n  <div style={{ maxWidth: \"300px\" }}>\n    {!hasData && (\n      <Widget src=\"ciocan.near/widget/burrow-data\" props={{ onLoad }} />\n    )}\n    <div class=\"card-body d-grid gap-3\">\n      <div>\n        <div class=\"mb-2 text-muted\">From</div>\n        <select\n          onChange={handleSelect}\n          class=\"p-2 mb-1\"\n          style={{ width: \"100%\" }}\n        >\n          <option value=\"\">Borrow an asset</option>\n          {listAssets}\n        </select>\n        {selectedTokenId && (\n          <div>\n            <span class=\"badge bg-light text-dark\">\n              {available} (${availableUSD}) available\n            </span>\n            <span class=\"badge bg-light text-dark\">\n              {toAPY(reward.apyBaseBorrow)}% APY\n            </span>\n          </div>\n        )}\n      </div>\n      <div>\n        <div class=\"mb-2 text-muted\">Amount</div>\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={handleAmount}\n          onBlur={handleBlur}\n        />\n        {hasError && (\n          <p class=\"alert alert-danger\" role=\"alert\">\n            Amount greater than available\n          </p>\n        )}\n      </div>\n      <div>\n        <span class=\"badge bg-light text-dark\">\n          {healthFactor}% health{\" \"}\n          {newHealthFactor && <span>(after borrow: {newHealthFactor}%)</span>}\n        </span>\n      </div>\n      <button\n        onClick={handleBorrow}\n        style={{ background: \"#4ED58A\", borderColor: \"white\" }}\n      >\n        Borrow\n      </button>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref_burrow-borrow"}