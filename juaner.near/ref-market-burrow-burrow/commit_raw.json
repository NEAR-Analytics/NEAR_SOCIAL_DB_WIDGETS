{"tx_hash": "8j45qUvFbPy1yK9iPf32fZ931e6xXHbhHz4PXWKh4MrJ", "action_id_social": "FrMTcge1EK9YUFYjJVXMg1oJwEWTwQM4TxAzwwU5wvav-0-widget", "block_id": 91531195, "block_timestamp": "2023-05-10T12:45:27.809Z", "signer_id": "juaner.near", "widget_name": "ref-market-burrow-burrow", "source_code": "const Container = styled.div`\n    .template{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-left:6px;\n    }\n    .template .title{\n      font-size:14px;\n      color:#7E8A93;\n    }\n    .template .value{\n      font-size:14px;\n      color:#fff;\n    }\n    .mt_25{\n      margin-top:25px;\n    }\n    .mt-10{\n      margin-top:10px;\n    }\n    .greenButton{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      background: #00FFD1;\n      border-radius: 12px;\n      height:46px;\n      font-weight: 700;\n      font-size: 18px;\n      color:#000;\n      cursor:pointer;\n      width:100%;\n    }\n    .disabled{\n      opacity:0.3;\n      cursor: not-allowed;\n    }\n`;\nconst Backdrop = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.6);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1001;\n`;\nconst Modal = styled.div`\n  background-color:#1A2E33;\n  border-radius:12px;\n  position:fixed;\n  z-index:1002;\n  width:30rem;\n  max-width: 95vw;\n  max-height: 80vh;\n  padding:10px 0 20px 0;\n  animation:anishow 0.3s forwards ease-out;\n  left:50%;\n  top:50%;\n  @keyframes anishow {\n    from {\n      opacity: 0;\n      transform:translate(-50%,-70%);\n    }\n    to {\n      opacity: 1;\n      transform:translate(-50%,-50%);\n    }\n  }\n    .modal-header{\n      display:flex;\n      align-items:center;\n      justify-content:start;\n      color:#fff;\n      font-weight: 700;\n      font-size: 18px;\n      padding:12px 20px;\n      margin-bottom:16px;\n      border-bottom:2px solid rgba(48, 67, 82, 0.5);\n    } \n    .modal-header .title{\n       font-weight: 700;\n       font-size: 18px;\n       color:#fff;\n    }\n    .modal-header .btn-close{\n      position:absolute;\n      right:28px;\n      margin:0;\n    }\n    .modal-body {\n        padding:0 16px;\n    }\n    .modal-body .tab{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-bottom:30px;\n    }\n    .modal-body .tab span{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      width:50%;\n      height:40px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 18px;\n      cursor:pointer;\n      color:#fff;\n    }\n    .modal-body .tab span.active{\n      background: #304352;\n    }\n   .btn-close-custom{\n      position:absolute;\n      right:28px;\n      width:12px;\n      height:12px;\n      cursor:pointer;\n    }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nlet MAX_RATIO = 10_000;\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\nconst NO_STORAGE_DEPOSIT_CONTRACTS = [\"aurora\", \"meta-pool.near\"];\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return B(value).div(B(10).pow(decimals || 0));\n};\n\nconst expandToken = (value, decimals) => {\n  return B(value).mul(B(10).pow(decimals || 0));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nconst power = (x, y) => {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n};\nconst nFormat = (num, digits) => {\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"k\" },\n    { value: 1e6, symbol: \"M\" },\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup\n    .slice()\n    .reverse()\n    .find((item) => num >= item.value);\n  return item\n    ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol\n    : \"0\";\n};\nconst { selectedTokenId, selectedTokenMeta, showModal, closeModal } = props;\nconst {\n  rewards,\n  account,\n  balances,\n  amount,\n  hasError,\n  assets,\n  wnearbase64,\n  closeButtonBase64,\n  isMax,\n} = state;\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\nif (!showModal) {\n  State.update({\n    amount: \"\",\n    hasError: false,\n    newHealthFactor: \"\",\n  });\n}\n/** base tool end */\nconst config = Near.view(BURROW_CONTRACT, \"get_config\");\nconst onLoad = (data) => {\n  State.update(data);\n};\n/** logic start */\nfunction getAdjustedSum(type, account) {\n  if (!assets || !account || account[type].length == 0) return 0;\n  return account[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals || 0))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\n\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\nfunction getHealthFactor() {\n  if (Big(adjustedBorrowedSum).eq(0)) return 10000;\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(2);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\n\nconst healthFactor = getHealthFactor();\n\nconst recomputeHealthFactor = (tokenId, amount) => {\n  if (!tokenId || !amount) return null;\n  const asset = assets.find((a) => a.token_id === tokenId);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const accountBorrowedAsset = account.borrowed.find(\n    (a) => a.token_id === tokenId\n  );\n\n  const newBalance = expandToken(amount, decimals)\n    .plus(B(accountBorrowedAsset?.balance || 0))\n    .toFixed();\n\n  const clonedAccount = clone(account);\n\n  const updatedToken = {\n    token_id: tokenId,\n    balance: newBalance,\n    shares: newBalance,\n    apr: \"0\",\n  };\n\n  if (clonedAccount?.borrowed.length === 0) {\n    clonedAccount.borrowed = [updatedToken];\n  } else if (!accountBorrowedAsset) {\n    clonedAccount.borrowed.push(updatedToken);\n  } else {\n    clonedAccount.borrowed = [\n      ...clonedAccount.borrowed.filter((a) => a.token_id !== tokenId),\n      updatedToken,\n    ];\n  }\n  const adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\n  const adjustedBorrowedSum = getAdjustedSum(\n    \"borrowed\",\n    amount === 0 ? account : clonedAccount\n  );\n  const newHealthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toNumber(2);\n  return newHealthFactor;\n};\n\n// get max ammount can be borrowed\nlet cf;\nfunction getMaxAmount() {\n  if (!selectedTokenId || !assets) return 0;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const volatiliyRatio = asset.config.volatility_ratio || 0;\n  const price = asset.price?.usd || Infinity;\n  cf = asset.config.volatility_ratio / 100;\n  const available = Number(\n    B(adjustedCollateralSum)\n      .sub(B(adjustedBorrowedSum))\n      .mul(volatiliyRatio)\n      .div(MAX_RATIO)\n      .div(price)\n      .mul(95)\n      .div(100)\n      .toFixed()\n  );\n  return [available, (asset.price.usd * available).toFixed(2)];\n}\n\nconst [available, availableUSD] = getMaxAmount();\n\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\n// get the storage deposit for a token\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\nconst handleAmount = (value, isMax) => {\n  const amount = value;\n  const HF = recomputeHealthFactor(selectedTokenId, amount);\n  State.update({\n    amount,\n    selectedTokenId,\n    hasError: false,\n    newHealthFactor: HF,\n    isMax,\n  });\n};\nconst handleBorrow = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const finalAmount = isMax ? Math.min(available, amount) : amount;\n\n  const transactions = [];\n\n  const expandedAmount = expandToken(\n    finalAmount,\n    asset.metadata.decimals + asset.config.extra_decimals\n  );\n\n  const borrowTemplate = {\n    Execute: {\n      actions: [\n        {\n          Borrow: {\n            token_id: selectedTokenId,\n            amount: expandedAmount.toFixed(0),\n          },\n        },\n        {\n          Withdraw: {\n            token_id: selectedTokenId,\n            max_amount: expandedAmount.toFixed(0),\n          },\n        },\n      ],\n    },\n  };\n\n  const borrowTransaction = {\n    contractName: config.oracle_account_id,\n    methodName: \"oracle_call\",\n    deposit: B(\"1\").toFixed(),\n    gas: expandToken(300, 12),\n    args: {\n      receiver_id: BURROW_CONTRACT,\n      msg: JSON.stringify(borrowTemplate),\n    },\n  };\n  if (\n    !(storageToken && storageToken.total != \"0\") &&\n    !NO_STORAGE_DEPOSIT_CONTRACTS.includes(selectedTokenId)\n  ) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.push({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n\n  transactions.push(borrowTransaction);\n\n  if (\n    [\"wrap.near\", \"wrap.testnet\"].includes(selectedTokenId) &&\n    expandedAmount.gt(10)\n  ) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"near_withdraw\",\n      deposit: B(\"1\").toFixed(),\n      args: {\n        amount: expandedAmount.sub(10).toFixed(0),\n      },\n    });\n  }\n\n  Near.call(transactions);\n};\n\nconst reward = rewards && rewards.find((a) => a.token_id === selectedTokenId);\n\nconst newHealthFactor = state.newHealthFactor\n  ? state.newHealthFactor?.toFixed()\n  : undefined;\n/** logic end */\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    {/** modal */}\n    <Modal style={{ display: showModal ? \"block\" : \"none\" }}>\n      <div class=\"modal-header\">\n        <div class=\"title\">Burrow&nbsp;{selectedTokenMeta.symbol}</div>\n        <img\n          class=\"btn-close-custom\"\n          src={closeButtonBase64}\n          onClick={closeModal}\n        />\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"content\">\n          <Widget\n            src=\"juaner.near/widget/ref-input-box\"\n            props={{\n              amount,\n              handleAmount,\n              balance: available,\n              balance$: availableUSD,\n            }}\n          />\n          {hasError && (\n            <p class=\"alert alert-danger mt-10\" role=\"alert\">\n              Amount greater than available\n            </p>\n          )}\n          <div class=\"template mt_25\">\n            <span class=\"title\">Health Factor</span>\n            <span class=\"value\">\n              {newHealthFactor ? newHealthFactor : healthFactor}%\n            </span>\n          </div>\n          <div class=\"template mt_25\">\n            <span class=\"title\">Collateral Factor</span>\n            <span class=\"value\">{cf || \"-\"}%</span>\n          </div>\n          <div\n            class={`greenButton mt_25 ${Number(amount) ? \"\" : \"disabled\"}`}\n            onClick={handleBorrow}\n          >\n            Borrow\n          </div>\n        </div>\n      </div>\n    </Modal>\n    <Backdrop\n      style={{ display: showModal ? \"block\" : \"none\" }}\n      onClick={closeModal}\n    ></Backdrop>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-burrow-burrow", "__row_index": 0}