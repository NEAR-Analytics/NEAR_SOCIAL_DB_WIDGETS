{"tx_hash": "6D7CHRcFMnFKvheXzCcR8YRuEXQ3bUcDydZ6AaTwHEar", "action_id_social": "73ForjSh2vGmqKABMCKRHJuLchsE3N2mdzTrjDw5J1GK-0-widget", "block_id": 88636050, "block_timestamp": "2023-04-02 06:59:13.447", "signer_id": "juaner.near", "widget_name": "ref-market-burrow-burrow", "source_code": "const Container = styled.div`\n    .content input{\n      background: #152528;\n      border-radius: 12px;\n      height: 55px;\n      font-size:20px;\n      color: #7E8A93;\n      padding:0 15px 0 15px;\n      border:none;\n      outline:none;\n      margin-bottom:8p;x\n    }\n    .content input:focus{\n      outline:none;\n    }\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n    }\n    .content .balance {\n      font-size:12px;\n      color:#4B6778;\n      margin-left:6px;\n    }\n    .template{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-left:6px;\n    }\n    .template .title{\n      font-size:14px;\n      color:#7E8A93;\n    }\n    .template .value{\n      font-size:14px;\n      color:#fff;\n    }\n    .mt_25{\n      margin-top:25px;\n    }\n    .greenButton{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      background: #00FFD1;\n      border-radius: 12px;\n      height:46px;\n      font-weight: 700;\n      font-size: 18px;\n      color:#000;\n      cursor:pointer;\n      width:100%;\n    }\n`;\n/** base tool start  */\nlet MAX_RATIO = 10_000;\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet accountId = context.accountId;\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\n\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return B(value).div(B(10).pow(decimals));\n};\n\nconst expandToken = (value, decimals) => {\n  return B(value).mul(B(10).pow(decimals));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nconst power = (x, y) => {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n};\nconst nFormat = (num, digits) => {\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"k\" },\n    { value: 1e6, symbol: \"M\" },\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup\n    .slice()\n    .reverse()\n    .find((item) => num >= item.value);\n  return item\n    ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol\n    : \"0\";\n};\nconst selectedTokenId = props.selectedTokenId;\nconst { rewards, account, balances, amount, hasError, assets } = state;\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\n/** base tool end */\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nconst config = Near.view(BURROW_CONTRACT, \"get_config\");\nconst onLoad = (data) => {\n  State.update(data);\n};\nconst rewardsMap = rewards\n  ? rewards.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nconst assetsMap = assets\n  ? assets.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\n/** logic start */\nfunction getAdjustedSum(type, account) {\n  if (!assets || !account) return B(1);\n  return account[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\n\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\", account);\n\nfunction getHealthFactor() {\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\n\nconst healthFactor = getHealthFactor();\n\nconst recomputeHealthFactor = (tokenId, amount) => {\n  if (!tokenId || !amount) return null;\n  const asset = assets.find((a) => a.token_id === tokenId);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const accountBorrowedAsset = account.borrowed.find(\n    (a) => a.token_id === tokenId\n  );\n\n  const newBalance = expandToken(amount, decimals)\n    .plus(B(accountBorrowedAsset?.balance || 0))\n    .toFixed();\n\n  const clonedAccount = clone(account);\n\n  const updatedToken = {\n    token_id: tokenId,\n    balance: newBalance,\n    shares: newBalance,\n    apr: \"0\",\n  };\n\n  if (clonedAccount?.borrowed.length === 0) {\n    clonedAccount.borrowed = updatedToken;\n  } else if (!accountBorrowedAsset) {\n    clonedAccount.borrowed.push(updatedToken);\n  } else {\n    clonedAccount.borrowed = [\n      ...clonedAccount.borrowed.filter((a) => a.token_id !== tokenId),\n      updatedToken,\n    ];\n  }\n  console.log(clonedAccount);\n  const adjustedCollateralSum = getAdjustedSum(\"collateral\", account);\n  const adjustedBorrowedSum = getAdjustedSum(\n    \"borrowed\",\n    amount === 0 ? account : clonedAccount\n  );\n\n  const newHealthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toNumber();\n\n  return newHealthFactor;\n};\n\n// get max ammount can be borrowed\nfunction getMaxAmount() {\n  if (!selectedTokenId || !assets) return 0;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const volatiliyRatio = asset.config.volatility_ratio || 0;\n  const price = asset.price?.usd || Infinity;\n\n  const available = Number(\n    B(adjustedCollateralSum)\n      .sub(B(adjustedBorrowedSum))\n      .mul(volatiliyRatio)\n      .div(MAX_RATIO)\n      .div(price)\n      .mul(95)\n      .div(100)\n      .toFixed(4)\n  );\n  return [available, (asset.price.usd * available).toFixed(2)];\n}\n\nconst [available, availableUSD] = getMaxAmount();\n\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\n// get the storage deposit for a token\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\nconst handleAmount = (e) => {\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n  });\n};\nconst handleBlur = (e) => {\n  State.update({\n    newHealthFactor: recomputeHealthFactor(selectedTokenId, amount),\n  });\n};\nconst handleBorrow = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n\n  if (amount > available) {\n    State.update({ selectedTokenId, amount, hasError: true });\n    return;\n  }\n\n  const transactions = [];\n\n  const expandedAmount = expandToken(\n    amount,\n    asset.metadata.decimals + asset.config.extra_decimals\n  );\n\n  const borrowTemplate = {\n    Execute: {\n      actions: [\n        {\n          Borrow: {\n            token_id: selectedTokenId,\n            amount: expandedAmount.toFixed(0),\n          },\n        },\n        {\n          Withdraw: {\n            token_id: selectedTokenId,\n            max_amount: expandedAmount.toFixed(0),\n          },\n        },\n      ],\n    },\n  };\n\n  const borrowTransaction = {\n    contractName: config.oracle_account_id,\n    methodName: \"oracle_call\",\n    deposit: B(\"1\").toFixed(),\n    gas: expandToken(300, 12),\n    args: {\n      receiver_id: BURROW_CONTRACT,\n      msg: JSON.stringify(borrowTemplate),\n    },\n  };\n\n  if (storageToken?.available === \"0\" || !storageToken?.available) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n    });\n  }\n\n  if (storageBurrow?.available === \"0\" || !storageBurrow?.available) {\n    transactions.push({\n      contractName: BURROW_CONTRACT,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.25, 24).toFixed(),\n      gas: expandToken(140, 12),\n    });\n  }\n\n  transactions.push(borrowTransaction);\n\n  if (\n    [\"wrap.near\", \"wrap.testnet\"].includes(selectedTokenId) &&\n    expandedAmount.gt(10)\n  ) {\n    transactions.push({\n      contractName: selectedTokenId,\n      methodName: \"near_withdraw\",\n      deposit: B(\"1\").toFixed(),\n      args: {\n        amount: expandedAmount.sub(10).toFixed(0),\n      },\n    });\n  }\n\n  Near.call(transactions);\n};\n\nconst reward = rewards && rewards.find((a) => a.token_id === selectedTokenId);\n\nconst newHealthFactor = state.newHealthFactor\n  ? state.newHealthFactor?.toFixed()\n  : undefined;\n/** logic end */\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    <div class=\"content\">\n      <input\n        type=\"number\"\n        value={amount}\n        onChange={handleAmount}\n        onBlur={handleBlur}\n      />\n      {selectedTokenId && (\n        <span class=\"balance\">\n          Balance: {available} (${availableUSD})\n        </span>\n      )}\n      {hasError && (\n        <p class=\"alert alert-danger mt-10\" role=\"alert\">\n          Amount greater than available\n        </p>\n      )}\n      <div class=\"template mt_25\">\n        <span class=\"title\">Borrow APY</span>\n        <span class=\"value\">\n          {selectedTokenId && <>{toAPY(reward.apyBaseBorrow)}%</>}\n        </span>\n      </div>\n      <div class=\"greenButton mt_25\" onClick={handleBorrow}>\n        Borrow\n      </div>\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-burrow-burrow"}