{"tx_hash": "BJAf6LEX76vAFCvo6PvHF8DiBgmwJ1kqRGVxvgePg7d1", "action_id_social": "9pbfbgvtuu4VvwJBrd3NZ8Ngcc1Uu22rsBB3Fs4c1iHb-0-widget", "block_id": 91514845, "block_timestamp": "2023-05-10T07:36:04.777Z", "signer_id": "juaner.near", "widget_name": "ss-your-burrow", "source_code": "const Container = styled.div`\n  .tokenIcon{\n      width: 26px;\n      height: 26px;\n      border-radius:100px;\n      margin-right:4px;\n    }\n.rewardIcon{\n      width: 16px;\n      height: 16px;\n      border-radius:100px;\n  }\n  .flex-end{\n      display:flex;\n      align-items:center;\n      justify-content:end;\n      height:50px;\n    }\n`;\nconst Backdrop = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.6);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1001;\n`;\nconst Modal = styled.div`\n  background-color:#1A2E33;\n  border-radius:12px;\n  position:fixed;\n  z-index:1002;\n  width:30rem;\n  max-width: 95vw;\n  max-height: 80vh;\n  padding:10px 0 20px 0;\n  animation:anishow 0.3s forwards ease-out;\n  left:50%;\n  top:50%;\n  @keyframes anishow {\n    from {\n      opacity: 0;\n      transform:translate(-50%,-70%);\n    }\n    to {\n      opacity: 1;\n      transform:translate(-50%,-50%);\n    }\n  }\n    .modal-header{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      color:#fff;\n      font-weight: 700;\n      font-size: 18px;\n      padding:12px;\n      margin-bottom:16px;\n      border-bottom:2px solid rgba(48, 67, 82, 0.5);\n    } \n    .modal-header .btn-close{\n      position:absolute;\n      right:28px;\n      margin:0;\n    }\n    .modal-body {\n        padding:0 10px;\n    }\n    .modal-body .tab{\n      display:flex;\n      align-items:center;\n      justify-content:space-between;\n      margin-bottom:30px;\n    }\n    .modal-body .tab span{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      width:50%;\n      height:40px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 18px;\n      cursor:pointer;\n      color:#fff;\n    }\n    .modal-body .tab span.active{\n      background: #304352;\n    }\n   .btn-close-custom{\n      position:absolute;\n      right:28px;\n      width:12px;\n      height:12px;\n      cursor:pointer;\n    }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\nif (!accountId) {\n  return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n}\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals || 0)).toFixed(fixed);\n};\nfunction getExtraApy(asset) {\n  const asset_token_id = asset.token_id;\n  const borrowFarm = asset.farms.find(\n    (farm) =>\n      farm[\"farm_id\"][\"Borrowed\"] && Object.keys(farm.rewards || {}).length\n  );\n  if (!borrowFarm) return 0;\n  const assetDecimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const totalBorrowUSD = toUsd(asset.borrowed.balance, asset);\n  const rewards = borrowFarm.rewards;\n  let userFarm;\n  if (account) {\n    userFarm = account.farms.find((farm) => {\n      return (\n        farm[\"farm_id\"][\"Borrowed\"] == asset.token_id && farm.rewards.length\n      );\n    });\n  }\n  if (!userFarm) {\n    return Object.keys(rewards)\n      .map((reward_token_id) => {\n        const farmData = rewards[reward_token_id];\n        const { reward_per_day, boosted_shares } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const totalRewardsUsd = toUsd(\n          B(reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        if (B(totalBorrowUSD).eq(0)) return 0;\n        const apy = B(totalRewardsUsd).div(totalBorrowUSD).mul(100).toFixed();\n        return apy;\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  } else {\n    return userFarm.rewards\n      .map((farmData) => {\n        const { reward_token_id, boosted_shares, asset_farm_reward } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const borrowedShares = Number(\n          shrinkToken(boosted_shares || 0, assetDecimals)\n        );\n        const totalBoostedShares = Number(\n          shrinkToken(asset_farm_reward.boosted_shares, assetDecimals)\n        );\n        const boosterLogBase = Number(\n          shrinkToken(\n            asset_farm_reward.booster_log_base,\n            config.booster_decimals\n          )\n        );\n        const xBRRRAmount = Number(\n          shrinkToken(\n            account.booster_staking[\"x_booster_amount\"] || 0,\n            config.booster_decimals\n          )\n        );\n        const log = Math.log(xBRRRAmount) / Math.log(boosterLogBase);\n        const multiplier = log >= 0 ? 1 + log : 1;\n        const userBorrowedBalance =\n          account.borrowed.find((asset) => asset.token_id == asset_token_id)\n            .balance || 0;\n        const totalUserAssetUSD = toUsd(userBorrowedBalance, asset);\n        const totalRewardsUsd = toUsd(\n          B(asset_farm_reward.reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        return B(totalRewardsUsd)\n          .mul(borrowedShares / totalBoostedShares)\n          .mul(multiplier)\n          .div(totalUserAssetUSD)\n          .mul(100)\n          .toFixed();\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  }\n}\nconst toUsd = (balance, asset) =>\n  asset.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\nconst {\n  assets,\n  rewards,\n  account,\n  balances,\n  showModal,\n  selectedTokenId,\n  selectedTokenMeta,\n  wnearbase64,\n  closeButtonBase64,\n} = state;\nconst { onLoadState } = props;\nfunction changeSelectedToken(asset, type) {\n  const { token_id, metadata } = asset;\n  State.update({\n    selectedTokenId: token_id,\n    selectedTokenMeta: metadata,\n    type,\n    showModal: true,\n  });\n}\nfunction closeModal() {\n  State.update({\n    showModal: false,\n  });\n}\nconst onLoad = (data) => {\n  State.update(data);\n};\n\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\nfunction getPortfolioRewards(type, token_id) {\n  const targetFarm = account.farms.find((farm) => {\n    return farm[\"farm_id\"][type] == token_id;\n  });\n  if (targetFarm) {\n    const asset = assets.find((a) => a.token_id == token_id);\n    const rewards = targetFarm[\"rewards\"] || [];\n    const totalRewards =\n      type == \"Supplied\" ? asset.farms[0].rewards : asset.farms[1].rewards;\n    const result = rewards.map((reward) => {\n      const { reward_token_id } = reward;\n      const assetDecimals =\n        asset.metadata.decimals + asset.config.extra_decimals;\n      const rewardAsset = assets.find((a) => a.token_id == reward_token_id);\n      const rewardTokenDecimals =\n        rewardAsset.metadata.decimals + rewardAsset.config.extra_decimals;\n\n      const boostedShares = Number(\n        shrinkToken(reward.boosted_shares, assetDecimals)\n      );\n      const totalBoostedShares = Number(\n        shrinkToken(totalRewards[reward_token_id].boosted_shares, assetDecimals)\n      );\n      const totalRewardsPerDay = Number(\n        shrinkToken(\n          totalRewards[reward_token_id].reward_per_day,\n          rewardTokenDecimals\n        )\n      );\n      const rewardPerDay =\n        (boostedShares / totalBoostedShares) * totalRewardsPerDay || 0;\n      return { rewardPerDay, metadata: asset.metadata };\n    });\n    return result;\n  }\n  return [];\n}\n// get portfolio borrowed assets\nlet total_burrowed_usd = Big(0);\nconst borrowedAssets = hasData\n  ? account.borrowed.map((borrowedAsset) => {\n      const asset = assets.find((a) => a.token_id === borrowedAsset.token_id);\n      const r = rewards.find((a) => a.token_id === asset.token_id);\n      const totalApy = r.apyBaseBorrow;\n      const extraApy = getExtraApy(asset);\n      const apy = totalApy - extraApy;\n      const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n      const borrowed = Number(shrinkToken(borrowedAsset.balance, decimals));\n      const usd = borrowed * asset.price.usd;\n      total_burrowed_usd = total_burrowed_usd.plus(usd);\n      const rewardsList =\n        getPortfolioRewards(\"Supplied\", borrowedAsset.token_id) || [];\n      return (\n        <tr>\n          <td>\n            <img\n              src={asset.metadata.icon || wnearbase64}\n              class=\"tokenIcon\"\n            ></img>\n            {asset.metadata.symbol}\n          </td>\n          <td class=\"text-start\">{toAPY(apy)}%</td>\n          <td class=\"text-start\">\n            {rewardsList.length == 0\n              ? \"-\"\n              : rewardsList.map((reward) => {\n                  const { rewardPerDay, metadata } = reward;\n                  return (\n                    <div class=\"flex_center\">\n                      {Big(rewardPerDay).toFixed(4)}\n                      <img\n                        class=\"rewardIcon ml_5\"\n                        src={metadata.icon || wnearbase64}\n                      />\n                    </div>\n                  );\n                })}\n          </td>\n          <td class=\"text-start\">\n            {borrowed.toFixed(4)}\n            <span class=\"text_grey_color\">(${usd.toFixed(2)})</span>\n          </td>\n          <td class=\"flex-end\">\n            <Widget\n              src=\"juaner.near/widget/ref-operation-button\"\n              props={{\n                clickEvent: () => {\n                  changeSelectedToken(asset, \"burrow\");\n                },\n                buttonType: \"solid\",\n                actionName: \"Repay\",\n                hoverOn: true,\n              }}\n            />\n          </td>\n        </tr>\n      );\n    })\n  : undefined;\nif (borrowedAssets && borrowedAssets.length > 0) {\n  onLoadState &&\n    onLoadState({\n      total_burrowed_usd: total_burrowed_usd.toFixed(),\n    });\n}\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    <div class=\"title\">You Borrowed</div>\n    <table class=\"table click\">\n      <thead>\n        <tr>\n          <th scope=\"col\" width=\"20%\">\n            Assets\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"20%\">\n            Borrow APY\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"20%\">\n            Rewards\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"15%\">\n            Borrowed\n          </th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody>{borrowedAssets}</tbody>\n    </table>\n    {/** modal */}\n    <Widget\n      src=\"juaner.near/widget/ref-market-burrow-repay\"\n      props={{ selectedTokenId, selectedTokenMeta, showModal, closeModal }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ss-your-burrow", "__row_index": 0}