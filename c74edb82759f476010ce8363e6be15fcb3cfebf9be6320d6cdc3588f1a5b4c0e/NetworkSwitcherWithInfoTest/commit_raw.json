{"tx_hash": "J1Q23RAFKUmDEKayxMjDCsGwUxBmEzYscxntXodBxpFt", "action_id_social": "E2F6BAifuJCku1AQeyadWK2FzZgvbxdHufQvqRYXv8Ea-0-widget", "block_id": 95179451, "block_timestamp": "2023-06-27T21:38:30.914Z", "signer_id": "c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e", "widget_name": "NetworkSwitcherWithInfoTest", "source_code": "/* put these in a .ts file and leave it open in your editor to have typechecking for this file:\n\ndeclare const State: {\n  init(obj: object): void;\n  update(obj: Partial<State>): void;\n};\n\ndeclare const Web3Connect: any;\ndeclare const Ethers: any;\ndeclare const ethers: any;\ndeclare const DropdownMenu: any;\ndeclare const RadioGroup: any;\ndeclare const styled: any;\ndeclare const Popover: any;\n\ndeclare const state: State;\n\ndeclare module \"Widget\" {\n  import { ReactNode } from \"react\";\n\n  interface WidgetProps {\n    src: string;\n    props: {\n      userAddress: string;\n      poolAddress: string;\n      onError: (errorHandler: () => void) => void;\n      onSuccess: (successHandler: () => void) => void;\n      requestConnect: () => void;\n      decimals: number;\n    };\n  }\n\n  export default function Widget(props: WidgetProps): ReactNode;\n}\n\ndeclare const props: { chainInfoObject: ChainInfoObject };\n\ninterface ChainInfo {\n  name: string;\n  chainId: string;\n  shortName: string;\n  chain: string;\n  network: string;\n  networkId: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  rpc: string[];\n  faucets: string[];\n  explorers: string[];\n}\n\ninterface ChainInfoObject {\n  [key: string]: ChainInfo;\n}\n\ninterface State {\n  checkedChainInfo: boolean;\n  errorWrongNetwork: boolean;\n  chainId: string;\n  desiredChainId: string;\n  chainName: string;\n  connected: boolean;\n}\n\n*/\n\n//@ts-check\n\n/** @type {ChainInfoObject} */\nconst _chainInfoObject = {\n  \"0x1\": {\n    name: \"Ethereum Mainnet\",\n    chainId: \"0x1\", // 1\n    shortName: \"eth\",\n    chain: \"ETH\",\n    network: \"mainnet\",\n    networkId: \"1\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://main-light.eth.linkpool.io\"],\n    faucets: [],\n    explorers: [\"https://etherscan.io\"],\n  },\n  // goerli\n  \"0x5\": {\n    name: \"Goerli\",\n    chainId: \"0x5\", // 5\n    shortName: \"gor\",\n    chain: \"ETH\",\n    network: \"goerli\",\n    networkId: \"5\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.goerli.mudit.blog/\"],\n    faucets: [\n      \"https://goerli-faucet.slock.it/?address=${ADDRESS}\",\n      \"https://faucet.goerli.mudit.blog\",\n    ],\n    explorers: [\"https://goerli.etherscan.io\"],\n  },\n  // zkEVM\n  \"0x44d\": {\n    name: \"zkEVM Mainnet\",\n    chainId: \"0x44d\", // 1101\n    shortName: \"zkEVM\",\n    chain: \"ETH\",\n    network: \"mainnet\",\n    networkId: \"44\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.ankr.com/polygon_zkevm\"],\n    faucets: [],\n    explorers: [\"https://zkevm.polygonscan.com\"],\n  },\n  // zkEVM testnet\n  \"0x5a2\": {\n    name: \"zkEVM Testnet\",\n    chainId: \"0x5a2\", // 1442\n    shortName: \"zkEVM\",\n    chain: \"ETH\",\n    network: \"testnet\",\n    networkId: \"5a2\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpc: [\"https://rpc.testnet.ankr.com/polygon_zkevm\"],\n    faucets: [],\n    explorers: [\"https://zkevm-testnet.polygonscan.com\"],\n  },\n};\n\nconst chainInfoObject = props.chainInfoObject || _chainInfoObject;\n\nState.init({\n  // {poolAddress,balance}\n  checkedChainInfo: false,\n  // chainInfo: {},\n  chainId: \"\",\n  desiredChainId: \"\",\n  chainName: \"\",\n  errorWrongNetwork: false,\n  connected: false,\n  // connected: false,\n});\n\n/**\n * @param {string} hexString\n */\nfunction removeLeadingZero(hexString) {\n  if (hexString.startsWith(\"0x\")) {\n    return \"0x\" + parseInt(hexString, 16).toString(16);\n  }\n}\n\n/**\n * @param {string} hexString\n */\nfunction parseHex(hexString) {\n  if (hexString.startsWith(\"0x\")) {\n    return parseInt(hexString, 16);\n  }\n}\n\n/**\n * @param {string} chainId\n */\nfunction switchToChainId(chainId) {\n  try {\n    let send;\n    const noLeadingZeroChainId = removeLeadingZero(chainId);\n    if (!noLeadingZeroChainId) {\n      throw (\n        \"Chain ID is invalid, make sure it is hexadecimal starting with 0x: \" +\n        chainId\n      );\n    }\n    try {\n      send = Ethers.send(\"wallet_switchEthereumChain\", [\n        { chainId: noLeadingZeroChainId },\n      ]);\n      console.log(\n        \"\\ncurrent chainId:\",\n        state.chainId,\n        \"current chainName:\",\n        state.chainName,\n        \"\\nswitching to chainId:\",\n        noLeadingZeroChainId,\n        \"chainName:\",\n        chainInfoObject[chainId].name,\n        \"\\nunHexedDecimal:\",\n        parseHex(noLeadingZeroChainId),\n        \"stored send operation return value:\",\n        send\n      );\n    } catch (error) {\n      console.log(\n        \"Half-outside, in the catcher for `send = Ethers.send`\",\n        error\n      );\n      try {\n        send.catch((/** @type {{ code: number; }} */ error) => {\n          console.log(\"(INSIDE) Error while switching to chain\", error);\n        });\n      } catch (error) {\n        console.log(\"Half-outside, in the catcher for `send.catch`\", error);\n      }\n    }\n  } catch (error) {\n    console.log(\"(OUTSIDE) Error while switching to chain\", error);\n    try {\n      const chainInfo = chainInfoObject[chainId];\n      const params = {\n        chainId: removeLeadingZero(chainId),\n        chainName: chainInfo.name,\n        nativeCurrency: chainInfo.nativeCurrency,\n        rpcUrls: chainInfo.rpc,\n        blockExplorerUrls: chainInfo.explorers,\n      };\n      return Ethers.send(\"wallet_addEthereumChain\", [params]).catch(\n        (/** @type {{ code: number; }} */ error) => {\n          console.log(\"(INSIDE) Error while adding chain\", error);\n        }\n      );\n    } catch (error) {\n      console.log(\"(OUTSIDE) Error while adding to chain\", error);\n    }\n  }\n}\n\n// listen for rpc error\nfunction listenForRpcError() {\n  return Ethers.on(\"rpcError\", (/** @type {{ code: number; }} */ error) => {\n    console.log(\"RPC ERROR NOTED\", error);\n  });\n}\n\n// get ethers chain id and update state\nfunction getNetwork() {\n  const getNetworkReq = Ethers?.provider?.()?.getNetwork?.();\n  // if getNetworkReq is undefined, set State.update({connected: false}), else, set it to true.\n  State.update({ connected: !!getNetworkReq });\n  getNetworkReq\n    .then((/** @type {{ chainId: string | number; }} */ network) => {\n      const hexId = removeLeadingZero(ethers.utils.hexlify(network.chainId));\n      if (!hexId) {\n        throw (\n          \"Chain ID is invalid, make sure it is hexadecimal starting with 0x: \" +\n          network.chainId\n        );\n      }\n\n      State.update({\n        chainId: hexId,\n        chainName: chainInfoObject[hexId].name,\n        checkedChainInfo: true,\n      });\n      if (!chainInfoObject[hexId]) {\n        // console.log(\"we don't have this id\", hexId);\n        State.update({ errorWrongNetwork: true });\n      } else {\n        // console.log(\"we have this id\", hexId);\n        State.update({ errorWrongNetwork: false });\n      }\n    })\n    .catch((error) => {\n      console.log(\"Error while getting network\", error);\n    });\n}\n\ntry {\n  getNetwork();\n} catch (error) {\n  console.log(\"2nd TryCatch (promise?): Error while getting network\", error);\n}\n\nfunction MainComponent() {\n  // id and name\n  /** @type {string} */\n  const chainId = state.chainId;\n  /** @type {string} */\n  const chainName = state.chainName;\n  /** @type {boolean} */\n  const errorWrongNetwork = state.errorWrongNetwork;\n  /** @type {boolean} */\n  const checkedChainInfo = state.checkedChainInfo;\n  return (\n    <div className=\"container\">\n      <h3 className=\"ms-2\">Chain Switcher:</h3>\n      <table className=\"table\" style={{ maxWidth: \"300px\" }}>\n        <tbody>\n          {/* this is impossible to do with current methods because the call is cached */}\n          <tr>\n            <td>Connected:</td>\n            <td className={state.connected ? \"text-success\" : \"text-warning\"}>\n              {state.connected ? Ethers.provider().connection.url : \"No\"}\n            </td>\n          </tr>\n          <tr>\n            <td>Current chain id:</td>\n            <td>{chainId}</td>\n          </tr>\n          <tr>\n            <td>Initial chain check:</td>\n            <td>{JSON.stringify(checkedChainInfo)}</td>\n          </tr>\n          <tr>\n            <td>Current chain:</td>\n            <td className={!chainName ? \"text-warning\" : \"\"}>\n              {chainName || \"Unknown\"}\n            </td>\n          </tr>\n          <tr>\n            <td>Wrong Network:</td>\n            <td>{JSON.stringify(errorWrongNetwork)}</td>\n          </tr>\n        </tbody>\n      </table>\n      {errorWrongNetwork && (\n        <h5\n          className=\"text-warning mb-2\"\n          style={{ paddingBottom: \"8px\", paddingLeft: \"6px\" }}\n        >\n          Wrong Network, please switch\n        </h5>\n      )}\n      <div\n        className=\"d-flex flex-column gap-2\"\n        style={{ maxWidth: \"300px\", marginLeft: \"0\" }}\n      >\n        {Object.keys(chainInfoObject).map((chainId) => {\n          return (\n            <button\n              onClick={() => {\n                switchToChainId(chainId);\n              }}\n              key={chainId}\n              style={{\n                filter: \"hue-rotate(40deg) saturate(80%) brightness(115%)\",\n              }}\n            >\n              Switch to {chainInfoObject[chainId].name}\n            </button>\n          );\n        })}\n        <Web3Connect connectLabel=\"Connect with Web3\" className=\"\" />\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nreturn <MainComponent />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/c74edb82759f476010ce8363e6be15fcb3cfebf9be6320d6cdc3588f1a5b4c0e/widget/NetworkSwitcherWithInfoTest", "__row_index": 0}