{"tx_hash": "83Tp8seCeeLykBjbpAoaHYZjabSgDhqJixhPeVtstuxB", "action_id_social": "FnEZLfLisXvcqM1bSQxE56XUph5WUcrmNBonV6FPqn44-0-widget", "block_id": 89673522, "block_timestamp": "2023-04-15 23:47:26.128", "signer_id": "evrything.near", "widget_name": "Bridge", "source_code": "// Repository: https://github.com/near-everything/idea-creator\nconst externalAppUrl = props.externalAppUrl || \"\";\n\nif (externalAppUrl === \"\") {\n  return <p>please provide an app url.</p>;\n}\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\nconst initialPayload = {};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"create-thing\":\n      handleCreateThing(request, response);\n      break;\n  }\n};\n\nconst handleCreateThing = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    Social.set(\n      {\n        thing: {\n          main: JSON.stringify({\n            payload,\n          }),\n        },\n        index: {\n          everything: JSON.stringify({\n            key: \"main\",\n            value: {\n              type: props.type,\n            },\n          }),\n        },\n      },\n      {\n        force: true,\n        onCommit: () => {\n          response(request).send({ success: true });\n        },\n        onCancel: () => {\n          response(request).send({ error: \"the action was canceled\" });\n        },\n      }\n    );\n  }\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/Bridge", "branch.draft.": NaN, "branch.draft.metadata": NaN}