{"tx_hash": "C1QJRh6DXRmwepTv2keeSskVagvJ45mcgcYAe97wR6a", "action_id_social": "66tasMH11ThLGKs43mcyMBxtHbXyhmLVLbR5rQqoAVsV-0-widget", "block_id": 89208453, "block_timestamp": "2023-04-09 20:41:09.443", "signer_id": "evrything.near", "widget_name": "Everything", "source_code": "const accountId = props.accountId || \"evrything.near\";\nconst font = props.font || \"Times New Roman\";\nconst type = props.type || \"Everything\";\nconst text = props.text || type.toLowerCase();\n\nconst H1 = styled.h1`\n  font-family: ${font}, Times, serif;\n  font-size: 4em;\n  line-height: 1.25;\n  font-weight: 400;\n`;\n\nconst types = Social.keys(`${accountId}/type/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\ntypes = Object.entries(types[accountId].type ?? {});\n\nState.init({\n  title: text,\n  type: type,\n});\n\nconst handleSelectType = (typeName) => {\n  if (typeName === \"Everything\") {\n    State.update({\n      title: typeName.toLowerCase(),\n      type: typeName,\n    });\n  } else {\n    State.update({\n      title: typeName.toLowerCase() + \"s\",\n      type: typeName,\n    });\n  }\n};\n\nreturn (\n  <>\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: 16,\n        width: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          gap: 4,\n          marginTop: 160,\n        }}\n      >\n        <H1>{state.title}</H1>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\",\n            gap: 4,\n            margin: \"0 4px\",\n          }}\n        >\n          {state.type === \"Everything\" ? (\n            <>\n              {types.map((it) => (\n                <button\n                  className=\"text-lowercase\"\n                  onClick={() => handleSelectType(it[0])}\n                >\n                  {it[0] + \"s\"}\n                </button>\n              ))}\n              {context.accountId === accountId ? ( // currently thinking the button should only show if you are able to create types in domain\n                <a\n                  href={`/#/evrything.near/widget/Everything.Create.Type`} // this could get way more intense\n                  style={{ textDecoration: \"none\", color: \"inherit\" }}\n                >\n                  <button className=\"text-lowercase\">+</button>\n                </a>\n              ) : null}\n            </>\n          ) : (\n            <>\n              <button\n                className=\"text-lowercase\"\n                onClick={() => handleSelectType(\"Everything\")}\n              >\n                back\n              </button>\n              <a\n                href={`/#/evrything.near/widget/Everything.Type.Details?type=${type}`}\n                style={{ textDecoration: \"none\", color: \"inherit\" }}\n              >\n                <button className=\"text-lowercase\">view type details</button>\n              </a>\n              <a\n                href={`/#/evrything.near/widget/Everything.Type.Create?type=${type}`}\n                style={{ textDecoration: \"none\", color: \"inherit\" }}\n              >\n                <button className=\"text-lowercase\">create new</button>\n              </a>\n            </>\n          )}\n        </div>\n      </div>\n      <Widget\n        src={\"evrything.near/widget/Everything.Things\"}\n        props={{\n          type: `${accountId}/type/${state.type}`,\n        }}\n      />\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/Everything", "branch.draft.": NaN, "branch.draft.metadata": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.linktree.website": NaN, "metadata.tags.list": NaN, "metadata.tags.thing": NaN, "branch.draft": NaN}