{"tx_hash": "2Ar3V2A8NG1btvcWhaDMYej3ea3PnN947GxPHVWZohcr", "action_id_social": "8t1axLwAitvH5UoJtYVkYiLPRPwPwJJduBB79QzM8P7b-0-widget", "block_id": 90494998, "block_timestamp": "2023-04-26 19:23:00.232", "signer_id": "evrything.near", "widget_name": "everything.template", "source_code": "const accountId = props.accountId || \"evrything.near\";\nconst text = props.text || accountId;\nconst styles = props.styles || {\n  font: \"Times New Roman\",\n};\nconst types = props.types || [];\n\nconst H1 = styled.h1`\n  font-family: ${styles.font}, Times, serif;\n  font-size: 4em;\n  line-height: 1.25;\n  font-weight: 400;\n  cursor: pointer;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n`;\n\nconst Controller = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  margin-top: 160px;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 4px;\n  margin: 0 4px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n`;\n\nState.init({\n  title: text,\n  selectedTab: view,\n});\n\nconst handleSelectType = (typeName) => {\n  if (typeName) {\n    State.update({\n      title: typeName.toLowerCase().split(\"/\")[2] + \"s\",\n      type: typeName,\n      selectedTab: \"THINGS\",\n    });\n  } else {\n    State.update({\n      title: text,\n      type: null,\n      selectedTab: \"THINGS\",\n    });\n  }\n};\n\nconst handleTypeDetails = () => {\n  State.update({\n    selectedTab: \"DETAILS\",\n  });\n};\n\nconst handleTypeCreate = () => {\n  State.update({\n    selectedTab: \"CREATE\",\n  });\n};\n\nconst handleViewThings = () => {\n  State.update({\n    selectedTab: \"THINGS\",\n  });\n};\n\nconst renderView = () => {\n  switch (state.selectedTab) {\n    case \"DETAILS\":\n      return <div>Type details : ${state.type}</div>;\n    case \"CREATE\":\n      if (state.type === \"everything\") {\n        return (\n          <div className=\"w-100\">\n            <Widget\n              src={`evrything.near/widget/Everything.Create.Type`}\n              props={{\n                type,\n              }}\n            />\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"w-100\">\n            // TODO: This should reference the Type itself\n            <Widget\n              src={`${accountId}/widget/Everything.Create.${state.type}`}\n              props={{\n                type,\n              }}\n            />\n          </div>\n        );\n      }\n    case \"THINGS\":\n      return (\n        <Widget\n          src={\"evrything.near/widget/Everything.Things\"}\n          props={{\n            type:\n              state.type === \"everything\"\n                ? \"everything\"\n                : `${accountId}/type/${state.type}`,\n            domain,\n          }}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nreturn (\n  <>\n    <Container>\n      <Controller>\n        <H1 onClick={() => handleViewThings()}>{state.title}</H1>\n        <ButtonRow>\n          {state.type ? (\n            <>\n              <Button onClick={() => handleSelectType(null)}>back</Button>\n              <Button onClick={() => handleTypeDetails()}>\n                view type details\n              </Button>\n              <Button onClick={() => handleTypeCreate()}>create new</Button>\n            </>\n          ) : (\n            <>\n              {types.map((it) => (\n                <Button onClick={() => handleSelectType(it)}>\n                  {it.split(\"/\")[2] + \"s\"}\n                </Button>\n              ))}\n              {context.accountId === accountId ? ( // currently thinking the button should only show if you are able to create types in domain\n                <Button onClick={() => handleTypeCreate()}>+</Button>\n              ) : null}\n            </>\n          )}\n        </ButtonRow>\n      </Controller>\n      {renderView()}\n    </Container>\n  </>\n);\n", "metadata": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/everything.template", "branch.draft": NaN, "branch": NaN}