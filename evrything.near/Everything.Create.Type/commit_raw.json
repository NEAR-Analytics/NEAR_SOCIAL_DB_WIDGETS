{"tx_hash": "ENXyQukEjodcBSeE5BVnhuD4XREDfbGskotZDi43yyrk", "action_id_social": "EGd9pWosFRQEEJeLW7MApJwgxQnzRTHk48A4ECZx5F9a-1-widget", "block_id": 89899646, "block_timestamp": "2023-04-18 23:20:35.930", "signer_id": "evrything.near", "widget_name": "Everything.Create.Type", "source_code": "// Repository: https://github.com/near-everything/type-creator\nconst externalAppUrl = \"https://type-creator.vercel.app/\";\nconst accountId = context.accountId;\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 800;\nconst initialPayload = {};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"create-type\":\n      handleCreateType(request, response);\n      break;\n    case \"get-types\":\n      handleGetTypes(request, response, Utils);\n      break;\n    case \"get-type-details\":\n      handleGetTypeDetails(request, response, Utils);\n      break;\n  }\n};\n\nconst handleCreateType = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    Social.set(\n      {\n        type: {\n          [payload.name]: {\n            \"\": JSON.stringify({\n              properties: payload.properties,\n              widgets: {\n                summary: `${accountId}/widget/Everything.Summary.${payload.name}`,\n                view: `${accountId}/widget/Everything.View.${payload.name}`,\n                create: `${accountId}/widget/Everything.Create.${payload.name}`,\n              },\n            }),\n          },\n        },\n        widget: {\n          [`Everything.Summary.${payload.name}`]: {\n            \"\": `const data= props.data; return (<><p>Configure <a href=\"/#/edit/${accountId}/widget/Everything.Summary.${payload.name}\">this widget</a> to attractively display your data below:</p><p>{JSON.stringify(data)}</p></>);`,\n          },\n          [`Everything.View.${payload.name}`]: {\n            \"\": `const data= props.data; return (<><p>Configure <a href=\"/#/edit/${accountId}/widget/Everything.View.${payload.name}\">this widget</a>to attractively display your data below:</p><p>{JSON.stringify(data)}</p></>);`,\n          },\n          [`Everything.Create.${payload.name}`]: {\n            \"\": `return (<><p>Click deploy below then put the app url in the <a href=\"/#/edit/${accountId}/widget/Everything.Create.${payload.name}\">create widget</a>.</p><a href=\"https://vercel.com/new/clone?repository-url=https://github.com/near-everything/thing-creator\" target=\"_blank\"><img src=\"https://vercel.com/button\" alt=\"Deploy with Vercel\" /></a><Widget src={\"evrything.near/widget/Bridge\"} props={{ externalAppUrl: \"\", type: \"${accountId}/type/${payload.name}\" }} /></>);`,\n          },\n        },\n      },\n      {\n        force: true,\n        onCommit: () => {\n          response(request).send({ success: true });\n        },\n        onCancel: () => {\n          response(request).send({ error: \"the action was canceled\" });\n        },\n      }\n    );\n    return;\n  }\n  // Error\n  response(request).send({\n    error: \"type must be provided\",\n  });\n};\n\nconst previewString = (str, maxLength) => {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  const previewLength = Math.floor((maxLength - 3) / 2);\n  const previewStart = str.slice(0, previewLength);\n  const previewEnd = str.slice(str.length - previewLength);\n  return `${previewStart}...${previewEnd}`;\n};\n\nconst handleGetTypes = (request, response, Utils) => {\n  const accountId = request.payload.accountId ?? \"*\";\n  return Utils.promisify(\n    // Cached data (may take a while to return a value)\n    () =>\n      Social.keys(`${accountId}/type/*`, \"final\", {\n        return_type: \"BlockHeight\",\n        values_only: true,\n      }),\n    (types) => {\n      types = Object.entries(types).flatMap(([accountId, { type }]) =>\n        Object.entries(type).map(([name]) => ({\n          accountId,\n          name,\n        }))\n      );\n      response(request).send({\n        types,\n      });\n    }\n  );\n};\n\nconst handleGetTypeDetails = (request, response, Utils) => {\n  const type = request.payload.type;\n  console.log(JSON.stringify(type));\n  if (type) {\n    return Utils.promisify(\n      // Cached data (may take a while to return a value)\n      () => Social.get(`${type.accountId}/type/${type.name}`),\n      (details) => {\n        console.log(details);\n        response(request).send({\n          details,\n        });\n      }\n    );\n  } else {\n    response(request).send({\n      error: \"Type not provided\",\n    });\n  }\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/Everything.Create.Type"}