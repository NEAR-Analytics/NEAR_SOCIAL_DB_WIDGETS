{"tx_hash": "7EmVNXDdoGCpvKWmBYiQiodxAsiqF489qPz88w9yVZ78", "action_id_social": "GrmGXE3JkFHDt4DwG8pmq3TCJKm1kyLTkdAvdtcr8vje-1-widget", "block_id": 89213299, "block_timestamp": "2023-04-09 22:11:56.609", "signer_id": "evrything.near", "widget_name": "Everything.Create.Type", "source_code": "const externalAppUrl = \"https://type-creator.vercel.app/\";\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send const externalAppUrl = \"https://strike-card.vercel.app/\";\n\n/**\n * Initial Path (optional but recommended)\n */\nconst path = props.path;\n/**\n * Initial view height (optional but recommended)\n */\nconst initialViewHeight = 500;\nconst initialPayload = {};\n\n/**\n * Request Handlers - Backend.\n *\n * - request: payload sent by External App\n *\n * - response: method to send the answer back to the External App\n *\n * - utils: Utils features like\n *      - promisify: (caller, resolve, reject)\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\n *\n * @param {{type: string, payload: {}}} request request with payload sent by External App\n * @param {(request) => {send: () => void}} response send the answer back to the External App\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"create-type\":\n      handleCreateType(request, response);\n      break;\n  }\n};\n\nconst handleCreateType = (request, response) => {\n  const { payload } = request;\n  if (payload) {\n    Social.set(\n      {\n        type: {\n          [payload.name]: {\n            \"\": JSON.stringify({ properties: payload.properties }),\n          },\n        },\n      },\n      {\n        force: true,\n        onCommit: () => {\n          response(request).send({ success: true });\n        },\n        onCancel: () => {\n          response(request).send({ error: \"the action was canceled\" });\n        },\n      }\n    );\n    return;\n  }\n  // Error\n  response(request).send({\n    error: \"type must be provided\",\n  });\n};\n\nreturn (\n  <Widget\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\n    props={{\n      externalAppUrl,\n      path,\n      initialViewHeight,\n      initialPayload,\n      requestHandler,\n    }}\n  />\n);\n", "metadata": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/Everything.Create.Type", "branch.draft.": NaN, "branch.draft.metadata": NaN, "branch": NaN}