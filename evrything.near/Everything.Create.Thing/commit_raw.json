{"tx_hash": "6JfsShpNPR6TT9BwYhAumpvzu2Hit5kaFUNNiVXkdXZ6", "action_id_social": "5tTcmkM9Sqmfijnuhc3gikytE4qXFfeA3W1nXJrATa9X-0-widget", "block_id": 87451164, "block_timestamp": "2023-03-16 22:06:48.529", "signer_id": "evrything.near", "widget_name": "Everything.Create.Thing", "source_code": "const ERROR_WIDGET = \"evrything.near/widget/Everything.Error\";\n\nconst Header = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst Title = styled.div`\n    font-size: 24px;\n    line-height: 33.6px;\n`;\n\nconst Form = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n`;\n\nconst Input = styled.input`\n    width: 100%;\n`;\n\nconst TextArea = styled.textarea`\n    width: 100%;\n`;\n\nconst ButtonRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 4px;\n`;\n\nconst Button = styled.button`\n    padding: 8px 20px;\n    max-width: 90px;\n`;\n\nconst Caption = styled.div`\n    font-size: 12px;\n    line-height: 15.6px;\n    color: #A6A6A6;\n`;\n\nconst type = Type.get(props.type);\n// const type = props.type;\n\nif (!type) {\n  return (\n    <Widget\n      src={ERROR_WIDGET}\n      props={{\n        message: `provided type: \"${props.type}\" is not valid.`,\n      }}\n    />\n  );\n}\n\nState.init({\n  title: \"\",\n  description: \"\",\n  res: null,\n  loading: false,\n});\n\nconst createThing = () => {\n  State.update({\n    loading: true,\n  });\n  asyncFetch(type.mutations?.create.url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: type.mutations?.create.query,\n      variables: {\n        type: props.type,\n        title: state.title,\n      },\n    }),\n  }).then((res) => {\n    State.update({\n      res: res,\n      loading: false,\n    });\n    // Catch if there is an error\n    // const ideaId = res.body.data?.things?.addIdea.entities[0].id;\n    // appendDescription(ideaId);\n  });\n};\n\n// const appendDescription = (ideaId) => {\n//   asyncFetch(API_URL, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       query: `\n//             mutation AppendDescription($ideaId: ID, $description: String) {\n//             ideas(id: {is: $ideaId}) {\n//                 appendContentToDescription(value: $description) {\n//                     message\n//                     }\n//                 }\n//             }\n//         `,\n//       variables: {\n//         ideaId: ideaId,\n//         description: state.description,\n//       },\n//     }),\n//   }).then((res) => {\n\n//   });\n// };\n\nconst resetThing = () => {\n  State.update({\n    title: \"\",\n    description: \"\",\n    res: null,\n  });\n};\n\nreturn (\n  <>\n    <Header>\n      <Title>{props.type.split(\"/\")[2]}</Title>\n    </Header>\n\n    <Form>\n      {state.loading ? (\n        <>Loading...</>\n      ) : (\n        <>\n          {state.res?.ok ? (\n            <>\n              {state.res.body.errors ? (\n                <Widget\n                  src={ERROR_WIDGET}\n                  props={{\n                    message: JSON.stringify(state.res.body.errors[0].message),\n                  }}\n                />\n              ) : (\n                <>Successfully uploaded!</>\n              )}\n            </>\n          ) : (\n            <>\n              <Input\n                value={state.title}\n                placeholder={\"title\"}\n                onChange={({ target }) => State.update({ title: target.value })}\n              />\n\n              <TextArea\n                value={state.description}\n                onInput={({ target }) =>\n                  State.update({ description: target.value })\n                }\n                placeholder={\"description, markdown supported\"}\n              />\n            </>\n          )}\n        </>\n      )}\n\n      <ButtonRow>\n        <Button onClick={createThing}>create</Button>\n        <Button onClick={resetThing}>reset</Button>\n      </ButtonRow>\n    </Form>\n  </>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/Everything.Create.Thing", "branch.draft": NaN}