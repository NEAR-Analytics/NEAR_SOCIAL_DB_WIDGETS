{"tx_hash": "7C8KLH1YtCji2o723HcWbE2xh6vFnf9VmYyvq8D6CCVU", "action_id_social": "4txdu8w8a9q3xa654EVonWavAgbvFgbnHCECAXKU4E6z-0-widget", "block_id": 87596684, "block_timestamp": "2023-03-18 21:19:27.411", "signer_id": "evrything.near", "widget_name": "IndexMasonry", "source_code": "// Widget based on mob.near/widget/IndexFeed\n// Masonry components requires everything vm\n\nconst NUM_COLUMNS_SM = 1;\nconst NUM_COLUMNS_LG = 3;\n\nconst index = props.index;\nif (!index) {\n  return \"props.index is not defined\";\n}\n\nconst filter = props.filter;\n\nconst renderItem =\n  props.renderItem ??\n  ((item, i) => (\n    <div key={JSON.stringify(item)}>\n      #{item.blockHeight}: {JSON.stringify(item)}\n    </div>\n  ));\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\n\nindex.options = index.options || {};\nconst initialRenderLimit =\n  props.initialRenderLimit ?? index.options.limit ?? 10;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\n\nindex.options.limit = Math.min(\n  Math.max(initialRenderLimit + addDisplayCount * 2, index.options.limit),\n  100\n);\nconst reverse = !!props.reverse;\n\nconst initialItems = Social.index(index.action, index.key, index.options);\nif (initialItems === null) {\n  return \"\";\n}\n\nconst computeFetchFrom = (items, limit) => {\n  if (!items || items.length < limit) {\n    return false;\n  }\n  const blockHeight = items[items.length - 1].blockHeight;\n  return index.options.order === \"desc\" ? blockHeight - 1 : blockHeight + 1;\n};\n\nconst mergeItems = (newItems) => {\n  const items = [\n    ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\n  ].map((i) => JSON.parse(i));\n  items.sort((a, b) => a.blockHeight - b.blockHeight);\n  if (index.options.order === \"desc\") {\n    items.reverse();\n  }\n  return items;\n};\n\nconst jInitialItems = JSON.stringify(initialItems);\nif (state.jInitialItems !== jInitialItems) {\n  const jIndex = JSON.stringify(index);\n  const nextFetchFrom = computeFetchFrom(initialItems, index.options.limit);\n  if (jIndex !== state.jIndex || nextFetchFrom !== state.initialNextFetchFrom) {\n    State.update({\n      jIndex,\n      jInitialItems,\n      items: initialItems,\n      fetchFrom: false,\n      initialNextFetchFrom: nextFetchFrom,\n      nextFetchFrom,\n      displayCount: initialRenderLimit,\n      cachedItems: {},\n    });\n  } else {\n    State.update({\n      jInitialItems,\n      items: mergeItems(initialItems),\n    });\n  }\n}\n\nif (state.fetchFrom) {\n  const limit = addDisplayCount;\n  const newItems = Social.index(\n    index.action,\n    index.key,\n    Object.assign({}, index.options, {\n      from: state.fetchFrom,\n      subscribe: undefined,\n      limit,\n    })\n  );\n  if (newItems !== null) {\n    State.update({\n      items: mergeItems(newItems),\n      fetchFrom: false,\n      nextFetchFrom: computeFetchFrom(newItems, limit),\n    });\n  }\n}\n\nconst filteredItems = state.items;\nif (filter) {\n  if (filter.ignore) {\n    filteredItems = filteredItems.filter(\n      (item) => !(item.accountId in filter.ignore)\n    );\n  }\n}\n\nconst maybeFetchMore = () => {\n  if (\n    filteredItems.length - state.displayCount < addDisplayCount * 2 &&\n    !state.fetchFrom &&\n    state.nextFetchFrom &&\n    state.nextFetchFrom !== state.fetchFrom\n  ) {\n    State.update({\n      fetchFrom: state.nextFetchFrom,\n    });\n  }\n};\n\nmaybeFetchMore();\n\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n  maybeFetchMore();\n};\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\nconst fetchMore =\n  props.manual &&\n  !props.hideFetchMore &&\n  (state.fetchFrom && filteredItems.length < state.displayCount\n    ? loader\n    : state.displayCount < filteredItems.length && (\n        <div key={\"loader more\"}>\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n            {props.loadMoreText ?? \"Load more...\"}\n          </a>\n        </div>\n      ));\n\nconst items = filteredItems ? filteredItems.slice(0, state.displayCount) : [];\nif (reverse) {\n  items.reverse();\n}\n\nconst renderedItems = items.map(cachedRenderItem);\n\nreturn props.manual ? (\n  <>\n    {reverse && fetchMore}\n    {renderedItems}\n    {!reverse && fetchMore}\n  </>\n) : (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={makeMoreItems}\n    hasMore={state.displayCount < filteredItems.length}\n    loader={\n      <div className=\"loader\">\n        <span\n          className=\"spinner-grow spinner-grow-sm me-1\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        />\n        Loading ...\n      </div>\n    }\n  >\n    {props.headerElement}\n    <Masonry breakpointCols={{ default: NUM_COLUMNS_LG, 800: NUM_COLUMNS_SM }}>\n      {renderedItems}\n    </Masonry>\n    {props.footerElement}\n  </InfiniteScroll>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/IndexMasonry", "branch.draft": NaN}