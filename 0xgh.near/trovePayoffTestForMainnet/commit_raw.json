{"tx_hash": "3f3RHZqQ4fZcfVg95fhhLXspJEcjuNBBBEiex7JSy3gj", "action_id_social": "4hwYraMtz5GSTULVaBeBcNUt9wag2WTh55svTvGiqFQr-0-widget", "block_id": 94931511, "block_timestamp": "2023-06-24T16:01:27.135Z", "signer_id": "0xgh.near", "widget_name": "trovePayoffTestForMainnet", "source_code": "const borrowerOperationAddress = \"0x24179CD81c9e782A4096035f7eC97fB8B783e007\";\nconst troveManagerAddress = \"0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2\";\nconst lusdTokenAddress = \"0x5f98805A4E8be255a32880FDeC7F6728C6568bA0\";\nconst priceFeedAddress = \"0x4c517D4e2C851CA76d7eC94B805269Df0f2201De\";\n\nState.init({ mouse: false, loading: false, complete: false });\n\nconst borrowerOperationAbi = [\n  {\n    inputs: [],\n    name: \"closeTrove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst troveManagerAbi = [\n  {\n    inputs: [{ internalType: \"address\", name: \"_borrower\", type: \"address\" }],\n    name: \"getTroveDebt\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\n    name: \"getTCR\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst lusdTokenAbi = [\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst priceFeedAbi = [\n  {\n    inputs: [],\n    name: \"lastGoodPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Contract Write : closeTrove\nconst closeTrove = () => {\n  if (state.complete) {\n    State.update({ complete: false, hash: null });\n    return;\n  }\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.closeTrove().then((transactionHash) => {\n    State.update({ loading: true, hash: transactionHash.hash });\n  });\n};\n\n// get trove information\nconst infoHandler = () => {\n  const signer = Ethers.provider().getSigner();\n  signer.getAddress().then((address) => {\n    State.update({ address });\n    if (state.chainId === 1) {\n      const troveManagerContract = new ethers.Contract(\n        troveManagerAddress,\n        troveManagerAbi,\n        Ethers.provider().getSigner()\n      );\n\n      const lusdTokenContract = new ethers.Contract(\n        lusdTokenAddress,\n        lusdTokenAbi,\n        Ethers.provider().getSigner()\n      );\n      const priceFeedContract = new ethers.Contract(\n        priceFeedAddress,\n        priceFeedAbi,\n        Ethers.provider().getSigner()\n      );\n\n      priceFeedContract.lastGoodPrice().then((res) => {\n        troveManagerContract.getTCR(res.toString()).then((tcr) => {\n          State.update({ tcr: Number(tcr.div(\"10000000000000000\")) });\n        });\n      });\n\n      troveManagerContract.getTroveDebt(address).then((troveDebtRes) => {\n        const troveDebt = Number(\n          ethers.utils.formatEther(troveDebtRes.toString())\n        );\n        State.update({\n          troveDebt: troveDebt === 0 ? 0 : troveDebt - 200,\n        });\n\n        lusdTokenContract.balanceOf(address).then((lusdBalanceRes) => {\n          const lusdBalance = Number(\n            ethers.utils.formatEther(lusdBalanceRes.toString())\n          );\n          if (troveDebt - 200 - lusdBalance > 0) {\n            State.update({\n              isBlock: true,\n            });\n          }\n        });\n      });\n    }\n  });\n};\n\nif (Ethers.provider()) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n\n  infoHandler();\n}\n\nEthers.provider() &&\n  Ethers.provider()\n    .waitForTransaction(state.hash)\n    .then((res) => {\n      State.update({ loading: false, complete: true });\n      infoHandler();\n    })\n    .catch((err) => {\n      State.update({ loading: false });\n    });\n\nconst PayoffWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  .debt-label{\n    width: 100%;\n    font-size: 1.3rem;\n    font-weight: 700;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .debt-value{\n    transition: 0.3s all;\n    margin: 1rem 0 1rem 0;\n    min-width: 190px;\n    padding: 0.5rem 1rem 0.5rem 1rem;\n    border: #3a0ca3 1.5px solid ;\n    border-radius: 10px;\n    font-weight: 600;\n    background-color: white;\n   \n    &.disabled{\n      &:hover{\n      background-color: #8e9aaf;\n      color: white;\n      border-color: #8e9aaf;\n    }\n    }\n    &.active{\n    &:hover{\n      background-color: #3a0ca3;\n      color: white;\n    }\n    }\n     &.loading{\n      background-color: transparent !important;\n      cursor: default;\n      &:hover{\n      background-color: transparent !important;\n      color: black !important;\n      border-color: #3a0ca3 !important;\n    }\n    }\n    &.complete{\n      background-color: #3a0ca3 !important;\n      color: white;\n      &:hover{\n      background-color: #3a0ca3 !important;\n      color: white !important;\n      border-color: #3a0ca3 !important;\n    }\n  }\n  .confirm-wrapper{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n  }\n`;\n\nreturn (\n  <PayoffWrapper>\n    <div className=\"debt-label\">You pay for debt</div>\n\n    <div className=\"confirm-wrapper\">\n      {state.address ? (\n        <button\n          onMouseEnter={() => {\n            State.update({ mouse: true });\n          }}\n          onMouseLeave={() => {\n            State.update({ mouse: false });\n          }}\n          className={`debt-value ${\n            state.isBlock || state.tcr < 150 ? \"disabled\" : \"active\"\n          } ${state.loading ? \"loading\" : \"\"} ${\n            state.complete ? \"complete\" : \"\"\n          }`}\n          // disabled={state.isBlock}\n          onClick={closeTrove}\n        >\n          {state.loading\n            ? \"Loading...\"\n            : state.complete\n            ? \"Done \u2705\"\n            : state.mouse\n            ? state.tcr < 150\n              ? \"In recovery mode, not possible\"\n              : state.isBlock\n              ? \"Not enough LUSD \ud83e\udd72\"\n              : state.troveDebt === 0\n              ? \"No debt\"\n              : \"Pay off all debt \ud83d\udd25\"\n            : `${state.troveDebt ?? 0}\n          LUSD`}\n        </button>\n      ) : (\n        <Web3Connect connectLabel=\"Connect Wallet\" />\n      )}\n    </div>\n  </PayoffWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xgh.near/widget/trovePayoffTestForMainnet", "__row_index": 1}