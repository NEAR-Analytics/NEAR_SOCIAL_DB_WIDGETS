{"tx_hash": "GECtZ2D3dzZSb6yQ4Nf2ko7sBS3RGJnLqG6P7R4U53pA", "action_id_social": "BrQ4dhCRMQPnYRuAtJuDU7wyWxmDyksP6YGWJtjGGAgd-0-widget", "block_id": 94383147, "block_timestamp": "2023-06-17T11:25:08.087Z", "signer_id": "ch1ch0gz.near", "widget_name": "WrapUnwrapEth", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (\n  state.chainId !== undefined &&\n  state.chainId !== 1 &&\n  state.chainId !== 11155111\n) {\n  return <p>Switch to Ethereum Mainnet </p>;\n} else {\n  if (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n}\n\ninitState({\n  ethAmount: \"\",\n  wethAmount: \"\",\n});\n\nconst weth = \"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14\";\nconst wethAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"guy\", type: \"address\" },\n      { name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"src\", type: \"address\" },\n      { name: \"dst\", type: \"address\" },\n      { name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"transferFrom\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"wad\", type: \"uint256\" }],\n    name: \"withdraw\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", type: \"uint8\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"dst\", type: \"address\" },\n      { name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"transfer\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"deposit\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"\", type: \"address\" },\n      { name: \"\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  { payable: true, stateMutability: \"payable\", type: \"fallback\" },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"src\", type: \"address\" },\n      { indexed: true, name: \"guy\", type: \"address\" },\n      { indexed: false, name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"src\", type: \"address\" },\n      { indexed: true, name: \"dst\", type: \"address\" },\n      { indexed: false, name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"dst\", type: \"address\" },\n      { indexed: false, name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"Deposit\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"src\", type: \"address\" },\n      { indexed: false, name: \"wad\", type: \"uint256\" },\n    ],\n    name: \"Withdrawal\",\n    type: \"event\",\n  },\n];\nif (!wethAbi) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(wethAbi);\n\nconst wrapEth = (ethAmount) => {\n  if (!ethAmount) {\n    return console.log(\"Amount is missing\");\n  }\n\n  let amount = state.ethAmount.toString();\n  const wethContract = new ethers.Contract(\n    weth,\n    wethAbi,\n    Ethers.provider().getSigner()\n  );\n  wethContract.deposit({ value: amount });\n};\n\nconst unWrapEth = (wethAmount) => {\n  if (!wethAmount) {\n    return console.log(\"Amount is missing\");\n  }\n  let amount = state.wethAmount.toString();\n  const wethContract = new ethers.Contract(\n    weth,\n    wethAbi,\n    Ethers.provider().getSigner()\n  );\n  wethContract.withdraw(amount);\n};\n\nreturn (\n  <>\n    <h3>Send ERC-20 tokens</h3>\n    <div class=\"mb-3\">\n      <label>Enter the amount</label>\n      <input\n        value={ethAmount}\n        placeholder=\"\"\n        onChange={(event) => State.update({ ethAmount: event.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <button onClick={() => wrapEth(state.ethAmount)}>Wrap</button>\n    </div>\n    <p></p>\n    <div class=\"mb-3\">\n      <label>Enter the amount</label>\n      <input\n        value={wethAmount}\n        placeholder=\"\"\n        onChange={(event) => State.update({ wethAmount: event.target.value })}\n      />\n    </div>\n    <div class=\"mb-3\">\n      <button onClick={() => unWrapEth(state.wethAmount)}>UnWrap</button>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ch1ch0gz.near/widget/WrapUnwrapEth", "__row_index": 0}