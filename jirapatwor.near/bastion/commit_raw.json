{"tx_hash": "3haRp25zMsjt6FGcBXWkNTmiRdo8FYnjqHkjWHZiGws7", "action_id_social": "EXfnF2HVtLLxogPVGTGtUdiu7vCMgjfxgQaPXZx12Z9-0-widget", "block_id": 88733859, "block_timestamp": "2023-04-03 15:53:49.625", "signer_id": "jirapatwor.near", "widget_name": "Bastion", "source_code": "const { selectedTokenId, amount, hasError, status } = state;\n\n// check if account connected\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender)\n  return (\n    <div>\n      <h2>Please login first</h2>\n      <br />\n      <Web3Connect connectLabel=\"Connect with Web3\" />\n    </div>\n  );\n\n// fetch data from lens\nconst LenABI = fetch(\n  \"https://raw.githubusercontent.com/pysrbastion/bastion-abi/main/Lens.json\"\n).body;\nconst EIP20InterfaceABI = fetch(\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/EIP20.json\"\n).body;\nconst CEthABI = fetch(\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/CEther.json\"\n).body;\nconst CErc20ABI = fetch(\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/CErc20.json\"\n).body;\n\nconst checkABI1 = JSON.parse(LenABI);\nconst checkABI2 = JSON.parse(EIP20InterfaceABI);\nconst checkABI3 = JSON.parse(CEthABI);\nconst checkABI4 = JSON.parse(CErc20ABI);\n\nconst lenContract = \"0x080B5ce373fE2103A7086b31DabA412E88bD7356\";\n\nconst len = new ethers.Contract(lenContract, LenABI, Ethers.provider());\n\nconst dataArray = [\n  \"0xfa786baC375D8806185555149235AcDb182C033b\",\n  \"0x4E8fE8fd314cFC09BDb0942c5adCC37431abDCD0\",\n  \"0x8C14ea853321028a7bb5E4FB0d0147F183d3B677\",\n  \"0xe5308dc623101508952948b141fD9eaBd3337D99\",\n  \"0x845E15A441CFC1871B7AC610b0E922019BaD9826\",\n];\n\nlen.callStatic\n  .cTokenBalancesAll(dataArray, sender, 0)\n  .then((cTokenBalancesAll) => {\n    State.update({ cTokenBalancesAll });\n  });\n\nlen.callStatic.cTokenMetadataAll(dataArray, 0).then((cTokenMetadataAll) => {\n  State.update({ cTokenMetadataAll });\n});\n\n// provide constants\nconst TokensDetail = {\n  [\"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\"]: {\n    name: \"Near\",\n    symbol: \"NEAR\",\n    address: \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\",\n    cAddress: \"0x8C14ea853321028a7bb5E4FB0d0147F183d3B677\",\n    icon: \"near.svg\",\n    decimals: 24,\n  },\n  [\"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\"]: {\n    name: \"USD Coin\",\n    symbol: \"USDC\",\n    address: \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\",\n    cAddress: \"0xe5308dc623101508952948b141fD9eaBd3337D99\",\n    icon: \"usdc.svg\",\n    decimals: 6,\n  },\n  [\"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\"]: {\n    name: \"Tether USD\",\n    symbol: \"USDT.e\",\n    address: \"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\",\n    cAddress: \"0x845E15A441CFC1871B7AC610b0E922019BaD9826\",\n    icon: \"usdt.svg\",\n    decimals: 6,\n  },\n  [\"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\"]: {\n    name: \"Wrapped Bitcoin\",\n    symbol: \"WBTC\",\n    address: \"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\",\n    cAddress: \"0xfa786baC375D8806185555149235AcDb182C033b\",\n    icon: \"btc.png\",\n    decimals: 8,\n  },\n  [\"ETH\"]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    address: ethers.constants.AddressZero,\n    cAddress: \"0x4E8fE8fd314cFC09BDb0942c5adCC37431abDCD0\",\n    icon: \"eth.svg\",\n    decimals: 18,\n  },\n};\n\nconst Comptroller = \"0x6De54724e128274520606f038591A00C5E94a1F6\";\n\nif (!checkABI1 || !checkABI2 || !checkABI3 || !checkABI4) {\n  return (\n    <div>\n      <h2>Loading Data...</h2>\n    </div>\n  );\n}\n\nlen.callStatic\n  .getAccountLimits(Comptroller, sender)\n  .then((getAccountLimits) => {\n    State.update({ getAccountLimits });\n  });\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst handleSelect = (e) => {\n  State.update({\n    selectedTokenId: e.target.value,\n    hasError: 0,\n  });\n};\n\nconst handleAmount = (e) => {\n  State.update({\n    amount: e.target.value,\n    selectedTokenId,\n    hasError: 0,\n  });\n};\n\nconst handleApprove = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n\n  if (state.actionTabs == \"repay\") {\n    if (amount > state.borrowedAmount) {\n      State.update({ hasError: 3 });\n      return;\n    }\n  } else if (state.actionTabs == \"deposit\") {\n    if (amount > state.balance) {\n      State.update({ hasError: 1 });\n      return;\n    }\n  }\n\n  const erc20 = new ethers.Contract(\n    selectedTokenId,\n    EIP20InterfaceABI,\n    Ethers.provider().getSigner()\n  );\n\n  const expandedAmount = expandToken(\n    amount,\n    TokensDetail[selectedTokenId].decimals\n  ).toString();\n\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\n\n  erc20\n    .approve(TokensDetail[selectedTokenId].cAddress, toBigNumber)\n    .then((transactionHash) => {\n      State.update({ success: true });\n      console.log(\"transactionHash is \" + transactionHash);\n    });\n};\n\nconst handleDeposit = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n\n  if (Number(amount) > Number(state.balance)) {\n    State.update({ hasError: 1 });\n    return;\n  }\n\n  let contractABI;\n  if (selectedTokenId == \"ETH\") {\n    contractABI = CEthABI;\n  } else {\n    contractABI = CErc20ABI;\n  }\n\n  const connection = new ethers.Contract(\n    TokensDetail[selectedTokenId].cAddress,\n    contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  const expandedAmount = expandToken(\n    amount,\n    TokensDetail[selectedTokenId].decimals\n  ).toString();\n\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\n  console.log(toBigNumber.toString());\n\n  const mintPromise =\n    selectedTokenId == \"ETH\"\n      ? connection.mint({ value: expandedAmount })\n      : connection.mint(expandedAmount);\n\n  mintPromise\n    .then((transaction) => {\n      console.log(\"Transaction sent:\", transaction.hash);\n      State.update({ hasError: -1 });\n      return transaction.wait();\n    })\n    .then((receipt) => {\n      State.update({ hasError: 0 });\n      State.update({ success: true });\n      console.log(\"Transaction mined, receipt:\", receipt);\n    })\n    .catch((error) => {\n      State.update({ hasError: 5, errorMessage: error });\n      console.log(\"Error in mint function:\", error);\n    });\n};\n\nconst getCTokenBalancesAllIndex = () => {\n  const rewardIndex = state.cTokenBalancesAll.findIndex(\n    (element) => element[0] == TokensDetail[selectedTokenId].cAddress\n  );\n  return rewardIndex;\n};\n\nconst walletBalance = () => {\n  const rewardIndex = getCTokenBalancesAllIndex();\n  const bigValue = state.cTokenBalancesAll[rewardIndex][4].toString();\n  const cal = (\n    Number(bigValue) / Math.pow(10, TokensDetail[selectedTokenId].decimals)\n  ).toFixed(2);\n  State.update({\n    balance: Number(cal),\n  });\n  return cal;\n};\n\nconst supplyBalance = () => {\n  const rewardIndex = getCTokenBalancesAllIndex();\n  const bigValue = state.cTokenBalancesAll[rewardIndex][1].mul(\n    state.cTokenBalancesAll[rewardIndex][3]\n  );\n  return (\n    Number(bigValue.toString()) /\n    Math.pow(10, 18 + TokensDetail[selectedTokenId].decimals)\n  ).toFixed(3);\n};\n\nconst getAllowance = () => {\n  const rewardIndex = getCTokenBalancesAllIndex();\n  const bigValue = state.cTokenBalancesAll[rewardIndex][5].toString();\n  const cal = (\n    Number(bigValue) / Math.pow(10, TokensDetail[selectedTokenId].decimals)\n  ).toFixed(2);\n  State.update({\n    allowance: Number(cal),\n  });\n};\n\nconst remainingBalance = () => {\n  let totalBorrowLimit = ethers.BigNumber.from(0);\n  let totalBorrowd = ethers.BigNumber.from(0);\n  for (const key of dataArray) {\n    // find total borrow limit\n    const indexBalance = state.cTokenBalancesAll.findIndex(\n      (element) => element[0] == key\n    );\n    const indexMeta = state.cTokenMetadataAll.findIndex(\n      (element) => element[0] == key\n    );\n    const bigValue = state.cTokenBalancesAll[indexBalance][1].mul(\n      state.cTokenBalancesAll[indexBalance][3]\n    );\n    const valueUsd = bigValue.mul(state.cTokenMetadataAll[indexMeta][1]);\n    const valueWithCFactor = valueUsd.mul(\n      state.cTokenMetadataAll[indexMeta][11]\n    );\n    // find total borrowed\n    const bigValueBorrowedUSD = state.cTokenBalancesAll[indexBalance][2].mul(\n      state.cTokenMetadataAll[indexMeta][1]\n    );\n    if (state.getAccountLimits[0].includes(key)) {\n      totalBorrowLimit = totalBorrowLimit.add(valueWithCFactor);\n      totalBorrowd = totalBorrowd.add(bigValueBorrowedUSD);\n    }\n  }\n  const totalBorrowdFinal = (\n    Number(totalBorrowd.toString()) / Math.pow(10, 18 * 2)\n  ).toFixed(2);\n  const totalBorrowdLimitFinal = (\n    Number(totalBorrowLimit.toString()) / Math.pow(10, 18 * 4)\n  ).toFixed(2);\n  State.update({\n    LimitAmount: (totalBorrowdLimitFinal - totalBorrowdFinal).toFixed(2),\n  });\n  return (totalBorrowdLimitFinal - totalBorrowdFinal).toFixed(2);\n};\n\nconst handleBorrow = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n  if (Number(state.amount) > Number(state.LimitAmount)) {\n    State.update({ hasError: 2 });\n    return;\n  }\n\n  let contractABI;\n  if (selectedTokenId == \"ETH\") {\n    contractABI = CEthABI;\n  } else {\n    contractABI = CErc20ABI;\n  }\n\n  const connection = new ethers.Contract(\n    TokensDetail[selectedTokenId].cAddress,\n    contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  const expandedAmount = expandToken(\n    amount,\n    TokensDetail[selectedTokenId].decimals\n  ).toString();\n\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\n\n  connection\n    .borrow(toBigNumber)\n    .then((transaction) => {\n      console.log(\"Transaction sent:\", transaction.hash);\n      State.update({ hasError: -1 });\n      return transaction.wait();\n    })\n    .then((receipt) => {\n      State.update({ hasError: 0 });\n      State.update({ success: true });\n      console.log(\"Transaction receipt:\", receipt);\n    })\n    .catch((error) => {\n      State.update({ hasError: 5, errorMessage: error });\n      console.log(\"Error:\", error);\n    });\n};\n\nconst getBorrowed = () => {\n  const rewardIndex = getCTokenBalancesAllIndex();\n  const bigValueBorrowed = state.cTokenBalancesAll[rewardIndex][2];\n  const finalValue = (\n    Number(bigValueBorrowed.toString()) /\n    Math.pow(10, TokensDetail[selectedTokenId].decimals)\n  ).toFixed(2);\n  State.update({ borrowedAmount: finalValue });\n  return finalValue;\n};\n\nconst handleRepay = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n\n  if (Number(amount) > Number(state.borrowedAmount)) {\n    State.update({ hasError: 3 });\n    return;\n  }\n\n  let contractABI;\n  if (selectedTokenId == \"ETH\") {\n    contractABI = CEthABI;\n  } else {\n    contractABI = CErc20ABI;\n  }\n\n  const connection = new ethers.Contract(\n    TokensDetail[selectedTokenId].cAddress,\n    contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  const expandedAmount = expandToken(\n    amount,\n    TokensDetail[selectedTokenId].decimals\n  ).toString();\n\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\n\n  connection\n    .repayBorrow(toBigNumber)\n    .then((transaction) => {\n      console.log(\"Transaction sent:\", transaction.hash);\n      State.update({ hasError: -1 });\n      return transaction.wait();\n    })\n    .then((receipt) => {\n      State.update({ hasError: 0 });\n      State.update({ success: true });\n      console.log(\"Transaction receipt:\", receipt);\n    })\n    .catch((error) => {\n      State.update({ hasError: 5, errorMessage: error });\n      console.log(\"Error:\", error);\n    });\n};\n\nconst maxWithdraw = () => {\n  const rewardIndex = getCTokenBalancesAllIndex();\n  const supplyBalance = supplyBalance();\n  const tokenPrice =\n    Number(state.cTokenMetadataAll[rewardIndex][1].toString()) /\n    Math.pow(10, 18 + (18 - TokensDetail[selectedTokenId].decimals));\n  const liquidity =\n    Number(state.getAccountLimits[1].toString()) / Math.pow(10, 18);\n  const liquidityInToken = liquidity / tokenPrice;\n  const CFactor =\n    Number(state.cTokenMetadataAll[rewardIndex][11].toString()) /\n    Math.pow(10, 18);\n  const totalLiquidity = (liquidityInToken / CFactor).toFixed(3);\n  if (supplyBalance >= totalLiquidity) {\n    State.update({ maxWithdraw: Number(totalLiquidity) });\n    return totalLiquidity;\n  } else {\n    State.update({ maxWithdraw: Number(supplyBalance) });\n    return supplyBalance;\n  }\n};\n\nconst handleWithdraw = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n\n  if (Number(amount) > Number(state.maxWithdraw)) {\n    State.update({ hasError: 4 });\n    return;\n  }\n\n  let contractABI;\n  if (selectedTokenId == \"ETH\") {\n    contractABI = CEthABI;\n  } else {\n    contractABI = CErc20ABI;\n  }\n\n  const connection = new ethers.Contract(\n    TokensDetail[selectedTokenId].cAddress,\n    contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  const expandedAmount = expandToken(\n    amount,\n    TokensDetail[selectedTokenId].decimals\n  ).toString();\n\n  const toBigNumber = ethers.BigNumber.from(expandedAmount);\n  const supplyBalance = supplyBalance();\n\n  if (amount >= supplyBalance) {\n    connection\n      .redeem(toBigNumber)\n      .then((transaction) => {\n        console.log(\"Transaction sent:\", transaction.hash);\n        State.update({ hasError: -1 });\n        return transaction.wait();\n      })\n      .then((receipt) => {\n        State.update({ hasError: 0 });\n        State.update({ success: true });\n        console.log(\"Transaction receipt:\", receipt);\n      })\n      .catch((error) => {\n        State.update({ hasError: 5, errorMessage: error });\n        console.log(\"Error:\", error);\n      });\n  } else {\n    connection\n      .redeemUnderlying(toBigNumber)\n      .then((transaction) => {\n        console.log(\"Transaction sent:\", transaction.hash);\n        State.update({ hasError: -1 });\n        return transaction.wait();\n      })\n      .then((receipt) => {\n        State.update({ hasError: 0 });\n        State.update({ success: true });\n        console.log(\"Transaction receipt:\", receipt);\n      })\n      .catch((error) => {\n        State.update({ hasError: 5, errorMessage: error });\n        console.log(\"Error:\", error);\n      });\n  }\n};\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconst allAssetData = Object.keys(TokensDetail).map((key) => {\n  const indexMeta = state.cTokenMetadataAll.findIndex(\n    (element) => element[0] == TokensDetail[key].cAddress\n  );\n  const totalSupply = state.cTokenMetadataAll[indexMeta][8].mul(\n    state.cTokenMetadataAll[indexMeta][2]\n  );\n  const totalSupplyValue = (\n    Number(totalSupply.toString()) /\n    Math.pow(10, 18 + TokensDetail[key].decimals)\n  ).toFixed(2);\n  const supplyRatePerBlock = state.cTokenMetadataAll[indexMeta][3];\n  const supplyApy = (\n    (Math.pow((Number(supplyRatePerBlock.toString()) / 1e18) * 86400 + 1, 365) -\n      1) *\n    100\n  ).toFixed(2);\n  const borrowRatePerBlock = state.cTokenMetadataAll[indexMeta][4];\n  const borrowApy = (\n    (Math.pow((Number(borrowRatePerBlock.toString()) / 1e18) * 86400 + 1, 365) -\n      1) *\n    100\n  ).toFixed(2);\n  return (\n    <tr>\n      <td>{TokensDetail[key].name}</td>\n      <td class=\"text-end\">{supplyApy}%</td>\n      <td class=\"text-end\">{borrowApy}%</td>\n      <td class=\"text-end\">\n        {numberWithCommas(totalSupplyValue)} {TokensDetail[key].symbol}\n      </td>\n    </tr>\n  );\n});\n\nconst fetchAllData = () => {\n  State.update({ allDataTab: allAssetData });\n};\n\nconst portfolio = Object.keys(TokensDetail).map((key) => {\n  const indexBalance = state.cTokenBalancesAll.findIndex(\n    (element) => element[0] == TokensDetail[key].cAddress\n  );\n  const bigValue = state.cTokenBalancesAll[indexBalance][4].toString();\n  const cal = (\n    Number(bigValue) / Math.pow(10, TokensDetail[key].decimals)\n  ).toFixed(2);\n\n  const bigValueSupply = state.cTokenBalancesAll[indexBalance][1].mul(\n    state.cTokenBalancesAll[indexBalance][3]\n  );\n  const supplied = (\n    Number(bigValueSupply.toString()) /\n    Math.pow(10, 18 + TokensDetail[key].decimals)\n  ).toFixed(3);\n  const bigValueBorrowed = state.cTokenBalancesAll[indexBalance][2];\n  const finalValueBorrowed = (\n    Number(bigValueBorrowed.toString()) /\n    Math.pow(10, TokensDetail[key].decimals)\n  ).toFixed(2);\n  return (\n    <tr>\n      <td>{TokensDetail[key].name}</td>\n      <td class=\"text-end\">\n        {cal} {TokensDetail[key].symbol}\n      </td>\n      <td class=\"text-end\">\n        {supplied} {TokensDetail[key].symbol}\n      </td>\n      <td class=\"text-end\">\n        {finalValueBorrowed} {TokensDetail[key].symbol}\n      </td>\n    </tr>\n  );\n});\n\nif (!state.actionTabs) {\n  State.update({ actionTabs: \"deposit\" });\n}\nif (!state.actionList) {\n  State.update({ actionList: \"assets\" });\n}\n\nreturn (\n  <>\n    {state.cTokenBalancesAll &&\n    state.cTokenMetadataAll &&\n    state.getAccountLimits ? (\n      <div\n        style={{\n          display: \"flex\",\n          width: \"100%\",\n          marginTop: \"20px\",\n          marginLeft: \"20px\",\n        }}\n      >\n        <div style={{ paddingRight: \"3rem\", width: \"60%\" }}>\n          <div class=\"list btn-group\" role=\"group\" aria-label=\"List\">\n            <input\n              type=\"radio\"\n              class=\"btn-check\"\n              name=\"btnradiolist\"\n              id=\"assets\"\n              autocomplete=\"off\"\n              checked={state.actionList === \"assets\"}\n              onClick={() => State.update({ actionList: \"assets\" })}\n            />\n            <label class=\"btn btn-outline-primary\" for=\"assets\">\n              Assets\n            </label>\n            <input\n              type=\"radio\"\n              class=\"btn-check\"\n              name=\"btnradiolist\"\n              id=\"portfolio\"\n              autocomplete=\"off\"\n              checked={state.actionList === \"portfolio\"}\n              onClick={() => State.update({ actionList: \"portfolio\" })}\n            />\n            <label class=\"btn btn-outline-primary\" for=\"portfolio\">\n              Portfolio\n            </label>\n          </div>\n          {state.actionList == \"assets\" ? (\n            <table class=\"table\">\n              <thead>\n                <tr\n                  style={{\n                    color: \"white\",\n                  }}\n                >\n                  <th scope=\"col\">Asset</th>\n                  <th scope=\"col\" class=\"text-end\">\n                    APY\n                  </th>\n                  <th scope=\"col\" class=\"text-end\">\n                    APY (borrow)\n                  </th>\n                  <th scope=\"col\" class=\"text-end\">\n                    Total Supply\n                  </th>\n                </tr>\n              </thead>\n              {fetchAllData()}\n              <tbody>{state.allDataTab}</tbody>\n            </table>\n          ) : (\n            <table class=\"table\">\n              <thead>\n                <tr\n                  style={{\n                    color: \"white\",\n                  }}\n                >\n                  <th scope=\"col\">Asset</th>\n                  <th scope=\"col\" class=\"text-end\">\n                    Wallet Balance\n                  </th>\n                  <th scope=\"col\" class=\"text-end\">\n                    Supplied\n                  </th>\n                  <th scope=\"col\" class=\"text-end\">\n                    Borrowed\n                  </th>\n                </tr>\n              </thead>\n              <tbody>{portfolio}</tbody>\n            </table>\n          )}\n        </div>\n        <div style={{ maxWidth: \"400px\" }}>\n          <div class=\"card-body d-grid gap-3\">\n            <div class=\"action btn-group\" role=\"group\" aria-label=\"Deposit\">\n              <input\n                type=\"radio\"\n                class=\"btn-check\"\n                name=\"btnradioaction\"\n                id=\"deposit\"\n                autocomplete=\"off\"\n                checked={state.actionTabs === \"deposit\"}\n                onClick={() => State.update({ actionTabs: \"deposit\" })}\n              />\n              <label class=\"btn btn-outline-primary\" for=\"deposit\">\n                Deposit\n              </label>\n              <input\n                type=\"radio\"\n                class=\"btn-check\"\n                name=\"btnradioaction\"\n                id=\"borrow\"\n                autocomplete=\"off\"\n                checked={state.actionTabs === \"borrow\"}\n                onClick={() => State.update({ actionTabs: \"borrow\" })}\n              />\n              <label class=\"btn btn-outline-primary\" for=\"borrow\">\n                Borrow\n              </label>\n              <input\n                type=\"radio\"\n                class=\"btn-check\"\n                name=\"btnradioaction\"\n                id=\"repay\"\n                autocomplete=\"off\"\n                checked={state.actionTabs === \"repay\"}\n                onClick={() => State.update({ actionTabs: \"repay\" })}\n              />\n              <label class=\"btn btn-outline-primary\" for=\"repay\">\n                Repay\n              </label>\n              <input\n                type=\"radio\"\n                class=\"btn-check\"\n                name=\"btnradioaction\"\n                id=\"withdraw\"\n                autocomplete=\"off\"\n                checked={state.actionTabs === \"withdraw\"}\n                onClick={() => State.update({ actionTabs: \"withdraw\" })}\n              />\n              <label class=\"btn btn-outline-primary\" for=\"withdraw\">\n                Withdraw\n              </label>\n            </div>\n            <div>\n              <div class=\"mb-2 text-muted\">Token</div>\n              <select\n                onChange={handleSelect}\n                class=\"p-2 mb-1\"\n                style={{ width: \"100%\" }}\n              >\n                <option value=\"\">Choose your token</option>\n                {Object.keys(TokensDetail).map((key) => {\n                  return (\n                    <option key={key} value={key}>\n                      {TokensDetail[key].symbol}\n                    </option>\n                  );\n                })}\n              </select>\n              {state.selectedTokenId !== undefined &&\n              state.selectedTokenId !== \"\" ? (\n                state.actionTabs == \"deposit\" ? (\n                  <div>\n                    <span class=\"badge bg-light text-dark\">\n                      Wallet Balance: {walletBalance()}{\" \"}\n                      {TokensDetail[selectedTokenId].symbol}\n                    </span>\n                    <span class=\"badge bg-light text-dark\">\n                      Supply Balance: {supplyBalance()}{\" \"}\n                      {TokensDetail[selectedTokenId].symbol}\n                    </span>\n                    {getAllowance()}\n                  </div>\n                ) : state.actionTabs == \"borrow\" ? (\n                  <div>\n                    <span class=\"badge bg-light text-dark\">\n                      Remaining Borrow Limit: $ {remainingBalance()}\n                    </span>\n                  </div>\n                ) : state.actionTabs == \"repay\" ? (\n                  <div>\n                    <span class=\"badge bg-light text-dark\">\n                      Wallet Balance: {walletBalance()}{\" \"}\n                      {TokensDetail[selectedTokenId].symbol}\n                    </span>\n                    <span class=\"badge bg-light text-dark\">\n                      Amount Borrowed: {getBorrowed()}{\" \"}\n                      {TokensDetail[selectedTokenId].symbol}\n                    </span>\n                    {getAllowance()}\n                  </div>\n                ) : (\n                  <div>\n                    <span class=\"badge bg-light text-dark\">\n                      Max Withdrawal: {maxWithdraw()}{\" \"}\n                      {TokensDetail[selectedTokenId].symbol}\n                    </span>\n                  </div>\n                )\n              ) : (\n                \"\"\n              )}\n            </div>\n            <div>\n              <div class=\"mb-2 text-muted\">Amount</div>\n              <input type=\"number\" value={amount} onChange={handleAmount} />\n            </div>\n            {state.hasError == 1 ? (\n              <p class=\"alert alert-danger\" role=\"alert\">\n                Amount greater than balance\n              </p>\n            ) : state.hasError == 2 ? (\n              <p class=\"alert alert-danger\" role=\"alert\">\n                Amount greater than Remaining Borrow Limit\n              </p>\n            ) : state.hasError == 3 ? (\n              <p class=\"alert alert-danger\" role=\"alert\">\n                Amount greater than Amount Borrowed\n              </p>\n            ) : state.hasError == 4 ? (\n              <p class=\"alert alert-danger\" role=\"alert\">\n                Amount greater than Max Withdrawal\n              </p>\n            ) : state.hasError == 4 ? (\n              <p class=\"alert alert-danger\" role=\"alert\">\n                Something went wrong!! error: {errorMessage}\n              </p>\n            ) : state.hasError == -1 ? (\n              <p class=\"alert alert-warning\" role=\"alert\">\n                Waiting for confirmation ...\n              </p>\n            ) : state.success == true ? (\n              <p class=\"alert alert-success\" role=\"alert\">\n                Your transaction was sent successfully\n              </p>\n            ) : (\n              \"\"\n            )}\n            {state.actionTabs == \"deposit\" ? (\n              state.amount > state.allowance &&\n              state.selectedTokenId !== \"ETH\" ? (\n                <button\n                  disabled={state.amount == undefined || state.amount == \"\"}\n                  onClick={handleApprove}\n                  style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\n                >\n                  Approve\n                </button>\n              ) : (\n                <button\n                  disabled={state.amount == undefined || state.amount == \"\"}\n                  onClick={handleDeposit}\n                  style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\n                >\n                  Deposit\n                </button>\n              )\n            ) : state.actionTabs == \"borrow\" ? (\n              <button\n                disabled={state.amount == undefined || state.amount == \"\"}\n                onClick={handleBorrow}\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\n              >\n                Borrow\n              </button>\n            ) : state.amount > state.allowance &&\n              state.selectedTokenId !== \"ETH\" ? (\n              <button\n                disabled={state.amount == undefined || state.amount == \"\"}\n                onClick={handleApprove}\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\n              >\n                Approve\n              </button>\n            ) : state.actionTabs == \"repay\" ? (\n              <button\n                disabled={state.amount == undefined || state.amount == \"\"}\n                onClick={handleRepay}\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\n              >\n                Repay\n              </button>\n            ) : (\n              <button\n                disabled={state.amount == undefined || state.amount == \"\"}\n                onClick={handleWithdraw}\n                style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\n              >\n                Withdraw\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div>\n        <h2>Loading...</h2>\n      </div>\n    )}\n  </>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jirapatwor.near/widget/Bastion", "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.defi": NaN, "metadata.tags.ethdenver2023": NaN, "metadata": NaN}