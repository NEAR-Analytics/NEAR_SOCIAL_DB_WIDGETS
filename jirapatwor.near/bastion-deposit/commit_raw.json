{"tx_hash": "3r4kHT7Yw3FLzTm14jkXYgHd5Pk9ibtJLkJWJeFrbhhJ", "action_id_social": "AfZbHNaJrRoqwjLWqHPhJigxKZVcihTniyJPtSbMK3fF-0-widget", "block_id": 88296406, "block_timestamp": "2023-03-28 12:05:28.951", "signer_id": "jirapatwor.near", "widget_name": "bastion-deposit", "source_code": "const { selectedTokenId, amount, hasError, status } = state;\r\nconst TokensDetail = {\r\n  [\"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\"]: {\r\n    name: \"Near\",\r\n    symbol: \"NEAR\",\r\n    address: \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\",\r\n    icon: \"near.svg\",\r\n    decimals: 24,\r\n  },\r\n  [\"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\"]: {\r\n    name: \"USD Coin\",\r\n    symbol: \"USDC\",\r\n    address: \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\",\r\n    icon: \"usdc.svg\",\r\n    decimals: 6,\r\n  },\r\n  [\"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\"]: {\r\n    name: \"Tether USD\",\r\n    symbol: \"USDT.e\",\r\n    address: \"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\",\r\n    icon: \"usdt.svg\",\r\n    decimals: 6,\r\n  },\r\n  [\"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\"]: {\r\n    name: \"Wrapped Bitcoin\",\r\n    symbol: \"WBTC\",\r\n    address: \"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\",\r\n    icon: \"btc.png\",\r\n    decimals: 8,\r\n  },\r\n  [\"ETH\"]: {\r\n    name: \"Ether\",\r\n    symbol: \"ETH\",\r\n    address: ethers.constants.AddressZero,\r\n    icon: \"eth.svg\",\r\n    decimals: 18,\r\n  },\r\n};\r\nconst Comptroller = \"0x6De54724e128274520606f038591A00C5E94a1F6\";\r\nconst EIP20InterfaceABI = fetch(\r\n  \"https://raw.githubusercontent.com/JirapatWov/bos/main/EIP20.json\"\r\n).body;\r\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\r\nif (!sender) return \"Please login first\";\r\n\r\nconst expandToken = (value, decimals) => {\r\n  return new Big(value).mul(new Big(10).pow(decimals));\r\n};\r\n\r\nconst handleSelect = (e) => {\r\n  State.update({\r\n    selectedTokenId: e.target.value,\r\n    amount: \"\",\r\n    hasError: false,\r\n  });\r\n};\r\n\r\nconst handleAmount = (e) => {\r\n  State.update({\r\n    amount: Number(e.target.value),\r\n    selectedTokenId,\r\n    hasError: false,\r\n  });\r\n};\r\n\r\nconst handleApprove = () => {\r\n  if (!selectedTokenId || !amount || hasError) return;\r\n\r\n  const erc20 = new ethers.Contract(\r\n    selectedTokenId,\r\n    EIP20InterfaceABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  let amountUse = ethers.utils\r\n    .parseUnits(amount, TokensDetail[selectedTokenId].decimals)\r\n    .toHexString();\r\n\r\n  erc20.approve(selectedTokenId, amountUse).then((transactionHash) => {\r\n    console.log(\"transactionHash is \" + transactionHash);\r\n  });\r\n\r\n  //   let transactions = [];\r\n\r\n  //   const expandedAmount = expandToken(\r\n  //     amount,\r\n  //     TokensDetail[selectedTokenId].decimals\r\n  //   ).toFixed();\r\n\r\n  //   State.update({\r\n  //     status: expandedAmount,\r\n  //   });\r\n\r\n  //   const depositTransaction = {\r\n  //     contractName: selectedTokenId,\r\n  //     methodName: \"approve\",\r\n  //     deposit: new Big(\"1\").toFixed(),\r\n  //     args: {\r\n  //       spender: sender,\r\n  //       amount: expandedAmount,\r\n  //     },\r\n  //   };\r\n\r\n  //   transactions.push(depositTransaction);\r\n\r\n  //   Near.call(transactions);\r\n\r\n  //   const eip20 = new ethers.Contract(\r\n  //     Comptroller,\r\n  //     EIP20InterfaceABI,\r\n  //     Ethers.provider()\r\n  //   );\r\n\r\n  //   eip20.callStatic.approve(selectedTokenId, expandedAmount).then((data) => {\r\n  //     State.update({ data });\r\n  //   });\r\n};\r\n\r\nconst handleDeposit = () => {\r\n  if (!selectedTokenId || !amount || hasError) {\r\n    State.update({\r\n      status: \"falseee\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  const eip20 = new ethers.Contract(Comptroller, EIP20InterfaceABI, sender);\r\n\r\n  const expandedAmount = expandToken(\r\n    amount,\r\n    TokensDetail[selectedTokenId].address\r\n  ).toFixed();\r\n\r\n  eip20.callStatic\r\n    .cTokenSupply(selectedTokenId, expandedAmount, sender)\r\n    .then((data) => {\r\n      State.update({ data });\r\n    });\r\n};\r\n\r\nreturn (\r\n  <div style={{ maxWidth: \"300px\" }}>\r\n    <div class=\"card-body d-grid gap-3\">\r\n      <div>\r\n        <div class=\"mb-2 text-muted\">Token</div>\r\n        <select\r\n          onChange={handleSelect}\r\n          class=\"p-2 mb-1\"\r\n          style={{ width: \"100%\" }}\r\n        >\r\n          <option value=\"\">Choose your token</option>\r\n          <option value=\"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\">\r\n            NEAR\r\n          </option>\r\n          <option value=\"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\">\r\n            USDC\r\n          </option>\r\n          <option value=\"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\">\r\n            USDT.e\r\n          </option>\r\n          <option value=\"0xf4eb217ba2454613b15dbdea6e5f22276410e89e\">\r\n            WBTC\r\n          </option>\r\n          <option value=\"ETH\">ETH</option>\r\n        </select>\r\n        {state.selectedTokenId}\r\n        {state.amount}\r\n        {state.status}\r\n      </div>\r\n      <div>\r\n        <div class=\"mb-2 text-muted\">Amount</div>\r\n        <input type=\"number\" value={amount} onChange={handleAmount} />\r\n      </div>\r\n      {hasError && (\r\n        <p class=\"alert alert-danger\" role=\"alert\">\r\n          Amount greater than balance\r\n        </p>\r\n      )}\r\n      <button\r\n        onClick={handleApprove}\r\n        style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n      >\r\n        Approve\r\n      </button>\r\n      <button\r\n        onClick={handleDeposit}\r\n        style={{ background: \"#4ED58A\", borderColor: \"#4ED58A\" }}\r\n      >\r\n        Deposit\r\n      </button>\r\n    </div>\r\n    <Web3Connect connectLabel=\"Connect with Web3\" />\r\n    <p>Account: {sender}</p>\r\n  </div>\r\n);\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jirapatwor.near/widget/bastion-deposit", "metadata.name": NaN, "metadata.tags.defi": NaN, "metadata.tags.ethdenver2023": NaN}