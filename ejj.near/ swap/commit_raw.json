{"tx_hash": "AKc7uHfzYz463nGEyz2aruUaudDM1uj7gLLm1sUkMCJz", "action_id_social": "2bUDEAMy418ngykJf7rRHvmrTTwmp88CqGijnC9reskt-0-widget", "block_id": 92058423, "block_timestamp": "2023-05-17T09:51:14.622Z", "signer_id": "ejj.near", "widget_name": " swap", "source_code": "const NETWORK_NEAR = \"NEAR\";\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_AURORA = \"AURORA\";\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst getEVMAccountId = () => {\n  if (ethers !== undefined) {\n    return Ethers.send(\"eth_requestAccounts\", [])[0] ?? \"\";\n  }\n  return \"\";\n};\n\nState.init({\n  loadComplete: false,\n  inputAssetModalHidden: true,\n  outputAssetModalHidden: true,\n  inputAssetAmount: 1,\n  outputAssetAmount: 0,\n  slippagetolerance: \"0.5\",\n  reloadPools: false,\n  estimate: {},\n  loadRes: (value) => {\n    if (value.estimate === \"NaN\") value.estimate = 0;\n    State.update({\n      estimate: value,\n      outputAssetAmount: value === null ? \"\" : value.estimate,\n    });\n  },\n});\n\nconst refReferralId = props.refReferralId ?? \"ukraine\";\nconst forceNetwork = props.forceNetwork;\n\nconst onLoad = (data) => {\n  console.log(\"onLoad\", data);\n  if (state.loadComplete === false) {\n    State.update({\n      ...data,\n      inputAsset: undefined,\n      outputAsset: undefined,\n      sender: getEVMAccountId(),\n    });\n  }\n};\n\nconst callTxSyncSwap = (input, onComplete, gweiPrice) => {\n  if (\n    input.sender &&\n    input.routerContract !== undefined &&\n    input.inputAssetAmount &&\n    input.inputAsset.metadata?.decimals\n  ) {\n    const classicPoolFactoryContractId =\n      \"0xf2DAd89f2788a8CD54625C60b55cD3d2D0ACa7Cb\";\n    const ifaceFactory = new ethers.utils.Interface(input.factoryAbi);\n\n    const tokenIn = input.inputAssetTokenId;\n    const tokenOut = input.outputAssetTokenId;\n\n    const poolEncodedData = ifaceFactory.encodeFunctionData(\"getPool\", [\n      tokenIn,\n      tokenOut,\n    ]);\n\n    return Ethers.provider()\n      .call({\n        to: classicPoolFactoryContractId,\n        data: poolEncodedData,\n      })\n      .then((data) => {\n        const poolData = ifaceFactory.decodeFunctionResult(\"getPool\", data);\n        const poolId = poolData[0];\n\n        const withdrawMode = 1;\n\n        const swapData = ethers.utils.defaultAbiCoder.encode(\n          [\"address\", \"address\", \"uint8\"],\n          [tokenIn, input.sender, withdrawMode]\n        );\n\n        const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n        const steps = [\n          {\n            pool: poolId,\n            data: swapData,\n            callback: ZERO_ADDRESS,\n            callbackData: \"0x\",\n          },\n        ];\n\n        const value = expandToken(\n          input.inputAssetAmount,\n          input.inputAsset.metadata.decimals\n        ).toFixed();\n\n        console.log(\n          \"Swapping\",\n          input.inputAssetTokenId,\n          value,\n          input.inputAsset\n        );\n\n        const paths = [\n          {\n            steps: steps,\n            tokenIn: tokenIn,\n            amountIn: value,\n          },\n        ];\n\n        const deadline = new Big(Math.floor(Date.now() / 1000)).add(\n          new Big(1800)\n        );\n\n        const swapContract = new ethers.Contract(\n          input.routerContract,\n          input.routerAbi,\n          Ethers.provider().getSigner()\n        );\n\n        swapContract\n          .swap(paths, 1, deadline.toFixed(), {\n            value,\n            gasPrice: ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\"),\n            gasLimit: 20000000,\n          })\n          .then((transactionHash) => {\n            onComplete(transactionHash);\n          });\n      });\n  }\n};\n\nconst callTxUni = (input, onComplete, gasPrice) => {\n  console.log(\"callTxUni\", input, onComplete);\n  if (\n    input.sender &&\n    input.routerContract !== undefined &&\n    input.routerAbi &&\n    input.inputAssetAmount &&\n    input.inputAsset.metadata.decimals\n  ) {\n    const value = expandToken(\n      input.inputAssetAmount,\n      input.inputAsset.metadata.decimals\n    ).toFixed();\n\n    const swapContract = new ethers.Contract(\n      input.routerContract,\n      input.routerAbi,\n      Ethers.provider().getSigner()\n    );\n\n    swapContract\n      .swapExactTokensForTokens(\n        value,\n        \"0\",\n        [input.inputAssetTokenId, input.outputAssetTokenId],\n        input.sender,\n        {\n          gasPrice: ethers.utils.parseUnits(gasPrice ?? \"0.50\", \"gwei\"),\n          gasLimit: 20000000,\n        }\n      )\n      .then((transactionHash) => {\n        onComplete(transactionHash);\n      });\n  }\n};\n\nconst callTokenApprovalEVM = (input, onComplete, gweiPrice) => {\n  if (\n    input.sender &&\n    input.erc20Abi &&\n    input.inputAssetAmount &&\n    input.inputAsset.metadata.decimals &&\n    input.routerContract\n  ) {\n    const value = expandToken(\n      input.inputAssetAmount,\n      input.inputAsset.metadata.decimals\n    ).toFixed();\n\n    const approveContract = new ethers.Contract(\n      input.inputAssetTokenId,\n      input.erc20Abi,\n      Ethers.provider().getSigner()\n    );\n\n    approveContract\n      .approve(input.routerContract, value, {\n        gasPrice: ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\"),\n        gasLimit: 20000000,\n      })\n      .then((transactionHash) => {\n        onComplete(transactionHash);\n      });\n  }\n};\n\nconst callTxRef = (input, onComplete) => {\n  const tx = [];\n\n  const nearDeposit = {\n    contractName: \"wrap.near\",\n    methodName: \"near_deposit\",\n    deposit: expandToken(input.inputAssetAmount, 24).toFixed(),\n    gas: expandToken(50, 12),\n  };\n  const nearWithdraw = {\n    contractName: \"wrap.near\",\n    methodName: \"near_withdraw\",\n    deposit: new Big(\"1\").toFixed(),\n    args: {\n      amount: expandToken(input.inputAssetAmount, 24).toFixed(),\n    },\n  };\n\n  if (input.estimate.pool === \"wrap\") {\n    if (input.tokenIn.id === \"NEAR\") {\n      tx.push(nearDeposit);\n    } else {\n      tx.push(nearWithdraw);\n    }\n\n    return Near.call(tx).then(() => onComplete());\n  }\n\n  if (register === null) {\n    tx.push({\n      contractName:\n        input.outputAssetTokenId === \"NEAR\"\n          ? \"wrap.near\"\n          : input.outputAssetTokenId,\n      methodName: \"storage_deposit\",\n      deposit: expandToken(0.1, 24).toFixed(),\n      gas: expandToken(50, 12),\n      args: {\n        registration_only: true,\n        account_id: accountId,\n      },\n    });\n  }\n\n  if (input.inputAssetTokenId === \"NEAR\") {\n    tx.push(nearDeposit);\n  }\n\n  const minAmountOut = expandToken(\n    new Big(input.outputAssetAmount)\n      .mul(1 - Number(input.slippagetolerance) / 100)\n      .toFixed(input.outputAsset.metadata.decimals, 0),\n    input.outputAsset.metadata.decimals\n  ).toFixed();\n\n  tx.push({\n    methodName: \"ft_transfer_call\",\n    contractName:\n      input.inputAssetTokenId === \"NEAR\"\n        ? \"wrap.near\"\n        : input.inputAssetTokenId,\n    gas: expandToken(180, 12),\n    deposit: new Big(\"1\").toFixed(),\n    args: {\n      receiver_id: \"v2.ref-finance.near\",\n      amount: expandToken(\n        input.inputAssetAmount,\n        input.inputAsset.metadata.decimals\n      ).toFixed(0, 0),\n      msg: JSON.stringify({\n        referral_id: refReferralId,\n        actions: [\n          {\n            pool_id: Number(input.estimate.pool.id),\n            token_in:\n              input.inputAssetTokenId === \"NEAR\"\n                ? \"wrap.near\"\n                : input.inputAssetTokenId,\n            token_out:\n              input.outputAssetTokenId === \"NEAR\"\n                ? \"wrap.near\"\n                : input.outputAssetTokenId,\n            amount_in: expandToken(\n              input.inputAssetAmount,\n              input.inputAsset.metadata.decimals\n            ).toFixed(0, 0),\n            min_amount_out: minAmountOut,\n          },\n        ],\n      }),\n    },\n  });\n\n  if (input.outputAssetTokenId === \"NEAR\") {\n    tx.push({\n      contractName: \"wrap.near\",\n      methodName: \"near_withdraw\",\n      deposit: new Big(\"1\").toFixed(),\n      args: {\n        amount: minAmountOut,\n      },\n    });\n  }\n\n  Near.call(tx).then(() => onComplete());\n};\n\n// // FINAL RESULTS\n\nif (ethers !== undefined && Ethers.send(\"eth_requestAccounts\", [])[0]) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      console.log(\"chainId\", chainIdData.chainId);\n      if (chainIdData.chainId === 324) {\n        // ZKSYNC\n\n        if (state.routerAbi == undefined) {\n          const routerAbi = fetch(\n            \"https://gist.githubusercontent.com/0xnakato/80ca6221ef258b7b27bf309c8a3eeff2/raw/50b1b27d5a5741a37667d35e62b7f9bccd0c5847/SyncSwapRouter.json\"\n          );\n          if (!routerAbi.ok) {\n            return \"Loading\";\n          }\n          State.update({ routerAbi: routerAbi.body });\n        }\n\n        if (state.factoryAbi == undefined) {\n          const factoryAbi = fetch(\n            \"https://gist.githubusercontent.com/0xnakato/13e8393c09ea842912f5f2e5995e9770/raw/7d4edfa0a29de02f7b84d4fb79f1e6125ed0e7cc/SyncSwapClassicPoolFactory.json\"\n          );\n          if (!factoryAbi.ok) {\n            return \"Loading\";\n          }\n          State.update({ factoryAbi: factoryAbi.body });\n        }\n\n        if (state.erc20Abi == undefined) {\n          const erc20Abi = fetch(\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n          );\n          if (!erc20Abi.ok) {\n            return \"Loading\";\n          }\n          State.update({ erc20Abi: erc20Abi.body });\n        }\n\n        if (!state.routerAbi || !state.factoryAbi || !state.erc20Abi)\n          return \"Loading ABIs\";\n\n        onLoad({\n          network: NETWORK_ZKSYNC,\n          assets: [\n            \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n            \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n            \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\",\n          ],\n          coinGeckoTokenIds: {\n            \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\":\n              \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\":\n              \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n            \"0x7400793aAd94C8CA801aa036357d10F5Fd0ce08f\":\n              \"0x418d75f65a02b3d53b2418fb8e1fe493759c7605\",\n          },\n          inputAssetTokenId: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n          outputAssetTokenId: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n          routerContract: \"0x2da10A1e27bF85cEdD8FFb1AbBe97e53391C0295\",\n          dexName: \"SyncSwap\",\n          routerAbi: state.routerAbi,\n          factoryAbi: state.factoryAbi,\n          erc20Abi: state.erc20Abi,\n          callTx: callTxSyncSwap,\n          callTokenApproval: callTokenApprovalEVM,\n          loadComplete: true,\n        });\n      } else if (chainIdData.chainId === 1) {\n        // ETH\n\n        if (state.erc20Abi == undefined) {\n          const erc20Abi = fetch(\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n          );\n          if (!erc20Abi.ok) {\n            return \"Loading\";\n          }\n          State.update({ erc20Abi: erc20Abi.body });\n        }\n\n        if (state.routerAbi == undefined) {\n          const routerAbi = fetch(\n            \"https://gist.githubusercontent.com/zavodil/108a3719d4ac4b53131b09872ff81b83/raw/82561cf48afcc72861fa8fa8283b33c04da316d7/SwapRouter02.json\"\n          );\n          if (!routerAbi.ok) {\n            return \"Loading\";\n          }\n\n          State.update({ routerAbi: routerAbi.body });\n        }\n\n        if (!state.routerAbi || !state.erc20Abi) return \"Loading ABIs\";\n\n        onLoad({\n          network: NETWORK_ETH,\n          assets: [\n            \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n            \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n            \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n            \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n          ],\n          inputAssetTokenId: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n          outputAssetTokenId: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          routerContract: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n          dexName: \"UniSwap\",\n          erc20Abi: state.erc20Abi,\n          routerAbi: state.routerAbi,\n          callTx: callTxUni,\n          callTokenApproval: callTokenApprovalEVM,\n        });\n        State.update({ loadComplete: true });\n      } else if (chainIdData.chainId == 1313161554) {\n        // Aurora\n\n        if (state.routerAbi == undefined) {\n          const routerAbi = fetch(\n            \"https://raw.githubusercontent.com/trisolaris-labs/interface/main/src/constants/abis/polygon/IUniswapV2Router02.json\"\n          );\n          if (!routerAbi.ok) {\n            return \"Loading\";\n          }\n          State.update({ routerAbi: routerAbi.body });\n        }\n\n        if (state.erc20Abi == undefined) {\n          const erc20Abi = fetch(\n            \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n          );\n          if (!erc20Abi.ok) {\n            return \"Loading\";\n          }\n          State.update({ erc20Abi: erc20Abi.body });\n        }\n\n        if (state.factoryAbi == undefined) {\n          const factoryAbi = fetch(\n            \"https://raw.githubusercontent.com/DaniPopes/uniswap-rs/9a7c8f9aadc38b458eac6571509d354859e6cca0/abi/IUniswapV2Factory.json\"\n          );\n          if (!factoryAbi.ok) {\n            return \"Loading\";\n          }\n          State.update({ factoryAbi: factoryAbi.body });\n        }\n\n        if (!state.routerAbi || !state.factoryAbi || !state.erc20Abi)\n          return \"Loading ABIs\";\n\n        onLoad({\n          network: NETWORK_AURORA,\n          assets: [\n            \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\",\n            \"0x0b20972B45ffB8e5d4D37AF4024E1bf0b03f15ae\",\n            \"0xF4eB217Ba2454613b15dBdea6e5f22276410e89e\",\n            \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\",\n            \"0xFa94348467f64D5A457F75F8bc40495D33c65aBB\",\n          ],\n          inputAssetTokenId: \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\",\n          outputAssetTokenId: \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\",\n          routerContract: \"0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B\",\n          factoryContract: \"0xc66F594268041dB60507F00703b152492fb176E7\",\n          dexName: \"Trisolaris\",\n          routerAbi: state.routerAbi,\n          factoryAbi: state.factoryAbi,\n          erc20Abi: state.erc20Abi,\n          callTx: callTxUni,\n          callTokenApproval: callTokenApprovalEVM,\n          loadComplete: true,\n        });\n      } else {\n        // not supported evm chain\n        onLoad({\n          network: NETWORK_NEAR,\n          inputAssetTokenId: \"NEAR\",\n          outputAssetTokenId:\n            \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n          dexName: \"Ref Finance\",\n          assets: [\n            \"NEAR\",\n            \"token.v2.ref-finance.near\",\n            \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n            \"token.burrow.near\",\n          ],\n          callTx: callTxRef,\n          loadComplete: true,\n        });\n      }\n    });\n} else {\n  onLoad({\n    network: NETWORK_NEAR,\n    inputAssetTokenId: \"NEAR\",\n    outputAssetTokenId:\n      \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n    dexName: \"Ref Finance\",\n    assets: [\n      \"NEAR\",\n      \"token.v2.ref-finance.near\",\n      \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n      \"token.burrow.near\",\n    ],\n    callTx: callTxRef,\n    loadComplete: true,\n  });\n}\n\nconst css = fetch(\n  \"https://gist.githubusercontent.com/zavodil/5786d09502b0fbd042a920d804259130/raw/8dfc1154f6a9ebc5274463f60521385cc3728a19/swap.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      ${css}\n    `,\n  });\n}\n\nconst Theme = state.theme;\n\nconst currentAccountId =\n  getEVMAccountId() !== \"\" ? getEVMAccountId() : context.accountId;\n\nconst rearrangeAssets = () => {\n  State.update({\n    inputAssetTokenId: state.outputAssetTokenId,\n    outputAssetTokenId: state.inputAssetTokenId,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    inputAssetAmount: state.outputAssetAmount,\n    outputAssetAmount: state.inputAssetAmount,\n    approvalNeeded: undefined,\n  });\n};\n\nconst assetContainer = (\n  isInputAsset,\n  assetData,\n  amountName,\n  assetNameOnClick\n) => {\n  if (!assetData) return;\n  const useSpacer = !!isInputAsset;\n\n  const assetContainerClass = useSpacer\n    ? \"asset-container-top\"\n    : \"asset-container-bottom\";\n  return (\n    <>\n      <div class={`${assetContainerClass} asset-container`}>\n        <div class=\"swap-currency-input\">\n          <div class=\"swap-currency-input-block\">\n            <div class=\"swap-currency-input-top\">\n              <input\n                class=\"input-asset-amount\"\n                nputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                pattern=\"^[0-9]*[.,]?[0-9]*$\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state[amountName]}\n              />\n              <button class=\"input-asset-token\" onClick={assetNameOnClick}>\n                <span class=\"input-asset-token-menu\">\n                  <div class=\"input-asset-token-name\">\n                    <div class=\"input-asset-token-icon\">\n                      <img\n                        alt={`${assetData.metadata.name} logo`}\n                        src={assetData.metadata.icon}\n                        class=\"input-asset-token-icon-img\"\n                      />\n                    </div>\n                    <span class=\"input-asset-token-ticker\">\n                      {assetData.metadata.symbol}\n                    </span>\n                  </div>\n                  <svg\n                    width=\"12\"\n                    height=\"7\"\n                    viewBox=\"0 0 12 7\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"input-asset-token-expand\"\n                  >\n                    <path\n                      d=\"M0.97168 1L6.20532 6L11.439 1\"\n                      stroke=\"#AEAEAE\"\n                    ></path>\n                  </svg>\n                </span>\n              </button>\n            </div>\n            <div class=\"input-asset-details-container\">\n              <div class=\"input-asset-details-row\">\n                <div class=\"input-asset-details-price-container\">\n                  <div class=\"input-asset-details-price\">\n                    <div>${assetData.price}</div>\n                  </div>\n                </div>\n                <div class=\"input-asset-details-balance-container\">\n                  <div class=\"input-asset-details-balance-text\">\n                    Balance: {assetData.balance_hr}\n                  </div>\n                  {isInputAsset &&\n                    Number(state.inputAssetAmount) !==\n                      Number(assetData.balance_hr_full) && (\n                      <button\n                        class=\"input-asset-details-balance-button\"\n                        onClick={() =>\n                          State.update({\n                            [amountName]: assetData.balance_hr_full ?? 0,\n                          })\n                        }\n                      >\n                        Max\n                      </button>\n                    )}\n                </div>\n              </div>\n            </div>\n            {false && <div class=\"swap-currency-input-bottom\"></div>}\n          </div>\n        </div>\n      </div>\n      {useSpacer ? spacerContainer : <></>}\n    </>\n  );\n};\n\nconst spacerContainer = (\n  <div class=\"spacer-container\">\n    <div class=\"spacer-block\" onClick={rearrangeAssets}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"#0D111C\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <polyline points=\"19 12 12 19 5 12\"></polyline>\n      </svg>\n    </div>\n  </div>\n);\n\n// SWAP METHODS\n\nconst getRefTokenObject = (tokenId, assetData) => {\n  return {\n    id: tokenId,\n    decimals: assetData.metadata.decimals,\n    symbol: assetData.metadata.symbol,\n  };\n};\n\nconst tokenInApprovaleNeededCheck = () => {\n  if (state.approvalNeeded === undefined) {\n    if (\n      getEVMAccountId() &&\n      state.erc20Abi !== undefined &&\n      state.routerContract !== undefined &&\n      [NETWORK_ETH, NETWORK_ZKSYNC, NETWORK_AURORA].includes(state.network)\n    ) {\n      const ifaceErc20 = new ethers.utils.Interface(state.erc20Abi);\n\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\n        \"allowance\",\n        [getEVMAccountId(), state.routerContract]\n      );\n\n      return Ethers.provider()\n        .call({\n          to: state.inputAssetTokenId,\n          data: encodedTokenAllowancesData,\n        })\n        .then((encodedTokenAllowanceHex) => {\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\n            \"allowance\",\n            encodedTokenAllowanceHex\n          );\n\n          if (tokenAllowance) {\n            State.update({\n              approvalNeeded: new Big(tokenAllowance).toFixed() == \"0\",\n            });\n          }\n        });\n    } else {\n      State.update({ approvalNeeded: false });\n    }\n  }\n};\n\nif (\n  state.network === NETWORK_ZKSYNC ||\n  state.network == NETWORK_ETH ||\n  state.network == NETWORK_AURORA\n) {\n  tokenInApprovaleNeededCheck();\n}\n\nconst canSwap =\n  state.network &&\n  Number(state.inputAsset.balance_hr_full) >= Number(state.inputAssetAmount) &&\n  Number(state.inputAssetAmount ?? 0) > 0;\n\nconst onCallTxComple = (tx) => {\n  console.log(\"transactionHash\", tx);\n  State.update({\n    outputAsset: undefined,\n  });\n};\n\n// OUTPUT\n\nif (forceNetwork && state.network && forceNetwork !== state.network) {\n  return (\n    <Theme>\n      <div class=\"swap-main-container pt-5\">\n        To proceed, kindly switch to {forceNetwork}.\n        {!state.sender && (\n          <div class=\"swap-button-container\">\n            <Web3Connect\n              className=\"swap-button-enabled swap-button-text p-2\"\n              connectLabel=\"Connect with Web3\"\n            />\n          </div>\n        )}\n      </div>\n    </Theme>\n  );\n}\n\nreturn (\n  <Theme>\n    {state.network && state.inputAsset && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal\"\n        props={{\n          hidden: state.inputAssetModalHidden ?? true,\n          network: state.network,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          selectedAssets: [state.inputAssetTokenId],\n          onClick: (tokenId) => {\n            State.update({\n              inputAssetModalHidden: true,\n              inputAssetTokenId: tokenId,\n              inputAsset: null,\n              approvalNeeded: undefined,\n            });\n          },\n          onClose: () => State.update({ inputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {state.network && state.outputAsset && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal\"\n        props={{\n          hidden: state.outputAssetModalHidden ?? true,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          network: state.network,\n          selectedAssets: [state.outputAssetTokenId],\n          onClick: (tokenId) => {\n            State.update({\n              outputAssetModalHidden: true,\n              outputAssetTokenId: tokenId,\n              outputAsset: null,\n            });\n          },\n          onClose: () => State.update({ outputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {!state.inputAsset && state.network && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData\"\n        props={{\n          tokenId: state.inputAssetTokenId,\n          coinGeckoTokenId: state?.coinGeckoTokenIds?.[state.inputAssetTokenId],\n          network: state.network,\n          onLoad: (inputAsset) => {\n            console.log(\"TokenData onLoad inputAsset\", inputAsset);\n            inputAsset.metadata.symbol =\n              inputAsset.metadata.symbol.toUpperCase();\n            State.update({ inputAsset });\n          },\n        }}\n      />\n    )}\n    {!state.outputAsset && state.network && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData\"\n        props={{\n          tokenId: state.outputAssetTokenId,\n          coinGeckoTokenId:\n            state?.coinGeckoTokenIds?.[state.outputAssetTokenId],\n          network: state.network,\n          onLoad: (outputAsset) => {\n            console.log(\"TokenData onLoad outputAsset\", outputAsset);\n            outputAsset.metadata.symbol =\n              outputAsset.metadata.symbol.toUpperCase();\n            State.update({ outputAsset });\n          },\n        }}\n      />\n    )}\n\n    {state.network === NETWORK_NEAR &&\n      state.inputAsset &&\n      state.outputAsset && (\n        <Widget\n          src=\"weige.near/widget/ref-swap-getEstimate\"\n          props={{\n            loadRes: state.loadRes,\n            tokenIn: getRefTokenObject(\n              state.inputAssetTokenId,\n              state.inputAsset\n            ),\n            tokenOut: getRefTokenObject(\n              state.outputAssetTokenId,\n              state.outputAsset\n            ),\n            amountIn: state.inputAssetAmount ?? 0,\n            reloadPools: state.reloadPools,\n            setReloadPools: (value) =>\n              State.update({\n                reloadPools: value,\n              }),\n          }}\n        />\n      )}\n\n    {state.network === NETWORK_ETH &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/uni-v3-getEstimate\"\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n\n    {(state.network === NETWORK_ZKSYNC || state.network == NETWORK_AURORA) &&\n      state.inputAsset &&\n      state.outputAsset &&\n      state.inputAssetAmount &&\n      state.outputAsset.price &&\n      state.inputAsset.price &&\n      state.loadRes({\n        estimate: (\n          (parseFloat(state.inputAssetAmount) *\n            parseFloat(state.inputAsset.price)) /\n          parseFloat(state.outputAsset.price)\n        ).toFixed(18),\n      })}\n\n    <div class=\"swap-root\">\n      <div class=\"swap-main-container\">\n        <div class=\"swap-main-column\">\n          <div class=\"swap-page\">\n            {state.network && state.dexName && (\n              <span class=\"ps-2\" style={{ color: \"#7780a0\" }}>\n                {state.dexName} ({state.network})\n              </span>\n            )}\n            <div class=\"top-container\">\n              {assetContainer(\n                true,\n                state.inputAsset,\n                \"inputAssetAmount\",\n                () => {\n                  State.update({ inputAssetModalHidden: false });\n                }\n              )}\n            </div>\n            <div class=\"bottom-container\">\n              <div>\n                {assetContainer(\n                  fasle,\n                  state.outputAsset,\n                  \"outputAssetAmount\",\n                  () => {\n                    State.update({ outputAssetModalHidden: false });\n                  }\n                )}\n                {!!state.outputAssetAmount &&\n                  state.inputAssetTokenId !== state.outputAssetTokenId && (\n                    <div class=\"swap-price-container\">\n                      <div class=\"swap-price-block\">\n                        <div class=\"swap-price-grid\">\n                          <div class=\"swap-price-row\">\n                            <div class=\"swap-price-details-container\">\n                              <span>\n                                <div class=\"swap-price-details-icon\">\n                                  <div>\n                                    <svg\n                                      xmlns=\"http://www.w3.org/2000/svg\"\n                                      width=\"24\"\n                                      height=\"24\"\n                                      viewBox=\"0 0 24 24\"\n                                      fill=\"none\"\n                                      stroke=\"#98A1C0\"\n                                      stroke-width=\"2\"\n                                      stroke-linecap=\"round\"\n                                      stroke-linejoin=\"round\"\n                                      class=\"swap-price-details-svg\"\n                                    >\n                                      <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                                      <line\n                                        x1=\"12\"\n                                        y1=\"16\"\n                                        x2=\"12\"\n                                        y2=\"12\"\n                                      ></line>\n                                      <line\n                                        x1=\"12\"\n                                        y1=\"8\"\n                                        x2=\"12.01\"\n                                        y2=\"8\"\n                                      ></line>\n                                    </svg>\n                                  </div>\n                                </div>\n                              </span>\n                              <div class=\"swap-price-details-text\">\n                                <button class=\"swap-price-details-text-button\">\n                                  <div class=\"swap-price-details-rate\">\n                                    {Number(state.inputAssetAmount) === 0 ||\n                                    Number(state.outputAssetAmount) === 0\n                                      ? \" \"\n                                      : `1 ${\n                                          state.inputAsset.metadata.symbol\n                                        } \u2248 ${new Big(\n                                          state.outputAssetAmount ?? 0\n                                        )\n                                          .div(state.inputAssetAmount ?? 1)\n                                          .toFixed(4, 0)}\n                                        ${state.outputAsset.metadata.symbol}`}\n                                  </div>\n                                  <div class=\"swap-price-details-price\">\n                                    {Number(state.inputAssetAmount) === 0 ||\n                                    Number(state?.outputAsset?.price) === 0\n                                      ? \"\"\n                                      : `($${new Big(\n                                          state.outputAssetAmount ?? 0\n                                        )\n                                          .div(state.inputAssetAmount ?? 1)\n                                          .times(state?.outputAsset?.price ?? 1)\n                                          .toFixed(4)})`}\n                                  </div>\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n              </div>\n              <div class=\"swap-button-container\">\n                {state.approvalNeeded === true && (\n                  <button\n                    class={\"swap-button-enabled\"}\n                    onClick={() => {\n                      state.callTokenApproval(state, () => {\n                        onCallTxComple();\n                        tokenInApprovaleNeededCheck();\n                      });\n                    }}\n                  >\n                    <div class=\"swap-button-text\">\n                      Approve {state.inputAsset.metadata.symbol}\n                    </div>\n                  </button>\n                )}\n                {state.approvalNeeded !== true && (\n                  <button\n                    class={canSwap ? \"swap-button-enabled\" : \"swap-button\"}\n                    onClick={() => {\n                      if (canSwap) {\n                        if (state.network === NETWORK_NEAR) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_ZKSYNC) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_ETH) {\n                          state.callTx(state, onCallTxComple);\n                        }\n                      }\n                    }}\n                  >\n                    <div class=\"swap-button-text\">Swap</div>\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"pt-3 text-secondary opacity-25 text-center\">\n          <p>\n            Supported networks: {NETWORK_NEAR}, {NETWORK_ETH}, {NETWORK_ZKSYNC},{\" \"}\n            {NETWORK_AURORA}\n          </p>\n          {currentAccountId && <p>Current account: {currentAccountId}</p>}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ejj.near/widget/ swap", "__row_index": 1}