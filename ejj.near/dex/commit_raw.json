{"tx_hash": "4x7pGHxva16DNVdQ2RjcdQWLWp5Ga9oQFD7tRT76kw2P", "action_id_social": "8eonFfkj7tMsimifjeasBogXvjRk39vAXRPb5j2kHYae-0-widget", "block_id": 91858470, "block_timestamp": "2023-05-14T19:30:12.156Z", "signer_id": "ejj.near", "widget_name": "dex", "source_code": "const NETWORK_NEAR = \"NEAR\";\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_AURORA = \"AURORA\";\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst getEVMAccountId = () => {\n  if (ethers !== undefined) {\n    return Ethers.send(\"eth_requestAccounts\", [])[0] ?? \"\";\n  }\n  return \"\";\n};\n\nState.init({\n  loadComplete: false,\n  inputAssetModalHidden: true,\n  outputAssetModalHidden: true,\n  inputAssetAmount: 1,\n  outputAssetAmount: 0,\n  slippagetolerance: \"0.5\",\n  reloadPools: false,\n  estimate: {},\n  loadRes: (value) => {\n    if (value.estimate === \"NaN\") value.estimate = 0;\n    State.update({\n      estimate: value,\n      outputAssetAmount: value === null ? \"\" : value.estimate,\n    });\n  },\n});\n\nconst refReferralId = props.refReferralId ?? \"ukraine\";\nconst forceNetwork = props.forceNetwork;\n\n//\n//\n//\n// DEX DATA BELOW\n//\n\n// // SUBMIT TX EVENTS\n\n//\n//\n//\n// DEX DATA ABOVE\n//\n\n// LOAD STYLE\n\nconst css = fetch(\n  \"https://gist.githubusercontent.com/zavodil/5786d09502b0fbd042a920d804259130/raw/8dfc1154f6a9ebc5274463f60521385cc3728a19/swap.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      ${css}\n    `,\n  });\n}\n\nconst Theme = state.theme;\n\n// USER FUNCTIONS\n\nconst currentAccountId =\n  getEVMAccountId() !== \"\" ? getEVMAccountId() : context.accountId;\n\nconst rearrangeAssets = () => {\n  State.update({\n    inputAssetTokenId: state.outputAssetTokenId,\n    outputAssetTokenId: state.inputAssetTokenId,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    inputAssetAmount: state.outputAssetAmount,\n    outputAssetAmount: state.inputAssetAmount,\n    approvalNeeded: undefined,\n  });\n};\n\n// REUSABLE UI ELEMEETS\n\nconst assetContainer = (\n  isInputAsset,\n  assetData,\n  amountName,\n  assetNameOnClick\n) => {\n  if (!assetData) return;\n  const useSpacer = !!isInputAsset;\n\n  const assetContainerClass = useSpacer\n    ? \"asset-container-top\"\n    : \"asset-container-bottom\";\n  return (\n    <>\n      <div class={`${assetContainerClass} asset-container`}>\n        <div class=\"swap-currency-input\">\n          <div class=\"swap-currency-input-block\">\n            <div class=\"swap-currency-input-top\">\n              <input\n                class=\"input-asset-amount\"\n                nputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                pattern=\"^[0-9]*[.,]?[0-9]*$\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state[amountName]}\n              />\n              <button class=\"input-asset-token\" onClick={assetNameOnClick}>\n                <span class=\"input-asset-token-menu\">\n                  <div class=\"input-asset-token-name\">\n                    <div class=\"input-asset-token-icon\">\n                      <img\n                        alt={`${assetData.metadata.name} logo`}\n                        src={assetData.metadata.icon}\n                        class=\"input-asset-token-icon-img\"\n                      />\n                    </div>\n                    <span class=\"input-asset-token-ticker\">\n                      {assetData.metadata.symbol}\n                    </span>\n                  </div>\n                  <svg\n                    width=\"12\"\n                    height=\"7\"\n                    viewBox=\"0 0 12 7\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"input-asset-token-expand\"\n                  >\n                    <path\n                      d=\"M0.97168 1L6.20532 6L11.439 1\"\n                      stroke=\"#AEAEAE\"\n                    ></path>\n                  </svg>\n                </span>\n              </button>\n            </div>\n            <div class=\"input-asset-details-container\">\n              <div class=\"input-asset-details-row\">\n                <div class=\"input-asset-details-price-container\">\n                  <div class=\"input-asset-details-price\">\n                    <div>${assetData.price}</div>\n                  </div>\n                </div>\n                <div class=\"input-asset-details-balance-container\">\n                  <div class=\"input-asset-details-balance-text\">\n                    Balance: {assetData.balance_hr}\n                  </div>\n                  {isInputAsset &&\n                    Number(state.inputAssetAmount) !==\n                      Number(assetData.balance_hr_full) && (\n                      <button\n                        class=\"input-asset-details-balance-button\"\n                        onClick={() =>\n                          State.update({\n                            [amountName]: assetData.balance_hr_full ?? 0,\n                          })\n                        }\n                      >\n                        Max\n                      </button>\n                    )}\n                </div>\n              </div>\n            </div>\n            {false && <div class=\"swap-currency-input-bottom\"></div>}\n          </div>\n        </div>\n      </div>\n      {useSpacer ? spacerContainer : <></>}\n    </>\n  );\n};\n\nconst spacerContainer = (\n  <div class=\"spacer-container\">\n    <div class=\"spacer-block\" onClick={rearrangeAssets}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"#0D111C\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <polyline points=\"19 12 12 19 5 12\"></polyline>\n      </svg>\n    </div>\n  </div>\n);\n\n// SWAP METHODS\n\nconst getRefTokenObject = (tokenId, assetData) => {\n  return {\n    id: tokenId,\n    decimals: assetData.metadata.decimals,\n    symbol: assetData.metadata.symbol,\n  };\n};\n\nconst tokenInApprovaleNeededCheck = () => {\n  if (state.approvalNeeded === undefined) {\n    if (\n      getEVMAccountId() &&\n      state.erc20Abi !== undefined &&\n      state.routerContract !== undefined &&\n      [NETWORK_ETH, NETWORK_ZKSYNC, NETWORK_AURORA].includes(state.network)\n    ) {\n      const ifaceErc20 = new ethers.utils.Interface(state.erc20Abi);\n\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\n        \"allowance\",\n        [getEVMAccountId(), state.routerContract]\n      );\n\n      return Ethers.provider()\n        .call({\n          to: state.inputAssetTokenId,\n          data: encodedTokenAllowancesData,\n        })\n        .then((encodedTokenAllowanceHex) => {\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\n            \"allowance\",\n            encodedTokenAllowanceHex\n          );\n\n          if (tokenAllowance) {\n            State.update({\n              approvalNeeded: new Big(tokenAllowance).toFixed() == \"0\",\n            });\n          }\n        });\n    } else {\n      State.update({ approvalNeeded: false });\n    }\n  }\n};\n\nif (\n  state.network === NETWORK_ZKSYNC ||\n  state.network == NETWORK_ETH ||\n  state.network == NETWORK_AURORA\n) {\n  tokenInApprovaleNeededCheck();\n}\n\nconst canSwap =\n  state.network &&\n  Number(state.inputAsset.balance_hr_full) >= Number(state.inputAssetAmount) &&\n  Number(state.inputAssetAmount ?? 0) > 0;\n\nconst onCallTxComple = (tx) => {\n  console.log(\"transactionHash\", tx);\n  State.update({\n    outputAsset: undefined,\n  });\n};\n\n// OUTPUT\n\nif (forceNetwork && state.network && forceNetwork !== state.network) {\n  return (\n    <Theme>\n      <div class=\"swap-main-container pt-5\">\n        To proceed, kindly switch to {forceNetwork}.\n        {!state.sender && (\n          <div class=\"swap-button-container\">\n            <Web3Connect\n              className=\"swap-button-enabled swap-button-text p-2\"\n              connectLabel=\"Connect with Web3\"\n            />\n          </div>\n        )}\n      </div>\n    </Theme>\n  );\n}\n\nconst externalAppUrl = \"https://trisolaris.io\";\nreturn (\n  <Widget\n    src=\"wendersonpires.near/widget/NearSocialBridgeCore\"\n    props={{\n      externalAppUrl,\n      //   iframeHeight: \"100vh\",\n      //   path,\n      initialViewHeight: 1080,\n      //   initialPayload,\n      //   requestHandler,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ejj.near/widget/dex", "__row_index": 0}