{"tx_hash": "6SSH7H7RRt8U4vA9MAqhWM8kyhHSKA8pnYsSoDviNhTP", "action_id_social": "3jvgQQbaiQ8EMYMVUyiaWuWByqYjJb9qVhvmgAF3eUHB-0-widget", "block_id": 85155444, "block_timestamp": "2023-02-13 17:28:11.991", "signer_id": "events_v2.near", "widget_name": "components__search_bar", "source_code": "if (!state) {\n  const fields = Object.entries(props.fields || {}).map(([key, weight]) => {\n    return { key, weight };\n  });\n  State.init({ all: props.items || [], filtered: [], term: '', fields });\n  return props.__engine.loading();\n}\n\nfunction scoreWord(word, termWord, weight) {\n  let score = 1;\n\n  if (word === termWord) {\n    score += 1;\n  } else if (word.startsWith(termWord)) {\n    score += 0.5;\n  } else if (word.endsWith(termWord)) {\n    score += 0.33;\n  } else if (word.includes(termWord)) {\n    score += 0.2;\n  }\n\n  if (termWord === word) {\n    score += 1;\n  } else if (termWord.startsWith(word)) {\n    score += 0.5;\n  } else if (termWord.endsWith(word)) {\n    score += 0.33;\n  } else if (termWord.includes(word)) {\n    score += 0.2;\n  }\n\n  if (word.length === termWord.length) {\n    score += 0.05;\n  }\n\n  if (word.length > termWord.length) {\n    score += 0.025;\n  }\n\n  if (word.length < termWord.length) {\n    score -= 0.025;\n  }\n\n  return score * weight;\n}\n\nfunction scoreItem(item) {\n  const term = state.term.toLowerCase();\n\n  const termWords = term.split(/[,\\-_\\s]+/giu);\n\n  const itemScores = state.fields.map((field) => {\n    const fieldValue = item[field.key];\n\n    if (!fieldValue) {\n      return 0;\n    }\n\n    return fieldValue\n      .toLowerCase()\n      .split(/[,\\-_\\s]+/giu)\n      .map((word) => {\n        return termWords.reduce((acc, termWord) => {\n          return acc + scoreWord(word, termWord, field.weight);\n        }, 0);\n      })\n      .reduce((a, b) => a + b, 0);\n  });\n\n  return itemScores.reduce((a, b) => a + b, 0);\n}\n\nfunction buildSubset(item) {\n  return state.fields.reduce((acc, field) => {\n    const value = item[field.key];\n\n    if (!value) {\n      return acc;\n    }\n\n    acc[field.key] = value;\n    return acc;\n  }, {});\n}\n\nconst items = state.all\n  .map((item) => {\n    const subset = buildSubset(item);\n    const score = scoreItem(subset);\n\n    return {\n      item,\n      score,\n      subset,\n    };\n  })\n  .sort((a, b) => {\n    return b.score - a.score;\n  })\n  .filter((item) => {\n    return item.score > 0;\n  });\n\nconst hasChanged = JSON.stringify(items) !== JSON.stringify(state.items);\n\nif (hasChanged) {\n  props.onSearch(items);\n  State.update({ items });\n}\n\nconst Searchbar = styled.input`\n  width: auto;\n  outline: none;\n\n  border: INJECT.THEME.BORDER_DEFAULT;\n  font-size: INJECT.THEME.FONT_SIZE_DEFAULT;\n  border-radius: INJECT.THEME.BORDER_RADIUS_DEFAULT;\n  padding: INJECT.THEME.GRID_PAD;\n  margin-bottom: INJECT.THEME.GRID_PAD;\n\n  z-index: 1;\n\n  &:focus {\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n  }\n`;\n\nreturn (\n  <div style={{ position: 'relative' }}>\n    <Searchbar\n      onChange={(e) => {\n        const term = e.target.value;\n        State.update({ term });\n      }}\n      placeholder={props.placeholder || 'Search...'}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events_v2.near/widget/components__search_bar"}