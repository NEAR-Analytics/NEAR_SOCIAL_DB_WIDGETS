{"tx_hash": "3TCNVQo2waQ3HrHvFdSEuSTSofAqHiPqM7h6XvmKJ1vW", "action_id_social": "A4TLQDEhZvNWWmDBiatisnuHaw3rtXMxwuykKXrYGwhX-0-widget", "block_id": 85145635, "block_timestamp": "2023-02-13 14:17:25.733", "signer_id": "events_v2.near", "widget_name": "event_lists___form", "source_code": "const onSave = props.onSave;\nif (onSave === undefined || onSave === null) {\n  return props.__engine.helpers.propIsRequiredMessage('onSave');\n}\n\nconst model = props.model;\nconst buttonText = props.buttonText || 'Save';\n\nconst MIN_LENGTH_NAME = 4;\nconst MIN_LENGTH_DESCRIPTION = 10;\nconst MAX_LENGTH_NAME = 100;\nconst MAX_LENGTH_DESCRIPTION = 2000;\n\nconst DEFAULT_STATE = {\n  name: '',\n  description: '',\n\n  errors: {},\n};\n\nif (!state) {\n  if (model) {\n    State.init({\n      ...model,\n    });\n  } else {\n    State.init(DEFAULT_STATE);\n  }\n  return props.__engine.loading();\n}\n\nconst ValidationError = props.__engine.Components.ValidationError;\nconst FullActionButton = props.__engine.Components.FullActionButton;\nconst FormLabel = props.__engine.Components.FormLabel;\n\nfunction addError(key, message) {\n  const oldErrors = { ...state.errors };\n  const oldKeyErrors = oldErrors[key] || [];\n\n  const newKeyErrors = oldKeyErrors.includes(message)\n    ? oldKeyErrors\n    : [...oldKeyErrors, message];\n  const newErrors = { ...oldErrors, [key]: newKeyErrors };\n\n  State.update({\n    errors: newErrors,\n  });\n}\n\nfunction clearErrors() {\n  State.update({ errors: {} });\n}\n\nfunction getErrors(key) {\n  const errors = state.errors[key];\n  const hasErrors = errors && errors.length > 0;\n  if (hasErrors && errors.length === 1) {\n    return errors[0];\n  }\n\n  if (!hasErrors) {\n    return null;\n  }\n\n  return (\n    <ul>\n      {errors.map((message, index) => (\n        <li key={index}>{message}</li>\n      ))}\n    </ul>\n  );\n}\n\nfunction assertCondition(valid, condition, key, message) {\n  if (!condition) {\n    addError(key, message);\n    return false;\n  }\n  return valid;\n}\n\nfunction sanitize(data) {\n  const { name, description } = data;\n  return {\n    name,\n    description,\n  };\n}\n\nfunction validate(data) {\n  let valid = true;\n\n  const { name, description } = data;\n\n  clearErrors();\n\n  valid = assertCondition(\n    valid,\n    name.length >= MIN_LENGTH_NAME && name.length < MAX_LENGTH_NAME,\n    'name',\n    `Name must be between ${MIN_LENGTH_NAME} and ${MAX_LENGTH_NAME} characters long. Currently: ${name.length} characters.`\n  );\n\n  valid = assertCondition(\n    valid,\n    description.length >= MIN_LENGTH_DESCRIPTION &&\n      description.length < MAX_LENGTH_DESCRIPTION,\n    'description',\n    `Description must be between ${MIN_LENGTH_DESCRIPTION} and ${MAX_LENGTH_DESCRIPTION} characters long. Currently: ${description.length} characters.`\n  );\n\n  return valid;\n}\n\nfunction sanitizeValidateAndCall(data) {\n  const sanitized = sanitize(data);\n  const valid = validate(sanitized);\n  if (valid && onSave) {\n    onSave(sanitized);\n  }\n}\n\nfunction sanitizeAndValidate(data) {\n  const sanitized = sanitize(data);\n  return validate(sanitized);\n}\n\nconst updateState = (event, key) => {\n  State.update({ [key]: event.target.value });\n  sanitizeAndValidate({ ...state, [key]: event.target.value });\n};\n\nreturn (\n  <div\n    style={{\n      width: '100%',\n      padding: '1rem',\n    }}\n  >\n    <div className=\"mt-3\">\n      <FormLabel>Name</FormLabel>\n      <input\n        type=\"text\"\n        placeholder=\"Name\"\n        value={state.name || ''}\n        onChange={(event) => {\n          updateState(event, 'name');\n        }}\n      />\n    </div>\n    <ValidationError>{getErrors('name')}</ValidationError>\n\n    <div className=\"mt-3\">\n      <FormLabel>Description</FormLabel>\n      <textarea\n        className=\"w-100\"\n        placeholder=\"Description\"\n        value={state.description}\n        onChange={(event) => {\n          updateState(event, 'description');\n        }}\n        rows={9}\n      />\n    </div>\n    <ValidationError>{getErrors('description')}</ValidationError>\n\n    <br />\n    <FullActionButton\n      className=\"mt-3\"\n      onClick={() => {\n        sanitizeValidateAndCall(state);\n      }}\n    >\n      {buttonText}\n    </FullActionButton>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events_v2.near/widget/event_lists___form"}