{"tx_hash": "Bb7qJZdeatyxnVJDuEPToBXoTC7KYZz1FxKkqXv4TJ6o", "action_id_social": "CmiP3HMJXin56vWow4fUJ94wgdUS9DW3o1eWesratbGM-0-widget", "block_id": 95073928, "block_timestamp": "2023-06-26T12:25:06.682Z", "signer_id": "ciocan.near", "widget_name": "zkevm-bridge-ui", "source_code": "const Layout = styled.div`\n  position: relative;\n  width: 314px;\n  min-height: 412px;\n  background-color: #151718;\n  border-radius: 14px;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  .container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 0;\n  }\n\n  .container-button {\n    position: relative;\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 10px;\n    line-height: 12px;\n    cursor: pointer;\n  }\n\n  .separator {\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    margin-left: 8px;\n    margin-right: 8px;\n  }\n\n  .info {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 400;\n    font-size: 10px;\n    line-height: 12px;\n    list-style: none;\n    padding: 0 8px 0 8px;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    color: #fff;\n\n    li {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .value {\n      color: #BA90FF;\n      font-weight: 600;\n    }\n  }\n`;\n\nconst ContainerNetwork = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: 16px;\n\n  .label {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 10px;\n    color: #fff;\n  }\n`;\n\nconst NetworkSelectorButton = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 4px 8px 4px 4px;\n  gap: 4px;\n\n  height: 24px;\n  outline: none;\n  border: none;\n  position: relative;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n`;\n\nconst NetworkList = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 12px;\n  width: 145px;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    border-radius: 12px;\n  }\n\n  li {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 4px 8px 4px 4px;\n    gap: 4px;\n    flex: 1;\n    width: 100%;\n    color: #fff;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n`;\n\nconst caretSvg = (\n  <svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\">\n    <path\n      d=\"M4.99998 1L2.99999 3L1 1\"\n      stroke=\"white\"\n      stroke-width=\"1.21738\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n\nconst TokenContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  gap: 12px;\n  position: relative;\n\n  width: 100%;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  h3 {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 10px;\n    color: rgba(255, 255, 255, 0.6);\n  }\n\n  .token-container {\n    display: flex;\n    flex-direction: column;\n    gap: 0;\n  }\n\n  .input-container {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    justify-content: flex-end;\n    flex: 1;\n\n    .usd-value {\n      text-align: right;\n    }\n  }\n`;\n\nconst TokenSelector = styled.button`\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 19px;\n  color: #FFFFFF;\n  background: none;\n  border: none;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Input = styled.input`\n  background: none;\n  color: #fff;\n  text-align: right;\n  border: none;\n  outline: none;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 19px;\n  width: 100%;\n`;\n\nconst ToNetworkContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 4px 8px 4px 4px;\n  gap: 4px;\n\n  height: 24px;\n  outline: none;\n  border: none;\n  position: relative;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n`;\n\nconst ActionButton = styled.button`\n  background: #8247E5;\n  border-radius: 4px;\n  border: 0;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  color: #fff;\n  padding: 12px;\n`;\n\nconst Alert = styled.div`\n  position: absolute;\n  color: red;\n  background: #fff;\n  z-index: 20;\n  padding: 8px;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n`;\n\nconst Dialog = styled.div`\n  position: absolute;\n  right: 32px;\n  left: 32px;\n  top: 25%;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n  border-radius: 12px;\n  padding: 16px; 8px;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n  }\n\n  li {\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n    color: #fff;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n\n  .token {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n  }\n\n`;\n\nconst tokens = props.tokens ?? [\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 5,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n];\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst networks = {\n  1: \"Ethereum Mainnet\",\n  5: \"Ethereum Goerli\",\n  1101: \"Polygon zkEvm\",\n  1442: \"Polygon zkEvm Goerli\",\n};\n\nconst coinsMap = {\n  ethereum: \"ETH\",\n  \"usd-coin\": \"USDC\",\n  \"matic-network\": \"MATIC\",\n  dai: \"DAI\",\n  uniswap: \"UNI\",\n};\n\nState.init({\n  selectedToken: \"ETH\",\n  selectedNetwork: \"ethereum\",\n  isNetworkSelectOpen: false,\n  isTokenDialogOpen: false,\n  amount: 0,\n  balances: {},\n  prices: {},\n  isToastOpen: false,\n});\n\nconst {\n  isNetworkSelectOpen,\n  selectedNetwork,\n  chainId,\n  selectedToken,\n  isTokenDialogOpen,\n  amount,\n  balances,\n  prices,\n} = state;\n\nconst isTestnet = chainId === 5 || chainId === 1442;\nconst isMainnet = chainId === 1 || chainId === 1101;\n\nconst switchNetwork = (chainId) => {\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nconst coins = Object.keys(coinsMap);\nconst pricesUrl = `https://api.coingecko.com/api/v3/simple/price?ids=${coins.join(\n  \",\"\n)}&vs_currencies=usd`;\n\nif (!prices[selectedToken]) {\n  asyncFetch(pricesUrl).then((res) => {\n    if (!res.ok) return;\n    const prices = {};\n    coins.forEach((coin) => (prices[coinsMap[coin]] = res.body[coin].usd));\n    State.update({ prices });\n  });\n}\n\nconst updateBalance = (token) => {\n  const { address, decimals, symbol } = token;\n\n  // if (state.balances[symbol]) {\n  //   return;\n  // }\n\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(sender)\n      .then((balanceBig) => {\n        const adjustedBalance = ethers.utils.formatEther(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: Number(adjustedBalance).toFixed(4),\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract.balanceOf(sender).then((balanceBig) => {\n      const adjustedBalance = ethers.utils.formatUnits(balanceBig, decimals);\n      State.update({\n        balances: {\n          ...state.balances,\n          [symbol]: Number(Number(adjustedBalance).toFixed(4)),\n        },\n      });\n    });\n  }\n};\n\ntokens.filter((t) => t.chainId === chainId).map(updateBalance);\n\nconst changeNetwork = (network) => {\n  console.log(network);\n  State.update({ isNetworkSelectOpen: false, selectedNetwork: network });\n  if (isTestnet) {\n    if (network === \"polygon\") {\n      switchNetwork(1442);\n    } else {\n      switchNetwork(5);\n    }\n  } else {\n    if (network === \"polygon\") {\n      switchNetwork(1101);\n    } else {\n      switchNetwork(1);\n    }\n  }\n};\n\nconst openNetworkList = () => {\n  State.update({ isNetworkSelectOpen: true, isTokenDialogOpen: false });\n};\n\nconst isCorrectNetwork = Object.keys(networks)\n  .map((n) => Number(n))\n  .includes(chainId);\n\nconst getFromNetworkLabel = () => {\n  switch (selectedNetwork) {\n    case \"ethereum\":\n      return isMainnet ? networks[1] : networks[5];\n    case \"polygon\":\n      return isMainnet ? networks[1101] : networks[1442];\n    default:\n      return \"unknown\";\n  }\n};\n\nconst getToNetworkLabel = () => {\n  switch (selectedNetwork) {\n    case \"ethereum\":\n      return isMainnet ? networks[1101] : networks[1442];\n    case \"polygon\":\n      return isMainnet ? networks[1] : networks[5];\n    default:\n      return \"unknown\";\n  }\n};\n\nconst getToken = (tokenSymbol) =>\n  tokens\n    .filter(\n      (t) =>\n        t.chainId ===\n        (isMainnet\n          ? selectedNetwork === \"ethereum\"\n            ? 1\n            : 1101\n          : selectedNetwork === \"ethereum\"\n          ? 5\n          : 1442)\n    )\n    .find((t) => t.symbol === tokenSymbol);\n\nconst updateToken = (tokenSymbol) => {\n  State.update({ selectedToken: tokenSymbol, isTokenDialogOpen: false });\n\n  const { onUpdateToken } = props;\n  if (onUpdateToken) {\n    const token = getToken(tokenSymbol);\n    onUpdateToken({ amount, token, network: selectedNetwork });\n  }\n};\n\nconst openTokenDialog = () => {\n  State.update({ isTokenDialogOpen: true });\n};\n\nconst changeAmount = (e) => {\n  const amount = Number(e.target.value);\n  State.update({ amount });\n\n  const { onChangeAmount } = props;\n  if (onChangeAmount) {\n    const token = getToken(selectedToken);\n    onChangeAmount({ amount, token, network: selectedNetwork });\n  }\n};\n\nconst onOpenChange = (v) => {\n  State.update({\n    isToastOpen: false,\n  });\n};\n\nconst handleConfirm = () => {\n  console.log(state);\n  const isValidAmount = amount > 0 && amount < balances[selectedToken];\n\n  if (!isValidAmount) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid amount\",\n      description: \"Amount should be less than token balance\",\n    });\n    return;\n  }\n\n  const isPolygonNetwork = chainId === 1101 || chainId === 1442;\n  if (selectedNetwork === \"ethereum\" && isPolygonNetwork) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid network\",\n      description: \"Please switch to polygon zkevm network\",\n    });\n    return;\n  }\n\n  if (selectedNetwork === \"polygon\" && !isPolygonNetwork) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid network\",\n      description: \"Please switch to ethereum network\",\n    });\n    return;\n  }\n\n  const { onConfirm } = props;\n  if (onConfirm) {\n    const token = getToken(selectedToken);\n    onConfirm({ amount, token, network: selectedNetwork });\n  }\n};\n\nconst networkList = isMainnet ? [1, 1101] : [5, 1442];\nconst token = tokens.find((t) => t.symbol === selectedToken);\n\nconst { isToastOpen, variant, title, description } = state;\n\nconsole.log(state);\n\nreturn (\n  <Layout>\n    <div class=\"container\">\n      {!isCorrectNetwork && (\n        <Alert>Please switch to Ethereum or Polygon zkEVM</Alert>\n      )}\n      <ContainerNetwork>\n        <span class=\"label\">FROM</span>\n        <div class=\"container-button\">\n          <NetworkSelectorButton onClick={openNetworkList}>\n            {selectedNetwork === \"ethereum\" ? (\n              <img\n                style={{ width: \"16px\" }}\n                src=\"https://assets.coingecko.com/coins/images/279/small/ethereum.png\"\n              />\n            ) : (\n              <img\n                style={{ width: \"16px\" }}\n                src=\"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\"\n              />\n            )}\n            <span>{getFromNetworkLabel()}</span>\n            {caretSvg}\n          </NetworkSelectorButton>\n          {isNetworkSelectOpen && (\n            <NetworkList>\n              <ul>\n                <li onClick={(e) => changeNetwork(\"ethereum\")}>\n                  <img\n                    style={{ width: \"16px\" }}\n                    src=\"https://assets.coingecko.com/coins/images/279/small/ethereum.png\"\n                  />\n                  <span>{networks[networkList[0]]}</span>\n                </li>\n                <li onClick={(e) => changeNetwork(\"polygon\")}>\n                  <img\n                    style={{ width: \"16px\" }}\n                    src=\"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\"\n                  />\n                  <span>{networks[networkList[1]]}</span>\n                </li>\n              </ul>\n            </NetworkList>\n          )}\n        </div>\n      </ContainerNetwork>\n      <TokenContainer>\n        <img style={{ width: \"32px\" }} src={token?.logoURI} />\n        <div class=\"token-container\">\n          <h3>SEND -&gt;</h3>\n          <TokenSelector disabled={!isCorrectNetwork} onClick={openTokenDialog}>\n            <span>{selectedToken}</span>\n            {caretSvg}\n          </TokenSelector>\n        </div>\n        <div class=\"input-container\">\n          <Input placeholder=\"0\" type=\"number\" onChange={changeAmount} />\n          <span class=\"usd-value\">${prices[selectedToken] * amount}</span>\n        </div>\n      </TokenContainer>\n    </div>\n    <div class=\"container\">\n      <ContainerNetwork>\n        <span class=\"label\">TO</span>\n        <ToNetworkContainer>\n          {selectedNetwork === \"polygon\" ? (\n            <img\n              style={{ width: \"16px\" }}\n              src=\"https://assets.coingecko.com/coins/images/279/small/ethereum.png\"\n            />\n          ) : (\n            <img\n              style={{ width: \"16px\" }}\n              src=\"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\"\n            />\n          )}\n          <span>{getToNetworkLabel()}</span>\n        </ToNetworkContainer>\n      </ContainerNetwork>\n      <TokenContainer>\n        <img style={{ width: \"32px\" }} src={token?.logoURI} />\n        <div class=\"token-container\">\n          <h3>-&gt; RECEIVE</h3>\n          <TokenSelector>\n            <span>{selectedToken}</span>\n          </TokenSelector>\n        </div>\n        <div class=\"input-container\">\n          <Input type=\"number\" readOnly value={amount} />\n          <span class=\"usd-value\">${prices[selectedToken] * amount}</span>\n        </div>\n      </TokenContainer>\n    </div>\n    <div class=\"separator\" />\n    <ul class=\"info\">\n      <li>\n        <span>Rate</span>\n        <span class=\"value\">\n          1 {selectedToken} = ${prices[selectedToken]}\n        </span>\n      </li>\n    </ul>\n    <ActionButton onClick={handleConfirm} disabled={!isCorrectNetwork}>\n      Confirm\n    </ActionButton>\n    {isTokenDialogOpen && (\n      <Dialog>\n        <ul>\n          {tokens\n            .filter((t) => t.chainId === chainId)\n            .map((token) => {\n              const { symbol, logoURI } = token;\n              return (\n                <li key={symbol} onClick={() => updateToken(symbol)}>\n                  <div class=\"token\">\n                    <img style={{ width: \"16px\" }} src={logoURI} />\n                    <span>{symbol}</span>\n                  </div>\n                  <span>{state.balances[symbol] ?? \"-\"}</span>\n                </li>\n              );\n            })}\n        </ul>\n      </Dialog>\n    )}\n    <Widget\n      src=\"ciocan.near/widget/toast\"\n      props={{ open: isToastOpen, variant, title, description, onOpenChange }}\n    />\n  </Layout>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/zkevm-bridge-ui", "__row_index": 2}