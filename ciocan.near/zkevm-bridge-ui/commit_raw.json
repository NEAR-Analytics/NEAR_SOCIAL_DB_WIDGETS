{"tx_hash": "BJDD7DDj6cZisShkJ1qxUio7MPTCqgmnJjtRsLeUkEVa", "action_id_social": "HvNB8f7Vn3yo7duUbmXnTueg11vt5Kk2UUvp6zPn18fo-0-widget", "block_id": 93212966, "block_timestamp": "2023-06-01T14:05:44.097Z", "signer_id": "ciocan.near", "widget_name": "zkevm-bridge-ui", "source_code": "const Layout = styled.div`\n  width: 314px;\n  min-height: 412px;\n  background-color: #151718;\n  border-radius: 14px;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  .container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 0;\n  }\n\n  .container-button {\n    position: relative;\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 10px;\n    line-height: 12px;\n    cursor: pointer;\n  }\n\n  .separator {\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    margin-left: 8px;\n    margin-right: 8px;\n  }\n\n  .info {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 400;\n    font-size: 10px;\n    line-height: 12px;\n    list-style: none;\n    padding: 0 8px 0 8px;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n\n    li {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .value {\n      color: #BA90FF;\n      font-weight: 600;\n    }\n  }\n`;\n\nconst ContainerNetwork = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: 16px;\n\n  .label {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 10px;\n  }\n`;\n\nconst Icon = styled.span`\n  height: ${(props) => (props.size ? props.size : \"16px\")};\n  width: ${(props) => (props.size ? props.size : \"16px\")};\n  background: #fff;\n  border-radius: 16px;\n  display: block;\n`;\n\nconst NetworkSelectorButton = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 4px 8px 4px 4px;\n  gap: 4px;\n\n  height: 24px;\n  outline: none;\n  border: none;\n  position: relative;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n`;\n\nconst NetworkList = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 12px;\n  width: 145px;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    border-radius: 12px;\n  }\n\n  li {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 4px 8px 4px 4px;\n    gap: 4px;\n    flex: 1;\n    width: 100%;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n`;\n\nconst caretSvg = (\n  <svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\">\n    <path\n      d=\"M4.99998 1L2.99999 3L1 1\"\n      stroke=\"white\"\n      stroke-width=\"1.21738\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n\nconst TokenContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  gap: 12px;\n  position: relative;\n\n  width: 100%;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  h3 {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 10px;\n    color: rgba(255, 255, 255, 0.6);\n  }\n\n  .token-container {\n    display: flex;\n    flex-direction: column;\n    gap: 0;\n  }\n\n  .input-container {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    justify-content: flex-end;\n    flex: 1;\n\n    .usd-value {\n      text-align: right;\n    }\n  }\n`;\n\nconst TokenSelector = styled.button`\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 19px;\n    color: #FFFFFF;\n    background: none;\n    border: none;\n    padding: 0;\n    margin: 0;\n`;\n\nconst Input = styled.input`\n  background: none;\n  color: #fff;\n  text-align: right;\n  border: none;\n  outline: none;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 19px;\n  width: 100%;\n`;\n\nconst ToNetworkContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 4px 8px 4px 4px;\n  gap: 4px;\n\n  height: 24px;\n  outline: none;\n  border: none;\n  position: relative;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n`;\n\nconst ActionButton = styled.button`\n  background: #8247E5;\n  border-radius: 4px;\n  border: 0;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  color: #fff;\n  padding: 12px;\n`;\n\nconst Alert = styled.div`\n  position: absolute;\n  color: red;\n  background: #fff;\n  z-index: 20;\n  padding: 8px;\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n`;\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst networks = {\n  1: \"Ethereum Mainnet\",\n  5: \"Ethereum Goerli\",\n  1101: \"Polygon zkEvm\",\n  1442: \"Polygon zkEvm Goerli\",\n};\n\nState.init({\n  selectedNetwork: \"ethereum\",\n  isNetworkSelectOpen: false,\n});\n\nconst { isNetworkSelectOpen, selectedNetwork, chainId } = state;\n\nconst changeNetwork = (network) => {\n  State.update({ isNetworkSelectOpen: false, selectedNetwork: network });\n};\n\nconst openNetworkList = () => {\n  State.update({ isNetworkSelectOpen: true });\n};\n\nconst isMainnet = chainId === 1 || chainId === 1101;\nconst inputsCorrectNetwork = Object.keys(networks)\n  .map((n) => Number(n))\n  .includes(chainId);\n\nconst getFromNetworkLabel = () => {\n  switch (selectedNetwork) {\n    case \"ethereum\":\n      return isMainnet ? networks[1] : networks[5];\n    case \"polygon\":\n      return isMainnet ? networks[1101] : networks[1442];\n    default:\n      return \"unknown\";\n  }\n};\n\nconst getToNetworkLabel = () => {\n  switch (selectedNetwork) {\n    case \"ethereum\":\n      return isMainnet ? networks[1101] : networks[1442];\n    case \"polygon\":\n      return isMainnet ? networks[1] : networks[5];\n    default:\n      return \"unknown\";\n  }\n};\n\nconst networkList = isMainnet ? [1, 1101] : [5, 1442];\n\nconsole.log(state, isMainnet, inputsCorrectNetwork);\n\nreturn (\n  <Layout>\n    <div class=\"container\">\n      {!inputsCorrectNetwork && (\n        <Alert>Please switch to Ethereum or Polygon zkEVM</Alert>\n      )}\n      <ContainerNetwork>\n        <span class=\"label\">FROM</span>\n        <div class=\"container-button\">\n          <NetworkSelectorButton onClick={openNetworkList}>\n            <Icon />\n            <span>{getFromNetworkLabel()}</span>\n            {caretSvg}\n          </NetworkSelectorButton>\n          {isNetworkSelectOpen && (\n            <NetworkList>\n              <ul>\n                <li onClick={(e) => changeNetwork(\"ethereum\")}>\n                  <Icon />\n                  <span>{networks[networkList[0]]}</span>\n                </li>\n                <li onClick={(e) => changeNetwork(\"polygon\")}>\n                  <Icon />\n                  <span>{networks[networkList[1]]}</span>\n                </li>\n              </ul>\n            </NetworkList>\n          )}\n        </div>\n      </ContainerNetwork>\n      <TokenContainer>\n        <Icon size=\"32px\" />\n        <div class=\"token-container\">\n          <h3>SEND -&gt;</h3>\n          <TokenSelector>\n            <span>USDC</span>\n            {caretSvg}\n          </TokenSelector>\n        </div>\n        <div class=\"input-container\">\n          <Input placeholder=\"0\" type=\"number\" />\n          <span class=\"usd-value\">$0</span>\n        </div>\n      </TokenContainer>\n    </div>\n    <div class=\"container\">\n      <ContainerNetwork>\n        <span class=\"label\">TO</span>\n        <ToNetworkContainer>\n          <Icon />\n          <span>{getToNetworkLabel()}</span>\n        </ToNetworkContainer>\n      </ContainerNetwork>\n      <TokenContainer>\n        <Icon size=\"32px\" />\n        <div class=\"token-container\">\n          <h3>-&gt; RECEIVE</h3>\n          <TokenSelector>\n            <span>USDC</span>\n          </TokenSelector>\n        </div>\n        <div class=\"input-container\">\n          <Input placeholder=\"0\" type=\"number\" readOnly value={0} />\n          <span class=\"usd-value\">$0</span>\n        </div>\n      </TokenContainer>\n    </div>\n    <div class=\"separator\" />\n    <ul class=\"info\">\n      <li>\n        <span>Rate</span>\n        <span class=\"value\">-</span>\n      </li>\n      <li>\n        <span>Network fee</span>\n        <span class=\"value\">-</span>\n      </li>\n      <li>\n        <span>Polygon zkEVM fee</span>\n        <span class=\"value\">-</span>\n      </li>\n    </ul>\n    <ActionButton>Confirm</ActionButton>\n  </Layout>\n);\n", "metadata": {"tags": {"ethdenver2023": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/zkevm-bridge-ui", "__row_index": 15}