{"tx_hash": "5V5nvtu9Zry7dj4JpiHjd2GPGASiC6t4VBKqx2DCNcCw", "action_id_social": "F6JsfifFRkAvrzJA7CqcHDAAynRVFzB54s4PdkcEJuJG-0-widget", "block_id": 88742052, "block_timestamp": "2023-04-03 18:27:11.844", "signer_id": "ciocan.near", "widget_name": "ape-stake", "source_code": "console.log(\"state\", state);\n\nconst tokenDecimals = 18;\n\nconst chainId = state.chainId || 5;\n\nEthers.provider()\n  .getNetwork()\n  .then(({ chainId }) => {\n    State.update({ chainId });\n  });\n\nconst chainData = {\n  // mainnet\n  1: {\n    stakingContractAddress: \"0x5954aB967Bc958940b7EB73ee84797Dc8a2AFbb9\",\n    coinContractAddress: \"0x4d224452801aced8b2f0aebe155379bb5d594381\",\n  },\n  // testnet (goerli)\n  5: {\n    stakingContractAddress: \"0xeF37717B1807a253c6D140Aca0141404D23c26D4\",\n    coinContractAddress: \"0x328507DC29C95c170B56a1b3A758eB7a9E73455c\",\n  },\n};\n\nconst coinContractAddress = chainData[chainId].coinContractAddress;\nconst stakingContractAddress = chainData[chainId].stakingContractAddress;\n\nconst coinContractAbi = [\n  // Read-Only Functions\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n  \"function symbol() view returns (string)\",\n  \"function allowance(address owner, address spender) view returns (uint256)\",\n  // Write Functions\n  \"function approve(address spender, uint256 amount) nonpayable returns (bool)\",\n];\n\n// FETCH APESTAKE ABI\nconst apeStakingAbi = fetch(\n  \"https://raw.githubusercontent.com/apestakeui/ui/main/src/ApeCoinStakingAbi.json\"\n);\nif (!apeStakingAbi.ok) {\n  return \"Loading\";\n}\n\nconst stakingContractAbi = JSON.parse(apeStakingAbi.body).abi;\n\nconst ifaceCoin = new ethers.utils.Interface(coinContractAbi);\nconst ifaceStaking = new ethers.utils.Interface(stakingContractAbi);\n\nconst getApeBalance = (receiver) => {\n  const encodedData = ifaceCoin.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: coinContractAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = ifaceCoin.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getStakedTotal = (receiver) => {\n  const encodedData = ifaceStaking.encodeFunctionData(\"stakedTotal\", [\n    receiver,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: stakingContractAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = ifaceStaking.decodeFunctionResult(\n        \"stakedTotal\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\n// DETECT SENDER\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({\n        balance: Big(balance).div(Big(10).pow(tokenDecimals)).toFixed(2),\n      });\n    });\n}\n\n// FETCH SENDER APE BALANCE\nif (state.apeBalance === undefined && state.sender) {\n  getApeBalance(state.sender).then((apeBalance) => {\n    State.update({ apeBalance });\n  });\n}\n\n// FETCH ALLOWANCE\nconst getTokenAllowance = (receiver) => {\n  const encodedData = ifaceCoin.encodeFunctionData(\"allowance\", [\n    receiver,\n    stakingContractAddress,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: coinContractAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = ifaceCoin.decodeFunctionResult(\n        \"allowance\",\n        rawBalance\n      )[0];\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2);\n    });\n};\n\n// FETCH ALLOWANCE\nif (state.sender && state.allowance == undefined) {\n  getTokenAllowance(state.sender).then((allowance) => {\n    State.update({ allowance });\n  });\n}\n\n// FETCH TOTAL STAKED\nif (state.stakedTotal === undefined && state.sender) {\n  getStakedTotal(state.sender).then((stakedTotal) => {\n    State.update({ stakedTotal });\n  });\n}\n\n// APPROVE TOKEN\nconst approveToken = () => {\n  const erc20 = new ethers.Contract(\n    coinContractAddress,\n    ifaceCoin,\n    Ethers.provider().getSigner()\n  );\n\n  const allowanceBig = ethers.utils.parseUnits(\n    state.allowanceUpdate,\n    tokenDecimals\n  );\n\n  erc20\n    .approve(stakingContractAddress, allowanceBig)\n    .then((transactionHash) => transactionHash.wait())\n    .then((receipt) => {\n      console.log(\"receipt\", receipt);\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n};\n\nconst handleStake = () => {\n  if (!Number(state.allowance)) {\n    if (!state.allowanceUpdate) return;\n    approveToken();\n    return;\n  }\n\n  if (!state.amount) return;\n\n  const amountBig = ethers.utils.parseUnits(state.amount, tokenDecimals);\n  const signer = Ethers.provider().getSigner();\n\n  const apeStakeContract = new ethers.Contract(\n    stakingContractAddress,\n    ifaceStaking,\n    signer\n  );\n\n  apeStakeContract.depositSelfApeCoin(amountBig, { gasLimit: 3e6 });\n};\n\nconst handleValueChange = (e) => {\n  State.update({ amount: e.target.value });\n};\n\nconst handleAllowanceChange = (e) => {\n  State.update({ allowanceUpdate: e.target.value });\n};\n\nreturn (\n  <div className=\"container mt-4\" style={{ maxWidth: \"600px\" }}>\n    <div className=\"row\">\n      <div className=\"col\">\n        <div>\n          <div className=\"container border py-2 mb-3\">\n            <div>APE: {state.apeBalance}</div>\n            <div>Staked total: {state.stakedTotal}</div>\n          </div>\n          <div className=\"container border py-4 mb-3 d-grid gap-3\">\n            <input type=\"number\" onChange={handleValueChange} />\n            {!Number(state.allowance) && (\n              <div class=\"alert alert-warning\" role=\"alert\">\n                <h6>Insufficient allowance</h6>\n                <input onChange={handleAllowanceChange} />\n              </div>\n            )}\n            <button onClick={handleStake}>Stake APECOIN</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col\">\n        <Web3Connect className=\"w3\" connectLabel=\"Connect with Web3\" />\n      </div>\n    </div>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/ape-stake", "metadata.tags.ethdenver2023": NaN, "metadata": NaN}