{"tx_hash": "CkEAKppHtR2iVJvBbf4KMWfbmWNrJxhggmoRLNz3fTD8", "action_id_social": "8Nq8mMgLEHQgGicdwypCTbWqpsPQenUup3F71jvVygqj-0-widget", "block_id": 88726019, "block_timestamp": "2023-04-03 13:27:25.579", "signer_id": "ciocan.near", "widget_name": "ape-stake", "source_code": "// console.log(\"state\", state);\n\nconst tokenDecimals = 18;\n\nconst chainId = state.chainId || 5;\n\nEthers.provider()\n  .getNetwork()\n  .then(({ chainId }) => {\n    State.update({ chainId });\n  });\n\nconst chainData = {\n  // mainnet\n  1: {\n    stakingContractAddress: \"0x5954aB967Bc958940b7EB73ee84797Dc8a2AFbb9\",\n    coinContractAddress: \"0x4d224452801aced8b2f0aebe155379bb5d594381\",\n  },\n  // testnet (goerli)\n  5: {\n    stakingContractAddress: \"0xeF37717B1807a253c6D140Aca0141404D23c26D4\",\n    coinContractAddress: \"0x328507DC29C95c170B56a1b3A758eB7a9E73455c\",\n  },\n};\n\nconst coinContractAddress = chainData[chainId].coinContractAddress;\nconst stakingContractAddress = chainData[chainId].stakingContractAddress;\n\nconst coinContractAbi = [\n  // Read-Only Functions\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n  \"function symbol() view returns (string)\",\n  \"function allowance(address owner, address spender) view returns (uint256)\",\n  // Write Functions\n  \"function approve(address spender, uint256 amount) nonpayable returns (bool)\",\n];\n\n// FETCH APESTAKE ABI\nconst apeStakingAbi = fetch(\n  \"https://raw.githubusercontent.com/apestakeui/ui/main/src/ApeCoinStakingAbi.json\"\n);\nif (!apeStakingAbi.ok) {\n  return \"Loading\";\n}\n\nconst stakingContractAbi = JSON.parse(apeStakingAbi.body).abi;\n\nconst ifaceCoin = new ethers.utils.Interface(coinContractAbi);\nconst ifaceStaking = new ethers.utils.Interface(stakingContractAbi);\n\nconst getApeBalance = (receiver) => {\n  const encodedData = ifaceCoin.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: coinContractAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = ifaceCoin.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getStakedTotal = (receiver) => {\n  const encodedData = ifaceStaking.encodeFunctionData(\"stakedTotal\", [\n    receiver,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: stakingContractAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = ifaceStaking.decodeFunctionResult(\n        \"stakedTotal\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\n// DETECT SENDER\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({\n        balance: Big(balance).div(Big(10).pow(tokenDecimals)).toFixed(2),\n      });\n    });\n}\n\n// FETCH SENDER APE BALANCE\nif (state.apeBalance === undefined && state.sender) {\n  getApeBalance(state.sender).then((apeBalance) => {\n    State.update({ apeBalance });\n  });\n}\n\n// FETCH TOTAL STAKED\nif (state.stakedTotal === undefined && state.sender) {\n  getStakedTotal(state.sender).then((stakedTotal) => {\n    State.update({ stakedTotal });\n  });\n}\n\nconst handleStake = () => {\n  console.log(\"handleStake\", state.amount);\n  if (!state.amount) return;\n\n  const amountBig = ethers.utils.parseUnits(state.amount, tokenDecimals);\n\n  const apeStakeContract = new ethers.Contract(\n    stakingContractAddress,\n    ifaceStaking,\n    Ethers.provider().getSigner()\n  );\n\n  apeStakeContract.depositSelfApeCoin(amountBig, { gasLimit: 3e4 });\n};\n\nconst handleValueChange = (e) => {\n  State.update({ amount: e.target.value });\n};\n\nreturn (\n  <div className=\"container\" style={{ maxWidth: \"600px\" }}>\n    <div className=\"row\">\n      <div className=\"col\">\n        <div>\n          <div className=\"container border py-2 mb-3\">\n            <div>APE: {state.apeBalance}</div>\n            <div>Staked total: {state.stakedTotal}</div>\n          </div>\n          <div className=\"container border py-4 mb-3 d-grid gap-3\">\n            <input type=\"number\" onChange={handleValueChange} />\n            <button onClick={handleStake}>Stake APECOIN</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col\">\n        <Web3Connect className=\"w3\" connectLabel=\"Connect with Web3\" />\n      </div>\n    </div>\n  </div>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/ape-stake", "metadata.tags.ethdenver2023": "", "metadata": NaN}