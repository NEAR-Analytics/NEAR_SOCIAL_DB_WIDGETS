{"tx_hash": "Amstk5SkkPv3Mr5Jbau52Fb5wLo4kyt49nTHsN3Br3a7", "action_id_social": "6CJ6aiiuxtaiXrbbhorhfCPQQC3SdraUfKRohsNMZCmc-0-widget", "block_id": 88951993, "block_timestamp": "2023-04-06 12:21:20.023", "signer_id": "ciocan.near", "widget_name": "burrow-portfolio", "source_code": "let accountId = context.accountId;\n\nconst NEAR_LOGO = `data:image/svg+xml,%3Csvg width='35' height='35' fill='none' xmlns='http://www.w3.org/2000/svg' class='MuiSvgIcon-root MuiSvgIcon-fontSizeMedium css-vubbuv' focusable='false' aria-hidden='true' viewBox='0 0 35 35' style='width: 35px; height: 35px; filter: invert(100%25);'%3E%3Ccircle cx='17.5' cy='17.5' r='17.5' fill='%23fff'%3E%3C/circle%3E%3Cpath d='m24.027 9.022-4.174 6.2c-.288.422.267.934.666.578l4.107-3.578c.111-.089.266-.022.266.134v11.177c0 .156-.2.223-.288.111L12.174 8.756A2.053 2.053 0 0 0 10.552 8h-.444C8.954 8 8 8.956 8 10.133v15.734C8 27.044 8.954 28 10.131 28a2.14 2.14 0 0 0 1.82-1.022l4.173-6.2c.289-.422-.266-.934-.666-.578l-4.106 3.556c-.111.088-.267.022-.267-.134V12.467c0-.156.2-.223.289-.111l12.43 14.888c.4.49 1 .756 1.621.756h.444A2.133 2.133 0 0 0 28 25.867V10.133A2.133 2.133 0 0 0 25.869 8a2.15 2.15 0 0 0-1.842 1.022Z' fill='%23000'%3E%3C/path%3E%3C/svg%3E`;\n\nif (!accountId) {\n  return <Widget src=\"ciocan.near/widget/account-signin\" />;\n}\n\nconst toAPY = (v) => Math.round(v * 100) / 100;\n\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals)).toFixed(fixed);\n};\n\nconst { assets, rewards, account } = state;\n\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\n\nconst onLoad = (data) => {\n  State.update(data);\n};\n\nconst depositedAssets = hasData\n  ? new Set([\n      ...account.supplied.map((a) => a.token_id),\n      ...account.collateral.map((a) => a.token_id),\n    ])\n  : new Set();\n\n// get portfolio deposited assets\nconst suppliedAssets = hasData\n  ? [...depositedAssets].map((depositedTokenId) => {\n      const asset = assets.find((a) => a.token_id === depositedTokenId);\n\n      const r = rewards.find((a) => a.token_id === asset.token_id);\n      const totalApy = r.apyBase + r.apyRewardTvl + r.apyReward;\n\n      const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n\n      const supplied = account.supplied.find(\n        (s) => s.token_id === depositedTokenId\n      );\n\n      const depositedBalance = supplied\n        ? Number(shrinkToken(supplied.balance, decimals))\n        : 0;\n\n      const collateral = account.collateral.find(\n        (c) => c.token_id === depositedTokenId\n      );\n\n      const collateralBalance = collateral\n        ? Number(shrinkToken(collateral.balance, decimals))\n        : 0;\n\n      const totalBalance = depositedBalance + collateralBalance;\n      const usd = totalBalance * asset.price.usd;\n      const icon = asset.metadata.icon || NEAR_LOGO;\n      return (\n        <tr>\n          <td>\n            <img src={icon} style={{ width: 24, marginRight: 10 }} />\n            <span>{asset.metadata.symbol}</span>\n          </td>\n          <td class=\"text-end\">{toAPY(totalApy)}%</td>\n          <td class=\"text-end\">{totalBalance.toFixed(4)}</td>\n          <td class=\"text-end\">${usd.toFixed(2)}</td>\n        </tr>\n      );\n    })\n  : undefined;\n\n// get portfolio borrowed assets\nconst borrowedAssets = hasData\n  ? account.borrowed.map((borrowedAsset) => {\n      const asset = assets.find((a) => a.token_id === borrowedAsset.token_id);\n      const r = rewards.find((a) => a.token_id === asset.token_id);\n      const totalApy = r.apyBaseBorrow;\n\n      const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n      const borrowed = Number(shrinkToken(borrowedAsset.balance, decimals));\n      const usd = borrowed * asset.price.usd;\n\n      // if (usd < 0.01) return null;\n\n      return (\n        <tr>\n          <td>\n            <img\n              src={asset.metadata.icon}\n              style={{ width: 24, marginRight: 10 }}\n            />\n            <span>{asset.metadata.symbol}</span>\n          </td>\n          <td class=\"text-end\">{toAPY(totalApy)}%</td>\n          <td class=\"text-end\">{borrowed.toFixed(4)}</td>\n          <td class=\"text-end\">${usd.toFixed(2)}</td>\n        </tr>\n      );\n    })\n  : undefined;\n\nreturn (\n  <div>\n    {!hasData && (\n      <Widget src=\"ciocan.near/widget/burrow-data\" props={{ onLoad }} />\n    )}\n    <table class=\"table\">\n      <thead>\n        <tr\n          style={{\n            color: \"rgba(0, 0, 0, 0.4)\",\n          }}\n        >\n          <th scope=\"col\">Deposited Assets</th>\n          <th scope=\"col\" class=\"text-end\">\n            APY\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            Deposited\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            $\n          </th>\n        </tr>\n      </thead>\n      <tbody>{suppliedAssets}</tbody>\n    </table>\n\n    <table class=\"table\">\n      <thead>\n        <tr\n          style={{\n            color: \"rgba(0, 0, 0, 0.4)\",\n          }}\n        >\n          <th scope=\"col\">Borrowed Assets</th>\n          <th scope=\"col\" class=\"text-end\">\n            APY\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            Borrowed\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            $\n          </th>\n        </tr>\n      </thead>\n      <tbody>{borrowedAssets}</tbody>\n    </table>\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/burrow-portfolio", "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN}