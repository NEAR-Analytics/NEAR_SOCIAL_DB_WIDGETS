{"tx_hash": "C8Nt7CgZjmcVfgd4mb9e389iuqBMXbw1RTi2ZHruFx4h", "action_id_social": "GrNZJuLhi4hAxZg2MNELZd5xch8qKB4f6mjboDFMuDvd-0-widget", "block_id": 93504331, "block_timestamp": "2023-06-05T10:20:03.908Z", "signer_id": "ciocan.near", "widget_name": "zkevm-bridge-transactions", "source_code": "const Layout = styled.div`\n    position: relative;\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 14px;\n    padding: 8px 16px;\n    background-color: #151718;\n    border-radius: 12px;\n    max-width: 240px;\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n\n    h3 {\n        font-size: 14px;\n    }\n\n    .refresh {\n        border: none;\n        background: rgba(255, 255, 255, 0.6);\n    }\n\n    ul {\n        list-style: none;\n        margin-top: 16px;\n        padding: 0;\n        margin: 0;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n\n        li {\n            background: #2d2f30;\n            padding: 4px 8px;\n            display: flex;\n            justify-content: space-between;\n            gap: 4px;\n\n            .info {\n                display: flex;\n                flex-direction: column;\n                gap: 4px;\n\n                .token {\n                    font-weight: bold;\n                }\n\n                a{ \n                    color: lightblue;\n                }\n\n                .date {\n                    font-size: 10px;\n                    color: rgba(255, 255, 255, 0.6);\n                }\n            }\n\n            button {\n                font-size: 12px;\n                color: #fff;\n                background: #8247E5;\n                border: none;\n            }\n        }\n    }\n`;\n\nconst BRIDGE_CONTRACT_ADDRESS = \"0xF6BEEeBB578e214CA9E23B0e9683454Ff88Ed2A7\";\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[32]\",\n        name: \"smtProof\",\n        type: \"bytes32[32]\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"mainnetExitRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"rollupExitRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"originNetwork\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"originTokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"destinationNetwork\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"destinationAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"metadata\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"claimAsset\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst tokens = props.tokens ?? [];\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nState.init({\n  deposit: [],\n  withdraw: [],\n});\n\nconst { chainId, withdraw, deposit } = state;\n\nconst isMainnet = chainId === 1 || chainId === 1101;\n\nconst getTransactions = (type) => {\n  if (!sender) return;\n\n  asyncFetch(\n    `https://open-api-v2-staging.polygon.technology/zkevm-${\n      isMainnet ? \"mainnet\" : \"testnet\"\n    }/${type}/address?userAddress=${sender}`\n  ).then((res) => {\n    if (!res.body.success) {\n      return;\n    }\n    State.update({\n      [type]: res.body.result.filter((tx) => tx.status !== \"CLAIMED\"),\n    });\n  });\n};\n\nconst refreshList = () => {\n  getTransactions(\"withdraw\");\n  getTransactions(\"deposit\");\n};\n\nrefreshList();\n\nconst claimTransaction = (tx) => {\n  const url = `https://proof-generator.polygon.technology/api/zkevm/${\n    isMainnet ? \"mainnet\" : \"testnet\"\n  }/merkle-proof?net_id=1&deposit_cnt=${tx.counter}`;\n\n  const res = fetch(url);\n\n  if (!res.ok) {\n    console.log(\"merkele proof errror\", res);\n    return;\n  }\n\n  const { proof } = res.body;\n\n  console.log(res.body.proof);\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"claimAsset(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)\",\n    [\n      proof[\"merkle_proof\"],\n      tx.counter,\n      proof[\"main_exit_root\"],\n      proof[\"rollup_exit_root\"],\n      0,\n      tx.childToken,\n      0,\n      tx.depositReceiver,\n      tx.amounts[0],\n      \"0x\",\n    ]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: BRIDGE_CONTRACT_ADDRESS,\n      data: encodedData,\n      value: amountBig,\n      gasLimit: ethers.BigNumber.from(\"500000\"),\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n      refreshList();\n    })\n    .catch((e) => {\n      console.log(\"error:\", e);\n      refreshList();\n    });\n};\n\nconst noWithdrawls = withdraw.length === 0;\nconst noDeposits = deposit.length === 0;\nconst isEmpty = noWithdrawls && noDeposits;\n\nconsole.log(state);\n\nreturn (\n  <Layout>\n    <h3>Pending transactions:</h3>\n    <button class=\"refresh\" onClick={refreshList}>\n      refresh list\n    </button>\n    <ul>\n      {!noWithdrawls && <div>Withdrawls:</div>}\n      {withdraw.map((t) => {\n        const txUrl = `https://${\n          isMainnet ? \"\" : \"testnet-\"\n        }zkevm.polygonscan.com/tx/${t.transactionHash}`;\n\n        const token = tokens.find(\n          (token) =>\n            t.childToken.toLowerCase() === token.address.toLowerCase() &&\n            token.chainId === chainId\n        );\n\n        if (!token) return null;\n\n        const amount = ethers.utils.formatUnits(\n          t.amounts[0],\n          token?.decimals || 18\n        );\n\n        return (\n          <li>\n            <div class=\"info\">\n              <span class=\"token\">\n                {amount} {token?.symbol}\n              </span>\n              <a href={txUrl} target=\"_blank\">\n                Tx info\n              </a>\n              <span class=\"date\">{t.timestamp.slice(0, -8)}</span>\n            </div>\n            <button\n              disabled={t.status === \"BRIDGED\"}\n              onClick={() => claimTransaction(t)}\n            >\n              Claim\n            </button>\n          </li>\n        );\n      })}\n\n      {!noDeposits && <div>Deposits:</div>}\n\n      {deposit.map((t) => {\n        const txUrl = `https://${isMainnet ? \"\" : \"goerli.\"}etherscan.io/tx/${\n          t.transactionHash\n        }`;\n\n        const token = tokens.find(\n          (token) =>\n            t.rootToken.toLowerCase() === token.address.toLowerCase() &&\n            token.chainId === chainId\n        );\n\n        if (!token) return null;\n\n        const amount = ethers.utils.formatUnits(\n          t.amounts[0],\n          token?.decimals || 18\n        );\n\n        return (\n          <li>\n            <div class=\"info\">\n              <span class=\"token\">\n                {amount} {token?.symbol}\n              </span>\n              <a href={txUrl} target=\"_blank\">\n                Tx info\n              </a>\n              <span class=\"date\">{t.timestamp.slice(0, -8)}</span>\n            </div>\n          </li>\n        );\n      })}\n      {isEmpty && (\n        <li>\n          <span>0 pending transactions</span>\n        </li>\n      )}\n    </ul>\n  </Layout>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/zkevm-bridge-transactions", "__row_index": 8}