{"tx_hash": "ATaaUQVKWbP6sfWX2QKaA8BEVeiQfP8wMz5kMcBeDi6Q", "action_id_social": "EowEhjCzA5Es7t4RraQsEWUNMB4qb9nn4pL3K93AdDaC-0-widget", "block_id": 83105526, "block_timestamp": "2023-01-16 20:30:24.141", "signer_id": "ciocan.near", "widget_name": "burrow-deposit", "source_code": "let BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet accountId = context.accountId;\n\nconsole.log(\"INIT...\", state);\n\nconst { selectedTokenId, amount, hasError } = state;\n\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals)).toFixed(fixed);\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\n\nfunction getAssets() {\n  const assets = Near.view(BURROW_CONTRACT, \"get_assets_paged\");\n  if (!assets) return null;\n\n  const tokenIds = assets?.map(([id]) => id);\n  const assetsDetailed = tokenIds.map((token_id) =>\n    Near.view(BURROW_CONTRACT, \"get_asset\", { token_id })\n  );\n  const metadata = tokenIds?.map((token_id) =>\n    Near.view(token_id, \"ft_metadata\")\n  );\n  const balances = tokenIds.map((token_id) =>\n    Near.view(token_id, \"ft_balance_of\", { account_id: accountId })\n  );\n\n  return assetsDetailed?.map((asset, i) => {\n    return {\n      ...asset,\n      metadata: metadata?.[i],\n      accountBalance: balances?.[i],\n    };\n  });\n}\n\nconst assets = getAssets();\n// console.log(\"assets\", assets);\n\nif (!assets.length || !assets[0]) return <div>loading...</div>;\n\nconst listAssets = assets\n  ?.filter((a) => a.accountBalance > 0)\n  ?.map((asset) => {\n    const { token_id, accountBalance, metadata } = asset;\n    const balance = formatToken(shrinkToken(accountBalance, metadata.decimals));\n\n    return (\n      <option value={token_id}>\n        {metadata.symbol} - {balance}\n      </option>\n    );\n  });\n\nconst handleSelect = (e) => {\n  State.update({\n    selectedTokenId: e.target.value,\n    amount: \"\",\n    hasError: false,\n  });\n};\n\nconst handleAmount = (e) => {\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n  });\n};\n\nconst handleDeposit = () => {\n  console.log(\n    \"handleDeposit\",\n    assets,\n    state,\n    selectedTokenId,\n    amount,\n    hasError\n  );\n  if (!selectedTokenId || !amount || !state || hasError) return;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { token_id, accountBalance, metadata } = asset;\n  const balance = formatToken(shrinkToken(accountBalance, metadata.decimals));\n\n  if (amount > balance) {\n    State.update({ selectedTokenId, amount, hasError: true });\n    return;\n  }\n\n  Near.call([\n    {\n      contractName: \"wrap.near\",\n      methodName: \"near_deposit\",\n    },\n    {\n      contractName: \"wrap.near\",\n      methodName: \"ft_transfer_call\",\n      args: {\n        receiver_id: BURROW_CONTRACT,\n        amount: \"1000000000000000000000000\",\n        msg: '{\"Execute\":{\"actions\":[{\"IncreaseCollateral\":{\"token_id\":\"wrap.near\",\"max_amount\":\"1000000000000000000000000\"}}]}}',\n      },\n    },\n  ]);\n};\n\nreturn (\n  <div class=\"card\" style={{ maxWidth: \"300px\" }}>\n    <div class=\"card-body d-grid gap-3\">\n      <select onChange={handleSelect}>\n        <option value=\"\">Deposit an asset</option>\n        {listAssets}\n      </select>\n      <input type=\"number\" value={amount} onChange={handleAmount} />\n      {hasError && (\n        <p class=\"alert alert-danger\" role=\"alert\">\n          Amount greater than balance\n        </p>\n      )}\n      <button onClick={handleDeposit}>Deposit</button>\n    </div>\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/burrow-deposit", "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.burrow": NaN, "metadata.tags.widget": NaN}