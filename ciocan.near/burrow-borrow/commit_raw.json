{"tx_hash": "EgzqmbzstfjY81MV8HbPwmqsDtGuDMmmr6vXVNHgRU5t", "action_id_social": "GDfbcsx1kb5wnXQ47LzioV2hqwPcXvRA5xBSZHZ28KxD-0-widget", "block_id": 83327527, "block_timestamp": "2023-01-19 18:47:25.763", "signer_id": "ciocan.near", "widget_name": "burrow-borrow", "source_code": "let MAX_RATIO = 10_000;\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet accountId = context.accountId;\n\nlet B = Big();\nB.DP = 60;\n\nconst { selectedTokenId, amount, hasError } = state;\n\nconst shrinkToken = (value, decimals) => {\n  return B(value).div(B(10).pow(decimals));\n};\n\nconst expandToken = (value, decimals) => {\n  return B(value).mul(B(10).pow(decimals));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nconst toUsd = (balance, asset) =>\n  asset?.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\n\nconst power = (x, y) => {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n};\n\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\n\nfunction getAssets() {\n  const assets = Near.view(BURROW_CONTRACT, \"get_assets_paged\");\n  if (!assets) return null;\n\n  const tokenIds = assets?.map(([id]) => id);\n\n  const assetsDetailed = tokenIds.map((token_id) =>\n    Near.view(BURROW_CONTRACT, \"get_asset\", { token_id })\n  );\n\n  const metadata = tokenIds?.map((token_id) =>\n    Near.view(token_id, \"ft_metadata\")\n  );\n\n  const config = Near.view(\"contract.main.burrow.near\", \"get_config\");\n  const prices =\n    config && Near.view(config?.[\"oracle_account_id\"], \"get_price_data\");\n\n  const refPricesResponse = fetch(\n    \"https://raw.githubusercontent.com/NearDeFi/token-prices/main/ref-prices.json\"\n  );\n  const refPrices = JSON.parse(refPricesResponse.body);\n\n  if (!config || !prices || !refPricesResponse) return null;\n\n  return assetsDetailed?.map((asset, i) => {\n    const price = prices?.prices?.find((p) => p.asset_id === asset?.token_id);\n\n    const decimals =\n      parseInt(price?.price?.decimals || 0) - parseInt(metadata?.[i].decimals);\n    const usd = price?.price?.multiplier / power(10, decimals);\n\n    return {\n      ...asset,\n      metadata: metadata?.[i],\n      price: {\n        ...price.price,\n        usd: usd ? usd : parseFloat(refPrices?.[asset.token_id]?.price),\n      },\n    };\n  });\n}\n\nconst account = Near.view(BURROW_CONTRACT, \"get_account\", {\n  account_id: accountId,\n});\n\nconst assets = getAssets();\nconsole.log(\"INIT...\", state, assets, account);\n\nif (!assets.length || !assets[0] || !account) return <div>loading...</div>;\n\nfunction getAdjustedSum(type) {\n  return account[type]\n    .map((assetInAccount) => {\n      const asset = assets.find((a) => a.token_id === assetInAccount.token_id);\n\n      const price = asset.price\n        ? B(asset.price.multiplier).div(B(10).pow(asset.price.decimals))\n        : B(0);\n\n      const pricedBalance = B(assetInAccount.balance)\n        .div(expandToken(1, asset.config.extra_decimals))\n        .mul(price);\n\n      return type === \"borrowed\"\n        ? pricedBalance\n            .div(asset.config.volatility_ratio)\n            .mul(MAX_RATIO)\n            .toFixed()\n        : pricedBalance\n            .mul(asset.config.volatility_ratio)\n            .div(MAX_RATIO)\n            .toFixed();\n    })\n    .reduce((sum, cur) => B(sum).plus(B(cur)).toFixed());\n}\n\nconst adjustedCollateralSum = getAdjustedSum(\"collateral\");\nconst adjustedBorrowedSum = getAdjustedSum(\"borrowed\");\n\nfunction getHealthFactor() {\n  const healthFactor = B(adjustedCollateralSum)\n    .div(B(adjustedBorrowedSum))\n    .mul(100)\n    .toFixed(0);\n  return Number(healthFactor) < MAX_RATIO ? healthFactor : MAX_RATIO;\n}\n\nconst healthFactor = getHealthFactor();\n\nfunction getMaxAmount() {\n  if (!selectedTokenId) return 0;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const volatiliyRatio = asset.config.volatility_ratio || 0;\n  const price = asset.price?.usd || Infinity;\n\n  const available = Number(\n    B(adjustedCollateralSum)\n      .sub(B(adjustedBorrowedSum))\n      .mul(volatiliyRatio)\n      .div(MAX_RATIO)\n      .div(price)\n      .mul(95)\n      .div(100)\n      .toFixed(4)\n  );\n  return [available, (asset.price.usd * available).toFixed(2)];\n}\n\nconst [available, availableUSD] = getMaxAmount();\n\nconst listAssets = assets\n  ?.filter((a) => a.config.can_borrow)\n  ?.map((asset) => {\n    const { token_id, metadata } = asset;\n\n    return <option value={token_id}>{metadata.symbol}</option>;\n  });\n\nconst storageBurrow = Near.view(BURROW_CONTRACT, \"storage_balance_of\", {\n  account_id: accountId,\n});\n\nconst storageToken = selectedTokenId\n  ? Near.view(selectedTokenId, \"storage_balance_of\", {\n      account_id: accountId,\n    })\n  : null;\n\nconst handleSelect = (e) => {\n  State.update({\n    selectedTokenId: e.target.value,\n    amount: \"\",\n    hasError: false,\n  });\n};\n\nconst handleAmount = (e) => {\n  State.update({\n    amount: Number(e.target.value),\n    selectedTokenId,\n    hasError: false,\n  });\n};\n\nconst handleBorrow = () => {\n  if (!selectedTokenId || !amount || hasError) return;\n  const asset = assets.find((a) => a.token_id === selectedTokenId);\n  const { metadata, config } = asset;\n  console.log(\"asset\", asset);\n  console.log(\"metadata\", metadata);\n  console.log(\"config\", config);\n\n  if (amount > available) {\n    State.update({ selectedTokenId, amount, hasError: true });\n    return;\n  }\n};\n\nreturn (\n  <div class=\"card\" style={{ maxWidth: \"300px\" }}>\n    <div class=\"card-body d-grid gap-3\">\n      <h6>Health {healthFactor}%</h6>\n      <select onChange={handleSelect}>\n        <option value=\"\">Borrow an asset</option>\n        {listAssets}\n      </select>\n      {selectedTokenId && (\n        <span>\n          Available: {available} (${availableUSD})\n        </span>\n      )}\n      <input type=\"number\" value={amount} onChange={handleAmount} />\n      {hasError && (\n        <p class=\"alert alert-danger\" role=\"alert\">\n          Amount greater than available\n        </p>\n      )}\n      <button onClick={handleBorrow}>Borrow</button>\n    </div>\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/burrow-borrow", "metadata.linktree.website": NaN, "metadata.name": NaN, "metadata.tags.burrow": NaN, "metadata.tags.widget": NaN, "metadata.image.ipfs_cid": NaN, "metadata.description": NaN}