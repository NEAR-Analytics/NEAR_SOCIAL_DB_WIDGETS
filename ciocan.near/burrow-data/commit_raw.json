{"tx_hash": "GAmDKZu5hHdiuqpH4jmkDm3zecqaAUFkjbxKSmGfMX83", "action_id_social": "7XdW7xGUCC3jBCKf3pxd4wETZHpR9hiKUQKkbNN5yS26-0-widget", "block_id": 85149734, "block_timestamp": "2023-02-13 15:37:26.355", "signer_id": "ciocan.near", "widget_name": "burrow-data", "source_code": "const accountId = context.accountId;\n\nconst unique = (value, index, self) => {\n  return self.indexOf(value) === index;\n};\n\nconst sumReducer = (sum, a) => sum + a;\n\nfunction power(x, y) {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n}\n\nconst toUsd = (balance, asset) =>\n  asset?.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\n\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals)).toFixed(fixed);\n};\n\nfunction getAssets() {\n  const assets = Near.view(\"contract.main.burrow.near\", \"get_assets_paged\");\n  if (!assets) return;\n  const tokenIds = assets?.map(([id]) => id);\n  const assetsDetailed = tokenIds.map((token_id) =>\n    Near.view(\"contract.main.burrow.near\", \"get_asset\", { token_id })\n  );\n  if (!assetsDetailed) return;\n  const metadata = tokenIds?.map((token_id) =>\n    Near.view(token_id, \"ft_metadata\")\n  );\n  if (!metadata) return;\n\n  const config = Near.view(\"contract.main.burrow.near\", \"get_config\");\n  if (!config) return;\n\n  const prices =\n    config && Near.view(config?.[\"oracle_account_id\"], \"get_price_data\");\n\n  if (!prices) return;\n\n  const refPricesResponse = fetch(\n    \"https://raw.githubusercontent.com/NearDeFi/token-prices/main/ref-prices.json\"\n  );\n  const refPrices = JSON.parse(refPricesResponse.body);\n\n  if (!config || !prices || !refPricesResponse) return;\n\n  const balances = accountId\n    ? tokenIds.map((token_id) =>\n        Near.view(token_id, \"ft_balance_of\", { account_id: accountId })\n      )\n    : undefined;\n\n  return assetsDetailed?.map((asset, i) => {\n    const price = prices?.prices?.find((p) => p.asset_id === asset?.token_id);\n    const priceDecimals =\n      parseInt(price?.price?.decimals || 0) - parseInt(metadata?.[i].decimals);\n    const usd = price?.price?.multiplier / power(10, priceDecimals);\n\n    const temp = Big(asset.supplied.balance)\n      .plus(Big(asset.reserved))\n      .minus(Big(asset.borrowed.balance));\n\n    const decimals = metadata?.[i].decimals + asset.config.extra_decimals;\n    const availableLiquidity = Number(shrinkToken(temp.toFixed(), decimals));\n\n    return {\n      ...asset,\n      metadata: metadata?.[i],\n      accountBalance: accountId ? balances?.[i] : undefined,\n      price: {\n        ...price.price,\n        usd: usd ? usd : parseFloat(refPrices?.[asset.token_id]?.price),\n      },\n      availableLiquidity,\n    };\n  });\n}\n\nconst getTotalBalance = (assets, source) =>\n  assets\n    .map((asset) => {\n      const netTvlMultiplier = asset.config.net_tvl_multiplier / 10000;\n      return (\n        toUsd(asset[source].balance, asset) * netTvlMultiplier +\n        (source === \"supplied\"\n          ? toUsd(asset.reserved, asset) * netTvlMultiplier\n          : 0)\n      );\n    })\n    .reduce(sumReducer, 0);\n\nconst getNetLiquidityAPY = (assets, netLiquidityFarm) => {\n  const totalDailyNetLiquidityRewards = Object.entries(netLiquidityFarm.rewards)\n    .map(([rewardTokenId, farm]) => {\n      const rewardAsset = assets.find((a) => a.token_id === rewardTokenId);\n      const assetDecimals =\n        rewardAsset.metadata.decimals + rewardAsset.config.extra_decimals;\n      const dailyAmount = Number(\n        shrinkToken(farm.reward_per_day, assetDecimals)\n      );\n      return (\n        dailyAmount *\n        rewardAsset.price.usd *\n        (rewardAsset.config.net_tvl_multiplier / 10000)\n      );\n    })\n    .reduce(sumReducer, 0);\n\n  const supplied = getTotalBalance(assets, \"supplied\");\n  const borrowed = getTotalBalance(assets, \"borrowed\");\n\n  const totalProtocolLiquidity = supplied - borrowed;\n  const netLiquidtyAPY =\n    ((totalDailyNetLiquidityRewards * 365) / totalProtocolLiquidity) * 100;\n\n  const rewardTokens = Object.entries(netLiquidityFarm.rewards).map(\n    ([rewardTokenId]) => rewardTokenId\n  );\n\n  return [netLiquidtyAPY, rewardTokens];\n};\n\nconst getRewards = (assets) => {\n  const netLiquidityFarm = Near.view(\n    \"contract.main.burrow.near\",\n    \"get_asset_farm\",\n    { farm_id: \"NetTvl\" }\n  );\n\n  if (!netLiquidityFarm) return;\n\n  const [apyRewardTvl, rewardTokensTVL] = getNetLiquidityAPY(\n    assets,\n    netLiquidityFarm\n  );\n\n  const rewards = assets.map((asset) => {\n    const apyBase = asset[\"supply_apr\"] * 100;\n    const apyBaseBorrow = asset[\"borrow_apr\"] * 100;\n    const tokenId = asset.token_id;\n    const totalSupplyUsd = toUsd(asset.supplied.balance, asset);\n    const totalBorrowUsd = toUsd(asset.borrowed.balance, asset);\n\n    const suppliedFarmRewards =\n      asset.farms.find((farm) => farm.farm_id.Supplied === tokenId)?.rewards ||\n      {};\n\n    const rewardTokens = Object.entries(suppliedFarmRewards)\n      .map(([rewardTokenId]) => rewardTokenId)\n      .concat(rewardTokensTVL)\n      .filter(unique);\n\n    const apyRewards = Object.entries(suppliedFarmRewards).map(\n      ([rewardTokenId, reward]) => {\n        const rewardAsset = assets.find((a) => a.token_id === rewardTokenId);\n        const decimals =\n          rewardAsset.metadata.decimals + rewardAsset.config.extra_decimals;\n        const price = rewardAsset.price?.usd || 0;\n        return (\n          new Big(reward.reward_per_day)\n            .div(new Big(10).pow(decimals))\n            .mul(365)\n            .mul(price)\n            .div(totalSupplyUsd)\n            .mul(100)\n            .toNumber() || 0\n        );\n      }\n    );\n\n    const apyReward = apyRewards.reduce(sumReducer, 0);\n\n    const borrowedFarmRewards =\n      asset.farms.find((farm) => farm.farm_id.Borrowed === tokenId)?.rewards ||\n      {};\n\n    const rewardTokensBorrow = Object.entries(borrowedFarmRewards).map(\n      ([rewardTokenId]) => rewardTokenId\n    );\n\n    const apyRewardBorrow = Object.entries(borrowedFarmRewards)\n      .map(([rewardTokenId, reward]) => {\n        const rewardAsset = assets.find((a) => a.token_id === rewardTokenId);\n        const decimals =\n          rewardAsset.metadata.decimals + rewardAsset.config.extra_decimals;\n        const price = rewardAsset.price?.usd || 0;\n\n        if (!totalBorrowUsd) return 0;\n\n        return (\n          new Big(reward.reward_per_day)\n            .div(new Big(10).pow(decimals))\n            .mul(365)\n            .mul(price)\n            .div(totalBorrowUsd)\n            .mul(100)\n            .toNumber() || 0\n        );\n      })\n      .reduce(sumReducer, 0);\n\n    return {\n      token_id: asset.token_id,\n      symbol: asset.metadata.symbol,\n      tvlUsd: totalSupplyUsd - totalBorrowUsd,\n      apyReward,\n      apyRewardTvl: apyRewardTvl || 0,\n      apyBase,\n      rewardTokens,\n      totalSupplyUsd,\n      totalBorrowUsd,\n      apyBaseBorrow,\n      apyRewardBorrow,\n      rewardTokensBorrow,\n      ltv: asset.config.volatility_ratio,\n    };\n  });\n\n  return rewards;\n};\n\nconst assets = getAssets();\n\nif (!assets) return <div />;\n\nconst rewards = getRewards(assets);\n\nif (!rewards) return <div />;\n\nconst data = {\n  assets,\n  rewards,\n};\n\nif (typeof props.onLoad === \"function\") {\n  props.onLoad(data);\n}\n\nreturn <div />;\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/burrow-data", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.name": NaN}