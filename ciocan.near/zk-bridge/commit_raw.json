{"tx_hash": "FF5bkzqg4d2H2BPR179Xgq4xSpqB8EzynR8vFSViUaRz", "action_id_social": "Dihu6c2T4mTGtDk6DSqmLd6k7MoMdQT4zCVmQ76zjuDL-0-widget", "block_id": 89853205, "block_timestamp": "2023-04-18 08:32:22.404", "signer_id": "ciocan.near", "widget_name": "zk-bridge", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return \"Please login first\";\n\nconst { from, to, assets } = state;\n\nconst zkAbi = fetch(\n  \"https://gist.githubusercontent.com/kcole16/3aa22a29b14ea6a1a7377b38463697ef/raw/c8a7249231ac00c7c3c9f1dc6188fbf28c262cb5/abi.json\"\n);\nif (!zkAbi.ok) {\n  return \"scam\";\n}\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n\nconst iface = new ethers.utils.Interface(zkAbi.body);\n\nconst chainId = state.chainId || \"testnet\";\n\nEthers.provider()\n  .getNetwork()\n  .then(({ chainId }) => {\n    State.update({ chainId: chainId === 5 ? \"testnet\" : \"mainnet\" });\n  });\n\nconsole.log(\"chainId\", chainId);\n\n// https://era.zksync.io/docs/dev/building-on-zksync/useful-address.html\nconst contracts = {\n  mainnet: {\n    bridge: {\n      L1ERC20BridgeProxy: \"0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063\",\n    },\n    weth: {\n      l1: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      l2: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n    },\n    usdc: {\n      l1: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      l2: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n    },\n  },\n  testnet: {\n    bridge: {\n      L1ERC20BridgeProxy: \"0x927DdFcc55164a59E0F33918D13a2D559bC10ce7\",\n    },\n    weth: {\n      l1: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n      l2: \"\", // not found yet\n    },\n    usdc: {\n      l1: \"0x07865c6e87b9f70255377e024ace6630c1eaa37f\",\n      l2: \"\", // not found yet\n    },\n  },\n};\n\nconst l2TxGasLimi = \"900000\";\nconst l2TxGasPerPubdataByte = \"800\";\nconst tokenDecimals = 18;\n\nconst onAction = (data) => {\n  if (!data.amount) return;\n  if (data.action === \"deposit\") handleDeposit(data);\n  if (data.action === \"withdraw\") handleWithdraw(data);\n};\n\nconst handleDeposit = (data) => {\n  console.log(\"handleDeposit\", data);\n  const l1Token = contracts[chainId][data.assetId].l1;\n\n  const amountBig = ethers.utils.parseUnits(data.amount, tokenDecimals);\n\n  const encodedData = iface.encodeFunctionData(\n    \"deposit(address,address,uint256,uint256,uint256,address)\",\n    [sender, l1Token, amountBig, l2TxGasLimi, l2TxGasPerPubdataByte, sender]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: contracts[chainId].bridge.L1ERC20BridgeProxy,\n      data: encodedData,\n      value: amountBig,\n    })\n    .then(() => handleApprove(data));\n};\n\nconst handleApprove = (data) => {\n  const contract = new ethers.Contract(\n    usdc,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const amountBig = ethers.utils.parseUnits(data.amount, tokenDecimals);\n\n  contract\n    .approve(contracts.main.bridge.L1ERC20BridgeProxy, amountBig)\n    .then((tx) => {\n      console.log(tx);\n      State.update({\n        log: \"The TX hash is: \" + tx.hash,\n        explorerLink: \"https://etherscan.io/tx/\" + tx.hash,\n      });\n    })\n    .catch((e) => console.error(e));\n};\n\nconst handleWithdraw = (data) => {\n  console.log(\"handleWithdraw\", data);\n};\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && sender) {\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      console.log(\n        \"b\",\n        balance,\n        Big(balance).div(Big(10).pow(tokenDecimals)).toFixed(2)\n      );\n      State.update({\n        balance: Big(balance).div(Big(10).pow(tokenDecimals)).toFixed(2),\n      });\n    });\n}\n\ninitState({\n  from: {\n    network: {\n      id: \"l1\",\n      value: \"Ethereum\",\n    },\n  },\n  to: {\n    network: {\n      id: \"l2\",\n      value: \"zkSync Era\",\n    },\n  },\n  amount: \"0.0\",\n  assets: [\n    {\n      id: \"weth\",\n      value: \"wETH\",\n      balance: {\n        from: \"2.00\",\n        to: \"1.00\",\n      },\n    },\n    {\n      id: \"usdc\",\n      value: \"USDC\",\n      selected: true,\n      balance: {\n        from: \"3.00\",\n        to: \"4.00\",\n      },\n    },\n  ],\n});\n\n// TODO: update balances from ethers\n// ...\n\nconst onTabChange = () => {\n  State.update({ from: to, to: from });\n};\n\nreturn (\n  <Widget\n    src=\"ciocan.near/widget/bridge-ui\"\n    props={{ ...state, onTabChange, onAction, title: \"zkBridge\" }}\n  />\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/zk-bridge", "metadata.tags.ethdenver2023": "", "metadata": NaN}