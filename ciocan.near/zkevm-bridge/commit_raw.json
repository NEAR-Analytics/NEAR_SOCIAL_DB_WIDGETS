{"tx_hash": "ezahEodVoEdCKCTN6yYmNMSfXtnGoKrw7xHr3SWdHXV", "action_id_social": "5BNwPGdx8cDH8p3PjEtwdAMuXMCsiiBW3bS32tQVqimx-0-widget", "block_id": 93506711, "block_timestamp": "2023-06-05T11:04:42.633Z", "signer_id": "ciocan.near", "widget_name": "zkevm-bridge", "source_code": "const Container = styled.div`\n  display: flex;\n  gap: 8px;\n\n  .side {\n    margin-top: 20px;\n  }\n`;\n\nconst tokens = [\n  // eth testnet assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 5,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x4701Aa9471d7bfAc765D87dcb1Ea6BB23AD32733\",\n    chainId: 5,\n    symbol: \"MATIC\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0xd35cceead182dcee0f148ebac9447da2c4d449c4\",\n    chainId: 5,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI: \"\",\n  },\n  {\n    address: \"0xD7E55eB808693D5Ff81a3391c59886C7E0449f35\",\n    chainId: 5,\n    symbol: \"DAI\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n    chainId: 5,\n    symbol: \"UNI\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  // eth mainnet assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 1,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\",\n    chainId: 1,\n    symbol: \"MATIC\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    chainId: 1,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    symbol: \"DAI\",\n    decimals: 18,\n    chainId: 1,\n    logoURI: \"\",\n  },\n  {\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    chainId: 1,\n    symbol: \"USDT\",\n    decimals: 6,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    chainId: 1,\n    symbol: \"WBTC\",\n    decimals: 8,\n    logoURI: \"\",\n  },\n  // zkevm testnet assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 1442,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x8Ba0a934ef4C24e475C78072cCa3Ed306c1aBaDD\",\n    chainId: 1442,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI: \"\",\n  },\n  {\n    address: \"0x378588D64A464d61c646e5e86F4DA5277e65802C\",\n    chainId: 1442,\n    symbol: \"UNI\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  // zkevm assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 1101,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0xa2036f0538221a77A3937F1379699f44945018d0\",\n    chainId: 1101,\n    symbol: \"MATIC\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n  {\n    address: \"0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035\",\n    chainId: 1101,\n    symbol: \"USDC\",\n    decimals: 18,\n    logoURI: \"\",\n  },\n];\n\nconst BRIDGE_CONTRACT_ADDRESS = \"0xF6BEEeBB578e214CA9E23B0e9683454Ff88Ed2A7\";\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      { internalType: \"uint32\", name: \"destinationNetwork\", type: \"uint32\" },\n      { internalType: \"address\", name: \"destinationAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"token\", type: \"address\" },\n      { internalType: \"bool\", name: \"forceUpdateGlobalExitRoot\", type: \"bool\" },\n      { internalType: \"bytes\", name: \"permitData\", type: \"bytes\" },\n    ],\n    name: \"bridgeAsset\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nconst handleBridge = (networkId, amount, token) => {\n  console.log(\"handleBridge\", networkId, amount);\n\n  const amountBig = ethers.utils.parseUnits(amount, token.decimals);\n  const permitData = \"0x\";\n\n  console.log(amountBig);\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"bridgeAsset(uint32,address,uint256,address,bool,bytes)\",\n    [networkId, sender, amountBig, token.address, true, permitData]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: BRIDGE_CONTRACT_ADDRESS,\n      data: encodedData,\n      value: amountBig,\n      gasLimit: ethers.BigNumber.from(\"500000\"),\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"error:\", e);\n    });\n};\n\nconst onConfirm = (props) => {\n  console.log(props);\n  const { amount, token, network } = props;\n  const networkId = network === \"ethereum\" ? 1 : 0;\n  handleBridge(networkId, amount, token);\n};\n\nif (!sender) {\n  return <Web3Connect connectLabel=\"Connect ETH Wallet\" />;\n}\n\nreturn (\n  <Container>\n    <Widget\n      src=\"ciocan.near/widget/zkevm-bridge-ui\"\n      props={{ onConfirm, tokens }}\n    />\n    <div class=\"side\">\n      <Widget\n        src=\"ciocan.near/widget/zkevm-bridge-transactions\"\n        props={{ tokens }}\n      />\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/zkevm-bridge", "__row_index": 10}