{"tx_hash": "5teDxH2BqoAWgpmTHiCjeEsHs4bwKbvVhDA1bV2ijn6n", "action_id_social": "EACYNPEiZxRKxEcpQVc4QuNYC3qVYzAA2egW8fj7CpTb-0-widget", "block_id": 90185205, "block_timestamp": "2023-04-22 17:09:12.877", "signer_id": "web4_profile.nearukraineguild.near", "widget_name": "components.profiles.ProfileCreator", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst contractAccountId =\n  props.contractAccountId ||\n  (context.widgetSrc ?? \"web4_profile.testnet\").split(\"/\", 1)[0];\nconst widgetAccountId =\n  props.widgetAccountId ||\n  (context.widgetSrc ?? \"web4_profile.testnet\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    contractAccountId: props.contractAccountId,\n    widgetAccountId: props.widgetAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${widgetAccountId}/widget/${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.contractAccountId) {\n    linkProps.contractAccountId = props.contractAccountId;\n  }\n  if (props.widgetAccountId) {\n    linkProps.widgetAccountId = props.widgetAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `#/${widgetAccountId}/widget/pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nState.init({\n  title: props.title ?? \"\",\n  description: props.description ?? \"\",\n  twitter: props.twitter ?? \"\",\n  telegram: props.telegram ?? \"\",\n  github: props.github ?? \"\",\n  medium: props.medium ?? \"\",\n  error: \"\",\n});\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nconst grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: contractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst getAccountAccessKeys = (account) => {\n  return asyncFetch(props.rpcUrl, {\n    method: \"POST\",\n    headers: {\n      [\"Content-Type\"]: \"application/json\",\n      [\"Accept\"]: \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_access_key_list\",\n        finality: \"final\",\n        account_id: account,\n      },\n    }),\n  }).then((response) => {\n    if (!response.body.result) {\n      return [];\n    }\n\n    return response.body.result.keys;\n  });\n};\n\nconst keys = useCache(\n  () => getAccountAccessKeys(context.accountId),\n  \"getAccountAccessKeys\",\n  { subscribe: true }\n);\n\nconst onCreateClick = () => {\n  State.update({ error: \"\" });\n\n  if (!state.title) {\n    return State.update({ error: `Title can't be empty` });\n  }\n\n  if (!state.description) {\n    return State.update({ error: `Description can't be empty` });\n  }\n\n  const fullAccessKey = keys.find(\n    (key) => key.access_key.permission === \"FullAccess\"\n  );\n\n  if (!fullAccessKey) {\n    return State.update({\n      error: `Couldn't find FullAccessKey pair within your account`,\n    });\n  }\n\n  const links = [];\n\n  if (state.twitter) {\n    links.push({\n      type: 1,\n      text: \"Twitter\",\n      path: state.twitter,\n    });\n  }\n\n  if (state.telegram) {\n    links.push({\n      type: 2,\n      text: \"Telegram\",\n      path: state.telegram,\n    });\n  }\n\n  if (state.medium) {\n    links.push({\n      type: 0,\n      text: \"Medium\",\n      path: state.medium,\n    });\n  }\n\n  if (state.github) {\n    links.push({\n      type: 3,\n      text: \"GitHub\",\n      path: state.github,\n    });\n  }\n\n  const data = {\n    title: state.title,\n    description: state.description,\n    links: links,\n  };\n\n  Near.call(\n    props.factoryContractId,\n    \"create_web4_little_link_page\",\n    {\n      page_data: data,\n      pub_key: fullAccessKey.public_key,\n    },\n    Big(10).pow(12).mul(300), // 300TGas\n    Big(10).pow(24).mul(0.7) // 0.7N\n  );\n};\n\nreturn (\n  <div className=\"card\">\n    <div className=\"card-header\">Creating your own Little Link page</div>\n    <div class=\"card-body\">\n      <div className=\"row\">\n        <div className=\"col-lg-6  mb-2\">\n          Title\n          <input\n            type=\"text\"\n            value={state.title}\n            onChange={(event) => {\n              State.update({ title: event.target.value });\n            }}\n          />\n        </div>\n        <div className=\"col-lg-12  mb-2\">\n          Description\n          <textarea\n            value={state.description}\n            type=\"text\"\n            rows={2}\n            className=\"form-control\"\n            onChange={(event) => {\n              State.update({ description: event.target.value });\n            }}\n          />\n        </div>\n        <div className=\"col-lg-3  mb-2\">\n          GitHub\n          <input\n            type=\"text\"\n            value={state.github}\n            placeholder=\"account\"\n            onChange={(event) => {\n              State.update({ github: event.target.value });\n            }}\n          />\n        </div>\n        <div className=\"col-lg-3  mb-2\">\n          Twitter\n          <input\n            type=\"text\"\n            value={state.twitter}\n            placeholder=\"account\"\n            onChange={(event) => {\n              State.update({ twitter: event.target.value });\n            }}\n          />\n        </div>\n        <div className=\"col-lg-3  mb-2\">\n          Telegram\n          <input\n            type=\"text\"\n            placeholder=\"account\"\n            value={state.telegram}\n            onChange={(event) => {\n              State.update({ telegram: event.target.value });\n            }}\n          />\n        </div>\n        <div className=\"col-lg-3  mb-2\">\n          Medium\n          <input\n            type=\"text\"\n            placeholder=\"@account\"\n            value={state.medium}\n            onChange={(event) => {\n              State.update({ medium: event.target.value });\n            }}\n          />\n        </div>\n      </div>\n      <a\n        className=\"btn btn-outline-primary mb-2 mt-2 px-8 py-1\"\n        onClick={onCreateClick}\n      >\n        Create\n      </a>\n    </div>\n    {state.error && (\n      <div class=\"card-footer\">\n        <p style={{ color: \"red\" }}>{state.error}</p>\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/web4_profile.nearukraineguild.near/widget/components.profiles.ProfileCreator"}