{"tx_hash": "63mBZxDVpPcxEwLAFinoXwoBWLCRUFVEY515oWBa6YJj", "action_id_social": "CLCfDTTeSAceZkf5FCPsireNrdBAKTPjt2u4xTJn4TUG-0-widget", "block_id": 80731864, "block_timestamp": "2022-12-15 21:28:15.908", "signer_id": "minz.near", "widget_name": "CreateActivity", "source_code": "const accountId = context.accountId;\nconst CONTRACT = \"event_org.near\";\nif (!accountId) {\n  return \"Please connect your NEAR wallet to create an activity\";\n}\n\nconst Error = styled.div`\ncolor: red;\n`;\n\nfunction callContract(data) {\n  let valid = true;\n  const participants_lo = parseInt(data.participants_lo);\n  if (isNaN(participants_lo) || \"\" + participants_lo != data.participants_lo) {\n    State.update({ error_participants_lo: \"Please enter a valid number\" });\n    valid = false;\n  } else if (participants_lo <= 0) {\n    State.update({\n      error_participants_lo: \"Min participants must be at least 1\",\n    });\n    valid = false;\n  } else {\n    State.update({ error_participants_lo: null });\n  }\n\n  const participants_hi = parseInt(data.participants_hi);\n  if (isNaN(participants_hi) || \"\" + participants_hi != data.participants_hi) {\n    State.update({ error_participants_hi: \"Please enter a valid number\" });\n    valid = false;\n  } else if (state.error_particpants_lo !== null && participants_hi <= 0) {\n    State.update({\n      error_participants_hi: \"Max participants must be at least 1\",\n    });\n    valid = false;\n  } else if (\n    state.error_participants_lo === null &&\n    participants_hi < participants_lo\n  ) {\n    State.update({\n      error_participants_hi:\n        \"Max participants must be greater than or equal to min participants\",\n    });\n    valid = false;\n  } else {\n    State.update({ error_participants_hi: null });\n  }\n\n  const cost = parseFloat(data.cost);\n  if (isNaN(cost)) {\n    State.update({\n      error_cost: \"Please enter a valid cost, e.g. 12.34\",\n    });\n    valid = false;\n  } else if (cost < 0) {\n    State.update({\n      error_cost: \"Cost cannot be negative\",\n    });\n    valid = false;\n  } else {\n    State.update({\n      error_cost: null,\n    });\n  }\n\n  const name = data.name;\n  if (name.length < 4) {\n    State.update({\n      error_name: \"Event name must be at least 4 characters\",\n    });\n    valid = false;\n  } else {\n    State.update({\n      error_name: null,\n    });\n  }\n\n  const description = data.description;\n  if (description.length < 10) {\n    State.update({\n      error_description: \"Description must be at least 10 characters\",\n    });\n    valid = false;\n  } else {\n    State.update({\n      error_description: null,\n    });\n  }\n\n  const deadline = Date.parse(data.deadline);\n  const today = Date.now() + 0;\n  if (isNaN(deadline)) {\n    State.update({\n      error_deadline: \"Please choose a valid date\",\n    });\n    valid = false;\n  } else if (deadline <= today) {\n    State.update({\n      error_deadline: \"Please choose a deadline in the future\",\n    });\n    valid = false;\n  } else {\n    State.update({\n      error_deadline: null,\n    });\n  }\n\n  const image = state.image;\n  let image_link = \"\";\n  if (!image) {\n    // State.update({\n    //   error_image: \"Please upload an image\",\n    // });\n    // valid = false;\n  } else {\n    image_link = image.cid;\n    State.update({\n      error_image: null,\n    });\n  }\n\n  if (!valid) {\n    return;\n  }\n\n  Near.call(CONTRACT, \"start_event\", {\n    account_id: accountId,\n    event_spec: {\n      title: name,\n      description: description,\n      max_num: participants_hi,\n      min_num: participants_lo,\n      price: Math.round(cost * 1000),\n      deadline: deadline * 1000000,\n      beneficiary: accountId,\n      image_link: image_link,\n    },\n  });\n}\n\nconst today = Math.floor((Date.now() + 0) / 86400000) * 86400000;\nconst tomorrow = today + 86400000;\n\nState.init({\n  name: \"\",\n  description: \"\",\n  cost: \"\",\n  participants_lo: \"\",\n  participants_hi: \"\",\n  deadline: new Date(tomorrow).toISOString().substring(0, 10),\n  image: null,\n\n  error_name: null,\n  error_description: null,\n  error_cost: null,\n  error_participants_hi: null,\n  error_participants_lo: null,\n  error_deadline: null,\n  error_image: null,\n});\n\nreturn (\n  <div className=\"row mb-3\">\n    <div>\n      <h4>Plan a group activity on Near Social!</h4>\n    </div>\n    <div className=\"mb-2\">\n      Event Name <span className=\"text-secondary\"></span>\n      <input\n        type=\"text\"\n        value={state.name}\n        onChange={(e) => {\n          State.update({ name: e.target.value });\n        }}\n      />\n      {state.error_name && <Error>{state.error_name}</Error>}\n    </div>\n    <div className=\"mb-2\">\n      Description <span className=\"text-secondary\"></span>\n      <input\n        type=\"text\"\n        value={state.description}\n        onChange={(e) => {\n          State.update({ description: e.target.value });\n        }}\n      />\n      {state.error_description && <Error>{state.error_description}</Error>}\n    </div>\n    <div className=\"mb-2\">\n      Cost per participant <span className=\"text-secondary\"></span>\n      <input\n        type=\"number\"\n        placeholder=\"Enter amount in NEAR, e.g. 12.34\"\n        value={state.cost}\n        onChange={(e) => {\n          State.update({ cost: e.target.value });\n        }}\n      />\n      {state.error_cost && <Error>{state.error_cost}</Error>}\n    </div>\n    <div className=\"mb-2\">\n      Min participants <span className=\"text-secondary\"></span>\n      <input\n        type=\"number\"\n        placeholder={\"example: 3\"}\n        value={state.participants_lo}\n        onChange={(e) => {\n          State.update({ participants_lo: e.target.value });\n        }}\n      />\n      {state.error_participants_lo && (\n        <Error>{state.error_participants_lo}</Error>\n      )}\n    </div>\n    <div className=\"mb-2\">\n      Max participants <span className=\"text-secondary\"></span>\n      <input\n        type=\"number\"\n        placeholder={\"example: 6\"}\n        value={state.participants_hi}\n        onChange={(e) => {\n          State.update({ participants_hi: e.target.value });\n        }}\n      />\n      {state.error_participants_hi && (\n        <Error>{state.error_participants_hi}</Error>\n      )}\n    </div>\n    <div className=\"mb-2\">\n      Joinable until <span className=\"text-secondary\"></span>\n      <input\n        type=\"date\"\n        value={state.deadline}\n        onChange={(e) => {\n          State.update({ deadline: e.target.value });\n        }}\n      />\n      {state.error_deadline && <Error>{state.error_deadline}</Error>}\n    </div>\n    <div className=\"mb-2\">\n      Event image:\n      <IpfsImageUpload image={state.image} />\n      {state.error_image && <Error>{state.error_image}</Error>}\n    </div>\n    <div className=\"mb-2\">\n      <button\n        onClick={() => {\n          callContract(state);\n        }}\n      >\n        Create\n      </button>\n    </div>\n    <hr />\n    If the event does not meet the required number of people or required\n    funding, it will be cancelled and the fund will be returned to the\n    registrants at the deadline to complete the fundraising for the event.\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/minz.near/widget/CreateActivity"}