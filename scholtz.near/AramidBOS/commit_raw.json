{"tx_hash": "64JTeKLGUDvMvPJ9KASmMQaqdUyb2QivXNqSCzmThNNc", "action_id_social": "4ib4VAiGgxa9vRfEDLwNii7a5bPkpMvtvG7sXgoEsgkB-0-widget", "block_id": 93822614, "block_timestamp": "2023-06-09T15:51:24.925Z", "signer_id": "scholtz.near", "widget_name": "AramidBOS", "source_code": null, "metadata": null, "branch": {"draft": {"": "let reciever = props.reciever || \"scholtz.near\";\n\ninitState({\n  ipfsHash: null,\n  config: null,\n  chainFromId,\n  chainToId,\n  tokenFromId,\n  tokenToId,\n  amount: 1,\n  reciever,\n});\n\nconst CONFIG_SENDER =\n  \"OUXAY6ZUAQFRRN3UI2RIQYUOPPJWGTNGUEG6X6CH672ETLRJN3SYZ7RBDQ\";\nconst CONFIG_ASSET_ID = \"106\";\nconst CONFIG_AMOUNT = \"102\";\nconst CONFIG_URL =\n  \"https://indexer.aramidmain.a-wallet.net/v2/accounts/OUXAY6ZUAQFRRN3UI2RIQYUOPPJWGTNGUEG6X6CH672ETLRJN3SYZ7RBDQ/transactions?limit=1000\";\nconst IPFS_HOST = \"https://cloudflare-ipfs.com/ipfs/\";\n\nconst donate = () => {\n  Near.call(\n    state.reciever,\n    \"donate\",\n    {},\n    \"30000000000000\",\n    state.amount * 1e24\n  );\n};\nconst onChangeChainFrom = (chainId) => {\n  State.update({\n    chainFromId: chainId,\n  });\n};\n\nconst onChangeChainTo = (chainId) => {\n  State.update({\n    chainToId: chainId,\n  });\n};\nconst onChangeTokenFrom = (tokenId) => {\n  State.update({\n    tokenFromId: tokenId,\n  });\n};\nconst onChangeTokenTo = (tokenId) => {\n  State.update({\n    tokenToId: tokenId,\n  });\n};\n\nconst onChangeReciever = (reciever) => {\n  State.update({\n    reciever,\n  });\n};\n\nconst fetchConfiguration = () => {\n  return asyncFetch(CONFIG_URL, {\n    headers: {\n      \"X-Indexer-Api-Token\": `aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`,\n    },\n    method: \"GET\",\n  });\n};\nconst fetchIPFSConfiguration = () => {\n  const url = IPFS_HOST + state.ipfsHash;\n  return asyncFetch(url);\n};\n\nconst getConfig = () => {\n  fetchConfiguration().then((r) => {\n    const latestTx = r.body.transactions.find(\n      (tx) => tx.sender == CONFIG_SENDER\n    );\n    console.log(\"latestTx\", latestTx);\n\n    const note = JSON.parse(\n      Buffer.from(latestTx.note, \"base64\")\n        .toString()\n        .replace(\"aramid-config/v1:j\", \"\")\n    );\n    State.update({\n      ipfsHash: note.ipfsHash,\n    });\n    //state.ipfsHash = note.ipfsHash;\n    console.log(\"state\", state);\n    loadIPFSConfig();\n  });\n  console.log(\"config\", config);\n  return JSON.stringify(config);\n};\nconst loadIPFSConfig = () => {\n  console.log(\"loadIPFSConfig\");\n  if (!state.ipfsHash) return;\n  fetchIPFSConfiguration().then((r) => {\n    State.update({\n      config: r.body,\n    });\n    console.log(\"ipfs data state\", state);\n  });\n};\n\nreturn (\n  <div>\n    {getConfig()}\n    {!(\n      state.config &&\n      state.config.addresses &&\n      state.config.addresses.proofs\n    ) ? (\n      <>\n        <div class=\"spinner-border\" role=\"status\"></div>\n      </>\n    ) : (\n      <>\n        <h2>Bridge your assets. Select source chain</h2>\n        <select\n          class=\"form-control\"\n          placeholder={state.chainFromId}\n          onChange={(e) => onChangeChainFrom(e.target.value)}\n        >\n          <option value=\"\" selected disabled>\n            Please select chain\n          </option>\n          {Object.keys(state.config.chains).map((chainId) => (\n            <option value={chainId}>{state.config.chains[chainId].name}</option>\n          ))}\n        </select>\n        {state.chainFromId && (\n          <>\n            <h2>Select destination chain</h2>\n            <select\n              class=\"form-control\"\n              placeholder={state.chainToId}\n              onChange={(e) => onChangeChainTo(e.target.value)}\n            >\n              <option value=\"\" selected disabled>\n                Please select chain\n              </option>\n              {Object.keys(state.config.chains2tokens[state.chainFromId]).map(\n                (chainId) => (\n                  <option value={chainId}>\n                    {state.config.chains[chainId].name}\n                  </option>\n                )\n              )}\n            </select>\n          </>\n        )}\n\n        {state.chainToId && (\n          <>\n            <h2>Select source token</h2>\n            <select\n              class=\"form-control\"\n              placeholder={state.tokenFromId}\n              onChange={(e) => onChangeTokenFrom(e.target.value)}\n            >\n              <option value=\"\" selected disabled>\n                Please select token\n              </option>\n              {Object.keys(\n                state.config.chains2tokens[state.chainFromId][state.chainToId]\n              ).map((tokenId) => (\n                <option value={tokenId}>\n                  {state.config.chains[state.chainFromId].tokens[tokenId].name}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </>\n    )}\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/scholtz.near/widget/AramidBOS", "__row_index": 0}