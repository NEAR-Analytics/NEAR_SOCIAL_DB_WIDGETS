{"tx_hash": "3spkHHLF8Ue3MyTdELPiXpc5F6CUutw2eKTqVkizD9XK", "action_id_social": "CsCLBJKRheKVwZja95ZwJ5fS6NxkJkg29AeykRs21FsV-0-widget", "block_id": 82647617, "block_timestamp": "2023-01-10 17:41:12.289", "signer_id": "bozon.near", "widget_name": "WidgetHistory", "source_code": "const initWidgetPath = \"devgovgigs.near/widget/Ideas\";\r\n\r\nState.init({\r\n  widgetPath: initWidgetPath,\r\n});\r\n\r\nconst historyBlocksRequest = Social.keys(`${state.widgetPath}`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\n\r\nif (historyBlocksRequest === null) return \"loading...\";\r\n\r\nconst [widgetAccountId, _, widgetName] = state.widgetPath.split(\"/\");\r\n\r\nlet blocksChanges =\r\n  historyBlocksRequest[widgetAccountId]?.[\"widget\"]?.[widgetName];\r\n\r\nif (blocksChanges) blocksChanges = blocksChanges?.sort((a, b) => b - a);\r\n\r\nif (!state.selectedBlockHeight) state.selectedBlockHeight = blocksChanges[0];\r\n\r\nfunction getDatastringFromBlockHeight(blockHeight) {\r\n  const block = Near.block(blockHeight);\r\n  const date = new Date(block.header.timestamp_nanosec / 1e6);\r\n  return date.toDateString() + \" \" + date.toLocaleTimeString();\r\n}\r\n\r\nconst renderBlockChangesLink = (blockHeight) => {\r\n  return (\r\n    <button\r\n      className={`btn btn-link ${\r\n        state.selectedBlockHeight == blockHeight\r\n          ? \"link-dark text-decoration-none\"\r\n          : \"btn-link\"\r\n      }`}\r\n      onClick={() => {\r\n        State.update({ selectedBlockHeight: blockHeight });\r\n      }}\r\n    >\r\n      #{blockHeight} * {getDatastringFromBlockHeight(blockHeight)}\r\n    </button>\r\n  );\r\n};\r\n\r\nfunction blockHeightToWidget(blockHeight) {\r\n  const index = blocksChanges.findIndex((el) => el == blockHeight);\r\n  console.log({\r\n    currentBlockHeight: blockHeight,\r\n    prevBlockHeight: blocksChanges[index + 1],\r\n  });\r\n  return (\r\n    <Widget\r\n      style={{ minHeight: \"200px\" }}\r\n      key={blockHeight}\r\n      src={`bozon.near/widget/WidgetHistory.CodeHistoryCard`}\r\n      props={{\r\n        pathToWidget: state.widgetPath,\r\n        currentBlockHeight: blockHeight,\r\n        prevBlockHeight: blocksChanges[index + 1],\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nreturn (\r\n  <div>\r\n    <h1 class=\"text-center\">Widget History</h1>\r\n\r\n    <div class=\"input-group mb-3\">\r\n      <input\r\n        class=\"form-control\"\r\n        placeholder={initWidgetPath}\r\n        defaultValue={state.widgetPath || initWidgetPath}\r\n        onBlur={(e) => {\r\n          State.update({\r\n            widgetPath: e.target.value,\r\n          });\r\n        }}\r\n      />\r\n    </div>\r\n\r\n    {!blocksChanges ? (\r\n      <div>incorrent widget path</div>\r\n    ) : (\r\n      <div>\r\n        <div div class=\"card p-2 mb-3\">\r\n          <div class=\"d-flex flex-column\">\r\n            {blocksChanges\r\n              .slice(0, 5)\r\n              .map((height) => renderBlockChangesLink(height))}\r\n          </div>\r\n\r\n          <div class=\"collapse\" id=\"collapseExample\">\r\n            <div class=\" d-flex flex-column\">\r\n              {blocksChanges\r\n                .slice(5)\r\n                .map((height) => renderBlockChangesLink(height))}\r\n            </div>\r\n          </div>\r\n\r\n          <button\r\n            class=\"btn btn-primary\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseExample\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseExample\"\r\n          >\r\n            Show all\r\n          </button>\r\n        </div>\r\n\r\n        <div>{blockHeightToWidget(state.selectedBlockHeight)}</div>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bozon.near/widget/WidgetHistory", "metadata.image.ipfs_cid": NaN, "metadata": NaN, "metadata.description": NaN, "metadata.name": NaN, "metadata.tags.code": NaN, "metadata.tags.dev": NaN, "metadata.tags.history": NaN, "metadata.tags.widget": NaN, "metadata.tags.app": NaN}