{"tx_hash": "HA81wX3nkiEarfMJKVE6i9d3AXACXjd1PXGbiaar57Tq", "action_id_social": "F1saUUzaot72ki38jayaaV6iA6KVndASVK19ai8C1U6K-0-widget", "block_id": 82061127, "block_timestamp": "2023-01-02 22:51:40.417", "signer_id": "bozon.near", "widget_name": "PrivateMessage", "source_code": "const accountId = context.accountId;\r\n\r\nif (!accountId) {\r\n  return \"Please sign in with NEAR wallet\";\r\n}\r\n\r\nconst registeredPublicKey = Social.get(\r\n  `${accountId}/private_message/public_key`\r\n);\r\nconst savedSecretKey = Storage.privateGet(\"secretKey\");\r\nconst follows = Social.get(`${accountId}/graph/follow/**`);\r\n\r\nconst allFollowers = follows\r\n  ? Object.keys(follows).map((f) => {\r\n      return f;\r\n    })\r\n  : [];\r\n\r\nif (savedSecretKey === null || registeredPublicKey === null) return \"Loading\";\r\n\r\nState.init({\r\n  selectedUser,\r\n  followers: allFollowers,\r\n});\r\n\r\nfunction renderLoginPage() {\r\n  return (\r\n    <div>\r\n      <h1 class=\"mb-3 text-center\">Login</h1>\r\n      {registeredPublicKey && (\r\n        <div>\r\n          <label class=\"mb-3\">You registered using this public key:</label>\r\n          <input\r\n            class=\"form-control mb-3\"\r\n            value={registeredPublicKey}\r\n            disabled\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <input\r\n        class=\"form-control mb-3\"\r\n        placeholder=\"Input secret key\"\r\n        key=\"inputSecret\"\r\n        onChange={(e) => State.update({ inputSecretKey: e.target.value })}\r\n      />\r\n      <label class=\"mb-3\">{state.errorInputSecretKey}</label>\r\n      <div>\r\n        <button\r\n          onClick={() => {\r\n            try {\r\n              const keyPairFromSaved = nacl.box.keyPair.fromSecretKey(\r\n                Buffer.from(state.inputSecretKey, \"base64\")\r\n              );\r\n\r\n              if (\r\n                Buffer.from(keyPairFromSaved.publicKey).toString(\"base64\") !=\r\n                registeredPublicKey\r\n              ) {\r\n                State.update({ errorInputSecretKey: \"\u26a0\ufe0f key does not fit\" });\r\n              } else {\r\n                const secretKey = Buffer.from(\r\n                  keyPairFromSaved.secretKey\r\n                ).toString(\"base64\");\r\n                Storage.privateSet(\"secretKey\", secretKey);\r\n                State.update({\r\n                  savedSecretKey: secretKey,\r\n                });\r\n              }\r\n            } catch {\r\n              State.update({ errorInputSecretKey: \"\u26a0\ufe0f invalid secret key\" });\r\n            }\r\n          }}\r\n        >\r\n          Sign in\r\n        </button>\r\n\r\n        <a\r\n          className=\"btn btn-outline-primary\"\r\n          href={`#/bozon.near/widget/PrivateMessages.Register`}\r\n        >\r\n          Register\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nif (state.selectedUser) {\r\n  return (\r\n    <Widget\r\n      src=\"bozon.near/widget/PrivateMessages.UserMessages\"\r\n      props={{\r\n        accountId: state.selectedUser.accountId,\r\n        secretKeyBase64: savedSecretKey,\r\n        receiverPublicKeyBase64: state.selectedUser.publicKeyBase64,\r\n        onClose: () => State.update({ selectedUser: null }),\r\n      }}\r\n    />\r\n  );\r\n} else if (!savedSecretKey) return renderLoginPage();\r\nelse if (savedSecretKey)\r\n  return (\r\n    <Widget\r\n      src=\"bozon.near/widget/PrivateMessages.UserList\"\r\n      props={{\r\n        secretKey: savedSecretKey,\r\n        onSelectedUser: (accountId, publicKeyBase64) => {\r\n          State.update({ selectedUser: { accountId, publicKeyBase64 } });\r\n        },\r\n      }}\r\n    />\r\n  );\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bozon.near/widget/PrivateMessage", "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.encryption": NaN, "metadata.tags.message": NaN, "metadata.tags.pm": NaN, "metadata.tags.private-message": NaN, "metadata.tags.widget": NaN, "metadata.description": NaN, "metadata.tags.mailbox": NaN, "metadata.tags.private": NaN}