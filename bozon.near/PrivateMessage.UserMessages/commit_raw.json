{"tx_hash": "D5MR1mK6r4LBCFnLzD5BoLBR16cD4FPhrvRwSeEY1evX", "action_id_social": "CzuYbQHk4jrTnFhB2PkPUctupkmjrpy68ZnVp12CiCYS-0-widget", "block_id": 82121646, "block_timestamp": "2023-01-03 18:00:57.979", "signer_id": "bozon.near", "widget_name": "PrivateMessage.UserMessages", "source_code": "//props:\n//receiverAccountId\n//secretKeyBase64\n//receiverPublicKeyBase64\n\nconst accountId = context.accountId;\n\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\n\nif (\n  !props.receiverAccountId ||\n  !props.secretKeyBase64 ||\n  !props.receiverPublicKeyBase64\n) {\n  return \"Send receiverAccountId, secretKeyBase64, receiverPublicKeyBase64  in props\";\n}\n\nfunction uniteAccountId(accountId0, accountId1) {\n  accountId0 = accountId0.toLowerCase();\n  accountId1 = accountId1.toLowerCase();\n  return accountId0 > accountId0\n    ? accountId0 + accountId1\n    : accountId1 + accountId0;\n}\n\nState.init({ message: \"\" });\n\nSocial.keys(`${accountId}/post/meme`, \"final\", {\n  return_type: \"History\",\n});\n\nconst incomingMessages = Social.index(\n  \"private_message\",\n  accountId.toLowerCase(),\n  {\n    subscribe: true,\n    order: \"desc\",\n    accountId: props.receiverAccountId.toLowerCase(),\n  }\n);\n\nconst outgoingMessages = Social.index(\n  \"private_message\",\n  props.receiverAccountId.toLowerCase(),\n  {\n    subscribe: true,\n    order: \"desc\",\n    accountId: accountId.toLowerCase(),\n  }\n);\n\nconst messages = outgoingMessages.concat(incomingMessages);\n\nfunction renderMessage(senderAccountId, blockHeight) {\n  const messageObject = Social.get(\n    `${senderAccountId}/private_message/last_message/**`,\n    blockHeight\n  );\n\n  const messageWithNonceAsUint8Array = new Uint8Array(\n    new Buffer(messageObject.message_text_base64, \"base64\")\n  );\n  const nonce = messageWithNonceAsUint8Array.slice(0, nacl.box.nonceLength);\n  const encryptedMessage = messageWithNonceAsUint8Array.slice(\n    nacl.box.nonceLength,\n    messageWithNonce.length\n  );\n\n  const messageTextUint8Array = nacl.box.open(\n    encryptedMessage,\n    nonce,\n    new Uint8Array(\n      new Buffer(messageObject.receiver_public_key_base64, \"base64\")\n    ),\n    new Uint8Array(new Buffer(props.secretKeyBase64, \"base64\"))\n  );\n\n  const messageText = messageTextUint8Array\n    ? Buffer.from(messageTextUint8Array).toString()\n    : null;\n\n  return (\n    <div className=\"card my-2 border-primary\">\n      <div className=\"card-header\">\n        <small class=\"text-muted\">\n          <div class=\"row justify-content-between\">\n            <div class=\"col-4\">\n              <Widget\n                src={`mob.near/widget/ProfileLine`}\n                props={{ accountId: senderAccountId }}\n              />\n            </div>\n            <div class=\"col-4\">\n              <div class=\"d-flex justify-content-end\">\n                <Widget\n                  src={`mob.near/widget/TimeAgo`}\n                  props={{ blockHeight: blockHeight }}\n                />\n              </div>\n            </div>\n          </div>\n        </small>\n      </div>\n      <div className=\"card-body\">\n        {messageText || \"\u26a0\ufe0f error reading message with your private key\"}\n      </div>\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <div class=\"input-group mb-3\">\n      <textarea\n        class=\"form-control\"\n        placeholder=\"Input message\"\n        onChange={(e) => {\n          State.update({\n            message: e.target.value,\n          });\n        }}\n      ></textarea>\n      <CommitButton\n        force\n        data={() => {\n          const nonce = nacl.randomBytes(nacl.box.nonceLength);\n\n          const encryptedMessage = nacl.box(\n            new Uint8Array(Buffer.from(state.message)),\n            nonce,\n            new Uint8Array(\n              Buffer.from(props.receiverPublicKeyBase64, \"base64\")\n            ),\n            nacl.box.keyPair.fromSecretKey(\n              Buffer.from(props.secretKeyBase64, \"base64\")\n            ).secretKey\n          );\n\n          const fullMessage = new Uint8Array(\n            nonce.length + encryptedMessage.length\n          );\n          fullMessage.set(nonce);\n          fullMessage.set(encryptedMessage, nonce.length);\n\n          return {\n            private_message: {\n              last_message: {\n                message_text_base64:\n                  Buffer.from(fullMessage).toString(\"base64\"),\n                receiver_public_key_base64: props.receiverPublicKeyBase64,\n                receiver_account_id: props.receiverAccountId,\n              },\n            },\n            index: {\n              private_message: JSON.stringify([\n                {\n                  key: props.receiverAccountId.toLowerCase(),\n                  value: {\n                    version: \"0\",\n                  },\n                },\n              ]),\n            },\n          };\n        }}\n      >\n        Send\n      </CommitButton>\n    </div>\n\n    {messages.map((messageObject) =>\n      renderMessage(messageObject.accountId, messageObject.blockHeight)\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bozon.near/widget/PrivateMessage.UserMessages"}