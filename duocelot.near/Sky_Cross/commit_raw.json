{"tx_hash": "5aoQ9p5YBnqFwyj8AqnvAfsApkJYTSziF3JdCYuUPhei", "action_id_social": "9a25aKvBoxYohyEnBCYRcCPsJToYH6hH62Pna46sAEEH-0-widget", "block_id": 85784166, "block_timestamp": "2023-02-22 09:54:49.041", "signer_id": "duocelot.near", "widget_name": "Sky_Cross", "source_code": "/* Created by duocelot and kasodon */\n/* Sky Cross Project */\n\nconst App = styled.div`\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst scriptSrc = `\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n#canvas1 {\n  width:  82vw;\n  height: 82vh;\n  margin: 0;\n  z-index: 100;\n  border: none;\n  border-radius: 20px;\n  background: grey;\n}\nimg {\n  display: none;\n}\n\n.ui .topbar {\n  background-image: url('https://ik.imagekit.io/duOCELOT/assets/topbar.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677056690431');\n  background-repeat: repeat-x;\n}\n</style>\n<canvas id=\"canvas1\"></canvas>\n    <img id=\"playerImage\" src=\"https://ik.imagekit.io/onyedika/skycross/player_BIG_mq9uKo5ll.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939877107\" alt=\"\" />\n    <img id=\"layer1Image\" src=\"https://ik.imagekit.io/onyedika/skycross/1_JZI4rwmIY9.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939858101\" alt=\"\" />\n    <img id=\"layer2Image\" src=\"https://ik.imagekit.io/onyedika/skycross/2_nnjLeWkZZ.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676993058655\" alt=\"\" />\n    <img id=\"layer3Image\" src=\"https://ik.imagekit.io/onyedika/skycross/3_bfIr7gkw-1.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939859797\" alt=\"\" />\n    <img id=\"layer4Image\" src=\"https://ik.imagekit.io/onyedika/skycross/4_Gx3192487.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939859766\" alt=\"\" />\n    <img id=\"layer5Image\" src=\"https://ik.imagekit.io/onyedika/skycross/7_-0OacUA6m.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676993162515\" alt=\"\" />\n    <img id=\"flyImage\" src=\"https://ik.imagekit.io/onyedika/skycross/bomb_iG_K37qGR.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939859611\" alt=\"\"/>\n    <img id=\"plantImage\" src=\"https://ik.imagekit.io/duOCELOT/assets/cherry.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677029658824\" alt=\"\"/>\n    <img id=\"spiderImage\" src=\"https://ik.imagekit.io/onyedika/skycross/enemy_spider_big_n3r4HKyjV.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939861559\" alt=\"\"/>\n    <img id=\"spiderBigImage\" src=\"https://ik.imagekit.io/onyedika/skycross/enemy_spider_big_n3r4HKyjV.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939861559\" alt=\"\"/>\n    <img id=\"fireTexture\" src=\"https://ik.imagekit.io/onyedika/skycross/fire_bwpPPyGYv.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939863595\" alt=\"\"/>\n    <img id=\"boomImage\" src=\"https://ik.imagekit.io/duOCELOT/assets/blast.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677030038390\" alt=\"\"/>\n    <img id=\"liveImage\" src=\"https://ik.imagekit.io/duOCELOT/assets/apple.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677036870013\" alt=\"\"/>\n    <img id=\"fireBallImage\" src=\"https://ik.imagekit.io/onyedika/skycross/projectile_8OBktN6_A.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939866264\" alt=\"\"/>\n    <img id=\"blastImage\" src=\"https://ik.imagekit.io/onyedika/skycross/blast_ilksOODqF.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939858435\" alt=\"\"/>\n    <img id=\"fruityImage\" src=\"https://ik.imagekit.io/onyedika/skycross/fruity_nBAzOrsrS.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939862429\" alt=\"\"/>\n    <img id=\"avatar\" src=\"https://ik.imagekit.io/duOCELOT/assets/avatar01.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677029634808\" alt=\"\"/>\n    <img id=\"topbar\" src = \"https://ik.imagekit.io/duOCELOT/assets/topbar.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677056690431\" alt=\"\"/>\n    <img id=\"bottombar\" src = \"https://ik.imagekit.io/duOCELOT/assets/bottombar.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677058956196\" alt=\"\"/>\n\n    <script type=\"module\">\n    window.addEventListener(\"load\", function () {\n  const canvas = this.document.getElementById(\"canvas1\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  class Game {\n            constructor(width, height) {\n                this.width = width;\n                this.height = height;\n            }\n            start() {\n                this.background = new Background(this);\n                this.groundMargin = 80 * this.background.scaleFactor;\n                this.player = new Player(this);\n                this.projectile = new Projectile(this);\n                this.input = new InputHandler(this);\n                this.speed = 0.9;\n                this.maxSpeed = 3;\n                this.enemies = [];\n                this.particles = [];\n                this.maxParticles = 1130;\n                this.collisions = [];\n                this.floatingMessages = [];\n                this.enemyTimer = 0;\n                this.enemyInterval = 1000 + Math.random() * 2.1;\n                this.debug = false;\n                this.score = 0;\n                this.fontFamily = \"Press Start 2P', cursive\"\n                this.fontColor = \"black\";\n                this.ui = new UI(this);\n                this.time = 0;\n                this.maxTime = 100000000;\n                this.lives = 20;\n                this.gameOver = false;\n                this.player.currentState = this.player.states[0];\n                this.player.currentState.enter();\n              \n            }\n            draw(context) {\n                this.background.draw(context);\n                this.player.draw(context);\n                this.enemies.forEach((e) => {\n                    e.draw(context);\n                });\n                // handle particles\n                this.particles.forEach((p) => {\n                    p.draw(context);\n                });\n                // handle collisions\n                this.collisions.forEach((c) => {\n                    c.draw(context);\n                });\n                // handle floating messages\n                this.floatingMessages.forEach((m, index) => {\n                    m.draw(context);\n                });\n                this.ui.draw(context);\n            }\n            update(delta) {\n                this.time += delta;\n                if (this.time > this.maxTime) {\n                    this.gameOver = true;\n                }\n                this.background.update();\n                this.player.update(this.input.keys, delta);\n                // this.projectile.update();\n                // handle enemies\n                if (this.enemyTimer > this.enemyInterval) {\n                    this.addEnemy();\n                    this.enemyTimer = 0;\n                } else {\n                    this.enemyTimer += delta;\n                }\n                this.enemies.forEach((e) => {\n                    e.update(delta);\n                });\n                this.enemies = this.enemies.filter((e) => !e.markForDeletion);\n                // handle particles\n                this.particles.forEach((p) => {\n                    p.update();\n                });\n                if (this.particles.length > this.maxParticles) {\n                    this.particles = this.particles.slice(0, this.maxParticles);\n                }\n                this.particles = this.particles.filter((p) => !p.markForDeletion);\n                // handle collisions\n                this.collisions.forEach((c) => {\n                    c.update(delta);\n                });\n                this.collisions = this.collisions.filter((c) => !c.markForDeletion);\n                // handle floating messages\n                this.floatingMessages.forEach((m) => {\n                    m.update();\n                });\n                this.floatingMessages = this.floatingMessages.filter((m) => !m.markForDeletion);\n            }\n            addEnemy() {\n                if (this.speed >= 1.9 && Math.random() < 0.05) {\n                    if (Math.random() > 0.9) {\n                        this.enemies.push(new GroundEnemy(this));\n                    } else {\n                        this.enemies.push(new ClimbingEnemy(this));\n                    }\n                } else if (this.speed > 0.6) {\n                    this.enemies.push(new FlyingEnemy(this));\n                }\n\n                const random = Math.random();\n                const flyingEnemyProbability = 0.1 + 0.05 * (this.time / 1000);\n                const groundEnemyProbability = 0.03 + 0.02 * (this.time / 1000);\n                const climbingEnemyProbability = 0.03 + 0.02 * (this.time / 1000);\n              \n                if (random < flyingEnemyProbability) {\n                  this.enemies.push(new FlyingEnemy(this));\n                } else if (random < flyingEnemyProbability + groundEnemyProbability && this.speed > 1.5) {\n                  this.enemies.push(new GroundEnemy(this));\n                } else if (random < flyingEnemyProbability + groundEnemyProbability + climbingEnemyProbability && this.speed > 1.2) {\n                  this.enemies.push(new ClimbingEnemy(this));\n                }\n              }\n              \n            \n        }\n        const game = new Game(canvas.width, canvas.height);\n        game.start();\n\n        function restartGame() {\n            game.start();\n            animate(0);\n        }\n\n        let lastTime = 0;\n\n        function animate(timestamp) {\n            const delta = timestamp - lastTime;\n            lastTime = timestamp;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            game.update(delta);\n            game.draw(ctx);\n            if (!game.gameOver) {\n                requestAnimationFrame(animate);\n            }\n        }\n        animate(0);\n\n        window.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"r\" && game.gameOver) {\n                restartGame();\n            }\n        });\n    });\n    class Layer {\n        constructor(game, width, height, speedModifier, image) {\n            this.game = game;\n            this.width = width;\n            this.height = height;\n            this.speedModifier = speedModifier;\n            this.image = image;\n            this.x = 0;\n            this.y = 0;\n        }\n        update() {\n            if (this.x < -this.width) this.x = 0;\n            else this.x -= this.game.speed * this.speedModifier;\n        }\n        draw(context) {\n            context.drawImage(this.image, this.x, this.y, this.width, this.height);\n            context.drawImage(this.image, this.x + this.width, this.y, this.width, this.height);\n        }\n    }\n\n    class Background {\n        constructor(game) {\n            this.game = game;\n            this.imageWidth = 1152;\n            this.imageHeight = 500;\n            this.scaleFactor = this.game.height / this.imageHeight;\n            this.width = this.imageWidth * this.scaleFactor;\n            this.height = this.imageHeight * this.scaleFactor;\n            this.layer5Image = layer5Image;\n            this.layer4Image = layer4Image;\n            this.layer3Image = layer3Image;\n            this.layer2Image = layer2Image;\n            this.layer1Image = layer1Image;\n            this.layer1 = new Layer(this.game, this.width, this.height, 0, this.layer1Image);\n            this.layer2 = new Layer(this.game, this.width, this.height, 0.007, this.layer2Image);\n            this.layer3 = new Layer(this.game, this.width, this.height, 0.02, this.layer3Image);\n            this.layer4 = new Layer(this.game, this.width, this.height, 0.063, this.layer4Image);\n            this.layer5 = new Layer(this.game, this.width, this.height, 0.2, this.layer5Image);\n            this.backgroundLayers = [this.layer1, this.layer2, this.layer3, this.layer4, this.layer5];\n        }\n        update() {\n            this.backgroundLayers.forEach((b) => {\n                b.update();\n            });\n        }\n        draw(context) {\n            this.backgroundLayers.forEach((b) => {\n                b.draw(context);\n            });\n        }\n    }\n\n    class CircleCollider {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n\n  intersects(other) {\n    if (other instanceof CircleCollider) {\n      const dx = other.x - this.x;\n      const dy = other.y - this.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      return distance < this.radius + other.radius;\n    } else {\n      throw new Error(\"Unsupported collider type\");\n    }\n  }\n}\n\n    class Enemy {\n        constructor() {\n            this.frameX = 0;\n            this.frameY = 0;\n            this.fps = 20;\n            this.frameInterval = 1000 / this.fps;\n            this.frameTimer = 0;\n            this.markForDeletion = false;\n            this.collider = new CircleCollider(this.x + this.width / 2, this.y + this.height / 2, 10);\n            this.type = 'projectile-particle';\n            this.prevPositions = [];\n\n            \n        }\n\n        update(deltaTime) {\n            // movement\n            this.x -= this.speedX + this.game.speed;\n            this.y += this.speedY;\n            if (this.frameTimer > this.frameInterval) {\n                this.frameTimer = 0;\n                if (this.frameX < this.maxFrame) this.frameX++;\n                else this.frameX = 0;\n            } else this.frameTimer += deltaTime;\n            // check off screen\n            if (this.x + this.width < 0) this.markForDeletion = true;\n        }\n        draw(context) {\n\n            for (let i = 0; i < this.prevPositions.length; i++) {\n                const pos = this.prevPositions[i];\n                context.fillStyle = \"rgba(255,255,255,0.3)\";\n                context.fillRect(pos.x, pos.y, this.width, this.height);\n            }\n            if (this.game.debug) {\n                context.strokeRect(this.x, this.y, this.width, this.height);\n            }\n            context.drawImage(this.image, this.frameX * this.width, this.frameY * this.height, this.width, this.height, this.x, this.y, this.width, this.height);\n        }\n    }\n\n    class FlyingEnemy extends Enemy {\n        constructor(game) {\n            super();\n            this.game = game;\n            this.width = 100;\n            this.height = 90;\n            this.x = this.game.width + Math.random() * this.game.width * 0.05;\n            this.y = Math.random() * this.game.height * 1.3;\n            this.speedX = Math.random() + 0.0001;\n            this.speedY = 0;\n            this.maxFrame = 4;\n            this.image = flyImage;\n            this.angle = 0;\n            this.va = Math.random() * 0.0001 + 0.0001; // velocity angle\n            this.type = 'flying-enemy';\n        }\n        update(deltaTime) {\n            super.update(deltaTime);\n            this.angle += this.va;\n            this.y += Math.sin(this.angle);\n        }\n    }\n\n    class GroundEnemy extends Enemy {\n        constructor(game) {\n            super();\n            this.game = game;\n            this.width = 100;\n            this.height = 100;\n            this.x = this.game.width + Math.random() * this.game.width * 0.05;\n            this.y = Math.random() * this.game.height * 1.3;\n            this.speedX = -5;\n            this.speedY = 0;\n            this.maxFrame = 1;\n            this.image = plantImage;\n            this.type = 'ground-enemy';\n        }\n    }\n    class ClimbingEnemy extends Enemy {\n        constructor(game) {\n            super();\n            this.game = game;\n            this.width = 375;\n            this.height = 306;\n            this.x = this.game.width;\n            this.y = Math.random() * this.game.height * 0.5;\n            this.image = spiderBigImage;\n            this.speedX = -3;\n            this.speedY = Math.random() > 0.2 ? 1 : -1;\n            this.maxFrame = 3;\n            this.type = 'climbing-enemy';\n        }\n        update(deltaTime) {\n            super.update(deltaTime);\n            if (this.y > this.game.height - this.height - this.game.groundMargin) this.speedY *= -1;\n            if (this.y < -this.height) this.markForDeletion = true;\n        }\n\n    }\n\n    class InputHandler {\n        constructor(game) {\n            this.keys = [];\n            this.shootInterval = null;\n            window.addEventListener(\"keydown\", (e) => {\n                if (this.keys.indexOf(e.key) === -1 && [\"ArrowLeft\", \"ArrowRight\", \"ArrowDown\", \"ArrowUp\", \"Enter\", \"Space\", \"r\", \"R\", \"s\", \"S\"].includes(e.key)) {\n                    this.keys.push(e.key);\n                    if (e.key === \"s\" || e.key === \"S\") {\n                        this.startShootInterval(game);\n                    }\n                } else if (e.key === \"d\") {\n                    game.debug = !game.debug;\n                }\n            });\n            window.addEventListener(\"keyup\", (e) => {\n                if (this.keys.indexOf(e.key) !== -1) {\n                    this.keys.splice(this.keys.indexOf(e.key), 1);\n                    if (e.key === \"s\" || e.key === \"S\") {\n                        this.stopShootInterval();\n                    }\n                }\n            });\n        }\n    \n        startShootInterval(game) {\n            if (!this.shootInterval) {\n                this.shootInterval = setInterval(() => {\n                    if (this.keys.includes(\"s\") || this.keys.includes(\"S\")) {\n                        game.player.setState(states.SHOOTING, 2);\n                        game.player.setState(states.RUNNING, 2);\n\n                    }\n                }, 290 + Math.floor(Math.random() * 20)); // Adjust the delay between shots here (in milliseconds)\n            }\n        }\n    \n        stopShootInterval() {\n            clearInterval(this.shootInterval);\n            this.shootInterval = null;\n        }\n    }\n    \n\n    class Player {\n        constructor(game, x, y, speed, sprite) {\n            this.game = game;\n            this.width = 302;\n            this.height = 261;\n            this.x = this.game.width / 6;\n            this.y = this.game.height / 3;\n            this.vy = 0;\n            this.projectiles = [];\n            this.image = playerImage;\n            this.frameX = 0;\n            this.frameY = 0;\n            this.maxFrame = 5;\n            this.fps = 20;\n            this.frameInterval = 1000 / this.fps;\n            this.frameTimer = 0;\n            this.speed = 0;\n            this.maxSpeed = 4.2;\n            this.weight = 1;\n            this.states = [new Sitting(game), new Running(game), new Jumping(game), new Falling(game), new Rolling(game), new Diving(game), new Hit(game), new Shooting(game), ];\n            this.currentState = null;\n            this.collider = new CircleCollider(this.x + this.width / 2, this.y + this.height / 2, 10);\n\n        }\n        update(inputKeys, delta) {\n            this.checkCollisions();\n            this.currentState.handleInput(inputKeys);\n\n\n            // horizontal movement\n            if (inputKeys.includes(\"ArrowRight\") && this.currentState !== this.states[6]) {\n                this.x += this.maxSpeed + 0.001;\n            } else if (inputKeys.includes(\"ArrowLeft\") && this.currentState !== this.states[6]) {\n                this.x -= this.maxSpeed + 0.001;\n            }\n            // else if (inputKeys.includes(\"s\") && this.currentState !== this.states[6]) {\t\n            //   this.projectiles.forEach((projectile) => {\t\n            //     projectile.update();\t\n            //   });\t\n            //   this.projectiles = this.projectiles.filter(\t\n            //     (projectile) => !projectile.markedForDeletion\t\n            //   );\t\n            // } \n            else this.speed = 0;\n\n            // horizontal boundaries\n            if (this.x < 0) this.x = 0;\n            if (this.x > this.game.width - this.width) this.x = this.game.width - this.width;\n\n            // vertical movement\n            if (inputKeys.includes(\"ArrowUp\") && this.currentState !== this.states[6]) {\n                this.y -= this.maxSpeed + 0.001;\n            } else if (inputKeys.includes(\"ArrowDown\") && this.currentState !== this.states[6]) {\n                this.y += this.maxSpeed + 0.001;\n            }\n         \n            else this.speed = 0;\n\n            // vertical boundaries\n            if (this.y < 0) this.y = 0;\n            if (this.y > this.game.height - this.height - this.game.groundMargin) {\n                this.y = this.game.height - this.height - this.game.groundMargin;\n            }\n\n            // sprite animation\n            if (this.frameTimer > this.frameInterval) {\n                this.frameTimer = 0;\n                if (this.frameX < this.maxFrame) this.frameX++;\n                else this.frameX = 0;\n            } else {\n                this.frameTimer += delta;\n            }\n        }\n\n        draw(context) {\n            if (this.game.debug) {\n                context.strokeRect(this.x, this.y, this.width, this.height);\n            }\n            this.projectiles.forEach((projectile) => {\n                projectile.draw(context);\n            });\n            context.drawImage(this.image, this.frameX * this.width, this.frameY * this.height, this.width, this.height, this.x, this.y, this.width, this.height);\n        }\n    \n        onGround() {\n        //    return this.y >= this.game.height - this.height - this.game.groundMargin;\n        }\n        setState(stateIndex, speed) {\n            this.currentState = this.states[stateIndex];\n            this.game.speed = this.game.maxSpeed * speed;\n            this.currentState.enter();\n        }\n        checkCollisions() {\n            this.game.enemies.forEach((enemy) => {\n                if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y && enemy.type === 'climbing-enemy') {\n                    enemy.markForDeletion = true;\n                    this.game.collisions.push(new CollisionAnimation(this.game, enemy.x + enemy.width * 0.5, enemy.y + enemy.height * 0.5));\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\n                        this.game.score++;\n                        this.game.floatingMessages.push(new FloatingMessage(\"+1\", enemy.x, enemy.y, 150, 50));\n                    } else {\n                        this.game.lives--;\n                        if (this.game.lives === 0) {\n                            this.game.gameOver = true;\n                        }\n                        this.setState(6, 0);\n                    }\n                } else if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y && enemy.type === 'flying-enemy') {\n                    enemy.markForDeletion = true;\n                    this.game.collisions.push(new CollisionBlastAnimation(this.game, enemy.x + enemy.width * 0.3, enemy.y + enemy.height * 0.3));\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\n                        if (this.game.score > 0) {\n                            this.game.score--;\n                        }\n                        this.game.lives--;\n                        this.game.floatingMessages.push(new FloatingMessage(\"-1 \u2620\ufe0f\", enemy.x, enemy.y, 150, 50));\n                        if (this.game.lives === 0) {\n                            this.game.gameOver = true;\n                        }\n                    } else {\n                        this.game.lives--;\n                        if (this.game.lives === 0) {\n                            this.game.gameOver = true;\n                        }\n                        this.setState(6, 0);\n                    }\n                } else if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y && enemy.type === 'ground-enemy') {\n                    enemy.markForDeletion = true;\n                    this.game.collisions.push(new CollisionFruityAnimation(this.game, enemy.x + enemy.width * 0.3, enemy.y + enemy.height * 0.3));\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\n                        this.game.lives++;\n                        this.game.floatingMessages.push(new FloatingMessage(\"+1 \u2b50\", enemy.x, enemy.y, 140, 50));\n                        if (this.game.lives === 0) {\n                            this.game.gameOver = true;\n                        }\n                    } else {\n                        this.game.lives--;\n                        if (this.game.lives === 0) {\n                            this.game.gameOver = true;\n                        }\n                        this.setState(6, 0);\n                    }\n                }\n            });\n        }\n    }\n\n    const states = {\n        SITTING: 0,\n        RUNNING: 1,\n        JUMPING: 2,\n        FALLING: 3,\n        ROLLING: 4,\n        DIVING: 5,\n        HIT: 6,\n        SHOOTING: 7,\n    };\n\n    class State {\n        constructor(state, game) {\n            this.state = state;\n            this.game = game;\n        }\n    }\n\n    class Sitting extends State {\n        constructor(game) {\n            super(\"SITTING\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.frameY = 1;\n            this.game.player.maxFrame = 6;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n\n            if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowDown\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"Enter\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n            }\n        }\n    }\n\n    class Running extends State {\n        constructor(game) {\n            super(\"RUNNING\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.maxFrame = 6;\n            this.game.player.frameY = 0;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.05, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n\n            if (inputKeys.includes(\"ArrowDown\")) this.game.player.setState(states.RUNNING, 2);\n            else if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"Enter\")) {\n                this.game.player.setState(states.ROLLING, 2);\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n            }\n        }\n    }\n\n    class Jumping extends State {\n        constructor(game) {\n            super(\"JUMPING\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.frameY = 1;\n            this.game.player.maxFrame = 6;\n            if (this.game.player.onGround()) this.game.player.vy = -27;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n\n            if (inputKeys.includes(\"Enter\")) {\n                this.game.player.setState(states.ROLLING, 2);\n            } else if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowDown\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n            }\n        }\n    }\n\n    class Falling extends State {\n        constructor(game) {\n            super(\"FALLING\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.frameY = 2;\n            this.game.player.maxFrame = 6;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n\n         if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowDown\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n            }\n        }\n    }\n\n    class Rolling extends State {\n        constructor(game) {\n            super(\"ROLLING\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.frameY = 6;\n            this.game.player.maxFrame = 6;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n            if (!inputKeys.includes(\"Enter\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (!inputKeys.includes(\"Enter\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"Enter\") && inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowDown\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n            } else if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            }\n        }\n    }\n\n    class Diving extends State {\n        constructor(game) {\n            super(\"DIVING\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.frameY = 6;\n            this.game.player.maxFrame = 6;\n            this.game.player.vy = 5;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n            if (inputKeys.includes(\"Enter\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowDown\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            }\n        }\n    }\n\n    class Hit extends State {\n        constructor(game) {\n            super(\"HIT\", game);\n        }\n        enter() {\n            this.game.player.frameX = 0;\n            this.game.player.frameY = 4;\n            this.game.player.maxFrame = 10;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n            this.game.particles.unshift(new Splash(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n            if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\n                this.game.player.setState(states.SHOOTING, 2);\n                this.game.player.setState(states.RUNNING, 2);\n            }\n        }\n    }\n\n    class Shooting extends State {\n        constructor(game) {\n            super(\"SHOOTING\", game);\n            this.lastFireTime = 0;\n        }\n        enter() {\n            this.game.player.frameX = 5;\n            this.game.player.frameY = 1;\n            this.game.player.maxFrame = 1;\n            this.game.particles.unshift(new Projectile(this.game, this.game.player.x + this.game.player.width * 0.55, this.game.player.y + this.game.player.height * 0.5));\n            // this.game.projectile.vy = -27;\n        }\n        handleInput(inputKeys) {\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n            this.game.particles.unshift(new Splash(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\n            if (inputKeys.includes(\"ArrowLeft\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowRight\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowUp\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            } else if (inputKeys.includes(\"ArrowDown\")) {\n                this.game.player.setState(states.RUNNING, 2);\n            }\n        }\n    }\n\n    class Particle {\n        constructor(game) {\n            this.game = game;\n            this.markForDeletion = false;\n        }\n        update() {\n            this.x -= this.speedX + this.game.speed;\n            this.y -= this.speedY;\n            this.size *= 0.97;\n            if (this.size < 0.5) this.markForDeletion = true;\n        }\n\n    }\nclass ParticleEffect {\n  constructor(x, y, img, numParticles) {\n    this.x = x;\n    this.y = y;\n    this.numParticles = numParticles;\n    this.particles = [];\n    this.finished = false;\n\n    // Use the specified image or animation for the particle effect\n    this.img = img;\n    this.frameIndex = 0;\n    this.frameCount = img.frames ? img.frames.length : 1;\n  }\n\n  update() {\n    // Update the position of each particle\n    for (let i = 0; i < this.particles.length; i++) {\n      let p = this.particles[i];\n      p.x += p.vx;\n      p.y += p.vy;\n      p.life--;\n      if (p.life <= 0) {\n        this.particles.splice(i, 1);\n        i--;\n      }\n    }\n    if (this.particles.length === 0) {\n      this.finished = true;\n    }\n\n    // Update the animation frame for the particle effect\n    if (this.img.frames) {\n      this.frameIndex++;\n      if (this.frameIndex >= this.frameCount) {\n        this.frameIndex = 0;\n      }\n    }\n  }\n\n  draw(ctx) {\n    // Draw each particle\n    for (let i = 0; i < this.particles.length; i++) {\n      let p = this.particles[i];\n      let alpha = p.life / this.maxLife;\n      ctx.fillStyle = \"rgba(255,255,255,0.3)\";\n      ctx.fillRect(p.x - 1, p.y - 1, 2, 2);\n    }\n\n    // Draw the particle effect using the specified image or animation\n    if (this.img.frames) {\n      let frame = this.img.frames[this.frameIndex];\n      ctx.drawImage(\n        this.img.img,\n        frame.x,\n        frame.y,\n        frame.w,\n        frame.h,\n        this.x,\n        this.y,\n        frame.w,\n        frame.h\n      );\n    } else {\n      ctx.drawImage(this.img.img, this.x, this.y);\n    }\n  }\n\n  createParticle() {\n    // Create a new particle with a random velocity and lifespan\n    let angle = Math.random() * Math.PI * 2;\n    let speed = Math.random() * 3 + 1;\n    let vx = Math.cos(angle) * speed;\n    let vy = Math.sin(angle) * speed;\n    let life = Math.floor(Math.random() * 30) + 30;\n    this.particles.push({ x: this.x, y: this.y, vx, vy, life });\n  }\n\n  explode() {\n    // Create a burst of particles\n    for (let i = 0; i < this.numParticles; i++) {\n      this.createParticle();\n    }\n  }\n}\n    class Projectile extends Particle {\n        constructor(game, x, y) {\n            super(game);\n            this.game = game;\n            this.x = x;\n            this.y = y;\n            this.vy = 0;\n            this.width = 20;\n            this.height = 20;\n            this.speed = 7;\n            this.image = fireBallImage;\n            this.states = this.game.player.states;\n            this.currentState = this.game.player.currentState;\n            this.type = 'projectile-particle';\n            this.prevPositions = [];\n\n            \n        }\n\n       draw(context) {\n            for (let i = 0; i < this.prevPositions.length; i++) {\n                const pos = this.prevPositions[i];\n                context.fillStyle = \"rgba(255,255,255,0.3)\";\n                context.fillRect(pos.x, pos.y, this.width, this.height);\n            }\n            context.drawImage(this.image, this.x, this.y, this.width, this.height);\n        }\n\n        update() {\n            this.prevPositions.push({ x: this.x, y: this.y });\nif (this.prevPositions.length > 20) {\n    this.prevPositions.shift();\n}\n            // super.update();\n            this.checkCollisions();\n            this.x += this.speed;\n            // if (this.x > this.game.width * 0.8) this.markedForDeletion = true;\n        }\n\n        checkCollisions() {\n            this.game.enemies.forEach((enemy) => {\n                if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y) {\n                    enemy.markForDeletion = true;\n                    this.game.particles.forEach((p) => {\n                        if (p.type === 'projectile-particle' && enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y) {\n                            p.markForDeletion = true;\n                        }\n                    })\n                    this.game.collisions.push(new CollisionAnimation(this.game, enemy.x + enemy.width * 0.5, enemy.y + enemy.height * 0.5));\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\n                        this.game.score++;\n                        this.game.floatingMessages.push(new FloatingMessage(\"+1 \u2b50\", enemy.x, enemy.y, 150, 50));\n                    } else {\n                        this.game.lives--;\n                        if (this.game.lives === 0) {\n                            this.game.gameOver = true;\n                        }\n                        this.setState(6, 0);\n                    }\n                }\n            });\n        }\n    }\n\n    class Dust extends Particle {\n        constructor(game, x, y) {\n            super(game);\n            this.size = Math.random() * 10.2 + 10;\n            this.x = x + 40;\n            this.y = y - 50;\n            this.speedX = Math.random() * 0.2;\n            this.speedY = Math.random() * 2.2;\n            this.color = \"rgba(255,255,255,0.3)\";\n            this.type = 'dust-particle';\n        }\n        draw(context) {\n            context.beginPath();\n            context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n            context.fillStyle = this.color;\n            context.fill();\n        }\n    }\n\n    class Splash extends Particle {\n        constructor(game, x, y) {\n            super(game);\n            this.size = Math.random() * 100 + 100;\n            this.x = x - this.size * 0.4;\n            this.y = y - this.size * 0.5;\n            this.speedX = Math.random() * 6 - 4;\n            this.speedY = Math.random() * 4 + 1;\n            this.gravity = 0;\n            this.image = fireTexture;\n            this.type = 'splash-particle';\n        }\n        draw(context) {\n            context.drawImage(this.image, this.x, this.y, this.size, this.size);\n        }\n        update() {\n            super.update();\n            this.gravity += 0.1;\n            this.y += this.gravity;\n        }\n    }\n\n    class Fire extends Particle {\n        constructor(game, x, y) {\n            super(game);\n            this.image = fireTexture;\n            this.size = Math.random() * 10 + 50;\n            this.x = x - 50;\n            this.y = y;\n            this.speedX = 1;\n            this.speedY = 1;\n            this.angle = 0;\n            this.va = Math.random() * 0.02 - 0.1;\n            this.type = 'fire-particle';\n        }\n        draw(context) {\n            context.save();\n            context.translate(this.x, this.y);\n            context.rotate(this.angle * 5);\n            context.drawImage(this.image, -this.size * 0.5, -this.size * 0.5, this.size, this.size);\n            context.restore();\n        }\n        update() {\n            super.update();\n            this.angle += this.va;\n            this.x += Math.sin(this.angle);\n        }\n    }\n\n    class FloatingMessage {\n        constructor(value, x, y, targetX, targetY) {\n            this.value = value;\n            this.x = x;\n            this.y = y;\n            this.targetX = targetX;\n            this.targetY = targetY;\n            this.timer = 0;\n            this.markForDeletion = false;\n        }\n        update() {\n            this.x += (this.targetX - this.x) * 0.03;\n            this.y += (this.targetY - this.y) * 0.03;\n            this.timer++;\n            if (this.timer > 100) {\n                this.markForDeletion = true;\n            }\n        }\n        draw(context) {\n            context.font = \"40px \" + this.fontFamily;\n            context.fillStyle = \"white\";\n            context.fillText(this.value, this.x, this.y);\n            context.fillStyle = \"black\";\n            context.fillText(this.value, this.x - 2, this.y - 2);\n        }\n    }\n\n    class CollisionAnimation {\n        constructor(game, x, y) {\n            this.game = game;\n            this.image = boomImage;\n            this.x = x;\n            this.y = y;\n            this.spriteWidth = 158;\n            this.spriteHeight = 158;\n            this.sizeModifier = Math.random() + 0.5;\n            this.width = this.spriteWidth * this.sizeModifier;\n            this.height = this.spriteHeight * this.sizeModifier;\n            this.x = x - this.width * 0.5;\n            this.y = y - this.height * 0.5;\n            this.frameX = 0;\n            this.maxFrame = 4;\n            this.markForDeletion = false;\n            this.fps = Math.random() * 10 + 5;\n            this.frameInterval = 1000 / this.fps;\n            this.frameTimer = 0;\n        }\n        draw(context) {\n            context.drawImage(this.image, this.frameX * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\n        }\n        update(delta) {\n            this.x -= this.game.speed;\n            if (this.frameTimer > this.frameInterval) {\n                this.frameX++;\n                if (this.frameX > this.maxFrame) this.markForDeletion = true;\n                this.frameTimer = 0;\n            } else this.frameTimer += delta;\n        }\n    }\n\n    class CollisionBlastAnimation {\n        constructor(game, x, y) {\n            this.game = game;\n            this.image = blastImage;\n            this.x = x;\n            this.y = y;\n            this.spriteWidth = 158;\n            this.spriteHeight = 158;\n            this.sizeModifier = Math.random() + 0.5;\n            this.width = this.spriteWidth * this.sizeModifier;\n            this.height = this.spriteHeight * this.sizeModifier;\n            this.x = x - this.width * 0.5;\n            this.y = y - this.height * 0.5;\n            this.frameX = 0;\n            this.maxFrame = 9;\n            this.markForDeletion = false;\n            this.fps = Math.random() * 10 + 5;\n            this.frameInterval = 1000 / this.fps;\n            this.frameTimer = 0;\n        }\n        draw(context) {\n            context.drawImage(this.image, this.frameX * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\n        }\n        update(delta) {\n            this.x -= this.game.speed;\n            if (this.frameTimer > this.frameInterval) {\n                this.frameX++;\n                if (this.frameX > this.maxFrame) this.markForDeletion = true;\n                this.frameTimer = 0;\n            } else this.frameTimer += delta;\n        }\n    }\n\n    class CollisionFruityAnimation {\n        constructor(game, x, y) {\n            this.game = game;\n            this.image = fruityImage;\n            this.x = x;\n            this.y = y;\n            this.spriteWidth = 158;\n            this.spriteHeight = 158;\n            this.sizeModifier = Math.random() + 0.5;\n            this.width = this.spriteWidth * this.sizeModifier;\n            this.height = this.spriteHeight * this.sizeModifier;\n            this.x = x - this.width * 0.5;\n            this.y = y - this.height * 0.5;\n            this.frameX = 0;\n            this.maxFrame = 9;\n            this.markForDeletion = false;\n            this.fps = Math.random() * 10 + 5;\n            this.frameInterval = 1000 / this.fps;\n            this.frameTimer = 0;\n        }\n        draw(context) {\n            context.drawImage(this.image, this.frameX * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\n        }\n        update(delta) {\n            this.x -= this.game.speed;\n            if (this.frameTimer > this.frameInterval) {\n                this.frameX++;\n                if (this.frameX > this.maxFrame) this.markForDeletion = true;\n                this.frameTimer = 0;\n            } else this.frameTimer += delta;\n        }\n    }\n\nclass UI {\n   constructor(game) {\n    this.game = game;\n    this.fontSize = 30;\n    this.fontFamily = \"Press Start 2P', cursive\";\n    this.livesImage = liveImage;\n    this.topBarHeight = 50;\n    this.leftColumnWidth = 50;\n    this.rightColumnWidth = 50;\n    this.bottomBarHeight = 120;\n    this.avatarImage = document.getElementById(\"avatar\");\n    this.avatarWidth = 140;\n    this.avatarHeight = 140;\n    this.topBarBackground = new Image();\n    this.topBarBackground.src = \"https://ik.imagekit.io/duOCELOT/assets/topbar.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677056690431\";\n    this.bottomBarBackground = new Image();\n    this.bottomBarBackground.src = \"https://ik.imagekit.io/duOCELOT/assets/bottombar.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677058956196\";\n    }\n  \n\n  draw(context) {\n    // Draw top bar\n    context.fillStyle = \"transparent\";\n    context.fillRect(0, 0, this.game.width, this.topBarHeight);\n\n    context.font = \"20px Arial\";\n    context.fillStyle = \"white\";\n    context.fillText(\"SKY CROSS\", 500, 30);\n\n    // Draw right column\n    context.fillStyle = \"gray\";\n    context.fillRect(\n      this.game.width - this.rightColumnWidth,\n      this.topBarHeight,\n      this.rightColumnWidth,\n      this.game.height - this.topBarHeight - this.bottomBarHeight\n    );\n\n    // Draw left column\n    context.fillStyle = \"gray\";\n    context.fillRect(\n      0,\n      this.topBarHeight,\n      this.leftColumnWidth,\n      this.game.height - this.topBarHeight - this.bottomBarHeight\n    );\n\n    // Draw bottom bar\n    context.fillStyle = \"transparent\";\n    context.fillRect(\n      0,\n      this.game.height - this.bottomBarHeight,\n      this.game.width,\n      this.bottomBarHeight\n    );\n\n    const margin = 60;\n    const textY = this.game.height - this.bottomBarHeight + margin + this.fontSize;\n\n    \n  // Draw avatar\n  const avatarX = this.game.width - (this.rightColumnWidth + 180 );\n  const avatarY = this.game.height - (this.bottomBarHeight + 40 );\n  context.strokeStyle = \"black\";\n  context.lineWidth = 2;\n  context.strokeRect(avatarX, avatarY, this.avatarWidth, this.avatarHeight);\n  context.drawImage(\n    this.avatarImage,\n    avatarX + (this.avatarWidth - this.avatarHeight) / 2,\n    avatarY + (this.avatarHeight - this.avatarWidth) / 2,\n    this.avatarHeight,\n    this.avatarWidth\n  );\n\n// Draw top bar background\nconst pattern = context.createPattern(this.topBarBackground, \"repeat-x\");\ncontext.fillStyle = pattern;\ncontext.fillRect(0, 0, this.game.width, this.topBarHeight);\n\n// Draw bottom bar background\nconst pattern2 = context.createPattern(this.bottomBarBackground, \"repeat-x\");\ncontext.fillStyle = pattern2;\ncontext.fillRect(0, this.game.height - this.bottomBarHeight, this.game.width, this.bottomBarHeight);\n\n    // Draw score\n    context.font = this.font;\n    context.fillStyle = \"white\";\n\n    // Set text styles\n    \n    context.font = this.fontSize + this.fontFamily;\n    context.textAlign = \"left\";\n  context.fillStyle = \"white\";\n    // Draw score and lives\n    context.fillText(\n      \"Score: \" + this.game.score,\n      this.leftColumnWidth + 20,\n      this.game.height - this.bottomBarHeight + 40\n    );\n    context.fillText(\n      \"Lives: \",\n      this.leftColumnWidth + 20,\n      this.game.height - this.bottomBarHeight + 65\n    );\n    for (let i = 0; i < this.game.lives; i++) {\n      context.drawImage(\n        this.livesImage,\n        this.leftColumnWidth + 100 + 25 * i,\n        this.game.height - this.bottomBarHeight + 50,\n        25,\n        25\n      );\n}\n    // Draw game over text\n    if (this.game.gameOver) {\n      context.fillStyle = \"rgba(34, 3, 44, 0.5)\";\n      context.fillRect(0, 0, this.game.width, this.game.height);\n      context.textAlign = \"center\";\n      context.font = this.fontSize + this.fontFamily;\n\n      if (this.game.score > 500) {\n        context.fillText(\"MISSION ACCOMPLISHED\", this.game.width * 0.5, this.game.height * 0.5 - 20);\n        context.font = this.fontSize + this.fontFamily;\n        context.fillText(\"YOU ARRIVED SAFETY\", this.game.width * 0.5, this.game.height * 0.5 + 20);\n        context.fillText(\"PRESS R TO PLAY AGAIN\", this.game.width * 0.5, this.game.height * 0.5 + 30);\n      } else {\n        context.fillText(\"MISSION FAILED\", this.game.width * 0.5, this.game.height * 0.5 - 20);\n        context.font = this.fontSize + this.fontFamily;\n        context.fillText(\"YOU COULDN'T COMPLETE THE JOURNEY\", this.game.width * 0.5, this.game.height * 0.5 + 5);\n        context.fillText(\"PRESS R TO PLAY AGAIN\", this.game.width * 0.5, this.game.height * 0.5 + 30);\n      }\n    }\n  }\n}\n    </script>\n`;\n\nreturn (\n  <div>\n    <iframe srcDoc={scriptSrc} style={{ height: \"800px\", width: \"100%\" }} />\n  </div>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/duocelot.near/widget/Sky_Cross", "metadata.description": NaN, "metadata.name": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.tags.app": NaN, "metadata.tags.game": NaN, "metadata.tags.nft": NaN, "metadata.tags.hackathon": NaN}