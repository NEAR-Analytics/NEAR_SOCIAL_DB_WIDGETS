{"tx_hash": "CKXeo6GGx4eUpwVq6FQzv769ZfMbqq7BGL4nP2UyCtWX", "action_id_social": "9CovQv5BTuAT2N2BU1FMFe4dtc7MJf9RaqryhPnfdQ1e-0-widget", "block_id": 85766951, "block_timestamp": "2023-02-22 04:21:27.164", "signer_id": "duocelot.near", "widget_name": "Sky_Cross", "source_code": "/* Created by duocelot and kasodon */\r\n/* Sky Cross Project */\r\n\r\nconst App = styled.div`\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst scriptSrc = `\r\n<style>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n#canvas1 {\r\n  width:  82vw;\r\n  height: 82vh;\r\n  margin: 0;\r\n  z-index: 100;\r\n  border: none;\r\n  border-radius: 20px;\r\n  background: grey;\r\n}\r\nimg {\r\n  display: none;\r\n}\r\n</style>\r\n<canvas id=\"canvas1\"></canvas>\r\n    <img id=\"playerImage\" src=\"https://ik.imagekit.io/onyedika/skycross/player_BIG_mq9uKo5ll.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939877107\" alt=\"\" />\r\n    <img id=\"layer1Image\" src=\"https://ik.imagekit.io/onyedika/skycross/1_JZI4rwmIY9.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939858101\" alt=\"\" />\r\n    <img id=\"layer2Image\" src=\"https://ik.imagekit.io/onyedika/skycross/2_nnjLeWkZZ.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676993058655\" alt=\"\" />\r\n    <img id=\"layer3Image\" src=\"https://ik.imagekit.io/onyedika/skycross/3_bfIr7gkw-1.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939859797\" alt=\"\" />\r\n    <img id=\"layer4Image\" src=\"https://ik.imagekit.io/onyedika/skycross/4_Gx3192487.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939859766\" alt=\"\" />\r\n    <img id=\"layer5Image\" src=\"https://ik.imagekit.io/onyedika/skycross/7_-0OacUA6m.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676993162515\" alt=\"\" />\r\n    <img id=\"flyImage\" src=\"https://ik.imagekit.io/onyedika/skycross/bomb_iG_K37qGR.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939859611\" alt=\"\"/>\r\n    <img id=\"plantImage\" src=\"https://ik.imagekit.io/duOCELOT/assets/cherry.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677029658824\" alt=\"\"/>\r\n    <img id=\"spiderImage\" src=\"https://ik.imagekit.io/onyedika/skycross/enemy_spider_big_n3r4HKyjV.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939861559\" alt=\"\"/>\r\n    <img id=\"spiderBigImage\" src=\"https://ik.imagekit.io/onyedika/skycross/enemy_spider_big_n3r4HKyjV.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939861559\" alt=\"\"/>\r\n    <img id=\"fireTexture\" src=\"https://ik.imagekit.io/onyedika/skycross/fire_bwpPPyGYv.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939863595\" alt=\"\"/>\r\n    <img id=\"boomImage\" src=\"https://ik.imagekit.io/duOCELOT/assets/blast.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677030038390\" alt=\"\"/>\r\n    <img id=\"liveImage\" src=\"https://ik.imagekit.io/duOCELOT/assets/apple.png?ik-sdk-version=javascript-1.4.3&updatedAt=1677036870013\" alt=\"\"/>\r\n    <img id=\"fireBallImage\" src=\"https://ik.imagekit.io/onyedika/skycross/projectile_8OBktN6_A.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939866264\" alt=\"\"/>\r\n    <img id=\"blastImage\" src=\"https://ik.imagekit.io/onyedika/skycross/blast_ilksOODqF.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939858435\" alt=\"\"/>\r\n    <img id=\"fruityImage\" src=\"https://ik.imagekit.io/onyedika/skycross/fruity_nBAzOrsrS.png?ik-sdk-version=javascript-1.4.3&updatedAt=1676939862429\" alt=\"\"/>\r\n    <script type=\"module\">\r\n    window.addEventListener(\"load\", function () {\r\n  const canvas = this.document.getElementById(\"canvas1\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n  canvas.width = window.innerWidth;\r\n  canvas.height = window.innerHeight;\r\n  class Game {\r\n            constructor(width, height) {\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n            start() {\r\n                this.background = new Background(this);\r\n                this.groundMargin = 80 * this.background.scaleFactor;\r\n                this.player = new Player(this);\r\n                this.projectile = new Projectile(this);\r\n                this.input = new InputHandler(this);\r\n                this.speed = 0.5;\r\n                this.maxSpeed = 3;\r\n                this.enemies = [];\r\n                this.particles = [];\r\n                this.maxParticles = 1130;\r\n                this.collisions = [];\r\n                this.floatingMessages = [];\r\n                this.enemyTimer = 0;\r\n                this.enemyInterval = 1000 + Math.random() * 2.1;\r\n                this.debug = false;\r\n                this.score = 0;\r\n                this.fontFamily = \"Press Start 2P', cursive\"\r\n                this.fontColor = \"black\";\r\n                this.ui = new UI(this);\r\n                this.time = 0;\r\n                this.maxTime = 100000000;\r\n                this.lives = 20;\r\n                this.gameOver = false;\r\n                this.player.currentState = this.player.states[0];\r\n                this.player.currentState.enter();\r\n              \r\n            }\r\n            draw(context) {\r\n                this.background.draw(context);\r\n                this.player.draw(context);\r\n                this.enemies.forEach((e) => {\r\n                    e.draw(context);\r\n                });\r\n                // handle particles\r\n                this.particles.forEach((p) => {\r\n                    p.draw(context);\r\n                });\r\n                // handle collisions\r\n                this.collisions.forEach((c) => {\r\n                    c.draw(context);\r\n                });\r\n                // handle floating messages\r\n                this.floatingMessages.forEach((m, index) => {\r\n                    m.draw(context);\r\n                });\r\n                this.ui.draw(context);\r\n            }\r\n            update(delta) {\r\n                this.time += delta;\r\n                if (this.time > this.maxTime) {\r\n                    this.gameOver = true;\r\n                }\r\n                this.background.update();\r\n                this.player.update(this.input.keys, delta);\r\n                // this.projectile.update();\r\n                // handle enemies\r\n                if (this.enemyTimer > this.enemyInterval) {\r\n                    this.addEnemy();\r\n                    this.enemyTimer = 0;\r\n                } else {\r\n                    this.enemyTimer += delta;\r\n                }\r\n                this.enemies.forEach((e) => {\r\n                    e.update(delta);\r\n                });\r\n                this.enemies = this.enemies.filter((e) => !e.markForDeletion);\r\n                // handle particles\r\n                this.particles.forEach((p) => {\r\n                    p.update();\r\n                });\r\n                if (this.particles.length > this.maxParticles) {\r\n                    this.particles = this.particles.slice(0, this.maxParticles);\r\n                }\r\n                this.particles = this.particles.filter((p) => !p.markForDeletion);\r\n                // handle collisions\r\n                this.collisions.forEach((c) => {\r\n                    c.update(delta);\r\n                });\r\n                this.collisions = this.collisions.filter((c) => !c.markForDeletion);\r\n                // handle floating messages\r\n                this.floatingMessages.forEach((m) => {\r\n                    m.update();\r\n                });\r\n                this.floatingMessages = this.floatingMessages.filter((m) => !m.markForDeletion);\r\n            }\r\n            addEnemy() {\r\n                if (this.speed >= 1.9 && Math.random() < 0.05) {\r\n                    if (Math.random() < 0.5) {\r\n                        this.enemies.push(new GroundEnemy(this));\r\n                    } else {\r\n                        this.enemies.push(new ClimbingEnemy(this));\r\n                    }\r\n                } else if (this.speed > 0.6) {\r\n                    this.enemies.push(new FlyingEnemy(this));\r\n                }\r\n\r\n                const random = Math.random();\r\n                const flyingEnemyProbability = 0.1 + 0.05 * (this.time / 1000);\r\n                const groundEnemyProbability = 0.03 + 0.02 * (this.time / 1000);\r\n                const climbingEnemyProbability = 0.03 + 0.02 * (this.time / 1000);\r\n              \r\n                if (random < flyingEnemyProbability) {\r\n                  this.enemies.push(new FlyingEnemy(this));\r\n                } else if (random < flyingEnemyProbability + groundEnemyProbability && this.speed > 1.5) {\r\n                  this.enemies.push(new GroundEnemy(this));\r\n                } else if (random < flyingEnemyProbability + groundEnemyProbability + climbingEnemyProbability && this.speed > 1.2) {\r\n                  this.enemies.push(new ClimbingEnemy(this));\r\n                }\r\n              }\r\n              \r\n            \r\n        }\r\n        const game = new Game(canvas.width, canvas.height);\r\n        game.start();\r\n\r\n        function restartGame() {\r\n            game.start();\r\n            animate(0);\r\n        }\r\n\r\n        let lastTime = 0;\r\n\r\n        function animate(timestamp) {\r\n            const delta = timestamp - lastTime;\r\n            lastTime = timestamp;\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            game.update(delta);\r\n            game.draw(ctx);\r\n            if (!game.gameOver) {\r\n                requestAnimationFrame(animate);\r\n            }\r\n        }\r\n        animate(0);\r\n\r\n        window.addEventListener(\"keydown\", (e) => {\r\n            if (e.key === \"r\" && game.gameOver) {\r\n                restartGame();\r\n            }\r\n        });\r\n    });\r\n    class Layer {\r\n        constructor(game, width, height, speedModifier, image) {\r\n            this.game = game;\r\n            this.width = width;\r\n            this.height = height;\r\n            this.speedModifier = speedModifier;\r\n            this.image = image;\r\n            this.x = 0;\r\n            this.y = 0;\r\n        }\r\n        update() {\r\n            if (this.x < -this.width) this.x = 0;\r\n            else this.x -= this.game.speed * this.speedModifier;\r\n        }\r\n        draw(context) {\r\n            context.drawImage(this.image, this.x, this.y, this.width, this.height);\r\n            context.drawImage(this.image, this.x + this.width, this.y, this.width, this.height);\r\n        }\r\n    }\r\n\r\n    class Background {\r\n        constructor(game) {\r\n            this.game = game;\r\n            this.imageWidth = 1152;\r\n            this.imageHeight = 500;\r\n            this.scaleFactor = this.game.height / this.imageHeight;\r\n            this.width = this.imageWidth * this.scaleFactor;\r\n            this.height = this.imageHeight * this.scaleFactor;\r\n            this.layer5Image = layer5Image;\r\n            this.layer4Image = layer4Image;\r\n            this.layer3Image = layer3Image;\r\n            this.layer2Image = layer2Image;\r\n            this.layer1Image = layer1Image;\r\n            this.layer1 = new Layer(this.game, this.width, this.height, 0, this.layer1Image);\r\n            this.layer2 = new Layer(this.game, this.width, this.height, 0.007, this.layer2Image);\r\n            this.layer3 = new Layer(this.game, this.width, this.height, 0.02, this.layer3Image);\r\n            this.layer4 = new Layer(this.game, this.width, this.height, 0.063, this.layer4Image);\r\n            this.layer5 = new Layer(this.game, this.width, this.height, 0.2, this.layer5Image);\r\n            this.backgroundLayers = [this.layer1, this.layer2, this.layer3, this.layer4, this.layer5];\r\n        }\r\n        update() {\r\n            this.backgroundLayers.forEach((b) => {\r\n                b.update();\r\n            });\r\n        }\r\n        draw(context) {\r\n            this.backgroundLayers.forEach((b) => {\r\n                b.draw(context);\r\n            });\r\n        }\r\n    }\r\n\r\n    class CircleCollider {\r\n  constructor(x, y, radius) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n  }\r\n\r\n  intersects(other) {\r\n    if (other instanceof CircleCollider) {\r\n      const dx = other.x - this.x;\r\n      const dy = other.y - this.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      return distance < this.radius + other.radius;\r\n    } else {\r\n      throw new Error(\"Unsupported collider type\");\r\n    }\r\n  }\r\n}\r\n\r\n    class Enemy {\r\n        constructor() {\r\n            this.frameX = 0;\r\n            this.frameY = 0;\r\n            this.fps = 20;\r\n            this.frameInterval = 1000 / this.fps;\r\n            this.frameTimer = 0;\r\n            this.markForDeletion = false;\r\n            this.collider = new CircleCollider(this.x + this.width / 2, this.y + this.height / 2, 10);\r\n\r\n        }\r\n        update(deltaTime) {\r\n            // movement\r\n            this.x -= this.speedX + this.game.speed;\r\n            this.y += this.speedY;\r\n            if (this.frameTimer > this.frameInterval) {\r\n                this.frameTimer = 0;\r\n                if (this.frameX < this.maxFrame) this.frameX++;\r\n                else this.frameX = 0;\r\n            } else this.frameTimer += deltaTime;\r\n            // check off screen\r\n            if (this.x + this.width < 0) this.markForDeletion = true;\r\n        }\r\n        draw(context) {\r\n            if (this.game.debug) {\r\n                context.strokeRect(this.x, this.y, this.width, this.height);\r\n            }\r\n            context.drawImage(this.image, this.frameX * this.width, this.frameY * this.height, this.width, this.height, this.x, this.y, this.width, this.height);\r\n        }\r\n    }\r\n\r\n    class FlyingEnemy extends Enemy {\r\n        constructor(game) {\r\n            super();\r\n            this.game = game;\r\n            this.width = 100;\r\n            this.height = 90;\r\n            this.x = this.game.width + Math.random() * this.game.width * 0.05;\r\n            this.y = Math.random() * this.game.height * 1.3;\r\n            this.speedX = Math.random() + 0.0001;\r\n            this.speedY = 0;\r\n            this.maxFrame = 4;\r\n            this.image = flyImage;\r\n            this.angle = 0;\r\n            this.va = Math.random() * 0.0001 + 0.0001; // velocity angle\r\n            this.type = 'flying-enemy';\r\n        }\r\n        update(deltaTime) {\r\n            super.update(deltaTime);\r\n            this.angle += this.va;\r\n            this.y += Math.sin(this.angle);\r\n        }\r\n    }\r\n\r\n    class GroundEnemy extends Enemy {\r\n        constructor(game) {\r\n            super();\r\n            this.game = game;\r\n            this.width = 100;\r\n            this.height = 100;\r\n            this.x = this.game.width + Math.random() * this.game.width * 0.05;\r\n            this.y = Math.random() * this.game.height * 1.3;\r\n            this.speedX = -5;\r\n            this.speedY = 0;\r\n            this.maxFrame = 1;\r\n            this.image = plantImage;\r\n            this.type = 'ground-enemy';\r\n        }\r\n    }\r\n    class ClimbingEnemy extends Enemy {\r\n        constructor(game) {\r\n            super();\r\n            this.game = game;\r\n            this.width = 375;\r\n            this.height = 306;\r\n            this.x = this.game.width;\r\n            this.y = Math.random() * this.game.height * 0.5;\r\n            this.image = spiderBigImage;\r\n            this.speedX = -3;\r\n            this.speedY = Math.random() > 0.2 ? 1 : -1;\r\n            this.maxFrame = 3;\r\n            this.type = 'climbing-enemy';\r\n        }\r\n        update(deltaTime) {\r\n            super.update(deltaTime);\r\n            if (this.y > this.game.height - this.height - this.game.groundMargin) this.speedY *= -1;\r\n            if (this.y < -this.height) this.markForDeletion = true;\r\n        }\r\n\r\n    }\r\n\r\n    class InputHandler {\r\n        constructor(game) {\r\n            this.keys = [];\r\n            this.shootInterval = null;\r\n            window.addEventListener(\"keydown\", (e) => {\r\n                if (this.keys.indexOf(e.key) === -1 && [\"ArrowLeft\", \"ArrowRight\", \"ArrowDown\", \"ArrowUp\", \"Enter\", \"Space\", \"r\", \"R\", \"s\", \"S\"].includes(e.key)) {\r\n                    this.keys.push(e.key);\r\n                    if (e.key === \"s\" || e.key === \"S\") {\r\n                        this.startShootInterval(game);\r\n                    }\r\n                } else if (e.key === \"d\") {\r\n                    game.debug = !game.debug;\r\n                }\r\n            });\r\n            window.addEventListener(\"keyup\", (e) => {\r\n                if (this.keys.indexOf(e.key) !== -1) {\r\n                    this.keys.splice(this.keys.indexOf(e.key), 1);\r\n                    if (e.key === \"s\" || e.key === \"S\") {\r\n                        this.stopShootInterval();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    \r\n        startShootInterval(game) {\r\n            if (!this.shootInterval) {\r\n                this.shootInterval = setInterval(() => {\r\n                    if (this.keys.includes(\"s\") || this.keys.includes(\"S\")) {\r\n                        game.player.setState(states.SHOOTING, 2);\r\n                        game.player.setState(states.RUNNING, 2);\r\n\r\n                    }\r\n                }, 290 + Math.floor(Math.random() * 20)); // Adjust the delay between shots here (in milliseconds)\r\n            }\r\n        }\r\n    \r\n        stopShootInterval() {\r\n            clearInterval(this.shootInterval);\r\n            this.shootInterval = null;\r\n        }\r\n    }\r\n    \r\n\r\n    class Player {\r\n        constructor(game, x, y, speed, sprite) {\r\n            this.game = game;\r\n            this.width = 302;\r\n            this.height = 261;\r\n            this.x = this.game.width / 6;\r\n            this.y = this.game.height / 3;\r\n            this.vy = 0;\r\n            this.projectiles = [];\r\n            this.image = playerImage;\r\n            this.frameX = 0;\r\n            this.frameY = 0;\r\n            this.maxFrame = 5;\r\n            this.fps = 20;\r\n            this.frameInterval = 1000 / this.fps;\r\n            this.frameTimer = 0;\r\n            this.speed = 0;\r\n            this.maxSpeed = 4.2;\r\n            this.weight = 1;\r\n            this.states = [new Sitting(game), new Running(game), new Jumping(game), new Falling(game), new Rolling(game), new Diving(game), new Hit(game), new Shooting(game), ];\r\n            this.currentState = null;\r\n            this.collider = new CircleCollider(this.x + this.width / 2, this.y + this.height / 2, 10);\r\n\r\n        }\r\n        update(inputKeys, delta) {\r\n            this.checkCollisions();\r\n            this.currentState.handleInput(inputKeys);\r\n\r\n\r\n            // horizontal movement\r\n            if (inputKeys.includes(\"ArrowRight\") && this.currentState !== this.states[6]) {\r\n                this.x += this.maxSpeed + 0.001;\r\n            } else if (inputKeys.includes(\"ArrowLeft\") && this.currentState !== this.states[6]) {\r\n                this.x -= this.maxSpeed + 0.001;\r\n            }\r\n            // else if (inputKeys.includes(\"s\") && this.currentState !== this.states[6]) {\t\r\n            //   this.projectiles.forEach((projectile) => {\t\r\n            //     projectile.update();\t\r\n            //   });\t\r\n            //   this.projectiles = this.projectiles.filter(\t\r\n            //     (projectile) => !projectile.markedForDeletion\t\r\n            //   );\t\r\n            // } \r\n            else this.speed = 0;\r\n\r\n            // horizontal boundaries\r\n            if (this.x < 0) this.x = 0;\r\n            if (this.x > this.game.width - this.width) this.x = this.game.width - this.width;\r\n\r\n            // vertical movement\r\n            if (inputKeys.includes(\"ArrowUp\") && this.currentState !== this.states[6]) {\r\n                this.y -= this.maxSpeed + 0.001;\r\n            } else if (inputKeys.includes(\"ArrowDown\") && this.currentState !== this.states[6]) {\r\n                this.y += this.maxSpeed + 0.001;\r\n            }\r\n         \r\n            else this.speed = 0;\r\n\r\n            // vertical boundaries\r\n            if (this.y < 0) this.y = 0;\r\n            if (this.y > this.game.height - this.height - this.game.groundMargin) {\r\n                this.y = this.game.height - this.height - this.game.groundMargin;\r\n            }\r\n\r\n            // sprite animation\r\n            if (this.frameTimer > this.frameInterval) {\r\n                this.frameTimer = 0;\r\n                if (this.frameX < this.maxFrame) this.frameX++;\r\n                else this.frameX = 0;\r\n            } else {\r\n                this.frameTimer += delta;\r\n            }\r\n        }\r\n\r\n        draw(context) {\r\n            if (this.game.debug) {\r\n                context.strokeRect(this.x, this.y, this.width, this.height);\r\n            }\r\n            this.projectiles.forEach((projectile) => {\r\n                projectile.draw(context);\r\n            });\r\n            context.drawImage(this.image, this.frameX * this.width, this.frameY * this.height, this.width, this.height, this.x, this.y, this.width, this.height);\r\n        }\r\n    \r\n        onGround() {\r\n        //    return this.y >= this.game.height - this.height - this.game.groundMargin;\r\n        }\r\n        setState(stateIndex, speed) {\r\n            this.currentState = this.states[stateIndex];\r\n            this.game.speed = this.game.maxSpeed * speed;\r\n            this.currentState.enter();\r\n        }\r\n        checkCollisions() {\r\n            this.game.enemies.forEach((enemy) => {\r\n                if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y && enemy.type === 'climbing-enemy') {\r\n                    enemy.markForDeletion = true;\r\n                    this.game.collisions.push(new CollisionAnimation(this.game, enemy.x + enemy.width * 0.5, enemy.y + enemy.height * 0.5));\r\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\r\n                        this.game.score++;\r\n                        this.game.floatingMessages.push(new FloatingMessage(\"+1\", enemy.x, enemy.y, 150, 50));\r\n                    } else {\r\n                        this.game.lives--;\r\n                        if (this.game.lives === 0) {\r\n                            this.game.gameOver = true;\r\n                        }\r\n                        this.setState(6, 0);\r\n                    }\r\n                } else if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y && enemy.type === 'flying-enemy') {\r\n                    enemy.markForDeletion = true;\r\n                    this.game.collisions.push(new CollisionBlastAnimation(this.game, enemy.x + enemy.width * 0.3, enemy.y + enemy.height * 0.3));\r\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\r\n                        if (this.game.score > 0) {\r\n                            this.game.score--;\r\n                        }\r\n                        this.game.lives--;\r\n                        this.game.floatingMessages.push(new FloatingMessage(\"-1 \u2620\ufe0f\", enemy.x, enemy.y, 150, 50));\r\n                        if (this.game.lives === 0) {\r\n                            this.game.gameOver = true;\r\n                        }\r\n                    } else {\r\n                        this.game.lives--;\r\n                        if (this.game.lives === 0) {\r\n                            this.game.gameOver = true;\r\n                        }\r\n                        this.setState(6, 0);\r\n                    }\r\n                } else if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y && enemy.type === 'ground-enemy') {\r\n                    enemy.markForDeletion = true;\r\n                    this.game.collisions.push(new CollisionFruityAnimation(this.game, enemy.x + enemy.width * 0.3, enemy.y + enemy.height * 0.3));\r\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\r\n                        this.game.lives++;\r\n                        this.game.floatingMessages.push(new FloatingMessage(\"+1 \ud83c\udf4e\", enemy.x, enemy.y, 140, 50));\r\n                        if (this.game.lives === 0) {\r\n                            this.game.gameOver = true;\r\n                        }\r\n                    } else {\r\n                        this.game.lives--;\r\n                        if (this.game.lives === 0) {\r\n                            this.game.gameOver = true;\r\n                        }\r\n                        this.setState(6, 0);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const states = {\r\n        SITTING: 0,\r\n        RUNNING: 1,\r\n        JUMPING: 2,\r\n        FALLING: 3,\r\n        ROLLING: 4,\r\n        DIVING: 5,\r\n        HIT: 6,\r\n        SHOOTING: 7,\r\n    };\r\n\r\n    class State {\r\n        constructor(state, game) {\r\n            this.state = state;\r\n            this.game = game;\r\n        }\r\n    }\r\n\r\n    class Sitting extends State {\r\n        constructor(game) {\r\n            super(\"SITTING\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.frameY = 1;\r\n            this.game.player.maxFrame = 6;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n\r\n            if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowDown\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"Enter\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Running extends State {\r\n        constructor(game) {\r\n            super(\"RUNNING\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.maxFrame = 6;\r\n            this.game.player.frameY = 0;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.05, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n\r\n            if (inputKeys.includes(\"ArrowDown\")) this.game.player.setState(states.RUNNING, 2);\r\n            else if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"Enter\")) {\r\n                this.game.player.setState(states.ROLLING, 2);\r\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Jumping extends State {\r\n        constructor(game) {\r\n            super(\"JUMPING\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.frameY = 1;\r\n            this.game.player.maxFrame = 6;\r\n            if (this.game.player.onGround()) this.game.player.vy = -27;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n\r\n            if (inputKeys.includes(\"Enter\")) {\r\n                this.game.player.setState(states.ROLLING, 2);\r\n            } else if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowDown\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Falling extends State {\r\n        constructor(game) {\r\n            super(\"FALLING\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.frameY = 2;\r\n            this.game.player.maxFrame = 6;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n\r\n         if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowDown\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Rolling extends State {\r\n        constructor(game) {\r\n            super(\"ROLLING\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.frameY = 6;\r\n            this.game.player.maxFrame = 6;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n            if (!inputKeys.includes(\"Enter\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (!inputKeys.includes(\"Enter\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"Enter\") && inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowDown\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n            } else if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Diving extends State {\r\n        constructor(game) {\r\n            super(\"DIVING\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.frameY = 6;\r\n            this.game.player.maxFrame = 6;\r\n            this.game.player.vy = 5;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n            if (inputKeys.includes(\"Enter\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowDown\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Hit extends State {\r\n        constructor(game) {\r\n            super(\"HIT\", game);\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 0;\r\n            this.game.player.frameY = 4;\r\n            this.game.player.maxFrame = 10;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n            this.game.particles.unshift(new Splash(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n            if (inputKeys.includes(\"s\") && inputKeys.includes(\"S\")) {\r\n                this.game.player.setState(states.SHOOTING, 2);\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Shooting extends State {\r\n        constructor(game) {\r\n            super(\"SHOOTING\", game);\r\n            this.lastFireTime = 0;\r\n        }\r\n        enter() {\r\n            this.game.player.frameX = 5;\r\n            this.game.player.frameY = 1;\r\n            this.game.player.maxFrame = 1;\r\n            this.game.particles.unshift(new Projectile(this.game, this.game.player.x + this.game.player.width * 0.55, this.game.player.y + this.game.player.height * 0.5));\r\n            // this.game.projectile.vy = -27;\r\n        }\r\n        handleInput(inputKeys) {\r\n            this.game.particles.unshift(new Dust(this.game, this.game.player.x + this.game.player.width * 0.17, this.game.player.y + this.game.player.height));\r\n            this.game.particles.unshift(new Fire(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n            this.game.particles.unshift(new Splash(this.game, this.game.player.x + this.game.player.width * 0.5, this.game.player.y + this.game.player.height * 0.5));\r\n            if (inputKeys.includes(\"ArrowLeft\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowRight\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowUp\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            } else if (inputKeys.includes(\"ArrowDown\")) {\r\n                this.game.player.setState(states.RUNNING, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Particle {\r\n        constructor(game) {\r\n            this.game = game;\r\n            this.markForDeletion = false;\r\n        }\r\n        update() {\r\n            this.x -= this.speedX + this.game.speed;\r\n            this.y -= this.speedY;\r\n            this.size *= 0.95;\r\n            if (this.size < 0.5) this.markForDeletion = true;\r\n        }\r\n\r\n    }\r\nclass ParticleEffect {\r\n  constructor(x, y, img, numParticles) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.numParticles = numParticles;\r\n    this.particles = [];\r\n    this.finished = false;\r\n\r\n    // Use the specified image or animation for the particle effect\r\n    this.img = img;\r\n    this.frameIndex = 0;\r\n    this.frameCount = img.frames ? img.frames.length : 1;\r\n  }\r\n\r\n  update() {\r\n    // Update the position of each particle\r\n    for (let i = 0; i < this.particles.length; i++) {\r\n      let p = this.particles[i];\r\n      p.x += p.vx;\r\n      p.y += p.vy;\r\n      p.life--;\r\n      if (p.life <= 0) {\r\n        this.particles.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n    if (this.particles.length === 0) {\r\n      this.finished = true;\r\n    }\r\n\r\n    // Update the animation frame for the particle effect\r\n    if (this.img.frames) {\r\n      this.frameIndex++;\r\n      if (this.frameIndex >= this.frameCount) {\r\n        this.frameIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    // Draw each particle\r\n    for (let i = 0; i < this.particles.length; i++) {\r\n      let p = this.particles[i];\r\n      let alpha = p.life / this.maxLife;\r\n      ctx.fillStyle = \"rgba(255,255,255,0.3)\";\r\n      ctx.fillRect(p.x - 1, p.y - 1, 2, 2);\r\n    }\r\n\r\n    // Draw the particle effect using the specified image or animation\r\n    if (this.img.frames) {\r\n      let frame = this.img.frames[this.frameIndex];\r\n      ctx.drawImage(\r\n        this.img.img,\r\n        frame.x,\r\n        frame.y,\r\n        frame.w,\r\n        frame.h,\r\n        this.x,\r\n        this.y,\r\n        frame.w,\r\n        frame.h\r\n      );\r\n    } else {\r\n      ctx.drawImage(this.img.img, this.x, this.y);\r\n    }\r\n  }\r\n\r\n  createParticle() {\r\n    // Create a new particle with a random velocity and lifespan\r\n    let angle = Math.random() * Math.PI * 2;\r\n    let speed = Math.random() * 3 + 1;\r\n    let vx = Math.cos(angle) * speed;\r\n    let vy = Math.sin(angle) * speed;\r\n    let life = Math.floor(Math.random() * 30) + 30;\r\n    this.particles.push({ x: this.x, y: this.y, vx, vy, life });\r\n  }\r\n\r\n  explode() {\r\n    // Create a burst of particles\r\n    for (let i = 0; i < this.numParticles; i++) {\r\n      this.createParticle();\r\n    }\r\n  }\r\n}\r\n    class Projectile extends Particle {\r\n        constructor(game, x, y) {\r\n            super(game);\r\n            this.game = game;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.vy = 0;\r\n            this.width = 20;\r\n            this.height = 20;\r\n            this.speed = 7;\r\n            this.image = fireBallImage;\r\n            this.states = this.game.player.states;\r\n            this.currentState = this.game.player.currentState;\r\n            this.type = 'projectile-particle';\r\n            this.prevPositions = [];\r\n\r\n            \r\n        }\r\n\r\n        draw(context) {\r\n            \r\n            context.drawImage(this.image, this.x, this.y, this.width, this.height);\r\n        }\r\n\r\n        update() {\r\n            this.prevPositions.push({ x: this.x, y: this.y });\r\nif (this.prevPositions.length > 20) {\r\n    this.prevPositions.shift();\r\n}\r\n            // super.update();\r\n            this.checkCollisions();\r\n            this.x += this.speed;\r\n            // if (this.x > this.game.width * 0.8) this.markedForDeletion = true;\r\n        }\r\n\r\n        checkCollisions() {\r\n            this.game.enemies.forEach((enemy) => {\r\n                if (enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y) {\r\n                    enemy.markForDeletion = true;\r\n                    this.game.particles.forEach((p) => {\r\n                        if (p.type === 'projectile-particle' && enemy.x < this.x + this.width && enemy.x + enemy.width > this.x && enemy.y < this.y + this.height && enemy.y + enemy.height > this.y) {\r\n                            p.markForDeletion = true;\r\n                        }\r\n                    })\r\n                    this.game.collisions.push(new CollisionAnimation(this.game, enemy.x + enemy.width * 0.5, enemy.y + enemy.height * 0.5));\r\n                    if (this.currentState === this.states[0] || this.currentState === this.states[1] || this.currentState === this.states[2] || this.currentState === this.states[3] || this.currentState === this.states[4] || this.currentState === this.states[5] || this.currentState === this.states[6] || this.currentState === this.states[7]) {\r\n                        this.game.score++;\r\n                        this.game.floatingMessages.push(new FloatingMessage(\"+1 \ud83c\udf4e\", enemy.x, enemy.y, 150, 50));\r\n                    } else {\r\n                        this.game.lives--;\r\n                        if (this.game.lives === 0) {\r\n                            this.game.gameOver = true;\r\n                        }\r\n                        this.setState(6, 0);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    class Dust extends Particle {\r\n        constructor(game, x, y) {\r\n            super(game);\r\n            this.size = Math.random() * 10.2 + 10;\r\n            this.x = x + 40;\r\n            this.y = y - 50;\r\n            this.speedX = Math.random() * 0.2;\r\n            this.speedY = Math.random() * 2.2;\r\n            this.color = \"rgba(255,255,255,0.3)\";\r\n            this.type = 'dust-particle';\r\n        }\r\n        draw(context) {\r\n            context.beginPath();\r\n            context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n            context.fillStyle = this.color;\r\n            context.fill();\r\n        }\r\n    }\r\n\r\n    class Splash extends Particle {\r\n        constructor(game, x, y) {\r\n            super(game);\r\n            this.size = Math.random() * 100 + 100;\r\n            this.x = x - this.size * 0.4;\r\n            this.y = y - this.size * 0.5;\r\n            this.speedX = Math.random() * 6 - 4;\r\n            this.speedY = Math.random() * 4 + 1;\r\n            this.gravity = 0;\r\n            this.image = fireTexture;\r\n            this.type = 'splash-particle';\r\n        }\r\n        draw(context) {\r\n            context.drawImage(this.image, this.x, this.y, this.size, this.size);\r\n        }\r\n        update() {\r\n            super.update();\r\n            this.gravity += 0.1;\r\n            this.y += this.gravity;\r\n        }\r\n    }\r\n\r\n    class Fire extends Particle {\r\n        constructor(game, x, y) {\r\n            super(game);\r\n            this.image = fireTexture;\r\n            this.size = Math.random() * 10 + 50;\r\n            this.x = x - 50;\r\n            this.y = y;\r\n            this.speedX = 1;\r\n            this.speedY = 1;\r\n            this.angle = 0;\r\n            this.va = Math.random() * 0.02 - 0.1;\r\n            this.type = 'fire-particle';\r\n        }\r\n        draw(context) {\r\n            context.save();\r\n            context.translate(this.x, this.y);\r\n            context.rotate(this.angle * 5);\r\n            context.drawImage(this.image, -this.size * 0.5, -this.size * 0.5, this.size, this.size);\r\n            context.restore();\r\n        }\r\n        update() {\r\n            super.update();\r\n            this.angle += this.va;\r\n            this.x += Math.sin(this.angle);\r\n        }\r\n    }\r\n\r\n    class FloatingMessage {\r\n        constructor(value, x, y, targetX, targetY) {\r\n            this.value = value;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.targetX = targetX;\r\n            this.targetY = targetY;\r\n            this.timer = 0;\r\n            this.markForDeletion = false;\r\n        }\r\n        update() {\r\n            this.x += (this.targetX - this.x) * 0.03;\r\n            this.y += (this.targetY - this.y) * 0.03;\r\n            this.timer++;\r\n            if (this.timer > 100) {\r\n                this.markForDeletion = true;\r\n            }\r\n        }\r\n        draw(context) {\r\n            context.font = \"40px \" + this.fontFamily;\r\n            context.fillStyle = \"white\";\r\n            context.fillText(this.value, this.x, this.y);\r\n            context.fillStyle = \"black\";\r\n            context.fillText(this.value, this.x - 2, this.y - 2);\r\n        }\r\n    }\r\n\r\n    class CollisionAnimation {\r\n        constructor(game, x, y) {\r\n            this.game = game;\r\n            this.image = boomImage;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.spriteWidth = 158;\r\n            this.spriteHeight = 158;\r\n            this.sizeModifier = Math.random() + 0.5;\r\n            this.width = this.spriteWidth * this.sizeModifier;\r\n            this.height = this.spriteHeight * this.sizeModifier;\r\n            this.x = x - this.width * 0.5;\r\n            this.y = y - this.height * 0.5;\r\n            this.frameX = 0;\r\n            this.maxFrame = 4;\r\n            this.markForDeletion = false;\r\n            this.fps = Math.random() * 10 + 5;\r\n            this.frameInterval = 1000 / this.fps;\r\n            this.frameTimer = 0;\r\n        }\r\n        draw(context) {\r\n            context.drawImage(this.image, this.frameX * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\r\n        }\r\n        update(delta) {\r\n            this.x -= this.game.speed;\r\n            if (this.frameTimer > this.frameInterval) {\r\n                this.frameX++;\r\n                if (this.frameX > this.maxFrame) this.markForDeletion = true;\r\n                this.frameTimer = 0;\r\n            } else this.frameTimer += delta;\r\n        }\r\n    }\r\n\r\n    class CollisionBlastAnimation {\r\n        constructor(game, x, y) {\r\n            this.game = game;\r\n            this.image = blastImage;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.spriteWidth = 158;\r\n            this.spriteHeight = 158;\r\n            this.sizeModifier = Math.random() + 0.5;\r\n            this.width = this.spriteWidth * this.sizeModifier;\r\n            this.height = this.spriteHeight * this.sizeModifier;\r\n            this.x = x - this.width * 0.5;\r\n            this.y = y - this.height * 0.5;\r\n            this.frameX = 0;\r\n            this.maxFrame = 9;\r\n            this.markForDeletion = false;\r\n            this.fps = Math.random() * 10 + 5;\r\n            this.frameInterval = 1000 / this.fps;\r\n            this.frameTimer = 0;\r\n        }\r\n        draw(context) {\r\n            context.drawImage(this.image, this.frameX * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\r\n        }\r\n        update(delta) {\r\n            this.x -= this.game.speed;\r\n            if (this.frameTimer > this.frameInterval) {\r\n                this.frameX++;\r\n                if (this.frameX > this.maxFrame) this.markForDeletion = true;\r\n                this.frameTimer = 0;\r\n            } else this.frameTimer += delta;\r\n        }\r\n    }\r\n\r\n    class CollisionFruityAnimation {\r\n        constructor(game, x, y) {\r\n            this.game = game;\r\n            this.image = fruityImage;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.spriteWidth = 158;\r\n            this.spriteHeight = 158;\r\n            this.sizeModifier = Math.random() + 0.5;\r\n            this.width = this.spriteWidth * this.sizeModifier;\r\n            this.height = this.spriteHeight * this.sizeModifier;\r\n            this.x = x - this.width * 0.5;\r\n            this.y = y - this.height * 0.5;\r\n            this.frameX = 0;\r\n            this.maxFrame = 9;\r\n            this.markForDeletion = false;\r\n            this.fps = Math.random() * 10 + 5;\r\n            this.frameInterval = 1000 / this.fps;\r\n            this.frameTimer = 0;\r\n        }\r\n        draw(context) {\r\n            context.drawImage(this.image, this.frameX * this.spriteWidth, 0, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\r\n        }\r\n        update(delta) {\r\n            this.x -= this.game.speed;\r\n            if (this.frameTimer > this.frameInterval) {\r\n                this.frameX++;\r\n                if (this.frameX > this.maxFrame) this.markForDeletion = true;\r\n                this.frameTimer = 0;\r\n            } else this.frameTimer += delta;\r\n        }\r\n    }\r\n\r\n    class UI {\r\n        constructor(game) {\r\n            this.game = game;\r\n            this.fontSize = 30;\r\n            this.fontFamily = \"Press Start 2P', cursive\";\r\n            this.livesImage = liveImage;\r\n        }\r\n        draw(context) {\r\n            \r\n\r\n // Draw gray rectangle at bottom of canvas\r\n context.fillStyle = \"#5f5f5f\";\r\n context.fillRect(0, this.game.height - this.game.height / 7, this.game.width, this.game.height / 7);\r\n\r\n    \r\n      // Calculate dimensions and positions of black and white boxes\r\n      const blackBoxHeight = this.game.height / 6;\r\n      const whiteBoxHeight = this.game.height / 6.5;\r\n      const whiteBoxWidth = whiteBoxHeight;\r\n      const blackBoxWidth = blackBoxHeight;\r\n\r\n      const blackBoxX = 70;\r\n      const blackBoxY = this.game.height - this.game.height / 5 + (this.game.height / 5 - blackBoxHeight) / 2;\r\n\r\n      // Draw black box\r\n      context.fillStyle = \"#000\";\r\n      context.fillRect(blackBoxX, blackBoxY, blackBoxWidth, blackBoxHeight);\r\n\r\n      // Calculate dimensions and positions of white box\r\n      const whiteBoxX = blackBoxX + (blackBoxWidth - whiteBoxWidth) / 2;\r\n      const whiteBoxY = blackBoxY + (blackBoxHeight - whiteBoxHeight) / 2;\r\n\r\n      // Draw white box\r\n      context.fillStyle = \"#fff\";\r\n      context.fillRect(whiteBoxX, whiteBoxY, whiteBoxWidth, whiteBoxHeight);\r\n\r\n      // Set text styles\r\n      context.font = this.fontSize + this.fontFamily;\r\n      context.textAlign = \"left\";\r\n      context.fillStyle = this.game.fontColor;\r\n\r\n      // Draw score and time\r\n      context.fillText(\"Score: \" + this.game.score, this.game.width - 200, this.game.height - 80);\r\n      context.fillText(\"Time: \" + Math.floor(this.game.time * 0.001), this.game.width - 200, this.game.height - 50);\r\n\r\n      // Draw lives\r\n      for (let i = 0; i < this.game.lives; i++) {\r\n          context.drawImage(this.livesImage, this.game.width - 600 + 25 * i, this.game.height - 35, 25, 25);\r\n      }      \r\n            // Draw game over text\r\n            if (this.game.gameOver) {\r\n                context.fillStyle = \"rgba(34, 3, 44, 0.5)\";\r\n                context.fillRect(0, 0, this.game.width, this.game.height);\r\n                context.textAlign = \"center\";\r\n                context.font = this.fontSize + this.fontFamily;\r\n\r\n\r\n                if (this.game.score > 500) {\r\n                    context.fillText(\"MISSION ACCOMPLISHED\", this.game.width * 0.5, this.game.height * 0.5 - 20);\r\n                    context.font = this.fontSize + this.fontFamily;\r\n                    context.fillText(\"YOU ARRIVED SAFETY\", this.game.width * 0.5, this.game.height * 0.5 + 20);\r\n                    context.fillText(\"PRESS R TO PLAY AGAIN\", this.game.width * 0.5, this.game.height * 0.5 + 30);\r\n                } else {\r\n                    context.fillText(\"MISSION FAILED\", this.game.width * 0.5, this.game.height * 0.5 - 20);\r\n                    context.font = this.fontSize + this.fontFamily;\r\n                    context.fillText(\"YOU COULDN'T COMPLETE THE JOURNEY\", this.game.width * 0.5, this.game.height * 0.5 + 5);\r\n                    context.fillText(\"PRESS R TO PLAY AGAIN\", this.game.width * 0.5, this.game.height * 0.5 + 30);\r\n                }\r\n            }       \r\n        }\r\n      }\r\n    </script>\r\n`;\r\n\r\nreturn (\r\n  <div>\r\n    <iframe srcDoc={scriptSrc} style={{ height: \"800px\", width: \"100%\" }} />\r\n  </div>\r\n);\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/duocelot.near/widget/Sky_Cross", "metadata.description": NaN, "metadata.name": NaN, "metadata.image.ipfs_cid": NaN, "metadata.linktree.website": NaN, "metadata.tags.app": NaN, "metadata.tags.game": NaN, "metadata.tags.nft": NaN, "metadata.tags.hackathon": NaN}