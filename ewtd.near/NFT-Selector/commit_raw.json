{"tx_hash": "5MGdGE8y64y3ghU6nqfJVa1qSmUFcSympnvbmMhaU8qM", "action_id_social": "AFRhfjVgS3pE43Jx742DmPRae4PPmJ8fauVN6y1zCer4-1-widget", "block_id": 87362878, "block_timestamp": "2023-03-15 16:36:23.718", "signer_id": "ewtd.near", "widget_name": "NFT-Selector", "source_code": "State.init({\r\n  ownedCollections: [],\r\n  name: \"eric\",\r\n  ownedNFTs: {},\r\n  selectedContractId: \"\",\r\n  selectedTokenId: \"\",\r\n});\r\n\r\nconst accountId = context.accountId;\r\nasync function getCollections() {\r\n  asyncFetch(\r\n    `https://near-get-account-collection.onrender.com/fetch?accountId=${context.accountId}`\r\n  ).then((res) => {\r\n    const collections = res.body;\r\n    State.update({\r\n      ownedCollections: collections,\r\n    });\r\n    let collectionMetadatas = [];\r\n    for (const collection of collections) {\r\n      try {\r\n        const metadata = Near.view(collection, \"nft_metadata\", {});\r\n        const ownedTokens = Near.view(collection, \"nft_tokens_for_owner\", {\r\n          account_id: context.accountId,\r\n        });\r\n\r\n        State.update({\r\n          ownedNFTs: {\r\n            ...state.ownedNFTs,\r\n            [collection]: {\r\n              metadata,\r\n              ownedTokens,\r\n            },\r\n          },\r\n        });\r\n      } catch (e) {}\r\n    }\r\n  });\r\n}\r\nfunction parseImageUrl(tokenMedia, baseURI) {\r\n  if (!tokenMedia || !baseURI) return;\r\n  if (!baseURI.endsWith(\"/\")) {\r\n    baseURI = baseURI + \"/\";\r\n  }\r\n\r\n  if (tokenMedia.includes(\"://\")) {\r\n    return tokenMedia;\r\n  }\r\n\r\n  return baseURI + tokenMedia;\r\n}\r\n\r\nfunction selectNFT(contractId, tokenId) {\r\n  console.log(contractId);\r\n  console.log(tokenId);\r\n  State.update({\r\n    selectedContractId: contractId,\r\n    selectedTokenId: tokenId,\r\n  });\r\n}\r\nreturn (\r\n  <div>\r\n    <button onClick={getCollections}>Fetch Tokens</button>\r\n    <p>Selected Contract ID: {state.selectedContractId}</p>\r\n    <p> Selected Token ID : {state.selectedTokenId}</p>\r\n    <div>\r\n      {Object.keys(state.ownedNFTs)\r\n        .filter((collection) => !!state.ownedNFTs[collection].metadata)\r\n        .filter(\r\n          (collection) => state.ownedNFTs[collection].ownedTokens.length > 0\r\n        )\r\n        .map((collection) => {\r\n          return (\r\n            <div>\r\n              {state.ownedNFTs[collection].metadata.name}\r\n              <br />\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  gap: \"1rem\",\r\n                }}\r\n              >\r\n                {state.ownedNFTs[collection].ownedTokens.map((token) => {\r\n                  return (\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        gap: \"1px\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={parseImageUrl(\r\n                          token.metadata.media,\r\n                          state.ownedNFTs[collection].metadata.base_uri\r\n                        )}\r\n                        style={{\r\n                          height: \"100px\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => selectNFT(collection, token.token_id)}\r\n                      />\r\n                      <p>{token.token_id}</p>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ewtd.near/widget/NFT-Selector", "branch.draft.": NaN, "branch": NaN}