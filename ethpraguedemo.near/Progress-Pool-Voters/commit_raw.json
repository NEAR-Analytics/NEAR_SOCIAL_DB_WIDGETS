{"tx_hash": "4WKpUAWicvb8fRuojMJvUg6k91NVaXzB5tea651gRuVs", "action_id_social": "HmbYnkf1BgDmwrLrFCDj2BrCu4kw71DiVmS5XJjg6Swf-0-widget", "block_id": 93890567, "block_timestamp": "2023-06-10T13:12:07.499Z", "signer_id": "ethpraguedemo.near", "widget_name": "Progress-Pool-Voters", "source_code": null, "metadata": null, "branch": {"draft": {"": "if (\r\n  state.chainId === undefined &&\r\n  ethers !== undefined &&\r\n  Ethers.send(\"eth_requestAccounts\", [])[0]\r\n) {\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((chainIdData) => {\r\n      if (chainIdData?.chainId) {\r\n        State.update({ chainId: chainIdData.chainId });\r\n      }\r\n    });\r\n}\r\n\r\n// FETCH Token ABI\r\n\r\nconst voterTokenContract = \"0x81602eEdD6C4624150B3F2C76417E0c66411eA30\";\r\nconst tokenDecimals = 18;\r\n\r\nconst tokenAbi = [\r\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"previousOwner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"newOwner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"OwnershipTransferred\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address[]\", name: \"_addresses\", type: \"address[]\" },\r\n    ],\r\n    name: \"addToAllowlist\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    name: \"allowList\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"subtractedValue\", type: \"uint256\" },\r\n    ],\r\n    name: \"decreaseAllowance\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    name: \"hasMinted\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"addedValue\", type: \"uint256\" },\r\n    ],\r\n    name: \"increaseAllowance\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"owner\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"renounceOwnership\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\r\n    name: \"transferOwnership\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nconst iface = new ethers.utils.Interface(tokenAbi);\r\n\r\n// HELPER FUNCTIONS\r\n\r\nconst getTokenBalance = (receiver) => {\r\n  const erc20 = new ethers.Contract(\r\n    voterTokenContract,\r\n    tokenAbi,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  return erc20.balanceOf(state.sender).then((rawBalance) => {\r\n    return Big(rawBalance.toString())\r\n      .div(Big(10).pow(18))\r\n      .toFixed(2)\r\n      .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n  });\r\n};\r\n\r\nconst getVote = (_signer) => {\r\n\r\n  const erc20 = new ethers.Contract(\r\n    voterTokenContract,\r\n    tokenAbi,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  if (await erc20.hasMinted(state.sender)) {\r\n    State.update({ hasMinted: true });\r\n    return;\r\n  }\r\n\r\n  erc20.mint().then((transactionHash) => {\r\n    State.update({ hashMinted: true })\r\n    console.log(\"transactionHash is \" + transactionHash);\r\n  });\r\n};\r\n\r\n// DETECT SENDER\r\n\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    console.log(\"set sender\", accounts[0]);\r\n    console.log(\"2.: \", state);\r\n  }\r\n}\r\n\r\n//if (!state.sender)  return \"Please login first\";\r\n\r\n// FETCH SENDER BALANCE\r\n\r\nif (state.balance === undefined && state.sender) {\r\n  console.log(state.chainId, state.sender);\r\n\r\n  const erc20 = new ethers.Contract(\r\n    voterTokenContract,\r\n    tokenAbi,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  erc20.balanceOf(state.sender).then((_balance) => {\r\n    State.update({\r\n      balance: _balance.toString(),\r\n    });\r\n    console.log(\"Logging balance: \", state.balance);\r\n    console.log(state);\r\n  });\r\n}\r\n\r\n// FETCH TX COST\r\n\r\nif (state.txCost === undefined) {\r\n  const gasEstimate = ethers.BigNumber.from(1875000);\r\n  const gasPrice = ethers.BigNumber.from(10000000000);\r\n\r\n  const gasCostInWei = gasEstimate.mul(gasPrice);\r\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\r\n\r\n  let responseGql = fetch(\r\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\r\n    {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        query: `{\r\n          bundle(id: \"1\" ) {\r\n            ethPrice\r\n          }\r\n        }`,\r\n      }),\r\n    }\r\n  );\r\n\r\n  if (!responseGql) return \"\";\r\n\r\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\r\n\r\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\r\n\r\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\r\n}\r\n\r\n// FETCH CSS\r\n\r\nconst cssFont = fetch(\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\r\n).body;\r\nconst css = fetch(\r\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\r\n).body;\r\n\r\nif (!cssFont || !css) return \"\";\r\n\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n    ${cssFont}\r\n    ${css}\r\n`,\r\n  });\r\n}\r\nconst Theme = state.theme;\r\n\r\n// OUTPUT UI\r\n\r\nconst getSender = () => {\r\n  return !state.sender\r\n    ? \"\"\r\n    : state.sender.substring(0, 6) +\r\n        \"...\" +\r\n        state.sender.substring(state.sender.length - 4, state.sender.length);\r\n};\r\n\r\nreturn (\r\n  <Theme>\r\n    <div class=\"LidoContainer\">\r\n      <div class=\"Header\">Voters</div>\r\n      <div class=\"SubHeader\">Claim $PRAGUE and vote on growing projects.</div>\r\n\r\n      <div class=\"LidoForm\">\r\n        {state.sender && (\r\n          <>\r\n            <div class=\"LidoFormTopContainer\">\r\n              <div class=\"LidoFormTopContainerLeft\">\r\n                <div class=\"LidoFormTopContainerLeftContent1\">\r\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\r\n                    <span>Available to stake</span>\r\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\r\n                  </div>\r\n                </div>\r\n                <div class=\"LidoFormTopContainerLeftContent2\">\r\n                  <span>\r\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"LidoFormTopContainerRight\">\r\n                <div class=\"LidoFormTopContainerRightContent1\">\r\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\r\n                    <span>{getSender()}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"LidoSplitter\" />\r\n          </>\r\n        )}\r\n        <div\r\n          class={\r\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\r\n          }\r\n        >\r\n          <div class=\"LidoFormTopContainerLeft\">\r\n            <div class=\"LidoFormTopContainerLeftContent1\">\r\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\r\n                <span>Staked amount</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"LidoFormTopContainerLeftContent2\">\r\n              <span>\r\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\r\n                &nbsp;stETH\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"LidoFormTopContainerRight\">\r\n            <div class=\"LidoAprContainer\">\r\n              <div class=\"LidoAprTitle\">Lido APR</div>\r\n              <div class=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"LidoStakeForm\">\r\n        <div class=\"LidoStakeFormInputContainer\">\r\n          <span class=\"LidoStakeFormInputContainerSpan1\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\r\n              ></path>\r\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\r\n              ></path>\r\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\r\n              <path\r\n                opacity=\"0.2\"\r\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\r\n              ></path>\r\n              <path\r\n                opacity=\"0.6\"\r\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\r\n              ></path>\r\n            </svg>\r\n          </span>\r\n          <span class=\"LidoStakeFormInputContainerSpan2\">\r\n            <input\r\n              disabled={!state.sender}\r\n              class=\"LidoStakeFormInputContainerSpan2Input\"\r\n              value={state.strEther}\r\n              onChange={(e) => State.update({ strEther: e.target.value })}\r\n              placeholder=\"Amount\"\r\n            />\r\n          </span>\r\n          <span\r\n            class=\"LidoStakeFormInputContainerSpan3\"\r\n            onClick={() => {\r\n              State.update({\r\n                strEther: (state.balance > 0.05\r\n                  ? parseFloat(state.balance) - 0.05\r\n                  : 0\r\n                ).toFixed(2),\r\n              });\r\n            }}\r\n          >\r\n            <button\r\n              class=\"LidoStakeFormInputContainerSpan3Content\"\r\n              disabled={!state.sender}\r\n            >\r\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\r\n            </button>\r\n          </span>\r\n        </div>\r\n        {!!state.sender ? (\r\n          state.hasMinted ? (\r\n          <button\r\n            class=\"LidoStakeFormSubmitContainer\"\r\n            onClick={() => console.log(\"Already minted\")}\r\n          >\r\n            <span>Already Minted</span>\r\n          </button>\r\n          ) : (\r\n            <button\r\n            class=\"LidoStakeFormSubmitContainer\"\r\n            onClick={() => getVote(state.sender)}\r\n          >\r\n            <span>Mint Vote</span>\r\n          </button>\r\n          )\r\n        ) : (\r\n          <Web3Connect\r\n            className=\"LidoStakeFormSubmitContainer\"\r\n            connectLabel=\"Connect with Web3\"\r\n          />\r\n        )}\r\n\r\n        <div class=\"LidoFooterContainer\">\r\n          {state.sender && (\r\n            <div class=\"LidoFooterRaw\">\r\n              <div class=\"LidoFooterRawLeft\">You will receive</div>\r\n              <div class=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\r\n            </div>\r\n          )}\r\n          <div class=\"LidoFooterRaw\">\r\n            <div class=\"LidoFooterRawLeft\">Exchange rate</div>\r\n            <div class=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>\r\n          </div>\r\n          {false && (\r\n            <div class=\"LidoFooterRaw\">\r\n              <div class=\"LidoFooterRawLeft\">Transaction cost</div>\r\n              <div class=\"LidoFooterRawRight\">{state.txCost}</div>\r\n            </div>\r\n          )}\r\n          <div class=\"LidoFooterRaw\">\r\n            <div class=\"LidoFooterRawLeft\">Reward fee</div>\r\n            <div class=\"LidoFooterRawRight\">10%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/ethpraguedemo.near/widget/Progress-Pool-Voters", "__row_index": 31}