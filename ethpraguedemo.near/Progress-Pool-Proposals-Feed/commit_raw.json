{"tx_hash": "Ege267LS8LjYzneZxoTds3DdLdsyhUpNXE963mxR2hub", "action_id_social": "2UnXtrXGbdsfMc4nJed4kqmfbtC4nhnv6NL1UKX4AJX3-0-widget", "block_id": 93929755, "block_timestamp": "2023-06-11T01:35:36.869Z", "signer_id": "ethpraguedemo.near", "widget_name": "Progress-Pool-Proposals-Feed", "source_code": "if (\r\n  state.chainId === undefined &&\r\n  ethers !== undefined &&\r\n  Ethers.send(\"eth_requestAccounts\", [])[0]\r\n) {\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((chainIdData) => {\r\n      if (chainIdData?.chainId) {\r\n        State.update({ chainId: chainIdData.chainId });\r\n      }\r\n    });\r\n}\r\n\r\nlet updateFlag = false;\r\nconst toggleUpdateFlag = () => {\r\n  if (state.pulled_proposals) {\r\n    updateFlag = !updateFlag;\r\n    console.log(\"rerender should happen \", state.pulled_proposals);\r\n  }\r\n};\r\n\r\nconst proposalContract = \"0x6daA072A660814fa3c96961dfa11eee8A39a74b3\";\r\n\r\nconst proposalAbi = [\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"_hackathonEndTime\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"_votingTokenAddress\", type: \"address\" },\r\n    ],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  { inputs: [], name: \"not_in_proposalPeriod\", type: \"error\" },\r\n  { inputs: [], name: \"not_in_votingPeriod\", type: \"error\" },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"recipient\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"string\",\r\n        name: \"message\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    name: \"ProposalSubmitted\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"sender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"proposalOwner\",\r\n        type: \"address\",\r\n      },\r\n      { indexed: false, internalType: \"uint8\", name: \"accept\", type: \"uint8\" },\r\n    ],\r\n    name: \"VoteCasted\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"SUBMISSION_PERIOD\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"TRANSITION_PERIOD\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"VOTING_PERIOD\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { internalType: \"uint256\", name: \"proposalIndex\", type: \"uint256\" },\r\n          { internalType: \"uint8\", name: \"decision\", type: \"uint8\" },\r\n        ],\r\n        internalType: \"structProposalVoting.Vote[]\",\r\n        name: \"_votes\",\r\n        type: \"tuple[]\",\r\n      },\r\n    ],\r\n    name: \"castVote\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"castedVotes\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"hackathonEndTime\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    name: \"proposals\",\r\n    outputs: [\r\n      { internalType: \"string\", name: \"description\", type: \"string\" },\r\n      { internalType: \"address\", name: \"proposalOwner\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"votes\", type: \"uint256\" },\r\n      { internalType: \"bool\", name: \"accepted\", type: \"bool\" },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"proposalsCount\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"string\", name: \"_description\", type: \"string\" }],\r\n    name: \"submitProposal\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"votingToken\",\r\n    outputs: [{ internalType: \"contractIERC20\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n  }\r\n}\r\n\r\nif (state.proposalNumber !== undefined && state.proposalNumber > 0) {\r\n  if (!state.proposalChecked) {\r\n    console.log(\"Calling props contract\");\r\n    const proposals = new ethers.Contract(\r\n      proposalContract,\r\n      proposalAbi,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    proposals.castedVotes().then((numVotes) => {\r\n      State.update({ totalVotes: numVotes.toNumber() });\r\n    });\r\n\r\n    let all_pulled_proposals = [];\r\n    let indexed_votes = [];\r\n\r\n    for (let num = 0; num < state.proposalNumber; num++) {\r\n      proposals.proposals(num).then((result) => {\r\n        console.log(\"result: \", result);\r\n        all_pulled_proposals.push({ num, result });\r\n        indexed_votes.push(0);\r\n        State.update({\r\n          pulled_proposals: all_pulled_proposals,\r\n        });\r\n        toggleUpdateFlag();\r\n      });\r\n    }\r\n    State.update({ proposalChecked: true });\r\n    State.update({ votes: indexed_votes });\r\n  }\r\n}\r\n\r\n// HELPER FUNCTIONS\r\n\r\nconst pullProposals = () => {\r\n  if (!state.chainId || !state.sender) {\r\n    return console.log(\"Connect first\");\r\n  }\r\n\r\n  const proposals = new ethers.Contract(\r\n    proposalContract,\r\n    proposalAbi,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  proposals.proposalsCount().then((_number) => {\r\n    if (_number > 0) {\r\n      State.update({ proposalNumber: _number.toNumber() });\r\n    }\r\n  });\r\n};\r\n\r\nconst vote = () => {\r\n  console.log(\"Voting\");\r\n};\r\n\r\nif (state.sender !== undefined) {\r\n  pullProposals();\r\n}\r\n\r\nconst ComponentToForceRender = ({ updateFlag }) => {\r\n  console.log(state);\r\n  console.log(\"Updating state \", state.pulled_proposals);\r\n  if (!state.pulled_proposals) return null;\r\n  return (\r\n    <div>\r\n      {state.pulled_proposals.map((item) => (\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <Widget\r\n            src=\"ethpraguedemo.near/widget/Progress-Pool-Question-Preview\"\r\n            props={{\r\n              result: item.result,\r\n              index: item.num,\r\n              totalVotes: state.totalVotes,\r\n              state: state,\r\n            }}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst H2 = styled.h2`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #11181C;\r\n\r\n  a {\r\n    color: inherit;\r\n    transition: color .15s ease;\r\n    &:hover {\r\n      color: #30A46C;\r\n      text-decoration: none;\r\n\r\n      & + i {\r\n        visibility: visible;\r\n      }\r\n    }\r\n\r\n    & + i {\r\n      transition: visibility .1s ease-out;\r\n      visibility: hidden;\r\n      color: #30A46C;\r\n    }\r\n  }\r\n`;\r\nconst H6 = styled.h6`\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #687076;\r\n`;\r\nconst Trancate = styled.span`\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n`;\r\nconst TopicName = styled.span`\r\n  color: #006ADC;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n`;\r\nconst CardWrapper = styled.div`\r\n  z-index: 100;\r\n  padding: 6px;\r\n`;\r\nconst Card = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: stretch;\r\n  gap: 12px;\r\n  width: 275px;\r\n  border-radius: 12px;\r\n  z-index: 1070;\r\n  background: #fff;\r\n  border: 1px solid #eceef0;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\r\n  padding: 12px;\r\n`;\r\nconst Item = styled.div`\r\n  padding: 0;\r\n  .btn {\r\n    width: 100%;\r\n    text-align: left;\r\n    &:hover,\r\n    &:focus {\r\n      background-color: #ECEDEE;\r\n      text-decoration: none;\r\n      outline: none;\r\n    }\r\n\r\n    &.report-btn, &.hide-btn {\r\n      i {\r\n        color: #7E868C;\r\n      }\r\n    }\r\n    span {\r\n      font-weight: 500;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Button = styled.a`\r\n  display: block;\r\n  color: #ffffff;\r\n  background-color: #30A46C;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  padding: 8px 24px;\r\n  border: none;\r\n  border-radius: 50px;\r\n  float: inline-end;\r\n\r\n  :hover{ color: #ffffff; cursor: pointer; }\r\n`;\r\n\r\nreturn (\r\n  <div class=\"d-flex\">\r\n    <Web3Connect\r\n      className=\"LidoStakeFormSubmitContainer\"\r\n      connectLabel=\"Connect\"\r\n    />\r\n    <div class=\"col-lg-2 col-sm-12 text-center\">\r\n      <Button class=\"btn btn-primary btn-sm\" onClick={vote}>\r\n        Cast Your Vote\r\n      </Button>\r\n    </div>\r\n  </div>\r\n  <ComponentToForceRender updateFlag={state.proposalChecked} />\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ethpraguedemo.near/widget/Progress-Pool-Proposals-Feed", "__row_index": 113}