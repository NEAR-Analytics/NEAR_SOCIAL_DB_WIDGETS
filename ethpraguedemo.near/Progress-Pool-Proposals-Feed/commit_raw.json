{"tx_hash": "Ho297Dmca3m9EXsCSPGVcEGLzWnzPtUxQboEdX7LidC", "action_id_social": "2BHTy3iUAN3L2Bek7TB1t5KdGY7MSEeUesZCDYHTmtg5-0-widget", "block_id": 93913088, "block_timestamp": "2023-06-10T20:24:23.703Z", "signer_id": "ethpraguedemo.near", "widget_name": "Progress-Pool-Proposals-Feed", "source_code": "if (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nState.update({ pulled_proposals: [] });\n\nconst proposalContract = \"0x6daA072A660814fa3c96961dfa11eee8A39a74b3\";\n\nconst proposalAbi = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_hackathonEndTime\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_votingTokenAddress\", type: \"address\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  { inputs: [], name: \"not_in_proposalPeriod\", type: \"error\" },\n  { inputs: [], name: \"not_in_votingPeriod\", type: \"error\" },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"message\",\n        type: \"string\",\n      },\n    ],\n    name: \"ProposalSubmitted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"proposalOwner\",\n        type: \"address\",\n      },\n      { indexed: false, internalType: \"uint8\", name: \"accept\", type: \"uint8\" },\n    ],\n    name: \"VoteCasted\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"SUBMISSION_PERIOD\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"TRANSITION_PERIOD\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"VOTING_PERIOD\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"proposalIndex\", type: \"uint256\" },\n          { internalType: \"uint8\", name: \"decision\", type: \"uint8\" },\n        ],\n        internalType: \"structProposalVoting.Vote[]\",\n        name: \"_votes\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"castVote\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"castedVotes\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"hackathonEndTime\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"proposals\",\n    outputs: [\n      { internalType: \"string\", name: \"description\", type: \"string\" },\n      { internalType: \"address\", name: \"proposalOwner\", type: \"address\" },\n      { internalType: \"uint256\", name: \"votes\", type: \"uint256\" },\n      { internalType: \"bool\", name: \"accepted\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proposalsCount\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"_description\", type: \"string\" }],\n    name: \"submitProposal\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"votingToken\",\n    outputs: [{ internalType: \"contractIERC20\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nif (state.proposalNumber !== undefined && state.proposalNumber > 0) {\n  const new_pulled_proposals = [];\n  const proposals = new ethers.Contract(\n    proposalContract,\n    proposalAbi,\n    Ethers.provider().getSigner()\n  );\n  for (let num = 0; num < state.proposalNumber; num++) {\n    proposals.proposals(num).then((result) => {\n      new_pulled_proposals.push({ num, result });\n      console.log(result);\n    });\n  }\n  State.update({\n    pulled_proposals: [...state.pulled_proposals, ...new_pulled_proposals],\n  });\n}\n\n// HELPER FUNCTIONS\n\nconst pullProposals = () => {\n  if (!state.chainId || !state.sender) {\n    return console.log(\"Connect first\");\n  }\n\n  const proposals = new ethers.Contract(\n    proposalContract,\n    proposalAbi,\n    Ethers.provider().getSigner()\n  );\n\n  proposals.proposalsCount().then((_number) => {\n    if (_number > 0) {\n      State.update({ proposalNumber: _number });\n    }\n  });\n};\n\nif (state.sender !== undefined) {\n  pullProposals();\n}\n\nconst H2 = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #11181C;\n\n  a {\n    color: inherit;\n    transition: color .15s ease;\n    &:hover {\n      color: #30A46C;\n      text-decoration: none;\n\n      & + i {\n        visibility: visible;\n      }\n    }\n\n    & + i {\n      transition: visibility .1s ease-out;\n      visibility: hidden;\n      color: #30A46C;\n    }\n  }\n`;\nconst H6 = styled.h6`\n  font-size: 14px;\n  font-weight: 500;\n  color: #687076;\n`;\nconst Trancate = styled.span`\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\nconst TopicName = styled.span`\n  color: #006ADC;\n  font-weight: 500;\n  font-size: 14px;\n  white-space: nowrap;\n`;\nconst CardWrapper = styled.div`\n  z-index: 100;\n  padding: 6px;\n`;\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  gap: 12px;\n  width: 275px;\n  border-radius: 12px;\n  z-index: 1070;\n  background: #fff;\n  border: 1px solid #eceef0;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n  padding: 12px;\n`;\nconst Item = styled.div`\n  padding: 0;\n  .btn {\n    width: 100%;\n    text-align: left;\n    &:hover,\n    &:focus {\n      background-color: #ECEDEE;\n      text-decoration: none;\n      outline: none;\n    }\n\n    &.report-btn, &.hide-btn {\n      i {\n        color: #7E868C;\n      }\n    }\n    span {\n      font-weight: 500;\n    }\n  }\n`;\n\nreturn (\n  <div>\n    <Web3Connect\n      className=\"LidoStakeFormSubmitContainer\"\n      connectLabel=\"Connect with Web3\"\n    />\n    {state.pulled_proposals.map((item) => (\n      <Widget\n        src=\"ethpraguedemo.near/widget/Progress-Pool-Question-Preview\"\n        props={{ result: !item.result, index: item.num }}\n      />\n    ))}\n  </div>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/ethpraguedemo.near/widget/Progress-Pool-Proposals-Feed", "__row_index": 55}