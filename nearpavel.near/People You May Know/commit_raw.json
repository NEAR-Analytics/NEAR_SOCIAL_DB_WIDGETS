{"tx_hash": "GbHJ2kMofv5je3RFoWX5ewqhEddkiUGEEXNznVJFQb4B", "action_id_social": "GTuAPhhJZGYsGsbFKw4qd3fC4bCodN88tnvSumyXgd3s-0-widget", "block_id": 80663594, "block_timestamp": "2022-12-14 23:13:14.526", "signer_id": "nearpavel.near", "widget_name": "People You May Know", "source_code": "const accounts = Social.keys(`*/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst userId = context.accountId;\nconst ownerId = context.ownerId;\nif (!userId) {\n  return \"Please sign in with NEAR wallet to follow other accounts\";\n}\nif (accounts === null) {\n  return \"Loading\";\n}\nconst followingData = Social.keys(`${userId}/graph/follow/*`, \"final\");\nif (followingData === null) {\n  return \"Loading\";\n}\nconst following = followingData[userId][\"graph\"][\"follow\"] ?? {};\n\nfunction getFollowersPerAccount() {\n  let res = {};\n  Object.keys(accounts).forEach((accountId) => {\n    Object.keys(accounts[accountId].graph.follow).forEach(\n      (followingAccountId) => {\n        res[followingAccountId] = (res[followingAccountId] ?? 0) + 1;\n      }\n    );\n  });\n  return res;\n}\n\nconst followingsAll = getFollowersPerAccount();\n\nState.init({\n  following,\n});\n\nfunction getRecommendationsFor(accountId) {\n  let followingsPerAccount = Object.keys(accounts).reduce(\n    (res, id) => ({\n      ...res,\n      [id]: Object.keys(accounts[id].graph.follow).filter((x) => x !== userId),\n    }),\n    {}\n  );\n  const myFriends = followingsPerAccount[accountId];\n  const recommendations = Object.keys(accounts)\n    .filter(\n      (accountId) => !myFriends.includes(accountId) && accountId !== userId\n    )\n    .map((accountId) => ({\n      accountId,\n      commonFollows: myFriends.filter((a) =>\n        followingsPerAccount[accountId].includes(a)\n      ).length,\n    }))\n    .map(({ accountId, commonFollows }) => ({\n      accountId,\n      commonFollows,\n      score: commonFollows * (followingsAll[accountId] || 1),\n    }))\n    .sort((f, s) => s.score - f.score)\n    .slice(0, 20);\n  return recommendations.map((x) => x.accountId);\n}\nconst rec = getRecommendationsFor(userId);\n\nlet handleChange = (accountId) => {\n  let following = state.following;\n  following[accountId] = !following[accountId];\n  State.update({ following });\n};\n\nlet followDevChange = () => {\n  handleChange(ownerId);\n  State.update({ followDev: !state.followDev });\n};\n\nfunction getCommitData() {\n  let dataGraph = [];\n  let dataNotify = [];\n  let dataFollow = {};\n\n  Object.keys(state.following).map((accountId) => {\n    if (accountId !== userId) {\n      let follow = !!state.following[accountId];\n      dataFollow[accountId] = follow ? \"\" : null;\n    }\n  });\n\n  Object.keys(state.following).map((accountId) => {\n    if (following[accountId] != state.following[accountId]) {\n      let follow = !!state.following[accountId];\n      dataGraph.push({\n        key: \"follow\",\n        value: {\n          type: follow ? \"follow\" : \"unfollow\",\n          accountId,\n        },\n      });\n\n      dataNotify.push({\n        key: accountId,\n        value: {\n          type: follow ? \"follow\" : \"unfollow\",\n        },\n      });\n    }\n  });\n\n  const data = {\n    graph: {\n      follow: dataFollow,\n    },\n    index: {\n      graph: JSON.stringify(dataGraph),\n      notify: JSON.stringify(dataNotify),\n    },\n  };\n  return data;\n}\n\nconst followingsRows = rec.map((accountId) => (\n  <li\n    className={`list-group-item ${\n      state.following[accountId] ? \"list-group-item-success\" : \"\"\n    }`}\n  >\n    <div className=\"form-check\">\n      <input\n        className=\"form-check-input\"\n        type=\"checkbox\"\n        value={accountId}\n        disabled={accountId == userId}\n        id={`follow-${accountId}`}\n        name={`follow-${accountId}`}\n        onChange={() => handleChange(accountId)}\n        checked={state.following[accountId] ?? false}\n      />\n      <label className=\"form-check-label\" for={`follow-${accountId}`}>\n        <Widget\n          src=\"zavodil.near/widget/ProfileLine\"\n          props={{\n            accountId,\n            link: \"\",\n          }}\n        />{\" \"}\n        <span\n          className=\"badge rounded-pill bg-primary\"\n          title={`${followingsAll[accountId]} followers`}\n        >\n          {followingsAll[accountId]}\n        </span>\n        <a\n          className=\"btn btn-sm btn-outline-secondary border-0\"\n          href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n          target=\"_blank\"\n        >\n          <i className=\"bi bi-window-plus me-1\" title=\"Open in new tab\"></i>\n        </a>\n      </label>\n    </div>\n  </li>\n));\n\nreturn (\n  <>\n    <h1>People You May Know</h1>\n    <p>\n      Based on your current connections, you might also want to follow the\n      following accounts.\n    </p>\n\n    <div className=\"mb-3\">\n      <CommitButton\n        disabled={context.loading}\n        className={`btn ${\n          context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n        }`}\n        data={getCommitData()}\n      >\n        {context.loading ? \"Loading\" : \"Mass Follow\"}\n      </CommitButton>\n    </div>\n    <ul className=\"list-group\">{followingsRows}</ul>\n    <div className=\"form-check pt-3\">\n      <input\n        className=\"form-check-input\"\n        type=\"checkbox\"\n        id={`follow-dev`}\n        onChange={() => followDevChange()}\n        checked={state.followDev}\n        name=\"follow-dev\"\n      />\n      <label className=\"form-check-label\" for=\"follow-dev\">\n        Follow widget authors ({ownerId})\n      </label>\n    </div>\n\n    <div className=\"mt-2 mb-3\">\n      <CommitButton\n        disabled={context.loading}\n        className={`btn ${\n          context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n        }`}\n        data={getCommitData()}\n      >\n        {context.loading ? \"Loading\" : \"Mass Follow\"}\n      </CommitButton>\n    </div>\n  </>\n);\n", "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearpavel.near/widget/People You May Know", "metadata.name": NaN, "metadata.tags.inline": NaN, "metadata.tags.social": NaN, "metadata": NaN}