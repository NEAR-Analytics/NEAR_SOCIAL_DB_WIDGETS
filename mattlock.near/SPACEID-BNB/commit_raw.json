{"tx_hash": "CJ4UPmjGM2QejG2FFJp2ZJRCnVTsJQdFn8JLzvB4DQdR", "action_id_social": "Cf2PCTXwoTypWr7KUH8g3J59QJzQxxA5C4NPN8bAvAif-0-widget", "block_id": 92865059, "block_timestamp": "2023-05-28T00:17:58.686Z", "signer_id": "mattlock.near", "widget_name": "SPACEID-BNB", "source_code": "const toast = (toast) => {\n  State.update({\n    toast,\n  });\n};\n\n// Get token prices\n\nconst priceQuery = fetch(\n  `https://galxe-proxy.near.workers.dev?url=https://graphigo.prd.space.id/query`,\n  {\n    method: \"POST\",\n    body: JSON.stringify({\n      operationName: \"tokenUsdPrice\",\n      variables: {\n        tokens: [\"BNB\", \"ETH\", \"WBNB\", \"WETH\"],\n      },\n      query:\n        \"query tokenUsdPrice($tokens: [TokenType]!, $date: Int) {\\n  tokenUsdPrice(tokens: $tokens, date: $date) {\\n    token\\n    usdPrice\\n    date\\n    __typename\\n  }\\n}\",\n    }),\n  }\n);\n\nconst prices = JSON.parse(priceQuery.body);\nconst priceForName =\n  Math.ceil((10000 * 5) / parseFloat(prices.data.tokenUsdPrice[0].usdPrice)) /\n    10000 +\n  0.001;\n\nconsole.log(\"prices \", prices);\nconsole.log(\"priceForName\", priceForName);\n\n// BNB commit and register\n\nconst NAME = \"__BNB_COMMIT_NAME\";\nconst SECRET = \"__BNB_COMMIT_SECRET\";\nconst COMMITMENT = \"__BNB_COMMITMENT\";\nif (!Storage.get(SECRET)) {\n  Storage.set(SECRET, ethers.utils.formatBytes32String(Date.now().toString()));\n}\n\n// Abi and .bnb registrar setup\n\nconst abi = fetch(\n  \"https://bafkreidywdcopwkqdp26osfqhk44m4cogqeuzkkq2of4w3nnop6ouvggoe.ipfs.nftstorage.link/\"\n);\nconst bnb = {\n  address: `0xD9A99AE1f5D173cCf36E19777ACa5B8268B5F291`,\n  resolver: `0x7A18768EdB2619e73c4d5067B90Fd84a71993C1D`,\n  abi: abi.body,\n  iface: new ethers.utils.Interface(abi.body),\n  secret: Storage.get(SECRET),\n};\n\n// .bnb registrar methods\n\nconst getNamesForOwner = (owner) => {\n  const res = fetch(\n    `https://galxe-proxy.near.workers.dev?url=https://graphigo.prd.space.id/query`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        operationName: \"domains\",\n        variables: {\n          input: {\n            owner,\n            orderBy: \"LIST_PRICE_ASC\",\n            buyNow: 0,\n            domainStatuses: [\n              \"REGISTERED\",\n              \"UNREGISTERED\",\n              \"GRACE_PERIOD\",\n              \"PREMIUM\",\n            ],\n            first: 30,\n          },\n        },\n        query:\n          \"query domains($input: ListDomainsInput!) {\\n  domains(input: $input) {\\n    exactMatch {\\n      name\\n      listPrice\\n      lastSalePrice\\n      tokenId\\n      owner\\n      network\\n      orderSource\\n      expirationDate\\n      image\\n      __typename\\n    }\\n    list {\\n      name\\n      listPrice\\n      lastSalePrice\\n      tokenId\\n      owner\\n      network\\n      orderSource\\n      expirationDate\\n      image\\n      __typename\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      __typename\\n    }\\n    __typename\\n  }\\n}\",\n      }),\n    }\n  );\n\n  if (!res.body || res.body.error) return;\n\n  const names = JSON.parse(res.body).data.domains.list;\n  console.log(\"getNamesForOwner\", names);\n  return names;\n};\n\nconst checkName = (name) => {\n  const queryRes1 = fetch(\n    `https://galxe-proxy.near.workers.dev?url=https://graphigo.prd.space.id/query`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        operationName: \"domains\",\n        variables: {\n          input: {\n            query: name,\n            orderBy: \"LIST_PRICE_ASC\",\n            buyNow: 1,\n            network: 1,\n            domainStatuses: [\"REGISTERED\", \"UNREGISTERED\"],\n            first: 30,\n          },\n        },\n        query:\n          \"query domains($input: ListDomainsInput!) {\\n  domains(input: $input) {\\n    exactMatch {\\n      name\\n      listPrice\\n      lastSalePrice\\n      tokenId\\n      owner\\n      network\\n      orderSource\\n      expirationDate\\n      image\\n      __typename\\n    }\\n    list {\\n      name\\n      listPrice\\n      lastSalePrice\\n      tokenId\\n      owner\\n      network\\n      orderSource\\n      expirationDate\\n      image\\n      __typename\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      __typename\\n    }\\n    __typename\\n  }\\n}\",\n      }),\n    }\n  );\n\n  console.log(\"checkName raw data\", queryRes1.body);\n\n  const taken =\n    JSON.parse(queryRes1.body).data.domains.exactMatch[0]?.listPrice !== 5;\n  console.log(\"checkName taken\", taken);\n  return taken;\n};\n\nconst commit = () => {\n  const name = state.name;\n\n  if (checkName(name)) {\n    toast(`${state.name} is taken. Please try another name.`);\n    return State.update({\n      name: \"\",\n    });\n  }\n\n  if (!name || name.length < 5) {\n    toast(\"Enter a valid name. Greater than 7 characters.\");\n    return;\n  }\n  Storage.set(NAME, name);\n\n  const encodedData = bnb.iface.encodeFunctionData(\"makeCommitment\", [\n    name,\n    state.address,\n    bnb.secret,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: bnb.address,\n      data: encodedData,\n    })\n    .then((commitment) => {\n      if (typeof commitment !== \"string\") {\n        alert(\"There was an error committing your name. Please try again!\");\n      }\n\n      console.log(\"commitment\", commitment);\n\n      const bnbContract = new ethers.Contract(\n        bnb.address,\n        bnb.abi,\n        Ethers.provider().getSigner()\n      );\n\n      bnbContract\n        .bulkCommit([commitment], {\n          gasLimit: 50000,\n        })\n        .then((res) => {\n          console.log(\"commitment res\", res);\n          toast(\n            \"Please wait 10 seconds for transaction to finalize. Register button will be enabled after 10 seconds.\"\n          );\n          setTimeout(() => Storage.set(COMMITMENT, commitment), 10000);\n        })\n        .catch((e) => {\n          console.log(e);\n          if (e.code === \"ACTION_REJECTED\") {\n            return toast(\n              \"You rejected the name request transaction. Please try again!\"\n            );\n          }\n          throw e;\n        });\n    });\n};\n\nconst register = () => {\n  const name = Storage.get(NAME);\n  const secret = Storage.get(SECRET);\n\n  if (!name) {\n    return;\n  }\n\n  const bnbContract = new ethers.Contract(\n    bnb.address,\n    bnb.abi,\n    Ethers.provider().getSigner()\n  );\n\n  bnbContract\n    .register(name, state.address, 31556952, secret, {\n      value: ethers.utils.parseEther(priceForName.toString()),\n      gasLimit: 1000000,\n    })\n    .then((transactionHash) => {\n      console.log(\"transactionHash is \", transactionHash);\n      Storage.set(COMMITMENT, null);\n    });\n};\n\n// CSS\n\nconst css = `\n  input, button {\n    margin-bottom: 16px;\n  }\n`;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    box-sizing: border-box;\n    font-family: Sans-Serif;\n    ${css}`,\n  });\n}\nconst Theme = state.theme;\n\nconst init = () => {\n  console.log(\"init\");\n  const name = Storage.get(NAME);\n  let address;\n  if (state.address === undefined) {\n    const accounts = Ethers.send(\"eth_requestAccounts\", []);\n    if (accounts.length) {\n      address = accounts[0];\n      const names = getNamesForOwner(address);\n      State.update({ address, name, names });\n    }\n  }\n};\n\ninit();\n\nif (!state.address)\n  return (\n    <Theme>\n      <button onClick={init}>Get Started</button>\n    </Theme>\n  );\n\nreturn (\n  <Theme>\n    <Widget\n      src=\"mattlock.near/widget/toast\"\n      props={{\n        toast: state.toast,\n        onClose: () => State.update({ toast: null }),\n      }}\n    />\n\n    <h3>Register a .bnb domain</h3>\n\n    <p>Enter a name and request to register.</p>\n    <input\n      disabled={!state.address}\n      value={state.name}\n      onChange={(e) => State.update({ name: e.target.value })}\n      placeholder=\"name\"\n    />\n    <button onClick={() => commit()}>Step 1. Request</button>\n    <p>After you sign the commitment you can register the name.</p>\n    <button onClick={() => register()} disabled={!Storage.get(COMMITMENT)}>\n      Step 2. Register\n    </button>\n\n    <h3>Names you own:</h3>\n    {state.names && (\n      <ol>\n        {state.names.map(({ name }) => (\n          <li key={name}>{name}</li>\n        ))}\n      </ol>\n    )}\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/SPACEID-BNB", "__row_index": 14}