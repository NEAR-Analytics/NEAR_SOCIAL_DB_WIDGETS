{"tx_hash": "G31AeG2AnBZsaPqmUrjaU1Vm9V1cTRMHQXezg5CTYQuR", "action_id_social": "632NkxDGpSMBVdkGQi9LdwMtbR3FiAbAaRzSyayhX32Z-0-widget", "block_id": 93177568, "block_timestamp": "2023-06-01T02:50:49.318Z", "signer_id": "mattlock.near", "widget_name": "Galxe-SpaceID", "source_code": "if (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 56) {\n  return (\n    <div>\n      <p>Please switch to BNB Chain</p>\n      <a\n        href={`https://academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain`}\n      >\n        Guide\n      </a>\n    </div>\n  );\n}\n\n// Campaigns\n\nconst dataMap = {\n  GCr4FUxghP: {\n    src: `https://cdn.galxe.com/galaxy/spaceid/1d471e0c-2783-4b52-90eb-3db0b2403198.png?optimizer=image&width=800&quality=100`,\n  },\n  GCi5FUxkZz: {\n    src: `https://cdn.galxe.com/galaxy/spaceid/aa8dcc5b-fc27-47d8-bd1b-09b32440d5ac.png?optimizer=image&width=800&quality=100`,\n  },\n  GCiFFUxgPJ: {\n    src: `https://cdn.galxe.com/galaxy/spaceid/3c115abf-2888-46c7-a83a-76d25de88989.png?optimizer=image&width=800&quality=100`,\n  },\n};\n\nconst toast = (toast) => {\n  State.update({\n    toast,\n  });\n};\n\nconst css = `\n  button {\n    background: rgb(30, 239, 164);\n    color: black;\n    border: none;\n    font-weight: bold;\n    &:hover {\n      border: rgb(30, 239, 164);\n      background: rgb(16, 204, 137);\n      color: black;\n    }\n  }\n  .main {\n    padding: 32px 16px;\n    width: 100%;\n    text-align: center;\n    position: relative;\n    background: black;\n    border-radius: 8px;\n    color: white;\n  }\n  .boxes {\n    margin: auto;\n    display: flex;\n    flex-flow: row wrap;\n    max-width: 1000px;\n    > div {\n      border: 1px solid #222;\n      margin: 16px;\n      padding: 8px;\n      text-align: center;\n      width: 256px;\n      > img {\n        width: 256px;\n      }\n      .break {\n        margin: 16px 0 16px 0;\n        height: 1px;\n        background-size: 100%;\n        background-image: url(https://galxe.com/_nuxt/img/bar.57178f2.png);\n      }\n      > button {\n        margin-bottom: 12px;\n      }\n      > h4 {\n        margin: 16px 0 16px 0;\n        font-size: 1.2rem;\n      }\n      > p.not {\n        color: rgb(168, 174, 186);\n      }\n    }\n    \n  }\n`;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    box-sizing: border-box;\n    font-family: Sans-Serif;\n    ${css}`,\n  });\n}\nconst Theme = state.theme;\n\nconst init = () => {\n  console.log(\"init\");\n  const name = Storage.get(NAME);\n  let address;\n  if (state.address === undefined) {\n    const accounts = Ethers.send(\"eth_requestAccounts\", []);\n    if (accounts.length) {\n      address = accounts[0];\n      State.update({ address, name });\n    }\n  }\n\n  if (!address) {\n    address = state.address;\n  }\n\n  const queryRes = fetch(\n    `https://galxe-proxy.near.workers.dev?url=https://graphigo.prd.galaxy.eco/query`,\n    {\n      //subscribe: true,\n      method: \"POST\",\n      body: JSON.stringify({\n        operationName: \"CampaignInfoWidthAddress\",\n        variables: {\n          address,\n          id: \"GCUtLUxWjp\",\n        },\n        query:\n          \"query CampaignInfoWidthAddress($id: ID!, $address: String!) {\\n  campaign(id: $id) {\\n    ...CampaignDetailFrag\\n    userParticipants(address: $address, first: 1) {\\n      list {\\n        status\\n        premintTo\\n        __typename\\n      }\\n      __typename\\n    }\\n    space {\\n      ...SpaceDetail\\n      isAdmin(address: $address)\\n      __typename\\n    }\\n    isBookmarked(address: $address)\\n    claimedLoyaltyPoints(address: $address)\\n    childrenCampaigns {\\n      ...CampaignDetailFrag\\n      userParticipants(address: $address, first: 1) {\\n        list {\\n          status\\n          __typename\\n        }\\n        __typename\\n      }\\n      parentCampaign {\\n        id\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment CampaignDetailFrag on Campaign {\\n  id\\n  ...CampaignMedia\\n  name\\n  numberID\\n  type\\n  cap\\n  info\\n  useCred\\n  formula\\n  status\\n  creator\\n  thumbnail\\n  gasType\\n  isPrivate\\n  createdAt\\n  requirementInfo\\n  description\\n  enableWhitelist\\n  chain\\n  startTime\\n  endTime\\n  requireEmail\\n  requireUsername\\n  blacklistCountryCodes\\n  whitelistRegions\\n  rewardType\\n  distributionType\\n  rewardName\\n  claimEndTime\\n  loyaltyPoints\\n  tokenRewardContract {\\n    id\\n    address\\n    chain\\n    __typename\\n  }\\n  tokenReward {\\n    userTokenAmount\\n    tokenAddress\\n    depositedTokenAmount\\n    tokenRewardId\\n    __typename\\n  }\\n  nftHolderSnapshot {\\n    holderSnapshotBlock\\n    __typename\\n  }\\n  spaceStation {\\n    id\\n    address\\n    chain\\n    __typename\\n  }\\n  ...WhitelistInfoFrag\\n  ...WhitelistSubgraphFrag\\n  gamification {\\n    ...GamificationDetailFrag\\n    __typename\\n  }\\n  creds {\\n    ...CredForAddress\\n    __typename\\n  }\\n  credentialGroups(address: $address) {\\n    ...CredentialGroupForAddress\\n    __typename\\n  }\\n  dao {\\n    ...DaoSnap\\n    nftCores {\\n      list {\\n        capable\\n        marketLink\\n        contractAddress\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  rewardInfo {\\n    discordRole {\\n      guildId\\n      guildName\\n      roleId\\n      roleName\\n      inviteLink\\n      __typename\\n    }\\n    premint {\\n      startTime\\n      endTime\\n      chain\\n      price\\n      totalSupply\\n      contractAddress\\n      banner\\n      __typename\\n    }\\n    loyaltyPoints {\\n      points\\n      __typename\\n    }\\n    loyaltyPointsMysteryBox {\\n      points\\n      __typename\\n    }\\n    __typename\\n  }\\n  participants {\\n    participantsCount\\n    bountyWinnersCount\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment DaoSnap on DAO {\\n  id\\n  name\\n  logo\\n  alias\\n  isVerified\\n  __typename\\n}\\n\\nfragment CampaignMedia on Campaign {\\n  thumbnail\\n  rewardName\\n  type\\n  gamification {\\n    id\\n    type\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CredForAddress on Cred {\\n  id\\n  name\\n  type\\n  credType\\n  credSource\\n  referenceLink\\n  description\\n  lastUpdate\\n  credContractNFTHolder {\\n    timestamp\\n    __typename\\n  }\\n  chain\\n  eligible(address: $address)\\n  subgraph {\\n    endpoint\\n    query\\n    expression\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CredentialGroupForAddress on CredentialGroup {\\n  id\\n  description\\n  credentials {\\n    ...CredForAddress\\n    __typename\\n  }\\n  conditionRelation\\n  conditions {\\n    expression\\n    eligible\\n    __typename\\n  }\\n  rewards {\\n    expression\\n    eligible\\n    rewardCount\\n    rewardType\\n    __typename\\n  }\\n  rewardAttrVals {\\n    attrName\\n    attrTitle\\n    attrVal\\n    __typename\\n  }\\n  claimedLoyaltyPoints\\n  __typename\\n}\\n\\nfragment WhitelistInfoFrag on Campaign {\\n  id\\n  whitelistInfo(address: $address) {\\n    address\\n    maxCount\\n    usedCount\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment WhitelistSubgraphFrag on Campaign {\\n  id\\n  whitelistSubgraph {\\n    query\\n    endpoint\\n    expression\\n    variable\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment GamificationDetailFrag on Gamification {\\n  id\\n  type\\n  nfts {\\n    nft {\\n      id\\n      animationURL\\n      category\\n      powah\\n      image\\n      name\\n      treasureBack\\n      nftCore {\\n        ...NftCoreInfoFrag\\n        __typename\\n      }\\n      traits {\\n        name\\n        value\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  airdrop {\\n    name\\n    contractAddress\\n    token {\\n      address\\n      icon\\n      symbol\\n      __typename\\n    }\\n    merkleTreeUrl\\n    addressInfo(address: $address) {\\n      index\\n      amount {\\n        amount\\n        ether\\n        __typename\\n      }\\n      proofs\\n      __typename\\n    }\\n    __typename\\n  }\\n  forgeConfig {\\n    minNFTCount\\n    maxNFTCount\\n    requiredNFTs {\\n      nft {\\n        category\\n        powah\\n        image\\n        name\\n        nftCore {\\n          capable\\n          contractAddress\\n          __typename\\n        }\\n        __typename\\n      }\\n      count\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment NftCoreInfoFrag on NFTCore {\\n  id\\n  capable\\n  chain\\n  contractAddress\\n  name\\n  symbol\\n  dao {\\n    id\\n    name\\n    logo\\n    alias\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment SpaceDetail on Space {\\n  id\\n  name\\n  info\\n  thumbnail\\n  alias\\n  links\\n  isVerified\\n  discordGuildID\\n  __typename\\n}\\n\",\n      }),\n    }\n  );\n\n  State.update({\n    data: JSON.parse(queryRes.body).data,\n  });\n};\n\ninit();\n\nconsole.log(\"data\", state.data);\n\nif (!state.data)\n  return (\n    <Theme>\n      <div class=\"main\">\n        <h2>SPACE ID Voyage Season 2 - Calling</h2>\n        <p>Register a .bnb domain name and claim a Voyage Box</p>\n        <Web3Connect connectLabel=\"Connect with Web3\" />\n      </div>\n    </Theme>\n  );\n\nconst handleClaim = (id) => {\n  const queryRes1 = fetch(\n    `https://galxe-proxy.near.workers.dev?url=https://graphigo.prd.galaxy.eco/query`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        operationName: \"SufficientForGaslessChainQuery\",\n        variables: {\n          id: \"344\",\n          chains: [\"BSC\"],\n        },\n        query:\n          \"query SufficientForGaslessChainQuery($id: Int, $chains: [Chain!]!) {\\n  space(id: $id) {\\n    spaceBalance {\\n      sufficientForGaslessClaimOnChain(chains: $chains) {\\n        sufficient\\n        chain\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\n      }),\n    }\n  );\n\n  const { sufficient } =\n    queryRes1.body.data.space.spaceBalance.sufficientForGaslessClaimOnChain;\n\n  if (!sufficient) {\n    return toast(\"Not enough sufficient balance for gasless claim on chain!\");\n  }\n\n  const queryRes2 = fetch(\n    `https://galxe-proxy.near.workers.dev?a=123&url=https://graphigo.prd.galaxy.eco/query`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        operationName: \"PrepareParticipate\",\n        variables: {\n          input: {\n            signature: \"\",\n            campaignID: id,\n            address: state.address,\n            mintCount: 1,\n            chain: \"BSC\",\n            captcha: {\n              lotNumber: \"0974770267a14e8f8a4802d4750b16b3\",\n              captchaOutput:\n                \"pJEPZ0JxeomN0EEvex0UjDCjy5hTOjN16CmGspGRsg6YHH7F2uO0on-XbISrHxUVmUxSW_3LqveBUYDyaqCTIEKcs--6SnjyBdzLuCR-pK4PfAckYPRnPOkqQnyLR-TkX-osO08iP3n_VbG9yM8CIJNkQZYWGeypyG_ulQT-x2QdwXAsABTPo0vBHw43GCnrkwdROv5npo3RNdOG7bMVW87fOFenVFa9Q4X7fdnK6MAAyKr1j5bfdipX_c59G4J1rLP04nvJYi3QnFg_eqmVmQ==\",\n              passToken:\n                \"dd275b5ec2272a31df8c7c6664146b8fb48b4ea78d3d7140cf2a46d1b51930e9\",\n              genTime: \"1682041909\",\n            },\n          },\n        },\n        query:\n          \"mutation PrepareParticipate($input: PrepareParticipateInput!) {\\n  prepareParticipate(input: $input) {\\n    allow\\n    disallowReason\\n    signature\\n    nonce\\n    mintFuncInfo {\\n      funcName\\n      nftCoreAddress\\n      verifyIDs\\n      powahs\\n      cap\\n      __typename\\n    }\\n    extLinkResp {\\n      success\\n      data\\n      error\\n      __typename\\n    }\\n    metaTxResp {\\n      metaSig2\\n      autoTaskUrl\\n      metaSpaceAddr\\n      forwarderAddr\\n      metaTxHash\\n      reqQueueing\\n      __typename\\n    }\\n    solanaTxResp {\\n      mint\\n      updateAuthority\\n      explorerUrl\\n      signedTx\\n      verifyID\\n      __typename\\n    }\\n    aptosTxResp {\\n      signatureExpiredAt\\n      tokenName\\n      __typename\\n    }\\n    tokenRewardCampaignTxResp {\\n      signatureExpiredAt\\n      verifyID\\n      __typename\\n    }\\n    loyaltyPointsTxResp {\\n      TotalClaimedPoints\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\n      }),\n    }\n  );\n\n  try {\n    const { TotalClaimedPoints } = data.prepareParticipate.loyaltyPointsTxResp;\n    if (TotalClaimedPoints > 0) {\n      return toast(`You received: ${TotalClaimedPoints} points!`);\n    }\n    throw \"no points\";\n  } catch (e) {\n    return toast(`Error claiming!`);\n  }\n};\n\nreturn (\n  <Theme>\n    <Widget src=\"mattlock.near/widget/SPACEID-BNB\" />\n\n    <div class=\"main\">\n      <p>\n        After registering a .bnb domain above, you will be eligible for the\n        SPACE ID campaign below!\n      </p>\n\n      <h2>SPACE ID Voyage Season 2 - Calling</h2>\n      <p>\n        There are three types of Voyage Boxes of varying rarity, each containing\n        random points that can be claimed. The box with the higher rarity will\n        give you more points.\n      </p>\n\n      {state.toast && (\n        <div class=\"toasted-container\">\n          <div class=\"toasted\">\n            {state.toast}\n            <div class=\"close\" onClick={() => State.update({ toast: null })}>\n              \u2a09\n            </div>\n          </div>\n        </div>\n      )}\n      <div class=\"boxes\">\n        {state.data.campaign.childrenCampaigns.map(\n          ({ id, name, whitelistInfo: { maxCount, usedCount } }, i) => {\n            const eligible = maxCount - 1 === usedCount;\n            return (\n              <div key={id}>\n                <h4>{name}</h4>\n                <img src={dataMap[id].src} />\n                <div class=\"break\"></div>\n                {eligible ? (\n                  <p>You are eligible</p>\n                ) : (\n                  <p class=\"not\">You are not eligible</p>\n                )}\n                <button disabled={!eligible} onClick={() => handleClaim(id)}>\n                  Claim\n                </button>\n              </div>\n            );\n          }\n        )}\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/Galxe-SpaceID", "__row_index": 15}