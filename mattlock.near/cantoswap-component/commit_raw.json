{"tx_hash": "7o6PW5WA5GPT26rQwtpJsHK5ErN3T5GdGUHKSmzPd7Za", "action_id_social": "AnCHSaRsRCJv9vWE5WdypCjnDg14g7kRMbtDjE8aH7o-0-widget", "block_id": 84997980, "block_timestamp": "2023-02-11 15:27:55.826", "signer_id": "mattlock.near", "widget_name": "cantoswap-component", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return \"Please login first\";\n\nconst PROPS = Object.assign(\n  {\n    contractName: \"cantoswap.fi\",\n    contractAddress: \"0xe6e35e2AFfE85642eeE4a534d4370A689554133c\",\n    abiUrl:\n      \"https://gist.githubusercontent.com/mattlockyer/5395796cadd94a4836208956a69cb4f3/raw/19f2f00a513d73e4dc4c42b521658cf56cddece4/uniV2Abi\",\n    tokens: {\n      NOTE: \"0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503\",\n      USDC: \"0x80b5a32E4F032B2a058b4F29EC95EEfEEB87aDcd\",\n    },\n    decimals: {\n      \"0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503\": 18,\n      \"0x80b5a32E4F032B2a058b4F29EC95EEfEEB87aDcd\": 6,\n    },\n  },\n  props\n);\n\nconsole.log(\"PROPS\", PROPS);\n\nconst MAX_AMOUNT =\n  \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n// TODO timeout helper to revert log to empty string\n// const resetLog = (dur) => {\n//   setTimeout(() => {\n//     State.update({\n//       log: \"\",\n//     });\n//   }, dur);\n// };\n\nconst formatBig = (big, decimals, sig) => {\n  if (!sig) sig = 2;\n  const ret = Big(big.toString())\n    .div(Big(10).pow(decimals))\n    .toFixed(sig)\n    .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n  if (ret.length > 16) {\n    return \"MAX AMOUNT\";\n  }\n  return ret;\n};\n\n// TODO why undefined?\n// const temp = Ethers.send(\"eth_getBalance\", [sender]);\n// console.log(\"temp\", temp);\n// console.log(\"sender\", sender);\n// const cantoBalance = parseInt(Ethers.send(\"eth_getBalance\", [sender]), 16);\n// console.log(cantoBalance);\n\ninitState({\n  log: \"\",\n  explorerLink: \"\",\n  tokenFrom: \"\",\n  showApprove: false,\n  allowanceFrom: \"0.00\",\n  tokenTo: \"\",\n  tokenFromBalance: \"0.00\",\n  tokenToBalance: \"0.00\",\n  cantoBalance,\n  amount: \"1\",\n});\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n\nconst swapRouterAbi = fetch(PROPS.abiUrl);\n\nconst ifaceToken = new ethers.utils.Interface(erc20Abi.body);\nconst ifaceSwap = new ethers.utils.Interface(swapRouterAbi.body);\n\nconst tokens = {\n  \"Select Token\": \"\",\n  ...PROPS.tokens,\n};\n\nconst decimals = PROPS.decimals;\n\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option key={token} value={tokens[token]}>\n    {token}\n  </option>\n));\n\nconst handleTxError = (e) => {\n  if (e.reason === \"user rejected transaction\") {\n    State.update({\n      log: \"You rejected the TX\",\n    });\n  } else if (/unknown request|transferFrom failed/gi.test(JSON.stringify(e))) {\n    State.update({\n      log: \"Token not approved!\",\n    });\n  } else {\n    State.update({\n      log: \"There was an error: \" + JSON.stringify(e),\n    });\n  }\n};\n\nconst setToken = (token, key) => {\n  State.update({ [key]: token });\n  getTokenBalance(sender, token).then((value) => {\n    State.update({\n      [key + \"Balance\"]: value,\n    });\n  });\n  if (/from/gi.test(key)) {\n    handleUpdateAmount();\n  }\n};\n\nconst getTokenBalance = (receiver, token) => {\n  const encodedData = ifaceToken.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: token,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const balanceHex = ifaceToken.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n      return formatBig(balanceHex, decimals[token]);\n    });\n};\n\nconst handleUpdateAmount = () => {\n  const encodedData = ifaceToken.encodeFunctionData(\"allowance\", [\n    sender,\n    PROPS.contractAddress,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: state.tokenFrom,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const balanceHex = ifaceToken.decodeFunctionResult(\n        \"allowance\",\n        rawBalance\n      );\n      const allowanceFrom = formatBig(balanceHex, decimals[state.tokenFrom]);\n      State.update({\n        allowanceFrom,\n        showApprove: allowanceFrom === \"0.00\",\n      });\n    });\n};\n\n// Transactions\n\nconst handleApprove = () => {\n  const contract = new ethers.Contract(\n    state.tokenFrom,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .approve(PROPS.contractAddress, MAX_AMOUNT)\n    .then((tx) => {\n      console.log(tx);\n      State.update({\n        log: \"The TX hash is: \" + tx.hash,\n        explorerLink: \"https://tuber.build/tx/\" + tx.hash,\n      });\n    })\n    .catch(handleTxError);\n};\n\nconst swapTokens = () => {\n  const contract = new ethers.Contract(\n    PROPS.contractAddress,\n    swapRouterAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amountIn = ethers.utils.parseUnits(\n    state.amount,\n    decimals[state.tokenFrom]\n  );\n  const amountOutString = (parseFloat(state.amount) - 0.05).toString();\n  let amountOut = ethers.utils.parseUnits(\n    amountOutString,\n    decimals[state.tokenTo]\n  );\n\n  const tokenFromBig = ethers.utils.parseUnits(\n    state.tokenFromBalance,\n    decimals[state.tokenFrom]\n  );\n\n  if (amountIn.gt(tokenFromBig)) {\n    State.update({\n      log: `You don't have enough!`,\n    });\n    resetLog(2000);\n    return;\n  }\n\n  // console.log(amountIn, amountOut);\n\n  contract\n    .swapExactTokensForTokens(\n      amountIn,\n      amountOut,\n      [state.tokenFrom, state.tokenTo],\n      sender,\n      Date.now() + 60 * 1000\n    )\n    .then((tx) => {\n      console.log(tx);\n      State.update({\n        log: \"The TX hash is: \" + tx.hash,\n        explorerLink: \"https://tuber.build/tx/\" + tx.hash,\n      });\n    })\n    .catch(handleTxError);\n};\n\nreturn (\n  <>\n    <h3>Swap Tokens</h3>\n    <p>Where: {PROPS.contractName}</p>\n    <p>Account: {sender}</p>\n    {state.log.length > 1 && <p>Log: {state.log}</p>}\n    {state.explorerLink.length > 1 && (\n      <a href={state.explorerLink} target=\"_blank\">\n        View Most Recent TX\n      </a>\n    )}\n    <div class=\"mb-3\">\n      <label for=\"selectToken\">From</label>\n      <select\n        class=\"form-select\"\n        id=\"selectToken\"\n        onChange={(e) => {\n          setToken(e.target.value, \"tokenFrom\");\n        }}\n      >\n        {tokensMenuItems}\n      </select>\n      <p>Balance: {state.tokenFromBalance}</p>\n      <p>Allowance: {state.allowanceFrom}</p>\n      {state.showApprove && <button onClick={handleApprove}>Approve</button>}\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"selectToken\">To {state.tokenToBalance}</label>\n      <select\n        class=\"form-select\"\n        id=\"selectToken\"\n        onChange={(e) => {\n          setToken(e.target.value, \"tokenTo\");\n        }}\n      >\n        {tokensMenuItems}\n      </select>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"amount\" class=\"form-label\">\n        Enter the amount\n      </label>\n      <input\n        value={state.amount}\n        class=\"form-control\"\n        id=\"amount\"\n        placeholder=\"\"\n        onChange={(e) => {\n          handleUpdateAmount(e.target.value);\n          State.update({ amount: e.target.value });\n        }}\n      />\n    </div>\n\n    <div class=\"mb-3\">\n      <button onClick={swapTokens}>Swap</button>\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/cantoswap-component", "metadata.tags.ethdenver2023": NaN, "metadata.tags.canto": NaN, "metadata.tags.canto-test": NaN}