{"tx_hash": "5pz4LYnFDQj6o5r1P6vHbZMXz9CBYuJSAnyJTa6tg5Yk", "action_id_social": "Ceyi9rQNozHBKDkEJzBddnoB8tjNCc9zx18NWAyVh7dU-0-widget", "block_id": 89882289, "block_timestamp": "2023-04-18 17:51:07.765", "signer_id": "ae40cb52839f896de8ec2313e5d7ef5f3b05b9ebc474329fa3456eec32126055", "widget_name": "NestedDiscussions.Compose", "source_code": "const dbAction = props.dbAction || \"discuss\";\nconst identifier = props.identifier;\nconst placeholder = props.placeholder || \"Join the discussion\";\nconst notifyAccountId = props.notifyAccountId;\n\nif (!identifier) {\n  return \"[NestedDiscussions.Compose]: Please setup props.identifier\";\n}\n\nif (!context.accountId) {\n  return <></>;\n}\n\nState.init({\n  image: {},\n  text: \"\",\n  showPreview: false,\n});\n\nconst profile = Social.getr(`${context.accountId}/profile`);\nconst autocompleteEnabled = true;\n\nconst content = {\n  type: \"md\",\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  text: state.text,\n};\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"custom\",\n        message: \"Tagged you on a discussion\",\n        widget: props.singlePageView,\n        blockHeight: item.blockHeight,\n        params:\n          typeof identifier === \"string\"\n            ? { identifier: identifier }\n            : identifier,\n      },\n    }));\n}\n\nfunction composeData() {\n  const data = { index: {} };\n\n  data[`${dbAction}`] = {\n    main: JSON.stringify({\n      content,\n      identifier,\n    }),\n  };\n\n  data.index[`${dbAction}`] = JSON.stringify({\n    key: identifier,\n    value: {\n      type: \"md\",\n    },\n  });\n\n  let notifications = [];\n\n  if (notifyAccountId) {\n    notifications.push({\n      key: notifyAccountId,\n      value: {\n        type: \"custom\",\n        message: \"Commented on a discussion\",\n        widget: props.singlePageView,\n        blockHeight: item.blockHeight,\n        params: identifier,\n      },\n    });\n  }\n\n  const tag_notifications = extractTagNotifications(state.text);\n  notifications = notifications.concat(tag_notifications);\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  return data;\n}\n\nfunction onCommit() {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n}\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst Wrapper = styled.div`\n  --padding: 24px;\n  position: relative;\n\n  @media (max-width: 1200px) {\n    --padding: 12px;\n  }\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  pointer-events: none;\n  position: absolute;\n  top: var(--padding);\n  left: var(--padding);\n\n  img {\n    object-fit: cover;\n    border-radius: 40px;\n    width: 100%;\n    height: 100%;\n  }\n\n  @media (max-width: 992px) {\n    display: none;\n  }\n`;\n\nconst Textarea = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  \n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 164px;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2)) calc(40px + (var(--padding) * 2));\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n\n    @media (max-width: 1200px) {\n      min-height: 124px;\n    }\n\n    @media (max-width: 992px) {\n      padding-left: var(--padding);\n    }\n  }\n  \n  &::after {\n    content: attr(data-value) ' ';\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n\n  textarea {\n    transition: all 200ms;\n\n    &::placeholder {\n      opacity: 1;\n      color: #687076;\n    }\n\n    &:empty + p {\n      display: block;\n    }\n\n    &:focus {\n      box-shadow: inset 0 0 30px rgba(0,0,0,0.05);\n    }\n  }\n`;\n\nconst TextareaDescription = styled.p`\n  position: absolute;\n  top: calc(var(--padding) + 24px);\n  left: calc(42px + (var(--padding) * 2));\n  right: var(--padding);\n  font-size: 10px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n  pointer-events: none;\n  display: none;\n\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n\n    &:hover,\n    &:focus {\n      color: #000;\n      text-decoration: underline;\n    }\n  }\n\n  @media (max-width: 992px) {\n    left: var(--padding);\n  }\n`;\n\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n\n  .commit-post-button,\n  .preview-post-button {\n    background: #59E692;\n    color: #09342E;\n    border-radius: 40px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &:hover,\n    &:focus {\n      background: rgb(112 242 164);\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .preview-post-button {\n    color: #11181C;\n    background: #F1F3F5;\n    padding: 0;\n    width: 40px;\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n  }\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #F1F3F5;\n    color: #11181C;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\n\nconst PreviewWrapper = styled.div`\n  position: relative;\n  padding: var(--padding);\n  padding-bottom: calc(40px + (var(--padding) * 2));\n`;\n\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nreturn (\n  <Wrapper>\n    {state.showPreview ? (\n      <PreviewWrapper>\n        <Widget\n          src=\"near/widget/Posts.Post\"\n          props={{\n            accountId: context.accountId,\n            blockHeight: \"now\",\n            content,\n          }}\n        />\n      </PreviewWrapper>\n    ) : (\n      <>\n        <Avatar>\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: profile.image,\n              alt: profile.name,\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreibiyqabm3kl24gcb2oegb7pmwdi6wwrpui62iwb44l7uomnn3lhbi\",\n            }}\n          />\n        </Avatar>\n\n        <Textarea data-value={state.text}>\n          <textarea\n            placeholder={placeholder}\n            onInput={(event) => textareaInputHandler(event.target.value)}\n            onKeyUp={(event) => {\n              if (event.key === \"Escape\") {\n                State.update({ showAccountAutocomplete: false });\n              }\n            }}\n            value={state.text}\n          />\n\n          <TextareaDescription>\n            <a\n              href=\"https://www.markdownguide.org/basic-syntax/\"\n              target=\"_blank\"\n            >\n              Markdown\n            </a>\n            is supported\n          </TextareaDescription>\n        </Textarea>\n      </>\n    )}\n\n    {autocompleteEnabled && state.showAccountAutocomplete && (\n      <AutoComplete>\n        <Widget\n          src=\"calebjacob.near/widget/AccountAutocomplete\"\n          props={{\n            term: state.text.split(\"@\").pop(),\n            onSelect: autoCompleteAccountId,\n            onClose: () => State.update({ showAccountAutocomplete: false }),\n          }}\n        />\n      </AutoComplete>\n    )}\n\n    <Actions>\n      {!state.showPreview && (\n        <IpfsImageUpload\n          image={state.image}\n          className=\"upload-image-button bi bi-image\"\n        />\n      )}\n\n      <button\n        type=\"button\"\n        disabled={!state.text}\n        className=\"preview-post-button\"\n        title={state.showPreview ? \"Edit Post\" : \"Preview Post\"}\n        onClick={() => State.update({ showPreview: !state.showPreview })}\n      >\n        {state.showPreview ? (\n          <i className=\"bi bi-pencil\" />\n        ) : (\n          <i className=\"bi bi-eye-fill\" />\n        )}\n      </button>\n\n      <CommitButton\n        disabled={!state.text}\n        force\n        data={composeData}\n        onCommit={onCommit}\n        className=\"commit-post-button\"\n      >\n        Post\n      </CommitButton>\n    </Actions>\n  </Wrapper>\n);\n", "metadata": null, "branch": NaN, "widget_modules_used": null, "widget_url": "https://near.social/#/ae40cb52839f896de8ec2313e5d7ef5f3b05b9ebc474329fa3456eec32126055/widget/NestedDiscussions.Compose", "branch.draft.": NaN, "branch.draft.metadata": NaN}