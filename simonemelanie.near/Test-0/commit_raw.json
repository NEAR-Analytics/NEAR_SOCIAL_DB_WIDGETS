{"tx_hash": "CWNX1weaUbu7crfAFoQNPYaLXi8QY1wY2vxsHkUNk9ig", "action_id_social": "DBCAkdZ2WhX23Fba5pgL3mZ4mxQDXbhnbvcqdf2BURtq-0-widget", "block_id": 89956240, "block_timestamp": "2023-04-19 17:19:51.989", "signer_id": "simonemelanie.near", "widget_name": "Test-0", "source_code": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Near Social</title>\n  </head>\n  <body>\n    <div id=\"container\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/@near/ft-contract-metadata-distributor\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@near/ft-contract-standard\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/near-api-js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/regenerator-runtime\"></script>\n    <script src=\"https://unpkg.com/@babel/polyfill\"></script>\n    <script>\n      const endpoint = 'https://api.near.org/graphql';\n      const query = `\n        query($accountId: String!, $fromIndex: Int!, $limit: Int!) {\n          transactions(\n            accountId: $accountId,\n            actions: [\"TRANSFER\"],\n            receiverIn: [\"near\"],\n            fromIndex: $fromIndex,\n            limit: $limit,\n          ) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            nodes {\n              action\n              blockTimestamp\n              args\n              hash\n              receipt {\n                receiverId\n              }\n            }\n          }\n        }`;\n\n      const variables = {\n        accountId: 'near',\n        fromIndex: 0,\n        limit: 5,\n      };\n\n      async function fetchGraphQL(query, variables) {\n        const response = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            query,\n            variables,\n          }),\n        });\n        const responseBody = await response.json();\n        if (responseBody.errors) {\n          throw new Error(responseBody.errors.map((e) => e.message).join(', '));\n        }\n        return responseBody.data;\n      }\n\n      async function loadPosts() {\n        try {\n          const data = await fetchGraphQL(query, variables);\n          const transactions = data.transactions.nodes;\n          const posts = transactions.map((transaction) => {\n            const { args, blockTimestamp } = transaction;\n            const [receiverId, tokenAmount] = args;\n            return {\n              title: `${receiverId} received ${tokenAmount} tokens`,\n              date: new Date(blockTimestamp / 1000000).toLocaleString(),\n              likes: Math.floor(Math.random() * 100),\n              comments: Math.floor(Math.random() * 20),\n              imageURL: 'https://picsum.photos/200/300?random=' + Math.random(),\n            };\n          });\n          displayImages(posts);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n  function displayImages(posts) {\n    const container = document.getElementById('container');\n    container.innerHTML = '';\n    posts.forEach((post) => {\n      const postElement = document.createElement('div');\n      postElement.className = 'post';\n      const titleElement = document.createElement('h2');\n      titleElement.innerHTML = post.title;\n      const dateElement = document.createElement('p');\n      dateElement.innerHTML = post.date;\n      const imageElement = document.createElement('img');\n      imageElement.src = post.imageURL;\n      const likesElement = document.createElement('p');\n      likesElement.innerHTML = `${post.likes} likes`;\n      const commentsElement = document.createElement('p');\n      commentsElement.innerHTML = `${post.comments} comments`;\n\n      postElement.appendChild(titleElement);\n      postElement.appendChild(dateElement);\n      postElement.appendChild(imageElement);\n      postElement.appendChild(likesElement);\n      postElement.appendChild(commentsElement);\n      container.appendChild(postElement);\n    });\n  }\n\n         \n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/simonemelanie.near/widget/Test-0"}