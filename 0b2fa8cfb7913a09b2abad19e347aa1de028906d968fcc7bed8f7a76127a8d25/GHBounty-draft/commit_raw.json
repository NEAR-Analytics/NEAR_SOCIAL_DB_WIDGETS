{"tx_hash": "CBegrb1sENGbF1KqhZuiqp4KCh913BR1aWGDhFj4u4ZE", "action_id_social": "DpF9SKEyXgLkXyZVuhxYUbBpbbV7y3ETkU5QViNuu9Cw-0-widget", "block_id": 89737164, "block_timestamp": "2023-04-16 19:49:08.792", "signer_id": "0b2fa8cfb7913a09b2abad19e347aa1de028906d968fcc7bed8f7a76127a8d25", "widget_name": "GHBounty-draft", "source_code": "// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\ninitState({\n  // bountyContractAddress: \"0xb405a96238ca46E9d3268271F87dbBf90E4903Bf\",\n  bountyContractAddress: \"0x6a5324A3D7BfEb6D2EBeEAA9D73350051d9E3691\",\n  activePage: \"Bounty page\", // Bounty page, Browse Bounties,  My bounties\n  prURL: \"\",\n  rewardAsset: \"0x7ACAf6167a39BE1dfFBb542Ac848030dcDF141CF\",\n  rewardAmount: \"\",\n  lockPeriod: 5000000,\n  debuglogs: \"\",\n});\n\n//ABI for general ERC20\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"scam\";\n}\n\n//fetch the bounty contract ABI\nconst bountyContractAbi = fetch(\n  \"https://gist.githubusercontent.com/birchmd/f52cc8244be64eca036d9156486307d4/raw/6aefe23dbeda1592bd7c9c12119ac8e8faa83564/BountyProgram.abi.json\"\n);\nif (!bountyContractAbi.ok) {\n  return \"scam\";\n}\n\n// https://github.com/spilin/oracle-test/pull/1\n\nif (state.sender === undefined) {\n  State.update({ sender: Ethers.send(\"eth_requestAccounts\", [])[0] });\n}\n\nconst tokens = {\n  \"Select Token\": \"\",\n  BYC: \"0x7ACAf6167a39BE1dfFBb542Ac848030dcDF141CF\",\n  // ORC: \"0x48dfDe50Fc163CeB16dA138dDc9cfbAC1C290e58\",\n  // BOC: \"0x7ACAf6167a39BE1dfFBb542Ac848030dcDF141CF\",\n};\n\n//functions for UI\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option value={tokens[token]}>{token}</option>\n));\n\nconst setActive = (type) => {\n  State.update({ activePage: type });\n};\n\n// const setPrUrl = (evt) => {\n//   const val = evt.target.value;\n//   State.update({ prURL: val });\n// };\n// const setRewardAmount = (val) => {\n//   State.update({ rew: val });\n// };\n// const setRewardAsset = (val) => {\n//   State.update({ prURL: val });\n// };\n\nconst Theme = styled.div`font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif; ${cssFont} ${css}`;\n\nconst Tab = styled.button`\n  padding: 10px 40px;\n  cursor: pointer;\n  border: 0;\n  outline: 0;\n  color: white;\n  background-color: transparent;\n  border-bottom: 2px solid black;\n  ${({ active }) =>\n    active &&\n    `     \n    border-bottom: 2px solid white;\n  `}\n`;\nconst types = [\n  \"Create Bounty\",\n  \"Bounty page\",\n  \"Browse Bounties\",\n  \"My Bounties\",\n  \"Info\",\n];\nconst ButtonGroup = styled.div`\n  display: flex;\n`;\n\n//APPROVE SPENDING\n\nconst approveSpending = () => {\n  const erc20 = new ethers.Contract(\n    state.rewardAsset,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = 1000000000;\n\n  const output = erc20.approve(state.bountyContractAddress, amount);\n\n  State.update({ debuglogs: JSON.stringify(output) });\n};\n\nconst bountyObject = new ethers.Contract(\n  state.bountyContractAddress,\n  bountyContractAbi.body,\n  Ethers.provider().getSigner()\n);\n\nconst createBounty = () => {\n  State.update({ debuglogs: state.rewardAsset });\n\n  const output = bountyObject.createBounty(\n    // \"https://github.com/spilin/oracle-test/pull/1\",\n    // \"0x7ACAf6167a39BE1dfFBb542Ac848030dcDF141CF\",\n    // 100,\n    // 1000\n    state.prURL,\n    state.rewardAsset,\n    state.rewardAmount,\n    state.lockPeriod\n  );\n\n  // State.update({ debuglogs: JSON.stringify(output) });\n};\n\n//RETRIEVE BYC balance\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\nconst getTokenBalance = (sender) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [sender]);\n\n  return Ethers.provider()\n    .call({\n      to: state.rewardAsset,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      // State.update({ debuglogs: JSON.stringify(rawBalance) });\n\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      // State.update({ debuglogs: JSON.stringify(tokenDecimals) });\n\n      const value = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(state.tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n\n      // State.update({ debuglogs: JSON.stringify(value) });\n\n      return value;\n    });\n};\n\nconst getTokenDecimals = () => {\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: state.rewardAsset,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n      // refreshBalances();\n    });\n};\n\nconst setToken = (token) => {\n  State.update({ token });\n  getTokenDecimals();\n};\n\nsetToken(state.rewardAsset);\n\ngetTokenBalance(state.sender).then((value) => {\n  State.update({ senderBalance: value });\n});\n\n//\n//\n// BOUNTY PAGE\n//\n\n//\n//\n// BROWSE BOUNTIES\n//\nconst ifaceBrowse = new ethers.utils.Interface(bountyContractAbi.body);\n\nconst hex2BN = (hex) => {\n  let input;\n  if (hex.startsWith(\"0x\")) {\n    input = hex.substring(2);\n  } else {\n    input = hex;\n  }\n  return new BN(input, 16);\n};\n\nconst listOpenBounties = () => {\n  const encodedData = ifaceBrowse.encodeFunctionData(\"listOpenBounties\", []);\n  State.update({ debuglogs: \"function called\" });\n\n  Ethers.provider()\n    .call({\n      to: state.bountyContractAddress,\n      data: encodedData,\n    })\n    .then((response) => {\n      // State.update({ debuglogs: response });\n      const bounties = ifaceBrowse\n        .decodeFunctionResult(\"listOpenBounties\", response)[0]\n        .map((value) => {\n          // The type from the `iface` decode is weird, rather than\n          // try to figure it out, I'm just turning it back into\n          // standard JS types by round-tripping through JSON\n          // serialization.\n          const xs = JSON.parse(JSON.stringify(value));\n          const id = hex2BN(xs[0][\"hex\"]);\n          const prURL = xs[1];\n          const rewardAsset = xs[2];\n          const rewardAmount = hex2BN(xs[3][\"hex\"]);\n          const lockPeriod = hex2BN(xs[4][\"hex\"]);\n          const owner = xs[5];\n          return {\n            id,\n            prURL,\n            rewardAsset,\n            rewardAmount,\n            lockPeriod,\n            owner,\n          };\n        });\n\n      //   State.update({ bounties });\n      // State.update({ debuglogs: \"hello\" });\n      State.update({ debuglogs: JSON.stringify(bounties) });\n    });\n};\n\nconst fetchBounties = () => {\n  // State.update({ debuglogs: \"hello\" });\n  listOpenBounties();\n};\n\nconst addRow = () => {\n  // const table = document.querySelector(\"#myTable table\");\n  State.update({ debuglogs: \"hello\" });\n  const row = table.insertRow();\n  row.insertCell().textContent = \"item.id\";\n  row.insertCell().textContent = \"item.prURL\";\n  row.insertCell().textContent = \"item.rewardAsset\";\n  row.insertCell().textContent = \"item.rewardAmount\";\n};\n\n// function TableComponent() {\n//   const [tableData, setTableData] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"https://example.com/api/data\")\n//       .then((response) => response.json())\n//       .then((data) => setTableData(data))\n//       .catch((error) => console.error(error));\n//   }, []);\n// }\n// fetch(\"https://example.com/api/data\")\n//         .then(response => response.json())\n//         .then(data => {\n//           // Get reference to table body\n//           const tbody = document.querySelector(\"#myTable tbody\");\n\n//           // Loop through data and add rows to table\n//           data.forEach(item => {\n//             const row = tbody.insertRow();\n//             row.insertCell().textContent = item.id;\n//             row.insertCell().textContent = item.prURL;\n//             row.insertCell().textContent = item.rewardAsset;\n//             row.insertCell().textContent = item.rewardAmount;\n//           });\n//         })\n//         .catch(error => console.error(error));\n\n//\n//\n//RETURN UI\nreturn (\n  <>\n    <ButtonGroup>\n      {types.map((type) => (\n        <Tab\n          key={type}\n          active={state.activePage === type}\n          onClick={() => setActive(type)}\n        >\n          {type}\n        </Tab>\n      ))}\n    </ButtonGroup>\n    <div\n      style={\n        state.activePage == \"Create Bounty\"\n          ? { display: \"\" }\n          : { display: \"none\" }\n      }\n    >\n      <h1> Create a new bounty </h1>\n      <div>\n        <div> {state.debuglogs ?? \"the logs will appear here\"} </div>\n        <label htmlFor=\"name\">Github PR URL</label>\n        <input\n          value={state.prURL}\n          id=\"prurl\"\n          type=\"text\"\n          onChange={(e) => State.update({ prURL: e.target.value })}\n          placeholder=\"Paste here the URL of your github PR\"\n          required\n        />\n        <div>\n          Your balance = {state.senderBalance ?? (!state.sender ? \"0\" : \"...\")}\n          &nbsp;BYC{\" \"}\n        </div>\n        <label htmlFor=\"amount\">Bounty amount:</label>\n        <input\n          id=\"amount\"\n          type=\"number\"\n          value={state.rewardAmount}\n          onChange={(e) => State.update({ rewardAmount: e.target.value })}\n          placeholder=\"0.0\"\n          required\n        />\n        <label for=\"selectToken\">Select token</label>\n        <select\n          class=\"form-select\"\n          id=\"selectToken\"\n          onChange={(e) => State.update({ rewardAsset: e.target.value })}\n        >\n          {tokensMenuItems}\n        </select>\n        <br />\n\n        {!!state.sender ? (\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={approveSpending}\n          >\n            <span>Approve</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <br />\n\n        {!!state.sender ? (\n          <button class=\"LidoStakeFormSubmitContainer\" onClick={createBounty}>\n            <span>Submit</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n      </div>\n    </div>\n\n    <div\n      class=\"\"\n      style={\n        state.activePage == \"Bounty page\"\n          ? { display: \"\" }\n          : { display: \"none\" }\n      }\n    >\n      <h1> Bounty page </h1>\n      <div> {state.debuglogs ?? \"the logs will appear here\"} </div>\n    </div>\n\n    <div\n      class=\"\"\n      style={\n        state.activePage == \"Browse Bounties\"\n          ? { display: \"\" }\n          : { display: \"none\" }\n      }\n    >\n      <h1> All bounties </h1>\n\n      <button class=\"LidoStakeFormSubmitContainer\" onClick={fetchBounties}>\n        <span>Fetch bounties</span>\n      </button>\n\n      <button class=\"LidoStakeFormSubmitContainer\" onClick={addRow}>\n        <span>Add Row</span>\n      </button>\n\n      <div className=\"App\" id=\"myTable\">\n        <table>\n          <tr>\n            <th>ID</th>\n            <th>prURL</th>\n            <th>Reward Asset</th>\n            <th>Reward Amount</th>\n          </tr>\n          <tr>\n            <td>Anom</td>\n            <td>19</td>\n            <td>Male</td>\n          </tr>\n          <tr>\n            <td>Megha</td>\n            <td>19</td>\n            <td>Female</td>\n          </tr>\n        </table>\n      </div>\n\n      <div>{state.debuglogs ?? \"the logs will appear here\"}</div>\n    </div>\n    <div\n      style={\n        state.activePage == \"My bounties\"\n          ? { display: \"\" }\n          : { display: \"none\" }\n      }\n    >\n      <p> myBounties </p>\n    </div>\n\n    <div\n      style={state.activePage == \"Info\" ? { display: \"\" } : { display: \"none\" }}\n    >\n      <div>Address = {state.sender ?? \"...\"}</div>\n      <div>\n        Balance = {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH{\" \"}\n      </div>\n      <div> {state.debuglogs ?? \"the logs will appear here\"} </div>\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0b2fa8cfb7913a09b2abad19e347aa1de028906d968fcc7bed8f7a76127a8d25/widget/GHBounty-draft", "metadata.tags.ethdenver2023": NaN}