{"tx_hash": "94y31VRXQnjbN2ec7VBgssbPVThG28mXCL9oj3eJvmzi", "action_id_social": "FA294YwrEzhQkFNS4sAB8cKEgDUcWrM1Tf83oSfbJXk8-0-widget", "block_id": 90632078, "block_timestamp": "2023-04-28 14:40:19.268", "signer_id": "ref-admin.near", "widget_name": "ref-component-search", "source_code": "const allMetadata =\n  Social.get(\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\n    \"final\"\n  ) || {};\n\nconst keys = Social.keys([\"*/widget/*\"], \"final\", { values_only: true }) || {};\n\nconst requiredTags = props.filterTags;\n\nconst boostedTag = props.boostedTag;\nconst inputTerm = props.term;\n\nconst SearchIcon = (\n  <svg\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 18 18\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      cx=\"7.19239\"\n      cy=\"7.19238\"\n      r=\"5.08579\"\n      transform=\"rotate(-45 7.19239 7.19238)\"\n      stroke=\"#73818B\"\n      stroke-width=\"2\"\n    />\n    <path\n      d=\"M10.7891 10.7886L14.3853 14.3848\"\n      stroke=\"#73818B\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\n\nconst debounce = (func, wait) => {\n  const pause = wait || 350;\n  let timeout;\n\n  return (args) => {\n    const later = () => {\n      clearTimeout(timeout);\n      func(args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, pause);\n  };\n};\n\nconst _search = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._\\/-]/)\n    .filter((s) => !!s.trim());\n\n  const matchedWidgets = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 1;\n  const MaxScore = MaxSingleScore * 4;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return pos >= 0 ? Math.exp(-pos) : 0;\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(keys).forEach(([accountId, data]) => {\n    Object.keys(data.widget).forEach((componentId) => {\n      const widgetSrc = `${accountId}/widget/${componentId}`;\n      const widgetSrcScore = computeScore(widgetSrc);\n      const componentIdScore = computeScore(componentId);\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\n      const name = metadata.name || componentId;\n\n      const hasRefTag = metadata.tags.some((t) =>\n        requiredTags.map((f) => f.toLowerCase()).includes(t.toLowerCase())\n      );\n      if (requiredTag && !(metadata.tags && hasRefTag)) {\n        return;\n      }\n      const boosted =\n        boostedTag && metadata.tags && boostedTag in metadata.tags;\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\n      const nameScore = computeScore(name);\n      const tagsScore = Math.min(\n        MaxSingleScore,\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\n      );\n      const score =\n        (widgetSrcScore + componentIdScore + nameScore + tagsScore) / MaxScore;\n      if (score > 0) {\n        matchedWidgets.push({\n          score,\n          accountId,\n          widgetName: componentId,\n          widgetSrc,\n          name,\n          tags,\n          boosted,\n        });\n      }\n    });\n  });\n\n  matchedWidgets.sort(\n    (a, b) => (b.boosted ? 2 : 0) + b.score - (a.boosted ? 2 : 0) - a.score\n  );\n  const result = matchedWidgets.slice(0, limit);\n\n  State.update({\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ term, result });\n  }\n};\n\nconst _searchDebounced = debounce(_search, 200);\n\nconst computeResults = (term) => {\n  State.update({\n    term: term,\n  });\n\n  _searchDebounced(term);\n};\n\nif (props.term && props.term !== state.oldTerm) {\n  State.update({\n    oldTerm: props.term,\n  });\n  if (props.term !== state.term) {\n    computeResults(props.term);\n  }\n}\n\nconsole.log(requiredTags, state.oldFilters, \"old filters\");\n\nif (JSON.stringify(requiredTags) !== JSON.stringify(state.oldFilters)) {\n  State.update({\n    oldFilters: requiredTags,\n  });\n  computeResults(state.term);\n}\n\nconst Wrapper = styled.div`\n\n\n    width: 482px;\n    height: 36px;\n    display:flex;\n    align-items:center;\n    padding: 0 0 0 14px;\n\n\n    background: #1A2E33;\n    border-radius: 10px;\n\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`;\n\nconst Input = styled.input`\n    padding-left:4px;\n    appearance: none;\n    outline: none;\n    width: 100%;\n    background: none;\n    border: none;\n    color: #FFFFFF;\n    ::placeholder{\n        color: #FFFFFF;\n        opacity:0.3\n    }\n`;\n\nreturn (\n  <Wrapper>\n    {SearchIcon}\n    <Input\n      type=\"text\"\n      className={`ref-component-search`}\n      value={state.term ?? \"\"}\n      onChange={(e) => computeResults(e.target.value)}\n      placeholder={props.placeholder ?? `Search`}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-admin.near/widget/ref-component-search"}