{"tx_hash": "CHx2EkcFrhAv7QDMXRMBdEpiMSmUiUZH4JnQrqapuwCF", "action_id_social": "7PoXqt8S8v5aMY3RRcdv3pdnjrF3jiYnn5rT5rhGnaaL-0-widget", "block_id": 90753360, "block_timestamp": "2023-04-30 04:50:16.060", "signer_id": "ref-admin.near", "widget_name": "XREF.Stake", "source_code": "/** state init start */\nState.init({\n  inputValue: \"\",\n  inputError: \"\",\n  stakeMax: false,\n});\n/** state init end */\n// load config\nconst config = props.config;\nif (!config) {\n  return \"Component not be loaded. Missing `config` props\";\n}\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst REF_DECIMALS = 18;\nconst XREF_DECIMALS = 18;\nconst DECIMALS_XREF_REF_TRANSTER = 8;\nconst BIG_ROUND_DOWN = 0;\nconst storageToken = Near.view(config.XREF_TOKEN_ID, \"storage_balance_of\", {\n  account_id: accountId,\n});\nconst shrinkToken = (value, decimals) => {\n  return new Big(value).div(new Big(10).pow(decimals)).toFixed();\n};\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals)).toFixed();\n};\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\n/** common lib end */\nfunction getRefBalance(accountId) {\n  const balanceRaw = Near.view(config.REF_TOKEN_ID, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n  if (!balanceRaw) return \"-\";\n  const balance = Big(balanceRaw).div(Big(10).pow(REF_DECIMALS));\n  return [\n    balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN),\n    balance.lt(0) ? \"0\" : balance.toFixed(),\n  ];\n}\nfunction getRate() {\n  const rateRow = Near.view(config.XREF_TOKEN_ID, \"get_virtual_price\");\n  const rate = Big(rateRow)\n    .div(Big(10).pow(DECIMALS_XREF_REF_TRANSTER))\n    .toFixed();\n  return rate;\n}\n\nconst [refBalance, refBalanceWhole] = getRefBalance(accountId);\nconst refToxrefRate = getRate();\n/** events start */\nconst onChange = (e) => {\n  // Has user signed in?\n  if (!isSignedIn) {\n    State.update({\n      inputError: \"Sign in please\",\n    });\n    return;\n  }\n  const targetValue = e.target.value;\n  if (targetValue !== \"\" && !targetValue.match(/^\\d*(\\.\\d*)?$/)) {\n    return;\n  }\n  let stakeAmount = targetValue.replace(/^0+/, \"0\"); // remove prefix 0\n  // limit 18 decimals\n  const most18DecimalsPattern = /^-?\\d+(\\.\\d{0,18})?/;\n  let values = stakeAmount.match(most18DecimalsPattern);\n  if (values) {\n    stakeAmount = values[0];\n  }\n  if (\n    refBalance &&\n    (isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).gt(Big(refBalanceWhole)))\n  ) {\n    if (\n      isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lte(0)\n    ) {\n      State.update({\n        inputValue: stakeAmount,\n        stakeMax: false,\n        inputError: \"Stake at least greater than zero REF\",\n      });\n    } else {\n      State.update({\n        inputValue: stakeAmount,\n        stakeMax: false,\n        inputError: `Max is ${refBalance} REF`,\n      });\n    }\n    return;\n  }\n  State.update({\n    inputValue: stakeAmount,\n    stakeMax: false,\n    inputError: \"\",\n  });\n};\n\nconst onClickMax = () => {\n  if (\n    isNaN(Number(refBalance)) ||\n    refBalance === \"\" ||\n    Big(refBalance).lte(0)\n  ) {\n    State.update({\n      inputValue: refBalance,\n      stakeMax: true,\n      inputError: \"Stake at least greater than zero REF\",\n    });\n    return;\n  } else {\n    State.update({\n      inputValue: refBalance,\n      stakeMax: true,\n      inputError: \"\",\n    });\n  }\n};\n\nconst onClickStake = async () => {\n  const stakeAmount = state.inputValue;\n  if (\n    refBalance &&\n    (isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lte(0) ||\n      Big(stakeAmount).gt(Big(refBalanceWhole)))\n  ) {\n    if (\n      isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lte(0)\n    ) {\n      State.update({ inputError: \"Stake at least greater than zero REF\" });\n    } else if (Big(stakeAmount).gt(Big(refBalanceWhole))) {\n      State.update({\n        inputError: `Max is ${refBalance} REF`,\n      });\n    } else {\n      State.update({\n        inputError: \"\",\n      });\n    }\n    return;\n  }\n  const transactions = [\n    {\n      contractName: config.REF_TOKEN_ID,\n      methodName: \"ft_transfer_call\",\n      args: {\n        receiver_id: config.XREF_TOKEN_ID,\n        amount: expandToken(\n          stakeMax ? refBalanceWhole : stakeAmount,\n          REF_DECIMALS\n        ),\n        msg: \"\",\n      },\n      deposit: new Big(\"1\").toFixed(),\n      gas: expandToken(50, 12),\n    },\n  ];\n  if (!storageToken || storageToken.total === \"0\") {\n    transactions.unshift({\n      contractName: config.XREF_TOKEN_ID,\n      methodName: \"storage_deposit\",\n      args: {\n        account_id: accountId,\n        registration_only: true,\n      },\n      deposit: expandToken(0.0125, 24),\n      gas: expandToken(50, 12),\n    });\n  }\n  Near.call(transactions);\n};\n/** events end */\n\nconst disabledStakeButton =\n  !isValid(state.inputValue) || Big(state.inputValue).eq(0) || state.inputError;\n\nconst youWillReceive = (\n  Big(refToxrefRate || 0).lte(0)\n    ? Big(0)\n    : Big(isValid(state.inputValue) ? state.inputValue : 0).div(refToxrefRate)\n).toFixed(5, BIG_ROUND_DOWN);\nconst StakeFormWrapper = styled.div`\n  width: 100%;\n  max-width: 500px;\n  padding-top: 10px;\n  background: #1A2E33;\n  border-radius: 16px;\n  margin-top:20px;\n  padding-bottom:20px;\n  .contentArea{\n    background: #142427;\n    border-radius: 16px;\n    padding:20px 30px;\n  }\n`;\n\nreturn (\n  <StakeFormWrapper>\n    <Widget\n      src={`${config.ownerId}/widget/stake-bannerIcon`}\n      props={{\n        firstIconName: \"REF\",\n        firstIconUrl:\n          \"https://ipfs.near.social/ipfs/bafkreiauvwi7qjcy2ddzcjobr274vshstk7up22fnr3dbul2lypp755j44\",\n        secondIconName: \"xREF\",\n        secondIconUrl:\n          \"https://ipfs.near.social/ipfs/bafkreierdf2ykpfcctanlt7s5xcd5jp7cydnvm3vztdl7ywlwowvuspg4e\",\n        componentType: \"xref\",\n      }}\n    ></Widget>\n    <div class=\"contentArea\">\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Input`}\n        props={{\n          placeholder: \"0\",\n          value: state.inputValue,\n          onChange,\n          onClickMax,\n          inputError: state.inputError,\n          balance: refBalance,\n        }}\n      />\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Button`}\n        props={{\n          onClick: onClickStake,\n          disabled: disabledStakeButton,\n          text: \"Stake\",\n        }}\n      />\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Message.YouWillReceive`}\n        props={{ text: `${youWillReceive} xREF` }}\n      />\n    </div>\n    <Widget\n      src={`${config.ownerId}/widget/LiNEAR.Tab`}\n      props={{\n        updateTabName: props.updateTabName,\n        tabName: \"stake\",\n      }}\n    ></Widget>\n  </StakeFormWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-admin.near/widget/XREF.Stake"}