{"tx_hash": "BQbnYAzw9PgrZmuriNF7FZjkHDuUVD84GzFfXGNJiVxz", "action_id_social": "H7nWDU3JVUvZiwUSNHCj4x76QqmmcGeGtsLYSEkWifGG-0-widget", "block_id": 86604361, "block_timestamp": "2023-03-05 09:58:35.340", "signer_id": "markeljan.near", "widget_name": "PromotePost", "source_code": "/*\nProps = {\n  postId: number,\n  bidAmount: number,\n  duration: number,\n}\n\n*/\n\nlet contract = \"promotepost.near\";\n\nconst deposits = Near.view(contract, \"get_all_deposits\", `{}`);\n\ninitState({\n  postId: props.postId ?? 0,\n  amount: props.bidAmount ?? 0,\n  duration: props.duration ?? 1,\n});\n\nconst daysBetweenTimestamps = (timestamp1, timestamp2) => {\n  const oneDay = 24 * 60 * 60 * 1000; // one day in milliseconds\n  const timeDiff = Math.abs(timestamp2 - timestamp1); // difference in milliseconds\n  const numDays = Math.round(timeDiff / oneDay); // round to nearest integer\n  return numDays;\n};\n\nconst calculateBidPower = (deposit) => {\n  const daysBetween = daysBetweenTimestamps(\n    deposit.timestamp,\n    deposit.expire_timestamp\n  );\n  return deposit.amount / daysBetween;\n};\n\nconst findPromotedPosts = (posts, deposits) => {\n  const promotedPosts = [];\n\n  deposits\n    .filter((deposit) => deposit.expire_timestamp > Date.now())\n    .forEach((deposit) => {\n      const postId = deposit.post_id;\n      const currentBidPower = (\n        promotedPosts.find((post) => post.id === postId) || { bidPower: 0 }\n      ).bidPower;\n\n      const newBidPower = currentBidPower + calculateBidPower(deposit);\n\n      if (promotedPosts.length < 3 || newBidPower > promotedPosts[2].bidPower) {\n        promotedPosts.push({ id: postId, bidPower: newBidPower });\n        promotedPosts.sort((a, b) => b.bidPower - a.bidPower);\n        promotedPosts.splice(3);\n      }\n    });\n\n  return promotedPosts;\n};\n\nconst posts = Near.view(\"devgovgigs.near\", \"get_posts\") || [];\nconst promotedPosts = findPromotedPosts(posts, deposits);\n\nconsole.log(promotedPosts, \"hey\");\n//gets current timestamp and days to add, returns expire timestamp in milliseconds\nconst calculateExpireTimestamp = (days) => {\n  const date = new Date();\n  const timestamp = date.getTime();\n  const ONE_DAY_MILLISECONDS = 86400000;\n  const expireTimestamp = timestamp + days * ONE_DAY_MILLISECONDS;\n  return expireTimestamp;\n};\n\nconst calculatePower = () => {\n  const power = `${(state.amount / state.duration).toFixed(3)} / day`;\n  return power;\n};\n\nconst depositBid = () => {\n  Near.call(\n    contract,\n    \"deposit\",\n    {\n      post_id: parseInt(state.postId),\n      expire_timestamp: calculateExpireTimestamp(state.duration),\n    },\n    \"30000000000000\",\n    state.amount * 1e24\n  );\n};\nconst onChangePostId = (postId) => {\n  State.update({\n    postId,\n  });\n};\nconst onChangeAmount = (amount) => {\n  State.update({\n    amount,\n  });\n};\nconst onChangeDuration = (duration) => {\n  State.update({\n    duration,\n  });\n};\n\nreturn (\n  <>\n    <div className=\"container mt-5 \">\n      <div className=\"row justify-content-center \">\n        <div className=\"col-md-6 border rounded p-4 pt-3\">\n          <h1 className=\"text-center mb-3\">Promote Post</h1>\n          <span class=\"text-muted\">Current NEAR daily bids:</span>\n          <div className=\" d-flex justify-content-between mt-1\">\n            {promotedPosts.map((post, index) => (\n              <div key={index} class=\" mb-2\">\n                {index === 0 && (\n                  <span role=\"img\" aria-label=\"Gold Medal\">\n                    \ud83e\udd47\n                  </span>\n                )}\n                {index === 1 && (\n                  <span role=\"img\" aria-label=\"Silver Medal\">\n                    \ud83e\udd48\n                  </span>\n                )}\n                {index === 2 && (\n                  <span role=\"img\" aria-label=\"Bronze Medal\">\n                    \ud83e\udd49\n                  </span>\n                )}\n                {(post.bidPower / 1e24).toFixed(3)}\n              </div>\n            ))}\n          </div>\n          <h2 className=\" text-center text-primary mb-2\">{calculatePower()}</h2>\n          <div className=\"mb-3\">\n            <label htmlFor=\"postId\" className=\"form-label\">\n              Post ID\n            </label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"postId\"\n              value={state.postId}\n              onChange={(e) => onChangePostId(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"amount\" className=\"form-label\">\n              Total Bid (NEAR)\n            </label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"amount\"\n              value={state.amount}\n              onChange={(e) => onChangeAmount(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"duration\" className=\"form-label\">\n              Duration (Days)\n            </label>\n            <div className=\"d-flex align-items-center\">\n              <input\n                type=\"range\"\n                className=\"form-range\"\n                id=\"duration\"\n                min=\"1\"\n                max=\"365\"\n                value={state.duration}\n                onChange={(e) => onChangeDuration(e.target.value)}\n              />\n              <div className=\"ms-3\">{state.duration} days</div>\n            </div>\n          </div>\n          <button\n            disabled={context.loading}\n            onClick={depositBid}\n            className={`btn ${\n              context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n            } w-100`}\n          >\n            Promote Post {state.postId} with {state.amount} NEAR\n          </button>\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/markeljan.near/widget/PromotePost", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.devgovgigs": NaN, "metadata.tags.ethdenver2023": NaN, "metadata.tags.promote": NaN}