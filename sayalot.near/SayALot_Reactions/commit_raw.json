{"tx_hash": "8NDvzh9cGZBnCDpUHdULuQJRGZVo7D1MB5TE5969DzqB", "action_id_social": "vXYbRk8m9J5H8kLfNNFSn89Ka6EkdY3JnTfG2AM4nQT-0-widget", "block_id": 94726164, "block_timestamp": "2023-06-21T23:50:55.749Z", "signer_id": "sayalot.near", "widget_name": "SayALot_Reactions", "source_code": "// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\nconst initialEmoji = \"\ud83e\udd0d Like\";\nconst emojiArray = [\n  \"\u2764\ufe0f Positive\",\n  \"\ud83d\ude4f Thank you\",\n  \"\ud83d\udcaf Definitely\",\n  \"\ud83d\udc40 Thinking\",\n  \"\ud83d\udd25 Awesome\",\n  \"\ud83d\udc4d Like\",\n  \"\ud83d\ude4c Celebrate\",\n  \"\ud83d\udc4f Applause\",\n  \"\u26a1 Lightning\",\n  \"\u22c8 Bowtie\",\n];\nconst item = props.item;\nconst accountThatIsLoggedIn = context.accountId;\n\nif (!item) {\n  return \"\";\n}\n\nState.init({\n  emoji: undefined,\n  likesStatistics: [],\n  show: false,\n  loading: false,\n});\n\n// ========= UNFILTERED LIKES and SOCIAL.INDEX =========\nconst unfilteredLikes = Social.index(\"like\", item, {\n  order: \"desc\",\n});\n\n// ========= ARRAY LAST LIKE FOR EACH USER =========\n// arrayLastLikeForEachUser - array of objects {accountId, blockHeight, value: {type: \"\ud83d\ude01 LOL\"}}\nconst uniqueAccounts = {};\nconst arrayLastLikeForEachUser =\n  unfilteredLikes &&\n  unfilteredLikes.filter((obj) => {\n    if (!uniqueAccounts[obj.accountId]) {\n      uniqueAccounts[obj.accountId] = true;\n      return true;\n    }\n    return false;\n  });\n\n// ========= GET LIKES STATISTICS =========\nconst getLikeStats = (acc, likeObj) => {\n  if (likeObj.value.type === initialEmoji) {\n    return acc;\n  }\n  if (!acc.hasOwnProperty(likeObj.value.type)) {\n    acc[likeObj.value.type] = {};\n    acc[likeObj.value.type].quantity = 0;\n    acc[likeObj.value.type].emoji = likeObj.value.type.slice(0, 2);\n    acc[likeObj.value.type].accounts = [];\n  }\n  acc[likeObj.value.type].quantity += 1;\n  acc[likeObj.value.type].accounts = [\n    likeObj.accountId,\n    ...acc[likeObj.value.type].accounts,\n  ];\n\n  return acc;\n};\nconst countLikesStats = (arr) => Object.values(arr.reduce(getLikeStats, {}));\nlet likesStatistics =\n  arrayLastLikeForEachUser && countLikesStats(arrayLastLikeForEachUser);\nif (state.likesStatistics.length === 0 || state.likesStatistics === null) {\n  State.update({\n    likesStatistics,\n  });\n}\n//likesStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\n\n// ========= CHECK DOES USER VOTED =========\nconst doesUserVoted = () => {\n  const resObject = arrayLastLikeForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  return resObject ? true : false;\n};\n\n// ========= UPDATE EMOJI STATE IF USER VOTED SOMETIME BEFORE =========\nconst updateEmojiIfUserVoted = () => {\n  const resObject = arrayLastLikeForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  if (resObject) {\n    State.update({ emoji: resObject.value.type });\n  }\n};\nstate.emoji === undefined &&\n  arrayLastLikeForEachUser &&\n  updateEmojiIfUserVoted();\n\n// ========= UPDATE LIKE STATISTICS IF USER VOTED RIGHT NOW=========\nconst updateLikesStatisticsIfUserVoted = (newEmoji) => {\n  const resObject = arrayLastLikeForEachUser.find(\n    (item) => item.accountId === accountThatIsLoggedIn\n  );\n  if (!resObject) {\n    arrayLastLikeForEachUser = [\n      ...arrayLastLikeForEachUser,\n      {\n        accountId: accountThatIsLoggedIn,\n        blockHeight: item.blockHeight,\n        value: { type: newEmoji },\n      },\n    ];\n  } else {\n    arrayLastLikeForEachUser =\n      arrayLastLikeForEachUser &&\n      arrayLastLikeForEachUser.map((item) => {\n        if (item.accountId === accountThatIsLoggedIn) {\n          return { ...item, value: { type: newEmoji } };\n        }\n        return item;\n      });\n  }\n  likesStatistics =\n    arrayLastLikeForEachUser && countLikesStats(arrayLastLikeForEachUser);\n  State.update({\n    likesStatistics,\n  });\n};\n\n// ================= Mouse Handlers ===============\n\nconst handleOnMouseEnter = (e) => {\n  State.update({ show: true });\n};\n\nconst handleOnMouseLeave = (e) => {\n  State.update({ show: false });\n};\n\nconst clickHandler = (emojiMessage) => {\n  if (state.loading) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n\n  // decide to put unique emoji or white heart (unlike emoji)\n  const emojiToWrite =\n    emojiMessage === initialEmoji && state.emoji === initialEmoji\n      ? emojiArray[0]\n      : emojiMessage;\n\n  const data = {\n    index: {\n      like: JSON.stringify({\n        key: item,\n        value: {\n          type: emojiToWrite,\n        },\n      }),\n    },\n  };\n\n  Social.set(data, {\n    onCommit: () => {\n      updateLikesStatisticsIfUserVoted(emojiToWrite);\n      State.update({ emoji: emojiToWrite, loading: false, show: false });\n    },\n    onCancel: () => State.update({ loading: false, show: false }),\n  });\n};\n\n// =============== CSS Styles ===============\nconst Button = styled.button`\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: start;\n  width: 8em;\n  height: 2.5em;\n  padding: 6px 12px;\n  margin: 2px 0;\n  border: 0;\n  border-radius: .375rem;\n  :hover {\n    background: #EBEBEB; \n    outline: 1px solid #C6C7C8;\n  }\n`;\n\nconst SmallButton = styled.button`\nposition: relative;\n  border: 0;\n  background: transparent;\n  width: 35px;\n  height: 35px;\n`;\n\nconst SmallButtonSpan = styled.span`\n  font-size: 19px;\n  :hover{\n      position: absolute;\n      font-size: 35px;\n      bottom: -5px;\n      width: 35px;\n      height: 40px;\n      transform: translateX(-50%) translateY(-50%);\n  }\n  \n  @media (max-width: 599px) {\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n      :hover{\n      ::before { \n          position: absolute;\n          width: 100%;\n          height: 120%;\n          background-color: rgba(255, 255, 255, .4);\n          content: \"\";}\n  }\n      \n  }\n`;\n\n// =============== NEW CSS Styles ===============!!!!!!!!\nconst EmojiWrapper = styled.div`\ndisplay: inline-block;\nposition: relative;\noverflow: visible !important;\npadding-left: 8px;\n`;\n\nconst EmojiListWrapper = styled.div`\ndisplay: flex;\nflex-wrap: wrap;\npadding: 0.5rem;\n\nbackground: white;\nborder-radius: 1rem;\nbox-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\n@media (min-width: 600px) {\n    display: ${({ show }) => (show ? \"flex\" : \"none\")};\n    height: 3.2rem;\n    flex-wrap: nowrap;\n    position: absolute;\n    transform: translateY(-10%);\n    zIndex: 2;\n  }\n`;\n\n// =============== NEW JSX ===============!!!!!!!!\nconst Overlay = () => (\n  <EmojiListWrapper\n    onMouseEnter={handleOnMouseEnter}\n    onMouseLeave={handleOnMouseLeave}\n    show={state.show}\n  >\n    {emojiArray &&\n      emojiArray.map((item) => (\n        <SmallButton onClick={() => clickHandler(item)}>\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={\n              <Tooltip>\n                <div className=\"text-truncate text-start\">{item.slice(2)}</div>\n              </Tooltip>\n            }\n          >\n            <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\n          </OverlayTrigger>\n        </SmallButton>\n      ))}\n  </EmojiListWrapper>\n);\n\nreturn (\n  <EmojiWrapper>\n    <Button\n      onClick={() => clickHandler(initialEmoji)}\n      onMouseEnter={handleOnMouseEnter}\n      onMouseLeave={handleOnMouseLeave}\n    >\n      {state.emoji === undefined ? initialEmoji : state.emoji}\n    </Button>\n    <Overlay />\n  </EmojiWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sayalot.near/widget/SayALot_Reactions", "__row_index": 1}