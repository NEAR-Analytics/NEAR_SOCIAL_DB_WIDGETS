{"tx_hash": "APoX6RksAqQfLGCGiS4AH96Cca1tBkBxo7VEz4Xgrv6j", "action_id_social": "3YMdWZ6Ut6GVAkDYBYAULnu4jyeo8WxdUVmoJSH8Dp1X-0-widget", "block_id": 94675590, "block_timestamp": "2023-06-21T07:46:03.097Z", "signer_id": "hack.near", "widget_name": "event.editor", "source_code": "const initialMetadata = props.initialMetadata ?? {};\nconst onChange = props.onChange;\nconst options = props.options;\n\nState.init({\n  initialMetadata,\n  metadata: initialMetadata,\n  reportedMetadata: initialMetadata,\n  linktree: initialMetadata.linktree ?? {},\n  image: initialMetadata.image,\n  backgroundImage: initialMetadata.backgroundImage,\n  screenshots: initialMetadata.screenshots ?? {},\n});\n\nconst metadata = {\n  name: options.name ? state.metadata.name : undefined,\n  description: options.name ? state.metadata.description : undefined,\n  linktree:\n    options.linktree && Object.keys(state.linktree).length > 0\n      ? state.linktree\n      : undefined,\n  image:\n    options.image && state.image && Object.keys(state.image).length > 0\n      ? state.image\n      : undefined,\n  backgroundImage:\n    options.backgroundImage &&\n    state.backgroundImage &&\n    Object.keys(state.backgroundImage).length > 0\n      ? state.backgroundImage\n      : undefined,\n  tags: options.tags ? state.metadata.tags : undefined,\n  screenshots: options.screenshots ? state.metadata.screenshots : undefined,\n};\n\nif (\n  onChange &&\n  JSON.stringify(state.reportedMetadata) !== JSON.stringify(metadata)\n) {\n  State.update({\n    reportedMetadata: metadata,\n  });\n  onChange(metadata);\n}\n\nconst debounce = (func, wait) => {\n  const pause = wait || 350;\n  let timeout;\n\n  return (args) => {\n    const later = () => {\n      clearTimeout(timeout);\n      func(args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, pause);\n  };\n};\n\nconst onNameChange = debounce((e) => {\n  State.update({\n    metadata: {\n      ...state.metadata,\n      name: e.target.value,\n    },\n  });\n});\nconst onDescriptionChange = debounce((e) => {\n  State.update({\n    metadata: {\n      ...state.metadata,\n      description: e.target.value,\n    },\n  });\n});\nconst onLinkTreeChange = debounce((e) => {\n  State.update({\n    linktree: {\n      ...state.linktree,\n      [e.target.id]: e.target.value,\n    },\n  });\n});\n\nreturn (\n  <>\n    {options.name && (\n      <div className=\"mb-2\">\n        {options.name.label ?? \"Name\"}\n        <input\n          type=\"text\"\n          defaultValue={state.metadata.name}\n          onChange={onNameChange}\n        />\n      </div>\n    )}\n    {options.date && (\n      <div className=\"mb-2\">\n        {options.name.label ?? \"Date\"}\n        <input\n          type=\"date\"\n          defaultValue={state.metadata.date}\n          onChange={onDateChange}\n        />\n      </div>\n    )}\n    {options.time && (\n      <div className=\"mb-2\">\n        {options.name.label ?? \"Time\"}\n        <input\n          type=\"time\"\n          defaultValue={state.metadata.time}\n          onChange={onTimeChange}\n        />\n      </div>\n    )}\n    {options.image && (\n      <div className=\"mb-2\">\n        {options.image.label ?? \"Image\"}\n        <Widget\n          src=\"near/widget/ImageEditorTabs\"\n          props={{\n            image: state.image,\n            onChange: (image) => State.update({ image }),\n          }}\n        />\n      </div>\n    )}\n    {options.backgroundImage && (\n      <div className=\"mb-2\">\n        {options.backgroundImage.label ?? \"Background image\"}\n        <Widget\n          src=\"near/widget/ImageEditorTabs\"\n          props={{\n            image: state.backgroundImage,\n            onChange: (backgroundImage) => State.update({ backgroundImage }),\n            debounce,\n          }}\n        />\n      </div>\n    )}\n    {options.description && (\n      <div className=\"mb-2\">\n        {options.description.label ?? \"Description\"}\n        <span className=\"text-secondary\"> (supports markdown)</span>\n        <textarea\n          className=\"form-control\"\n          rows={5}\n          defaultValue={state.metadata.description}\n          onChange={onDescriptionChange}\n        />\n      </div>\n    )}\n    {options.tags && (\n      <div className=\"mb-2\">\n        {options.tags.label ?? \"Tags\"}\n        <Widget\n          src=\"mob.near/widget/TagsEditor\"\n          props={{\n            initialTagsObject: metadata.tags,\n            tagsPattern: options.tags.pattern,\n            placeholder:\n              options.tags.placeholder ??\n              \"rust, engineer, artist, humanguild, nft, learner, founder\",\n            setTagsObject: (tags) => {\n              state.metadata.tags = tags;\n              State.update();\n            },\n          }}\n        />\n      </div>\n    )}\n    {options.linktree &&\n      (options.linktree.links ?? []).map((link) => (\n        <div className=\"mb-2\">\n          {link.label}\n          <div className=\"input-group\">\n            <span className=\"input-group-text\">{link.prefix}</span>\n            <input\n              type=\"text\"\n              id={link.name}\n              defaultValue={state.linktree[link.name]}\n              onChange={onLinkTreeChange}\n            />\n          </div>\n        </div>\n      ))}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/event.editor", "__row_index": 1}