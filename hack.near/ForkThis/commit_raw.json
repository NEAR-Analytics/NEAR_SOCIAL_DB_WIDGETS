{"tx_hash": "FCNd3H98j2LcjHMDamz9W6CgcfAi8Ngt1qWu9f5jY9ve", "action_id_social": "9EqWV6qbJRuPZo12FAZKeLDNcgirhJ1FTeccK1jAGRzM-0-widget", "block_id": 89255964, "block_timestamp": "2023-04-10 11:27:06.059", "signer_id": "hack.near", "widget_name": "ForkThis", "source_code": "/*\n\nTUTORIAL\n\nBuild your own decentralized frontend!\n\nFirst, we have to get the accountId for the challenge.\n\nNotice how it checks props, and if that is null or undefined,\nit returns user's accountId from the page context.\n\nThis helps anyone build experiences on the page.\n\n*/\n\nconst accountId = props.accountId ?? context.accountId;\n\n/*\n\nWe're also using a tag property to filter widgets on the page.\n\nYou can change the default tag from \"guide\" to anything.\n\n*/\n\nconst tag = props.tag ?? \"guide\";\n\n/*\n\nDefining variables is fun and easy!\n\nThis pageUrl helps buttons and links work across gateways.\n\n*/\n\nconst pageUrl = \"/#/edit/hack.near/widget/ForkThis\";\n\n/*\n\nReview the following code section if you are interested in tag filtering.\n\n- initializes the keys variable to a string consisting of accountId (if it exists) or \"*\" and \"/widget/*\". This value is used later to fetch widget data.\n- checks if a tag value exists. If it does, the code fetches tagged widgets based on accountId and tag.\n- maps over the widget data to create an array of keys, consisting of the accountId, widgetName, and blockHeight of each widget.\n- fetches the data associated with the keys from the previous step. If the data is not found, the function returns \"Loading...\". If the data is found, the processData function is called to sort the widget data based on block height.\n- maps over the sorted widget data to create a list of widgets to render. Each widget is wrapped in an <a> tag with a URL corresponding to the widget's accountId and widgetName. The renderTag and renderItem functions are used to render each tag and widget.\n- checks if the data has changed since the last time it was fetched. If it has, the State.update function is called to update the state with the new data and processed widget items.\n\nNo need to make any changes here.\n\n*/\n\nlet keys = `${accountId ?? \"*\"}/widget/*`;\n\nif (tag) {\n  const taggedWidgets = Social.keys(\n    `${accountId ?? \"*\"}/widget/*/metadata/tags/${tag}`,\n    \"final\"\n  );\n\n  if (taggedWidgets === null) {\n    return \"Loading tags\";\n  }\n\n  keys = Object.entries(taggedWidgets)\n    .map((kv) => Object.keys(kv[1].widget).map((w) => `${kv[0]}/widget/${w}`))\n    .flat();\n\n  if (!keys.length) {\n    return `No widgets found with tag #${tag}`;\n  }\n}\n\nconst data = Social.keys(keys, \"final\", {\n  return_type: \"BlockHeight\",\n});\n\nif (data === null) {\n  return \"Loading...\";\n}\n\nconst processData = (data) => {\n  const accounts = Object.entries(data);\n\n  const allItems = accounts\n    .map((account) => {\n      const accountId = account[0];\n      return Object.entries(account[1].widget).map((kv) => ({\n        accountId,\n        widgetName: kv[0],\n        blockHeight: kv[1],\n      }));\n    })\n    .flat();\n\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n  return allItems;\n};\n\nconst renderTag = (tag, tagBadge) => (\n  <a href={makeLink(accountId, tag)}>{tagBadge}</a>\n);\n\nconst renderItem = (a) => {\n  return (\n    <a\n      href={`#/${a.accountId}/widget/${a.widgetName}`}\n      className=\"text-decoration-none\"\n      key={JSON.stringify(a)}\n    >\n      <Widget\n        src=\"mob.near/widget/WidgetImage\"\n        props={{\n          tooltip: true,\n          accountId: a.accountId,\n          widgetName: a.widgetName,\n        }}\n      />\n    </a>\n  );\n};\n\nif (JSON.stringify(data) !== JSON.stringify(state.data || {})) {\n  State.update({\n    data,\n    allItems: processData(data),\n  });\n}\n\n/*\n\nHere are a few styled components for you.\n\nThese allow using CSS in your JavaScript!\n\nLearn more: https://styled-components.com\n\n*/\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding-bottom: 48px;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nconst H1 = styled.h1`\n  font-weight: 600;\n  font-size: 32px;\n  line-height: 39px;\n  color: #11181c;\n  margin: 0;\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  line-height: 1.5rem;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")} !important;\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"\")};\n  white-space: ${(p) => (p.ellipsis ? \"nowrap\" : \"\")};\n  overflow-wrap: anywhere;\n\n  b {\n    font-weight: 600;\n    color: #11181c;\n  }\n\n  &[href] {\n    display: inline-flex;\n    gap: 0.25rem;\n\n    &:hover,\n    &:focus {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst Button = styled.button`\n  display: block;\n  width: 100%;\n  padding: 8px;\n  height: 32px;\n  background: #fbfcfd;\n  border: 1px solid #d7dbdf;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n  color: #11181c !important;\n  margin: 0;\n\n  &:hover,\n  &:focus {\n    background: #ecedee;\n    text-decoration: none;\n    outline: none;\n  }\n\n  span {\n    color: #687076 !important;\n  }\n`;\n\nconst Items = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n`;\n\nconst Item = styled.div``;\n\n/*\n\nLast, but certainly not least, is the display.\n\nFeel free to make any edits you like!\n\nAdjust your featured section by updating the widget paths.\n\n*/\n\nreturn (\n  <Wrapper>\n    <Header>\n      <H1>All Guides</H1>\n      <Text>\n        These particular widgets are tagged with: <b>#guide</b>\n      </Text>\n      <div className=\"d-flex flex-wrap gap-1 my-3\">\n        {state.allItems\n          .slice(0, props.limit ? parseInt(props.limit) : 999)\n          .map(renderItem)}\n      </div>\n      <Button href={pageUrl}>\n        Getting Started: Fork this Page Demo Widget\n      </Button>\n    </Header>\n\n    <Text>\n      <h3>Featured Tutorials</h3>\n      <p>Below are walkthroughs of the page building experience.</p>\n    </Text>\n\n    <Items>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{ src: \"hack.near/widget/StartHere\" }}\n        />\n      </Item>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{ src: \"hack.near/widget/Customization\" }}\n        />\n      </Item>\n      <Item>\n        <Widget\n          src=\"adminalpha.near/widget/ComponentCard\"\n          props={{ src: \"hack.near/widget/SocialPosts\" }}\n        />\n      </Item>\n    </Items>\n  </Wrapper>\n);\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/ForkThis", "metadata.description": NaN, "metadata.image.ipfs_cid": NaN, "metadata.name": NaN, "metadata.tags.builders": NaN, "metadata.tags.demo": NaN, "metadata.tags.example": NaN, "metadata.tags.guide": NaN, "metadata.tags.page": NaN}