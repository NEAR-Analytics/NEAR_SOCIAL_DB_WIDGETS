{"tx_hash": "2aDcfocGbp5nxfhBE6dx7nANCgWwRfmC3YDr2Au2fUTU", "action_id_social": "2uVzWMSp8cH2ETz1RfdDwfFWE3Hz8mFZWLM2E4kDCeka-0-widget", "block_id": 93280854, "block_timestamp": "2023-06-02T11:32:14.967Z", "signer_id": "hack.near", "widget_name": "dev.task.propose", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst onClose = props.onClose;\n\nif (!accountId) {\n  return \"Please connect your NEAR wallet :)\";\n}\n\nState.init({\n  description: state.description,\n  amount: state.amount,\n  times: state.times,\n  max_deadline: state.max_deadline,\n});\n\nconst convertAmount = (amount, decimals) => {\n  const [whole, fractional] = amount.toString().split(\".\");\n  const wholePart = new BN(whole).mul(new BN(\"10\").pow(new BN(decimals)));\n  if (fractional === undefined) {\n    return wholePart.toString();\n  }\n  const fractionalPart = new BN(fractional).mul(\n    new BN(\"10\").pow(new BN(decimals - fractional.length))\n  );\n  return wholePart.add(fractionalPart).toString();\n};\n\nconst handleProposal = () => {\n  const bounty = {\n    description: state.description,\n    token: props.token ?? \"\",\n    amount: convertAmount(state.amount.toString(), 24) ?? 0,\n    times: JSON.parse(state.times),\n    max_deadline: JSON.stringify(state.max_deadline * 3600000000000),\n  };\n  const gas = 200000000000000;\n  const deposit = 100000000000000000000000;\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"new task proposal\",\n          kind: {\n            AddBounty: {\n              bounty,\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\n\nconst onChangeDescription = (description) => {\n  State.update({\n    description,\n  });\n};\n\nconst onChangeToken = (token) => {\n  State.update({\n    token,\n  });\n};\n\nconst onChangeAmount = (amount) => {\n  State.update({\n    amount,\n  });\n};\n\nconst onChangeTimes = (times) => {\n  State.update({\n    times,\n  });\n};\n\nconst onChangeDeadline = (max_deadline) => {\n  State.update({\n    max_deadline,\n  });\n};\n\nconst Wrapper = styled.div`\n  margin: 16px auto;\n  max-width: 900px;\n  background-color: #fff;\n  border-radius: 16px;\n  padding: 24px;\n  box-shadow: rgba(0, 0, 0, 0.18) 0px 2px 4px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  max-height: 100%;\n  overflow-y: auto;\n\n  @media (max-width: 600px) {\n    border-radius: 0;\n  }\n\n  p {\n    line-height: 1.4;\n    font-weight: 400;\n    font-size: 15px;\n    color: #868682;\n    margin: 0;\n  }\n\n  h3 {\n    font-weight: 600;\n    font-size: 24px;\n    color: #1b1b18;\n  }\n\n  h5 {\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 1.2;\n    color: #6c757d;\n  }\n`;\n\nconst CloseButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: rgb(27, 27, 24);\n  border-radius: 100px;\n  height: 40px;\n  width: 40px;\n  border: none;\n  margin: 0;\n  font-size: 26px;\n  background-color: rgb(246, 246, 245);\n\n  &:hover {\n    background-color: rgb(243, 243, 242);\n    color: rgb(0, 0, 0);\n  }\n`;\n\nconst defaultTaskDescription =\n  \"# Task\\n\\n## Description\\n\\nWhat is the main goal? What exactly needs to be done? Any specific requirements or skills needed?\\n\\n## Acceptance Criteria\\n\\nWhat should be delivered upon task completion? *Please be specific and clear about expectations.*\\n\\n## Steps to Claim\\n\\nWhat is the process of claiming the opportunity. Provide necessary guides about what needs to be done to complete the task.\\n\\n## Additional Information\\n\\nIf applicable, include helpful resources.\";\n\nreturn (\n  <Wrapper>\n    <div className=\"d-flex justify-content-between align-items-center\">\n      <h3>Propose New Task</h3>\n      {onClose && (\n        <CloseButton onClick={onClose}>\n          <i className=\"bi bi-x\"></i>\n        </CloseButton>\n      )}\n    </div>\n    <div className=\"d-flex gap-3 flex-wrap\">\n      <div>\n        <h5>Sponsor</h5>\n        <Widget\n          src=\"mob.near/widget/Profile.ShortInlineBlock\"\n          props={{ accountId: daoId, tooltip: true }}\n        />\n      </div>\n      <div className=\"ms-sm-5\">\n        <h5>Proposer</h5>\n        <Widget\n          src=\"mob.near/widget/Profile.ShortInlineBlock\"\n          props={{ accountId: accountId, tooltip: true }}\n        />\n      </div>\n    </div>\n\n    <div>\n      <h5>Description</h5>\n      <Widget\n        src=\"sking.near/widget/Common.Inputs.Markdown\"\n        props={{\n          onChange: (value) => onChangeDescription(value),\n          height: \"270px\",\n          initialText: defaultTaskDescription,\n        }}\n      />\n    </div>\n    <div className=\"d-flex gap-2\">\n      <div className=\"col-sm\">\n        <h5>\n          <b>Reward (NEAR)</b>\n        </h5>\n        <input\n          type=\"number\"\n          onChange={(e) => onChangeAmount(e.target.value)}\n          min=\"0\"\n          placeholder=\"0\"\n        />\n      </div>\n      <div className=\"col-sm\">\n        <h5>Claims</h5>\n        <input\n          type=\"number\"\n          onChange={(e) => onChangeTimes(e.target.value)}\n          min=\"1\"\n          placeholder=\"0\"\n        />\n      </div>\n      <div className=\"col-sm\">\n        <h5>Hours</h5>\n        <input\n          type=\"number\"\n          onChange={(e) => onChangeDeadline(e.target.value)}\n          min=\"0\"\n          placeholder=\"0\"\n        />\n      </div>\n      {state.error && <div className=\"text-danger\">{state.error}</div>}\n      <div className=\"ms-auto\">\n        <Widget\n          src=\"sking.near/widget/Common.Button\"\n          props={{\n            children: \"Submit\",\n            onClick: handleProposal,\n            className: \"mt-3\",\n            variant: \"success\",\n          }}\n        />\n        {onClose && (\n          <Widget\n            src=\"sking.near/widget/Common.Button\"\n            props={{\n              children: \"Close\",\n              onClick: onClose,\n              className: \"mt-3\",\n            }}\n          />\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/dev.task.propose", "__row_index": 6}