{"tx_hash": "FcaPYzFMNGNYBuwswyEMEMGAL2gfeZnoh7777iryy6mn", "action_id_social": "DWran62Mf3Z3qxTxtAuXp9JzSDTy3WLF1hkzzv2oGTSd-0-widget", "block_id": 90490241, "block_timestamp": "2023-04-26 17:49:55.917", "signer_id": "jeffgold.near", "widget_name": "LocalStateWidget", "source_code": "const WrapperWidget = ({ children, id, storageType }) => {\r\n  // This function handles the state change for the children widgets\r\n  const handleStateChange = (key, value) => {\r\n    // Use the unique identifier to create a unique storage key\r\n    const storageKey = `${id}_${key}`;\r\n\r\n    if (storageType === \"local\") {\r\n      // Update the local storage with the new state\r\n      localStorage.setItem(storageKey, JSON.stringify(value));\r\n    } else if (storageType === \"sync\") {\r\n      // Update the sync storage with the new state\r\n      // Replace this with the appropriate API call for your sync storage\r\n      syncStorage.setItem(storageKey, JSON.stringify(value));\r\n    }\r\n  };\r\n\r\n  // This function initializes the state of the children widgets\r\n  const initState = (key, defaultValue) => {\r\n    // Use the unique identifier to create a unique storage key\r\n    const storageKey = `${id}_${key}`;\r\n\r\n    let storedValue;\r\n    if (storageType === \"local\") {\r\n      storedValue = localStorage.getItem(storageKey);\r\n    } else if (storageType === \"sync\") {\r\n      // Retrieve the value from sync storage\r\n      // Replace this with the appropriate API call for your sync storage\r\n      storedValue = syncStorage.getItem(storageKey);\r\n    }\r\n\r\n    if (storedValue) {\r\n      return JSON.parse(storedValue);\r\n    }\r\n    return defaultValue;\r\n  };\r\n\r\n  // Render the children widgets and pass the state management functions as props\r\n  return React.Children.map(children, (child) =>\r\n    React.cloneElement(child, { handleStateChange, initState })\r\n  );\r\n};\r\n", "metadata": NaN, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jeffgold.near/widget/LocalStateWidget", "metadata.description": "The State Persistence Wrapper Widget is a higher-order component that enables state persistence for the child widgets it wraps. It ensures that user input and widget settings are saved either in local storage or sync storage, so that users can continue from where they left off if they navigate away from the page and return later.\n\nUsage: To use the State Persistence Wrapper Widget, wrap it around the child widget(s) you want to provide state persistence for. Pass the id prop as a unique identifier for each instance of the widget, and the storageType prop to determine the storage method ('local' for local storage, and 'sync' for sync storage). The Wrapper Widget will handle saving and retrieving the state for the child widget(s) automatically.\n\nExample:\n\n```\nconst MyWidget = () => {\n  // Your widget implementation here\n};\n\nconst WrappedMyWidget = () => (\n  <WrapperWidget id=\"unique_widget_id\" storageType=\"local\">\n    <MyWidget />\n  </WrapperWidget>\n);\n```\nIn the child widget, use the handleStateChange and initState functions passed as props to manage the state:\n\n```\nconst MyWidget = ({ handleStateChange, initState }) => {\n  const [inputValue, setInputValue] = useState(initState('inputValue', ''));\n\n  const handleChange = (event) => {\n    const newValue = event.target.value;\n    setInputValue(newValue);\n    handleStateChange('inputValue', newValue);\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={inputValue}\n      onChange={handleChange}\n    />\n  );\n};\n```\nNote: Replace the syncStorage object in the WrapperWidget implementation with the appropriate API calls for your sync storage implementation.", "metadata.image.ipfs_cid": "bafkreigfxuikekiae4yexwtu6ippabqdtpycu6ey72cuytlbpvpex3jky4", "metadata.tags.component": "", "metadata.tags.widget": ""}