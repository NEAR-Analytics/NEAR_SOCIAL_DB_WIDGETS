{"tx_hash": "DaA5jqtLZ8xDgkemRi3RpF1Y7o3agejaq1QjmtR1Wvre", "action_id_social": "6135SgwZzx3r1mhcnAw7KuQJHu4GzxbWG1DtAzsiRgdx-1-widget", "block_id": 83776930, "block_timestamp": "2023-01-25 17:33:08.744", "signer_id": "testwiki.near", "widget_name": "WikiOnSocialDB", "source_code": "const accountId = props.accountId ?? context.accountId;\nif (!accountId) {\n  return \"No account ID\";\n}\n\nconst profile = props.profile ?? Social.getr(`${accountId}/profile`);\n\nif (profile === null) {\n  return \"Loadig\";\n}\n\nconst test = Social.keys(\"*/wikiTest/articles\", \"final\");\n// console.log(\"test \", test);\n\nconst test4 = Near.view(\"social.near\", \"get\", {\n  keys: [\"vanjule.near/**\", \"vanyog.near/**\"],\n});\n// console.log(\"test4\", test4);\n\nconst testArray = test && Object.keys(test);\nconst resultArticles = [];\n\n// TODO make better checks for  data\n!resultArticles.length &&\n  testArray &&\n  testArray.forEach((item, index, arr) => {\n    // console.log(\"item\", item);\n    const data = Near.view(\"social.near\", \"get\", {\n      keys: [`${item}/wikiTest/articles/**`],\n    });\n    // console.log(\"data\", data[item].wikiTest.articles);\n    const articles = data && Object.keys(data[item].wikiTest.articles);\n    const array =\n      data &&\n      articles.map((key) => {\n        return data[item].wikiTest.articles[key];\n      });\n    data && resultArticles.push(...array);\n  });\nresultArticles.length &&\n  resultArticles.sort((a, b) => {\n    return Number(b.timeLastEdit) - Number(a.timeLastEdit);\n  });\n\nconst filteredArticles = [];\nresultArticles.length &&\n  resultArticles.forEach((article, index) => {\n    if (\n      !filteredArticles.some(({ articleId }) => articleId === article.articleId)\n    ) {\n      filteredArticles.push(article);\n    }\n  });\n\n// console.log(\"resultArticles  \", resultArticles);\n// console.log(\"filteredArticles\", filteredArticles);\n\nconst initialBody = `# Markdown heading level 1\n\nThis is a markdown paragraph. So, here are a few examples of markdown syntax and what it looks like.\n\n1. markdown\n2. ordered\n3. list`;\n\nconst errTextNoBody = \"ERROR: no article Body\",\n  errTextNoId = \"ERROR: no article Id\",\n  errTextDublicatedId = \"ERROR: there is article with such name\";\n\nconst initialCreateArticleState = {\n  articleId: \"\",\n  articleBody: initialBody,\n  errorId: \"\",\n  errorBody: \"\",\n};\n\nState.init({\n  currentTab: \"loadarticles\",\n  createArticle: initialCreateArticleState,\n});\n\nconst getArticleData = () => {\n  const args = {\n    articleId: state.createArticle.articleId,\n    author: accountId,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    timeCreate: Date.now(),\n    body: state.createArticle.articleBody,\n    version: 0,\n    navigation_id: null,\n  };\n  return args;\n};\n\n// === SAVE HANDLER ===\nconst saveHandler = (e) => {\n  State.update({\n    ...state,\n    createArticle: { ...state.createArticle, errorId: \"\", errorBody: \"\" },\n  });\n  if (state.createArticle.articleId && state.createArticle.articleBody) {\n    // TODO check it automaticle\n    const isArticleIdDublicated = false;\n\n    if (!isArticleIdDublicated) {\n      // console.log(\"SAVE ARTICLE\");\n      const newArticle = getArticleData();\n\n      Social.set({\n        wikiTest: { articles: { [newArticle.articleId]: { ...newArticle } } },\n      });\n    } else {\n      State.update({\n        ...state,\n        createArticle: { ...state.createArticle, errorId: errTextDublicatedId },\n      });\n    }\n  } else {\n    if (!state.createArticle.articleId) {\n      State.update({\n        ...state,\n        createArticle: { ...state.createArticle, errorId: errTextNoId },\n      });\n    }\n    if (!state.createArticle.articleBody) {\n      State.update({\n        ...state,\n        createArticle: { ...state.createArticle, errorBody: errTextNoBody },\n      });\n    }\n  }\n};\n\n// === CANCEL HANDLER ===\nconst cancelHandler = () => {\n  State.update({\n    ...state,\n    createArticle: {\n      articleId: \"\",\n      articleBody: \"\",\n      errorId: null,\n      errorBody: null,\n    },\n  });\n};\n\nconst description = profile.description;\n\nconst pills = [\n  { id: \"articles\", title: \"Articles\" },\n  { id: \"authors\", title: \"Authors\" },\n  { id: \"create\", title: \"Create Article\" },\n];\n\nconst handleArticle = (e, article) => {\n  State.update({ ...state, article: article, authorId: undefined });\n};\n\nconst handleAuthor = (e, authorId) => {\n  // console.log(\"click author\");\n  State.update({ ...state, article: undefined, authorId });\n};\n\nconst getDate = (timestamp) => {\n  // console.log(\"timestamp\", timestamp);\n  const date = new Date(Number(timestamp));\n  return date.toDateString();\n};\n\nconst saveArticle = (args) => {\n  // console.log(\"SAVE ARTICLE\", state);\n  const newArticleData = {\n    ...state.article,\n    body: state.note,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    version: Number(state.article.version) + 1,\n  };\n  // console.log(\"newArticleData\", newArticleData);\n\n  Social.set({\n    wikiTest: {\n      articles: { [state.article.articleId]: { ...newArticleData } },\n    },\n  });\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testwiki.near/widget/WikiOnSocialDB"}